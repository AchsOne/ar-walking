{"snapshots":{"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/MainActivity.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/MainActivity.kt","baseContent":"package com.example.arwalking\n\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.core.content.ContextCompat\nimport androidx.activity.result.contract.ActivityResultContracts\nimport android.provider.MediaStore\nimport android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport com.example.arwalking.screens.CameraNavigation\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.example.arwalking.screens.HomeScreen\nimport com.example.arwalking.screens.LocalNavController\nimport com.example.arwalking.ui.theme.ARWalkingTheme\nimport java.net.URLDecoder\nimport java.nio.charset.StandardCharsets\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.lifecycle.ViewModelProvider\n// OpenCV imports entfernt für Stub-Implementation\n\nclass MainActivity : ComponentActivity() {\n\n    private lateinit var routeViewModel: RouteViewModel\n\n\n    private val cameraPermissionLauncher: ActivityResultLauncher<String> =\n        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->\n            if (granted) {\n                openCamera()\n            }\n        }\n\n    private fun openCamera() {\n        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n        if (intent.resolveActivity(packageManager) != null) {\n            startActivity(intent)\n        }\n    }\n\n    private fun checkCameraAndLaunch() {\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) ==\n            PackageManager.PERMISSION_GRANTED\n        ) {\n            openCamera()\n        } else {\n            cameraPermissionLauncher.launch(Manifest.permission.CAMERA)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // OpenCV initialisieren (Stub für lokale Entwicklung)\n        try {\n            // Simuliere OpenCV Initialisierung\n            Log.i(\"MainActivity\", \"OpenCV Stub loaded successfully\")\n        } catch (e: Exception) {\n            Log.e(\"MainActivity\", \"OpenCV Stub initialization failed: ${e.message}\")\n            Toast.makeText(this, \"OpenCV initialization failed!\", Toast.LENGTH_LONG).show()\n            return\n        }\n\n\n\n\n        // ViewModel erstellen\n        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]\n\n        enableEdgeToEdge()\n        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt\n        setContent {\n            ARWalkingTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    ARWalkingApp()\n                }\n            }\n        }\n        val navigationRoute = routeViewModel.loadNavigationRoute(this)\n        if (navigationRoute != null) {\n            // Objekt ist bereit für weitere Verwendung\n            routeViewModel.logNavigationRoute(navigationRoute)\n            // weitere verwendung von navigationRoute....\n\n\n        } else {\n            Log.e(\"MainActivity\", \"Fehler beim Laden der Route\")\n        }\n    }\n}\n\n@Composable\nfun ARWalkingApp() {\n    val navController = rememberNavController()\n\n    CompositionLocalProvider(LocalNavController provides navController) {\n        NavHost(\n            navController = navController,\n            startDestination = \"home\"\n        ) {\n            composable(\"home\") {\n                HomeScreen(navController = navController)\n            }\n            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->\n                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\"\n                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\"\n                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())\n                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())\n                CameraNavigation(\n                    destination = destination,\n                    startLocation = startLocation\n                )\n            }\n            composable(\"open_cv_camera_activity\") {\n                OpenCvCameraActivity();\n            }\n\n            // Hier können später weitere Screens hinzugefügt werden:\n            // composable(\"ar_view\") { ARScreen(navController = navController) }\n            // composable(\"settings\") { SettingsScreen(navController = navController) }\n        }\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nprivate fun ARWalkingAppPreview() {\n    ARWalkingTheme {\n        ARWalkingApp()\n    }\n}","baseTimestamp":1754049441966,"deltas":[{"timestamp":1754232021482,"changes":[{"type":"DELETE","lineNumber":84,"oldContent":"        // Sofort Feature Mapping und Upload-Komponenten initialisieren"},{"type":"DELETE","lineNumber":85,"oldContent":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping und Upload-Komponenten beim App-Start...\")"},{"type":"INSERT","lineNumber":84,"content":"        // Sofort Feature Mapping initialisieren"},{"type":"INSERT","lineNumber":85,"content":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping beim App-Start...\")"},{"type":"DELETE","lineNumber":87,"oldContent":"        routeViewModel.startUploadComponents(this)"}]},{"timestamp":1754250695407,"changes":[{"type":"MODIFY","lineNumber":26,"content":"","oldContent":"import com.example.arwalking.screens.LandmarkManagementScreen"}]},{"timestamp":1754250700368,"changes":[{"type":"MODIFY","lineNumber":104,"content":"            ","oldContent":"            // weitere verwendung von navigationRoute...."},{"type":"MODIFY","lineNumber":122,"content":"","oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":131,"content":"        ) {"},{"type":"DELETE","lineNumber":133,"oldContent":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":143,"content":"                )"},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"open_cv_camera_activity\") {"},{"type":"DELETE","lineNumber":145,"oldContent":"            composable(\"training_mode\") {"},{"type":"DELETE","lineNumber":146,"oldContent":"                LandmarkManagementScreen(navController = navController)"},{"type":"DELETE","lineNumber":147,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"            composable(\"image_management\") {"},{"type":"DELETE","lineNumber":149,"oldContent":"                com.example.arwalking.screens.ImageManagementScreen(navController = navController)"},{"type":"DELETE","lineNumber":150,"oldContent":"            }"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"INSERT","lineNumber":151,"content":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"INSERT","lineNumber":155,"content":"@Preview(showBackground = true)"}]},{"timestamp":1754313796183,"changes":[{"type":"DELETE","lineNumber":68,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"DELETE","lineNumber":70,"oldContent":"            // Simuliere OpenCV Initialisierung"},{"type":"DELETE","lineNumber":71,"oldContent":"            Log.i(\"MainActivity\", \"OpenCV Stub loaded successfully\")"},{"type":"DELETE","lineNumber":72,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":73,"oldContent":"            Log.e(\"MainActivity\", \"OpenCV Stub initialization failed: ${e.message}\")"},{"type":"DELETE","lineNumber":74,"oldContent":"            Toast.makeText(this, \"OpenCV initialization failed!\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":75,"oldContent":"            return"},{"type":"DELETE","lineNumber":76,"oldContent":"        }"},{"type":"INSERT","lineNumber":69,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":"            // ViewModel erstellen"},{"type":"INSERT","lineNumber":72,"content":"            routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":74,"content":"            enableEdgeToEdge()"},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"INSERT","lineNumber":76,"content":"            // UI zuerst setzen"},{"type":"INSERT","lineNumber":77,"content":"            setContent {"},{"type":"INSERT","lineNumber":78,"content":"                ARWalkingTheme {"},{"type":"INSERT","lineNumber":79,"content":"                    Surface("},{"type":"INSERT","lineNumber":80,"content":"                        modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":81,"content":"                        color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":82,"content":"                    ) {"},{"type":"INSERT","lineNumber":83,"content":"                        ARWalkingApp()"},{"type":"INSERT","lineNumber":84,"content":"                    }"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"            // Initialisierung asynchron durchführen"},{"type":"INSERT","lineNumber":89,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":81,"oldContent":"        // ViewModel erstellen"},{"type":"DELETE","lineNumber":82,"oldContent":"        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":91,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":92,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":93,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":94,"content":"        }"},{"type":"INSERT","lineNumber":95,"content":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"        // Sofort Feature Mapping initialisieren"},{"type":"DELETE","lineNumber":85,"oldContent":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping beim App-Start...\")"},{"type":"DELETE","lineNumber":86,"oldContent":"        routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":97,"content":"    private fun initializeAppAsync() {"},{"type":"INSERT","lineNumber":98,"content":"        try {"},{"type":"INSERT","lineNumber":99,"content":"            Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"INSERT","lineNumber":100,"content":"            "},{"type":"INSERT","lineNumber":101,"content":"            // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":102,"content":"            routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":88,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":89,"oldContent":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"DELETE","lineNumber":90,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":91,"oldContent":"            ARWalkingTheme {"},{"type":"DELETE","lineNumber":92,"oldContent":"                Surface("},{"type":"DELETE","lineNumber":93,"oldContent":"                    modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":94,"oldContent":"                    color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":95,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":96,"oldContent":"                    ARWalkingApp()"},{"type":"INSERT","lineNumber":104,"content":"            // Route laden (asynchron)"},{"type":"INSERT","lineNumber":105,"content":"            val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"INSERT","lineNumber":106,"content":"            if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":107,"content":"                routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":108,"content":"                routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":109,"content":"                "},{"type":"INSERT","lineNumber":110,"content":"                // System-Validierung nur im Debug-Modus"},{"type":"INSERT","lineNumber":111,"content":"                if (BuildConfig.DEBUG) {"},{"type":"INSERT","lineNumber":112,"content":"                    try {"},{"type":"INSERT","lineNumber":113,"content":"                        val systemValidator = SystemValidator(this)"},{"type":"INSERT","lineNumber":114,"content":"                        systemValidator.validateSystem(routeViewModel)"},{"type":"INSERT","lineNumber":115,"content":"                        systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"INSERT","lineNumber":116,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":117,"content":"                        Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":118,"content":"                    }"},{"type":"INSERT","lineNumber":120,"content":"            } else {"},{"type":"INSERT","lineNumber":121,"content":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":100,"oldContent":"        val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":101,"oldContent":"        if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":102,"oldContent":"            // Objekt ist bereit für weitere Verwendung"},{"type":"DELETE","lineNumber":103,"oldContent":"            routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":105,"oldContent":"            // Feature Mapping ist bereits initialisiert, aktiviere es sofort"},{"type":"DELETE","lineNumber":106,"oldContent":"            routeViewModel.enableStorageSystemImmediately(this)"},{"type":"DELETE","lineNumber":107,"oldContent":"            "},{"type":"DELETE","lineNumber":108,"oldContent":"            // System-Validierung durchführen (nur im Debug-Modus)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":111,"oldContent":"                systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                // Simuliere Feature-Matching für Testzwecke"},{"type":"DELETE","lineNumber":114,"oldContent":"                systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":115,"oldContent":"            }"},{"type":"DELETE","lineNumber":116,"oldContent":"            "},{"type":"DELETE","lineNumber":117,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":118,"oldContent":"            Log.e(\"MainActivity\", \"Fehler beim Laden der Route\")"},{"type":"INSERT","lineNumber":124,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":125,"content":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":127,"oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":128,"oldContent":"        NavHost("},{"type":"DELETE","lineNumber":129,"oldContent":"            navController = navController,"},{"type":"DELETE","lineNumber":130,"oldContent":"            startDestination = \"home\""},{"type":"DELETE","lineNumber":131,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":132,"oldContent":"            composable(\"home\") {"},{"type":"DELETE","lineNumber":133,"oldContent":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":134,"content":"    try {"},{"type":"INSERT","lineNumber":135,"content":"        CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":136,"content":"            NavHost("},{"type":"INSERT","lineNumber":137,"content":"                navController = navController,"},{"type":"INSERT","lineNumber":138,"content":"                startDestination = \"home\""},{"type":"INSERT","lineNumber":139,"content":"            ) {"},{"type":"INSERT","lineNumber":140,"content":"                composable(\"home\") {"},{"type":"INSERT","lineNumber":141,"content":"                    try {"},{"type":"INSERT","lineNumber":142,"content":"                        HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":143,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":144,"content":"                        Log.e(\"ARWalkingApp\", \"Error in HomeScreen: ${e.message}\", e)"},{"type":"INSERT","lineNumber":145,"content":"                        // Fallback UI"},{"type":"INSERT","lineNumber":146,"content":"                        Box("},{"type":"INSERT","lineNumber":147,"content":"                            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":148,"content":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":149,"content":"                        ) {"},{"type":"INSERT","lineNumber":150,"content":"                            Text("},{"type":"INSERT","lineNumber":151,"content":"                                text = \"ArWalking\\nLoading...\","},{"type":"INSERT","lineNumber":152,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":153,"content":"                                style = MaterialTheme.typography.headlineMedium"},{"type":"INSERT","lineNumber":154,"content":"                            )"},{"type":"INSERT","lineNumber":155,"content":"                        }"},{"type":"INSERT","lineNumber":156,"content":"                    }"},{"type":"INSERT","lineNumber":157,"content":"                }"},{"type":"INSERT","lineNumber":158,"content":"                composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":159,"content":"                    try {"},{"type":"INSERT","lineNumber":160,"content":"                        val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":161,"content":"                        val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":162,"content":"                        val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":163,"content":"                        val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":164,"content":"                        CameraNavigation("},{"type":"INSERT","lineNumber":165,"content":"                            destination = destination,"},{"type":"INSERT","lineNumber":166,"content":"                            startLocation = startLocation"},{"type":"INSERT","lineNumber":167,"content":"                        )"},{"type":"INSERT","lineNumber":168,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":169,"content":"                        Log.e(\"ARWalkingApp\", \"Error in CameraNavigation: ${e.message}\", e)"},{"type":"INSERT","lineNumber":170,"content":"                        // Fallback UI"},{"type":"INSERT","lineNumber":171,"content":"                        Box("},{"type":"INSERT","lineNumber":172,"content":"                            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":173,"content":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":174,"content":"                        ) {"},{"type":"INSERT","lineNumber":175,"content":"                            Text("},{"type":"INSERT","lineNumber":176,"content":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":177,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":178,"content":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"INSERT","lineNumber":179,"content":"                            )"},{"type":"INSERT","lineNumber":180,"content":"                        }"},{"type":"INSERT","lineNumber":181,"content":"                    }"},{"type":"INSERT","lineNumber":182,"content":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":136,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":137,"oldContent":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":138,"oldContent":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":139,"oldContent":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":140,"oldContent":"                CameraNavigation("},{"type":"DELETE","lineNumber":141,"oldContent":"                    destination = destination,"},{"type":"DELETE","lineNumber":142,"oldContent":"                    startLocation = startLocation"},{"type":"DELETE","lineNumber":143,"oldContent":"                )"},{"type":"DELETE","lineNumber":144,"oldContent":"            }"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"DELETE","lineNumber":150,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"DELETE","lineNumber":151,"oldContent":"@Preview(showBackground = true)"},{"type":"DELETE","lineNumber":152,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":153,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"INSERT","lineNumber":185,"content":"    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":186,"content":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"INSERT","lineNumber":187,"content":"        // Minimal fallback UI"},{"type":"INSERT","lineNumber":188,"content":"        Box("},{"type":"INSERT","lineNumber":189,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":190,"content":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":191,"content":"        ) {"},{"type":"INSERT","lineNumber":192,"content":"            Text("},{"type":"INSERT","lineNumber":193,"content":"                text = \"ArWalking\\nStarting...\","},{"type":"INSERT","lineNumber":194,"content":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"INSERT","lineNumber":195,"content":"            )"},{"type":"INSERT","lineNumber":198,"content":"}"}]},{"timestamp":1754313804477,"changes":[{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":68,"oldContent":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":75,"content":""},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":98,"content":""},{"type":"DELETE","lineNumber":99,"oldContent":"                }"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":107,"oldContent":"            "},{"type":"MODIFY","lineNumber":121,"content":"                }","oldContent":"        }"},{"type":"MODIFY","lineNumber":124,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":125,"content":"            "},{"type":"INSERT","lineNumber":126,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":127,"content":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"INSERT","lineNumber":128,"content":"        }"},{"type":"INSERT","lineNumber":129,"content":"    }"},{"type":"DELETE","lineNumber":129,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":131,"oldContent":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":135,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":"}"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":161,"oldContent":"}"},{"type":"DELETE","lineNumber":163,"oldContent":"            )"},{"type":"DELETE","lineNumber":165,"oldContent":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"DELETE","lineNumber":167,"oldContent":"                text = \"ArWalking\\nStarting...\","},{"type":"DELETE","lineNumber":169,"oldContent":"            Text("},{"type":"DELETE","lineNumber":171,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":173,"oldContent":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":175,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":177,"oldContent":"        Box("},{"type":"DELETE","lineNumber":179,"oldContent":"        // Minimal fallback UI"},{"type":"DELETE","lineNumber":181,"oldContent":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"DELETE","lineNumber":183,"oldContent":"    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":185,"oldContent":"                }"},{"type":"DELETE","lineNumber":187,"oldContent":"                    }"},{"type":"DELETE","lineNumber":189,"oldContent":"                        }"},{"type":"DELETE","lineNumber":191,"oldContent":"                            )"},{"type":"DELETE","lineNumber":193,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":195,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":197,"oldContent":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":178,"content":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":179,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":180,"content":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"INSERT","lineNumber":181,"content":"                            )"},{"type":"INSERT","lineNumber":182,"content":"                        }"},{"type":"INSERT","lineNumber":183,"content":"                    }"},{"type":"INSERT","lineNumber":184,"content":"                }"},{"type":"INSERT","lineNumber":185,"content":"            }"},{"type":"INSERT","lineNumber":186,"content":"        }"},{"type":"INSERT","lineNumber":187,"content":"    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":188,"content":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"INSERT","lineNumber":189,"content":"        // Minimal fallback UI"},{"type":"INSERT","lineNumber":190,"content":"        Box("},{"type":"INSERT","lineNumber":191,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":192,"content":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":193,"content":"        ) {"},{"type":"INSERT","lineNumber":194,"content":"            Text("},{"type":"INSERT","lineNumber":195,"content":"                text = \"ArWalking\\nStarting...\","},{"type":"INSERT","lineNumber":196,"content":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"INSERT","lineNumber":197,"content":"            )"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"INSERT","lineNumber":199,"content":"    }"},{"type":"INSERT","lineNumber":200,"content":"}"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"@Preview(showBackground = true)"},{"type":"INSERT","lineNumber":203,"content":"@Composable"},{"type":"INSERT","lineNumber":204,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":205,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":206,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":207,"content":"    }"},{"type":"INSERT","lineNumber":208,"content":"}"}]},{"timestamp":1754313833862,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import com.example.arwalking.screens.CameraNavigation","oldContent":"import com.example.arwalking.screens.CameraNavigation"},{"type":"DELETE","lineNumber":71,"oldContent":"            // ViewModel erstellen"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"            // ViewModel erstellen"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"MODIFY","lineNumber":92,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":105,"content":"","oldContent":""},{"type":"INSERT","lineNumber":120,"content":"                    }"},{"type":"DELETE","lineNumber":121,"oldContent":"        }"},{"type":"INSERT","lineNumber":123,"content":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":125,"oldContent":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":127,"oldContent":"}"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":130,"content":"}"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"@Composable"},{"type":"DELETE","lineNumber":136,"oldContent":"    try {"},{"type":"DELETE","lineNumber":137,"oldContent":"        CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":138,"oldContent":"            NavHost("},{"type":"DELETE","lineNumber":139,"oldContent":"                navController = navController,"},{"type":"DELETE","lineNumber":140,"oldContent":"                startDestination = \"home\""},{"type":"DELETE","lineNumber":141,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":142,"oldContent":"                composable(\"home\") {"},{"type":"DELETE","lineNumber":143,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":144,"oldContent":"                        HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":145,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":146,"oldContent":"                        Log.e(\"ARWalkingApp\", \"Error in HomeScreen: ${e.message}\", e)"},{"type":"DELETE","lineNumber":147,"oldContent":"                        // Fallback UI"},{"type":"DELETE","lineNumber":148,"oldContent":"                        Box("},{"type":"DELETE","lineNumber":149,"oldContent":"                            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":150,"oldContent":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":151,"oldContent":"                        ) {"},{"type":"DELETE","lineNumber":152,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":153,"oldContent":"                                text = \"ArWalking\\nLoading...\","},{"type":"DELETE","lineNumber":154,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":155,"oldContent":"                                style = MaterialTheme.typography.headlineMedium"},{"type":"DELETE","lineNumber":156,"oldContent":"                            )"},{"type":"DELETE","lineNumber":157,"oldContent":"                        }"},{"type":"DELETE","lineNumber":158,"oldContent":"                    }"},{"type":"DELETE","lineNumber":159,"oldContent":"                }"},{"type":"DELETE","lineNumber":160,"oldContent":"                composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":161,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":162,"oldContent":"                        val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":163,"oldContent":"                        val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":164,"oldContent":"                        val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":165,"oldContent":"                        val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":166,"oldContent":"                        CameraNavigation("},{"type":"DELETE","lineNumber":167,"oldContent":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"DELETE","lineNumber":168,"oldContent":"                            destination = destination,"},{"type":"DELETE","lineNumber":169,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":170,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":171,"oldContent":"                            startLocation = startLocation"},{"type":"DELETE","lineNumber":172,"oldContent":"                            )"},{"type":"DELETE","lineNumber":173,"oldContent":"                        }"},{"type":"DELETE","lineNumber":174,"oldContent":"                        )"},{"type":"DELETE","lineNumber":175,"oldContent":"                    }"},{"type":"DELETE","lineNumber":176,"oldContent":"                }"},{"type":"DELETE","lineNumber":177,"oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":136,"content":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":137,"content":"        NavHost("},{"type":"INSERT","lineNumber":138,"content":"            navController = navController,"},{"type":"INSERT","lineNumber":139,"content":"            startDestination = \"home\""},{"type":"INSERT","lineNumber":140,"content":"        ) {"},{"type":"INSERT","lineNumber":141,"content":"            composable(\"home\") {"},{"type":"INSERT","lineNumber":142,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":144,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":145,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":146,"content":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":147,"content":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":148,"content":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":149,"content":"                CameraNavigation("},{"type":"INSERT","lineNumber":150,"content":"                    destination = destination,"},{"type":"INSERT","lineNumber":151,"content":"                    startLocation = startLocation"},{"type":"INSERT","lineNumber":152,"content":"                )"},{"type":"INSERT","lineNumber":153,"content":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"                        Log.e(\"ARWalkingApp\", \"Error in CameraNavigation: ${e.message}\", e)"},{"type":"DELETE","lineNumber":181,"oldContent":"    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":182,"oldContent":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"DELETE","lineNumber":183,"oldContent":"                        // Fallback UI"},{"type":"DELETE","lineNumber":184,"oldContent":"        // Minimal fallback UI"},{"type":"DELETE","lineNumber":185,"oldContent":"        Box("},{"type":"DELETE","lineNumber":186,"oldContent":"                        Box("},{"type":"DELETE","lineNumber":187,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":188,"oldContent":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":189,"oldContent":"                            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":190,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":191,"oldContent":"            Text("},{"type":"DELETE","lineNumber":192,"oldContent":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":193,"oldContent":"                text = \"ArWalking\\nStarting...\","},{"type":"DELETE","lineNumber":194,"oldContent":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"DELETE","lineNumber":195,"oldContent":"                        ) {"},{"type":"DELETE","lineNumber":196,"oldContent":"            )"},{"type":"DELETE","lineNumber":197,"oldContent":"        }"},{"type":"DELETE","lineNumber":198,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":201,"oldContent":"}"},{"type":"DELETE","lineNumber":202,"oldContent":"    }"},{"type":"DELETE","lineNumber":204,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":206,"oldContent":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":161,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":162,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"INSERT","lineNumber":164,"content":"}"}]},{"timestamp":1754313847320,"changes":[{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":17,"oldContent":"import com.example.arwalking.screens.CameraNavigation"},{"type":"INSERT","lineNumber":27,"content":"import com.example.arwalking.screens.SimpleHomeScreen"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":92,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"INSERT","lineNumber":105,"content":"            routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"}"},{"type":"INSERT","lineNumber":130,"content":"    }"},{"type":"INSERT","lineNumber":131,"content":"}"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"INSERT","lineNumber":144,"content":"            }"},{"type":"INSERT","lineNumber":155,"content":"        }"},{"type":"INSERT","lineNumber":156,"content":"    }"},{"type":"INSERT","lineNumber":157,"content":"}"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"INSERT","lineNumber":159,"content":"@Preview(showBackground = true)"},{"type":"INSERT","lineNumber":160,"content":"@Composable"},{"type":"INSERT","lineNumber":161,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":157,"oldContent":"            }"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"DELETE","lineNumber":160,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":161,"oldContent":""}]},{"timestamp":1754313851782,"changes":[{"type":"MODIFY","lineNumber":93,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":106,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":132,"content":"","oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":143,"content":"                SimpleHomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":145,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":155,"oldContent":"    ARWalkingTheme {"},{"type":"DELETE","lineNumber":156,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"DELETE","lineNumber":161,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"@Preview(showBackground = true)"},{"type":"DELETE","lineNumber":167,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":168,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":162,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":163,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":164,"content":"    }"},{"type":"INSERT","lineNumber":165,"content":"}"}]},{"timestamp":1754313907922,"changes":[{"type":"INSERT","lineNumber":92,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":93,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"        try {"},{"type":"DELETE","lineNumber":102,"oldContent":"            Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":103,"oldContent":"            "},{"type":"DELETE","lineNumber":104,"oldContent":"            // Feature Mapping initialisieren (asynchron)"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"            // Route laden (asynchron)"},{"type":"DELETE","lineNumber":108,"oldContent":"            val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":111,"oldContent":"                routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":101,"content":"        // Führe Initialisierung in einem separaten Thread aus"},{"type":"INSERT","lineNumber":102,"content":"        Thread {"},{"type":"INSERT","lineNumber":103,"content":"            try {"},{"type":"INSERT","lineNumber":104,"content":"                Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":113,"oldContent":"                // System-Validierung nur im Debug-Modus"},{"type":"DELETE","lineNumber":114,"oldContent":"                if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":115,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":116,"oldContent":"                        val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":117,"oldContent":"                        systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":118,"oldContent":"                        systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":119,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":120,"oldContent":"                        Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":106,"content":"                // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":107,"content":"                routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"                // Route laden (asynchron)"},{"type":"INSERT","lineNumber":110,"content":"                val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"INSERT","lineNumber":111,"content":"                if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":112,"content":"                    routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":113,"content":"                    routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":114,"content":"                    "},{"type":"INSERT","lineNumber":115,"content":"                    // System-Validierung nur im Debug-Modus"},{"type":"INSERT","lineNumber":116,"content":"                    if (BuildConfig.DEBUG) {"},{"type":"INSERT","lineNumber":117,"content":"                        try {"},{"type":"INSERT","lineNumber":118,"content":"                            val systemValidator = SystemValidator(this)"},{"type":"INSERT","lineNumber":119,"content":"                            systemValidator.validateSystem(routeViewModel)"},{"type":"INSERT","lineNumber":120,"content":"                            systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"INSERT","lineNumber":121,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":122,"content":"                            Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":123,"content":"                        }"},{"type":"INSERT","lineNumber":125,"content":"                } else {"},{"type":"INSERT","lineNumber":126,"content":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":123,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":124,"oldContent":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":128,"content":"                "},{"type":"INSERT","lineNumber":129,"content":"                Log.i(\"MainActivity\", \"Async initialization completed successfully\")"},{"type":"INSERT","lineNumber":130,"content":"                "},{"type":"INSERT","lineNumber":131,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":132,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":126,"oldContent":"            "},{"type":"DELETE","lineNumber":127,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":128,"oldContent":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":129,"oldContent":"        }"},{"type":"INSERT","lineNumber":134,"content":"        }.start()"},{"type":"INSERT","lineNumber":136,"content":"}"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":150,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":158,"oldContent":"    ARWalkingTheme {"},{"type":"DELETE","lineNumber":160,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":162,"oldContent":"    }"},{"type":"DELETE","lineNumber":164,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":167,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":169,"oldContent":"                        }"},{"type":"DELETE","lineNumber":171,"oldContent":"                            )"}]},{"timestamp":1754313942558,"changes":[{"type":"INSERT","lineNumber":30,"content":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"DELETE","lineNumber":35,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":37,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":70,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"MODIFY","lineNumber":71,"content":"        try {","oldContent":"            // Simuliere OpenCV Initialisierung"},{"type":"MODIFY","lineNumber":101,"content":"        // Führe nur minimale Initialisierung durch, um Crashes zu vermeiden","oldContent":"        // Führe Initialisierung in einem separaten Thread aus"},{"type":"DELETE","lineNumber":104,"oldContent":"                Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":105,"oldContent":"                // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":104,"content":"                Log.i(\"MainActivity\", \"Starting minimal async initialization...\")"},{"type":"INSERT","lineNumber":105,"content":"                "},{"type":"INSERT","lineNumber":106,"content":"                // Nur grundlegende Initialisierung"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"MODIFY","lineNumber":108,"content":"                ","oldContent":"                // Route laden (asynchron)"},{"type":"INSERT","lineNumber":109,"content":"                // Route laden ohne komplexe Validierung"},{"type":"DELETE","lineNumber":111,"oldContent":"                    routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                    routeViewModel.enableStorageSystemImmediately(this)"},{"type":"DELETE","lineNumber":114,"oldContent":"                    "},{"type":"DELETE","lineNumber":115,"oldContent":"                    // System-Validierung nur im Debug-Modus"},{"type":"DELETE","lineNumber":116,"oldContent":"                    if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":117,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":118,"oldContent":"                            val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":119,"oldContent":"                            systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":120,"oldContent":"                            systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    }"},{"type":"DELETE","lineNumber":123,"oldContent":"                            Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                }"},{"type":"DELETE","lineNumber":125,"oldContent":"                        }"},{"type":"INSERT","lineNumber":112,"content":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":127,"oldContent":"            }"},{"type":"INSERT","lineNumber":115,"content":"                }"},{"type":"DELETE","lineNumber":130,"oldContent":"                Log.i(\"MainActivity\", \"Async initialization completed successfully\")"},{"type":"INSERT","lineNumber":117,"content":"                Log.i(\"MainActivity\", \"Minimal initialization completed\")"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":121,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":122,"content":"            }"},{"type":"INSERT","lineNumber":124,"content":"    }"},{"type":"INSERT","lineNumber":125,"content":"}"},{"type":"INSERT","lineNumber":126,"content":""},{"type":"INSERT","lineNumber":127,"content":"@Composable"},{"type":"DELETE","lineNumber":140,"oldContent":"}"},{"type":"INSERT","lineNumber":139,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":154,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":159,"content":"}"}]},{"timestamp":1754314349840,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":"import com.example.arwalking.screens.SimpleHomeScreen"},{"type":"INSERT","lineNumber":112,"content":"                } else {"},{"type":"INSERT","lineNumber":113,"content":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":117,"content":"                "},{"type":"INSERT","lineNumber":118,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":119,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"INSERT","lineNumber":122,"content":"        }.start()"},{"type":"DELETE","lineNumber":120,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":123,"oldContent":"                "},{"type":"DELETE","lineNumber":124,"oldContent":"                "},{"type":"DELETE","lineNumber":125,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":126,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":127,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":129,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":138,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":148,"oldContent":"}"},{"type":"INSERT","lineNumber":156,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":157,"content":"    }"},{"type":"INSERT","lineNumber":158,"content":"}"}]},{"timestamp":1754314354775,"changes":[{"type":"MODIFY","lineNumber":35,"content":"import com.example.arwalking.BuildConfig","oldContent":""},{"type":"INSERT","lineNumber":37,"content":""},{"type":"DELETE","lineNumber":69,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"MODIFY","lineNumber":112,"content":"                } else {","oldContent":"                } else {"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":118,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":119,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":119,"oldContent":"                "},{"type":"INSERT","lineNumber":122,"content":"        }.start()"},{"type":"DELETE","lineNumber":121,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":126,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":136,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"MODIFY","lineNumber":136,"content":"                HomeScreen(navController = navController)","oldContent":"                SimpleHomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":138,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"MODIFY","lineNumber":155,"content":"    ARWalkingTheme {","oldContent":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":156,"content":"        ARWalkingApp()"}]},{"timestamp":1754315896736,"changes":[{"type":"DELETE","lineNumber":73,"oldContent":"            // ViewModel erstellen"},{"type":"DELETE","lineNumber":74,"oldContent":"            routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"            // UI zuerst setzen"},{"type":"INSERT","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":90,"oldContent":"            // Initialisierung asynchron durchführen"},{"type":"INSERT","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":109,"content":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":112,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":118,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":120,"oldContent":"            }"},{"type":"DELETE","lineNumber":122,"oldContent":"    }"},{"type":"INSERT","lineNumber":118,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":119,"content":"            }"},{"type":"INSERT","lineNumber":121,"content":"    }"},{"type":"DELETE","lineNumber":127,"oldContent":"                )"},{"type":"INSERT","lineNumber":125,"content":"fun ARWalkingApp() {"},{"type":"MODIFY","lineNumber":136,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->","oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":154,"oldContent":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":152,"content":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754315910963,"changes":[{"type":"DELETE","lineNumber":73,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":84,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":90,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":103,"oldContent":"                // Nur grundlegende Initialisierung"},{"type":"MODIFY","lineNumber":103,"content":"                // ViewModel sicher erstellen","oldContent":"                routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":104,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":105,"content":"                    try {"},{"type":"INSERT","lineNumber":106,"content":"                        routeViewModel = ViewModelProvider(this@MainActivity)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":107,"content":"                        Log.i(\"MainActivity\", \"RouteViewModel created successfully\")"},{"type":"INSERT","lineNumber":108,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":109,"content":"                        Log.e(\"MainActivity\", \"Error creating RouteViewModel: ${e.message}\", e)"},{"type":"INSERT","lineNumber":110,"content":"                    }"},{"type":"INSERT","lineNumber":111,"content":"                }"},{"type":"DELETE","lineNumber":106,"oldContent":"                // Route laden ohne komplexe Validierung"},{"type":"DELETE","lineNumber":107,"oldContent":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":108,"oldContent":"                val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":109,"oldContent":"                if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":111,"oldContent":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":113,"content":"                // Kurz warten, dann weitere Initialisierung"},{"type":"INSERT","lineNumber":114,"content":"                Thread.sleep(500)"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":116,"content":"                // Nur wenn ViewModel erfolgreich erstellt wurde"},{"type":"INSERT","lineNumber":117,"content":"                if (::routeViewModel.isInitialized) {"},{"type":"INSERT","lineNumber":118,"content":"                    try {"},{"type":"INSERT","lineNumber":119,"content":"                        routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":120,"content":"                        Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"INSERT","lineNumber":121,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":122,"content":"                        Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":123,"content":"                    }"},{"type":"INSERT","lineNumber":124,"content":"                    "},{"type":"INSERT","lineNumber":125,"content":"                    try {"},{"type":"INSERT","lineNumber":126,"content":"                        val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":127,"content":"                        if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":128,"content":"                            Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"INSERT","lineNumber":129,"content":"                        } else {"},{"type":"INSERT","lineNumber":130,"content":"                            Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":131,"content":"                        }"},{"type":"INSERT","lineNumber":132,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":133,"content":"                        Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":134,"content":"                    }"},{"type":"DELETE","lineNumber":116,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":117,"oldContent":"            }"},{"type":"DELETE","lineNumber":119,"oldContent":"    }"},{"type":"INSERT","lineNumber":141,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":142,"content":"            }"},{"type":"INSERT","lineNumber":144,"content":"    }"},{"type":"DELETE","lineNumber":123,"oldContent":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":148,"content":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":134,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":135,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":157,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":159,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":150,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":175,"content":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754321611460,"changes":[{"type":"MODIFY","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung","oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"MODIFY","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher","oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"MODIFY","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen","oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"MODIFY","lineNumber":104,"content":"                runOnUiThread {","oldContent":"                routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":106,"oldContent":"                "},{"type":"INSERT","lineNumber":108,"content":"                        "},{"type":"INSERT","lineNumber":109,"content":"                        // Initialisierung direkt nach ViewModel-Erstellung"},{"type":"INSERT","lineNumber":110,"content":"                        try {"},{"type":"INSERT","lineNumber":111,"content":"                            routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":112,"content":"                            Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"INSERT","lineNumber":113,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":114,"content":"                            Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":115,"content":"                        }"},{"type":"INSERT","lineNumber":116,"content":"                        "},{"type":"INSERT","lineNumber":117,"content":"                        try {"},{"type":"INSERT","lineNumber":118,"content":"                            val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":119,"content":"                            if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":120,"content":"                                Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"INSERT","lineNumber":121,"content":"                            } else {"},{"type":"INSERT","lineNumber":122,"content":"                                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":123,"content":"                            }"},{"type":"INSERT","lineNumber":124,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":125,"content":"                            Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":126,"content":"                        }"},{"type":"INSERT","lineNumber":127,"content":"                        "},{"type":"DELETE","lineNumber":113,"oldContent":"                }"},{"type":"DELETE","lineNumber":114,"oldContent":"                // Kurz warten, dann weitere Initialisierung"},{"type":"DELETE","lineNumber":116,"oldContent":"                Thread.sleep(500)"},{"type":"DELETE","lineNumber":119,"oldContent":"                "},{"type":"DELETE","lineNumber":120,"oldContent":"                // Nur wenn ViewModel erfolgreich erstellt wurde"},{"type":"DELETE","lineNumber":121,"oldContent":"                if (::routeViewModel.isInitialized) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":124,"oldContent":"                        routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":125,"oldContent":"                        Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":137,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":138,"content":"            }"},{"type":"DELETE","lineNumber":129,"oldContent":"                        Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":140,"content":"    }"},{"type":"DELETE","lineNumber":131,"oldContent":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    "},{"type":"DELETE","lineNumber":134,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":136,"oldContent":"                        val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":137,"oldContent":"                    startLocation = startLocation"},{"type":"DELETE","lineNumber":138,"oldContent":"                        if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":144,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":145,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":140,"oldContent":"                            Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":142,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":144,"oldContent":"                            Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":146,"oldContent":"                        }"},{"type":"DELETE","lineNumber":148,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":150,"oldContent":"                        Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":152,"oldContent":"                    }"},{"type":"INSERT","lineNumber":153,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":155,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":158,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":160,"oldContent":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"DELETE","lineNumber":168,"oldContent":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":171,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":177,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":178,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":179,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"}]},{"timestamp":1754325118914,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.activity.viewModels"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material3.Text"},{"type":"MODIFY","lineNumber":33,"content":"import androidx.lifecycle.lifecycleScope","oldContent":"import androidx.lifecycle.ViewModelProvider"},{"type":"MODIFY","lineNumber":39,"content":"    private val routeViewModel: RouteViewModel by viewModels()","oldContent":"    private lateinit var routeViewModel: RouteViewModel"},{"type":"INSERT","lineNumber":73,"content":"            "},{"type":"DELETE","lineNumber":75,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"DELETE","lineNumber":87,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":88,"oldContent":"            initializeAppAsync()"},{"type":"INSERT","lineNumber":87,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":88,"content":"                try {"},{"type":"INSERT","lineNumber":89,"content":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":90,"content":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":91,"content":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"INSERT","lineNumber":92,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":93,"content":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"INSERT","lineNumber":94,"content":"                    Toast.makeText("},{"type":"INSERT","lineNumber":95,"content":"                        this@MainActivity,"},{"type":"INSERT","lineNumber":96,"content":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"INSERT","lineNumber":97,"content":"                        Toast.LENGTH_LONG"},{"type":"INSERT","lineNumber":98,"content":"                    ).show()"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":"            }"},{"type":"INSERT","lineNumber":104,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":93,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":97,"oldContent":"    private fun initializeAppAsync() {"},{"type":"DELETE","lineNumber":98,"oldContent":"        // Führe nur minimale Initialisierung durch, um Crashes zu vermeiden"},{"type":"DELETE","lineNumber":99,"oldContent":"        Thread {"},{"type":"DELETE","lineNumber":100,"oldContent":"            try {"},{"type":"DELETE","lineNumber":101,"oldContent":"                Log.i(\"MainActivity\", \"Starting minimal async initialization...\")"},{"type":"DELETE","lineNumber":102,"oldContent":"                "},{"type":"DELETE","lineNumber":103,"oldContent":"                // ViewModel sicher erstellen"},{"type":"DELETE","lineNumber":104,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":105,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":106,"oldContent":"                        routeViewModel = ViewModelProvider(this@MainActivity)[RouteViewModel::class.java]"},{"type":"DELETE","lineNumber":107,"oldContent":"                        "},{"type":"DELETE","lineNumber":108,"oldContent":"                        Log.i(\"MainActivity\", \"RouteViewModel created successfully\")"},{"type":"DELETE","lineNumber":109,"oldContent":"                        // Initialisierung direkt nach ViewModel-Erstellung"},{"type":"DELETE","lineNumber":110,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":111,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":112,"oldContent":"                        Log.e(\"MainActivity\", \"Error creating RouteViewModel: ${e.message}\", e)"},{"type":"DELETE","lineNumber":113,"oldContent":"                            routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":114,"oldContent":"                    }"},{"type":"DELETE","lineNumber":115,"oldContent":"                            Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"DELETE","lineNumber":116,"oldContent":"                }"},{"type":"DELETE","lineNumber":117,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":118,"oldContent":"                            Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":119,"oldContent":"                        }"},{"type":"DELETE","lineNumber":120,"oldContent":"                "},{"type":"DELETE","lineNumber":121,"oldContent":"                        "},{"type":"DELETE","lineNumber":122,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.i(\"MainActivity\", \"Minimal initialization completed\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                            val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":125,"oldContent":"                "},{"type":"DELETE","lineNumber":126,"oldContent":"                            if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":127,"oldContent":"                                Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":129,"oldContent":"                                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":130,"oldContent":"                            }"},{"type":"DELETE","lineNumber":131,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":132,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":133,"oldContent":"                            Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":134,"oldContent":"                        }"},{"type":"DELETE","lineNumber":135,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":136,"oldContent":"                        "},{"type":"DELETE","lineNumber":137,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":141,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":142,"oldContent":"            }"},{"type":"INSERT","lineNumber":112,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":113,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":144,"oldContent":"    }"},{"type":"DELETE","lineNumber":147,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":148,"oldContent":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":155,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":124,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":169,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":139,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":175,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":143,"content":"}"},{"type":"INSERT","lineNumber":144,"content":""}]},{"timestamp":1754325169405,"changes":[{"type":"INSERT","lineNumber":32,"content":"import android.widget.Toast"},{"type":"DELETE","lineNumber":33,"oldContent":"import androidx.lifecycle.ViewModelProvider"},{"type":"INSERT","lineNumber":35,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":40,"content":""},{"type":"DELETE","lineNumber":39,"oldContent":"    private lateinit var routeViewModel: RouteViewModel"},{"type":"DELETE","lineNumber":72,"oldContent":"            "},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"INSERT","lineNumber":87,"content":""},{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"DELETE","lineNumber":92,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":94,"oldContent":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":96,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":101,"oldContent":"    }"},{"type":"MODIFY","lineNumber":103,"content":"","oldContent":""},{"type":"INSERT","lineNumber":104,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":105,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":109,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":110,"oldContent":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":111,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":107,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":108,"content":"        }"},{"type":"INSERT","lineNumber":109,"content":"    }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"DELETE","lineNumber":113,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":116,"oldContent":"}"},{"type":"DELETE","lineNumber":117,"oldContent":"                )"},{"type":"INSERT","lineNumber":114,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":115,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":126,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":141,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":145,"content":"}"},{"type":"INSERT","lineNumber":146,"content":""}]},{"timestamp":1754325258704,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.activity.viewModels"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":32,"oldContent":"import android.widget.Toast"},{"type":"DELETE","lineNumber":33,"oldContent":"import androidx.lifecycle.lifecycleScope"},{"type":"DELETE","lineNumber":34,"oldContent":"import com.example.arwalking.BuildConfig"},{"type":"DELETE","lineNumber":35,"oldContent":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":36,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"        try {"},{"type":"DELETE","lineNumber":72,"oldContent":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"            enableEdgeToEdge()"},{"type":"DELETE","lineNumber":75,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":76,"oldContent":"            "},{"type":"DELETE","lineNumber":77,"oldContent":"            setContent {"},{"type":"DELETE","lineNumber":78,"oldContent":"                ARWalkingTheme {"},{"type":"DELETE","lineNumber":79,"oldContent":"                    Surface("},{"type":"DELETE","lineNumber":80,"oldContent":"                        modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":81,"oldContent":"                        color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":82,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":83,"oldContent":"                        ARWalkingApp()"},{"type":"DELETE","lineNumber":84,"oldContent":"                    }"},{"type":"INSERT","lineNumber":58,"content":"        enableEdgeToEdge()"},{"type":"INSERT","lineNumber":59,"content":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"INSERT","lineNumber":60,"content":"        setContent {"},{"type":"INSERT","lineNumber":61,"content":"            ARWalkingTheme {"},{"type":"INSERT","lineNumber":62,"content":"                Surface("},{"type":"INSERT","lineNumber":63,"content":"                    modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":64,"content":"                    color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":65,"content":"                ) {"},{"type":"INSERT","lineNumber":66,"content":"                    ARWalkingApp()"},{"type":"DELETE","lineNumber":87,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":90,"oldContent":"                try {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":92,"oldContent":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":93,"oldContent":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"DELETE","lineNumber":94,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":95,"oldContent":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"DELETE","lineNumber":96,"oldContent":"                    Toast.makeText("},{"type":"DELETE","lineNumber":97,"oldContent":"                        this@MainActivity,"},{"type":"DELETE","lineNumber":98,"oldContent":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":101,"oldContent":"                        Toast.LENGTH_LONG"},{"type":"DELETE","lineNumber":102,"oldContent":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":103,"oldContent":"                    ).show()"},{"type":"DELETE","lineNumber":104,"oldContent":"                }"},{"type":"DELETE","lineNumber":105,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":106,"oldContent":"            }"},{"type":"DELETE","lineNumber":108,"oldContent":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":114,"oldContent":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":74,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":75,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":124,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":86,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"INSERT","lineNumber":97,"content":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"INSERT","lineNumber":98,"content":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":140,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":105,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":146,"oldContent":""}]},{"timestamp":1754325423282,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.activity.viewModels"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":31,"content":"import android.util.Log"},{"type":"INSERT","lineNumber":32,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":33,"content":"import androidx.lifecycle.lifecycleScope"},{"type":"INSERT","lineNumber":34,"content":"import com.example.arwalking.BuildConfig"},{"type":"INSERT","lineNumber":35,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":39,"content":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":""},{"type":"DELETE","lineNumber":46,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":48,"oldContent":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"DELETE","lineNumber":50,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":52,"oldContent":"            ARWalkingTheme {"},{"type":"DELETE","lineNumber":54,"oldContent":"                Surface("},{"type":"DELETE","lineNumber":56,"oldContent":"                    modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":58,"oldContent":"                    color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":60,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":62,"oldContent":"                    ARWalkingApp()"},{"type":"DELETE","lineNumber":67,"oldContent":"fun ARWalkingApp() {"},{"type":"MODIFY","lineNumber":68,"content":"","oldContent":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":69,"content":"        try {"},{"type":"INSERT","lineNumber":70,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"            enableEdgeToEdge()"},{"type":"INSERT","lineNumber":73,"content":"            "},{"type":"INSERT","lineNumber":74,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":75,"content":"            setContent {"},{"type":"INSERT","lineNumber":76,"content":"                ARWalkingTheme {"},{"type":"INSERT","lineNumber":77,"content":"                    Surface("},{"type":"INSERT","lineNumber":78,"content":"                        modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":79,"content":"                        color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":80,"content":"                    ) {"},{"type":"INSERT","lineNumber":81,"content":"                        ARWalkingApp()"},{"type":"INSERT","lineNumber":82,"content":"                    }"},{"type":"DELETE","lineNumber":70,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":73,"oldContent":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"DELETE","lineNumber":74,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"DELETE","lineNumber":75,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":76,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":86,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":87,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":88,"content":"                try {"},{"type":"INSERT","lineNumber":89,"content":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":90,"content":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":91,"content":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"INSERT","lineNumber":92,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":93,"content":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"INSERT","lineNumber":94,"content":"                    Toast.makeText("},{"type":"INSERT","lineNumber":95,"content":"                        this@MainActivity,"},{"type":"INSERT","lineNumber":96,"content":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"INSERT","lineNumber":97,"content":"                        Toast.LENGTH_LONG"},{"type":"INSERT","lineNumber":98,"content":"                    ).show()"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":"            }"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":103,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":104,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":105,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":112,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":113,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":124,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":139,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":144,"content":""}]},{"timestamp":1754325467157,"changes":[{"type":"MODIFY","lineNumber":28,"content":"import com.example.arwalking.ui.theme.ARWalkingTheme","oldContent":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"INSERT","lineNumber":31,"content":"import android.util.Log"},{"type":"INSERT","lineNumber":32,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":33,"content":"import androidx.lifecycle.lifecycleScope"},{"type":"INSERT","lineNumber":34,"content":"import com.example.arwalking.BuildConfig"},{"type":"INSERT","lineNumber":35,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":37,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":35,"oldContent":"import android.widget.Toast"},{"type":"INSERT","lineNumber":41,"content":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":"import androidx.lifecycle.lifecycleScope"},{"type":"DELETE","lineNumber":39,"oldContent":"import com.example.arwalking.BuildConfig"},{"type":"DELETE","lineNumber":41,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":46,"oldContent":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"                }"},{"type":"DELETE","lineNumber":73,"oldContent":"            }"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":83,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":"}"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":89,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":90,"content":"                try {"},{"type":"INSERT","lineNumber":91,"content":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":92,"content":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":93,"content":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"INSERT","lineNumber":94,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":95,"content":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"INSERT","lineNumber":96,"content":"                    Toast.makeText("},{"type":"INSERT","lineNumber":97,"content":"                        this@MainActivity,"},{"type":"INSERT","lineNumber":98,"content":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"INSERT","lineNumber":99,"content":"                        Toast.LENGTH_LONG"},{"type":"INSERT","lineNumber":100,"content":"                    ).show()"},{"type":"INSERT","lineNumber":101,"content":"                }"},{"type":"INSERT","lineNumber":102,"content":"            }"},{"type":"INSERT","lineNumber":103,"content":""},{"type":"INSERT","lineNumber":104,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":105,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":106,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":107,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":108,"content":"        }"},{"type":"INSERT","lineNumber":109,"content":"    }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"}"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"@Composable"},{"type":"INSERT","lineNumber":114,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":115,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"DELETE","lineNumber":95,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":97,"oldContent":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":99,"oldContent":"                try {"},{"type":"DELETE","lineNumber":101,"oldContent":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":103,"oldContent":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":105,"oldContent":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"DELETE","lineNumber":107,"oldContent":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":126,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":109,"oldContent":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"DELETE","lineNumber":111,"oldContent":"                    Toast.makeText("},{"type":"DELETE","lineNumber":113,"oldContent":"                        this@MainActivity,"},{"type":"DELETE","lineNumber":115,"oldContent":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"DELETE","lineNumber":117,"oldContent":"                        Toast.LENGTH_LONG"},{"type":"DELETE","lineNumber":119,"oldContent":"                    ).show()"},{"type":"DELETE","lineNumber":121,"oldContent":"                }"},{"type":"DELETE","lineNumber":123,"oldContent":"            }"},{"type":"DELETE","lineNumber":125,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":129,"oldContent":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":131,"oldContent":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":133,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":141,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":137,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":142,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":143,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":144,"oldContent":"    val navController = rememberNavController()"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/res/drawable/logo.xml":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/res/drawable/logo.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:width=\"280dp\"\n    android:height=\"80dp\"\n    android:viewportWidth=\"280\"\n    android:viewportHeight=\"80\">\n    \n    <!-- Background -->\n    <path\n        android:fillColor=\"#FFFFFF\"\n        android:pathData=\"M10,10 L270,10 A10,10 0 0,1 280,20 L280,60 A10,10 0 0,1 270,70 L10,70 A10,10 0 0,1 0,60 L0,20 A10,10 0 0,1 10,10 Z\" />\n    \n    <!-- AR Text -->\n    <path\n        android:fillColor=\"#1E3A8A\"\n        android:pathData=\"M20,25 L35,25 L40,40 L45,25 L60,25 L50,55 L30,55 Z M30,35 L40,35 L35,45 Z\" />\n    \n    <!-- Walking Text -->\n    <path\n        android:fillColor=\"#3B82F6\"\n        android:pathData=\"M80,25 L95,25 L100,40 L105,25 L120,25 L125,55 L110,55 L108,45 L102,45 L100,55 L85,55 Z\n                         M140,25 L155,25 L160,40 L165,25 L180,25 L175,55 L160,55 L158,45 L152,45 L150,55 L135,55 Z\n                         M200,25 L215,25 L220,40 L225,25 L240,25 L235,55 L220,55 L218,45 L212,45 L210,55 L195,55 Z\" />\n</vector>","baseTimestamp":1754311537394,"deltas":[{"timestamp":1754314507563,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>"},{"type":"DELETE","lineNumber":2,"oldContent":"    android:width=\"280dp\""},{"type":"DELETE","lineNumber":3,"oldContent":"    android:height=\"80dp\""},{"type":"DELETE","lineNumber":4,"oldContent":"    android:viewportWidth=\"280\""},{"type":"DELETE","lineNumber":5,"oldContent":"    android:viewportHeight=\"80\">"},{"type":"DELETE","lineNumber":6,"oldContent":"    "},{"type":"DELETE","lineNumber":7,"oldContent":"    <!-- Background -->"},{"type":"DELETE","lineNumber":8,"oldContent":"    <path"},{"type":"DELETE","lineNumber":9,"oldContent":"        android:fillColor=\"#FFFFFF\""},{"type":"DELETE","lineNumber":10,"oldContent":"        android:pathData=\"M10,10 L270,10 A10,10 0 0,1 280,20 L280,60 A10,10 0 0,1 270,70 L10,70 A10,10 0 0,1 0,60 L0,20 A10,10 0 0,1 10,10 Z\" />"},{"type":"DELETE","lineNumber":11,"oldContent":"    "},{"type":"DELETE","lineNumber":12,"oldContent":"    <!-- AR Text -->"},{"type":"DELETE","lineNumber":13,"oldContent":"    <path"},{"type":"DELETE","lineNumber":14,"oldContent":"        android:fillColor=\"#1E3A8A\""},{"type":"DELETE","lineNumber":15,"oldContent":"        android:pathData=\"M20,25 L35,25 L40,40 L45,25 L60,25 L50,55 L30,55 Z M30,35 L40,35 L35,45 Z\" />"},{"type":"DELETE","lineNumber":16,"oldContent":"    "},{"type":"DELETE","lineNumber":17,"oldContent":"    <!-- Walking Text -->"},{"type":"DELETE","lineNumber":18,"oldContent":"    <path"},{"type":"DELETE","lineNumber":19,"oldContent":"        android:fillColor=\"#3B82F6\""},{"type":"DELETE","lineNumber":20,"oldContent":"        android:pathData=\"M80,25 L95,25 L100,40 L105,25 L120,25 L125,55 L110,55 L108,45 L102,45 L100,55 L85,55 Z"},{"type":"DELETE","lineNumber":21,"oldContent":"                         M140,25 L155,25 L160,40 L165,25 L180,25 L175,55 L160,55 L158,45 L152,45 L150,55 L135,55 Z"},{"type":"DELETE","lineNumber":22,"oldContent":"                         M200,25 L215,25 L220,40 L225,25 L240,25 L235,55 L220,55 L218,45 L212,45 L210,55 L195,55 Z\" />"},{"type":"INSERT","lineNumber":1,"content":"    android:width=\"201dp\""},{"type":"INSERT","lineNumber":2,"content":"    android:height=\"75dp\""},{"type":"INSERT","lineNumber":3,"content":"    android:viewportWidth=\"201\""},{"type":"INSERT","lineNumber":4,"content":"    android:viewportHeight=\"75\">"},{"type":"INSERT","lineNumber":5,"content":"  <path"},{"type":"INSERT","lineNumber":6,"content":"      android:pathData=\"M0,0h201v75h-201z\""},{"type":"INSERT","lineNumber":7,"content":"      android:fillColor=\"url(#pattern0_8_8)\"/>"},{"type":"INSERT","lineNumber":8,"content":"  <path"},{"type":"INSERT","lineNumber":9,"content":"      android:pathData=\"M60.19,37L68.67,14.6H74.06L82.67,37H77.34L75.6,32.2H67.07L65.38,37H60.19ZM68.19,28.2H74.45L71.28,19.78L68.19,28.2ZM85.61,37V14.6H94.49C96.11,14.6 97.53,14.87 98.73,15.42C99.95,15.95 100.88,16.72 101.53,17.74C102.19,18.75 102.52,19.96 102.52,21.37C102.52,22.48 102.3,23.45 101.87,24.3C101.43,25.13 100.83,25.82 100.06,26.38C99.3,26.93 98.43,27.33 97.43,27.58L103.71,37H98.06L92.67,28.49H90.35V37H85.61ZM90.35,24.66H93.87C95.08,24.66 96.03,24.42 96.71,23.93C97.41,23.43 97.75,22.67 97.75,21.66C97.75,20.61 97.43,19.83 96.79,19.3C96.17,18.78 95.24,18.52 94.03,18.52H90.35V24.66Z\""},{"type":"INSERT","lineNumber":10,"content":"      android:fillColor=\"#94AD0B\"/>"},{"type":"INSERT","lineNumber":12,"content":""}]},{"timestamp":1754314633077,"changes":[{"type":"MODIFY","lineNumber":1,"content":"    android:width=\"201dp\"","oldContent":"    android:width=\"201dp\""},{"type":"MODIFY","lineNumber":7,"content":"      android:fillColor=\"#FFFFFF\"/>","oldContent":"      android:fillColor=\"url(#pattern0_8_8)\"/>"},{"type":"MODIFY","lineNumber":12,"content":"","oldContent":""}]},{"timestamp":1754326070400,"changes":[{"type":"INSERT","lineNumber":0,"content":"<vector xmlns:android=\"http://schemas.android.com/apk/res/android\""},{"type":"DELETE","lineNumber":1,"oldContent":"    android:width=\"201dp\""},{"type":"MODIFY","lineNumber":7,"content":"      android:fillColor=\"url(#pattern0_8_8)\"/>","oldContent":"      android:fillColor=\"#FFFFFF\"/>"},{"type":"INSERT","lineNumber":11,"content":"</vector>"},{"type":"DELETE","lineNumber":12,"oldContent":""}]},{"timestamp":1754326121659,"changes":[{"type":"MODIFY","lineNumber":7,"content":"","oldContent":"      android:fillColor=\"url(#pattern0_8_8)\"/>"},{"type":"INSERT","lineNumber":8,"content":"    "}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ARInfoIsland.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ARInfoIsland.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.core.*\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.CameraAlt\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.CheckCircle\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.delay\n\n/**\n * AR Info Island - Semitransparente UI-Komponente im Apple Dynamic Island Style\n * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation\n */\n@Composable\nfun ARInfoIsland(\n    scanStatus: ARScanStatus,\n    modifier: Modifier = Modifier,\n    isVisible: Boolean = true\n) {\n    if (!isVisible) return\n    \n    // Animation für das Ein-/Ausblenden\n    val alpha by animateFloatAsState(\n        targetValue = if (isVisible) 0.85f else 0f,\n        animationSpec = tween(durationMillis = 300),\n        label = \"island_alpha\"\n    )\n    \n    // Pulsierender Effekt für bestimmte Status\n    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")\n    val pulseAlpha by pulseAnimation.animateFloat(\n        initialValue = 0.7f,\n        targetValue = 1f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(1000, easing = EaseInOut),\n            repeatMode = RepeatMode.Reverse\n        ),\n        label = \"pulse_alpha\"\n    )\n    \n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .padding(horizontal = 24.dp, vertical = 12.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Card(\n            modifier = Modifier\n                .clip(RoundedCornerShape(25.dp))\n                .blur(radius = 0.5.dp), // Subtiler Blur-Effekt\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = alpha)\n            ),\n            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\n        ) {\n            Row(\n                modifier = Modifier\n                    .padding(horizontal = 16.dp, vertical = 12.dp),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\n            ) {\n                // Status Icon mit Animation\n                val iconAlpha = if (scanStatus.shouldPulse) pulseAlpha else 1f\n                Icon(\n                    imageVector = scanStatus.icon,\n                    contentDescription = null,\n                    tint = scanStatus.color.copy(alpha = iconAlpha),\n                    modifier = Modifier.size(20.dp)\n                )\n                \n                // Status Text\n                Text(\n                    text = scanStatus.message,\n                    color = Color.White.copy(alpha = 0.9f),\n                    fontSize = 14.sp,\n                    fontWeight = FontWeight.Medium,\n                    textAlign = TextAlign.Center,\n                    maxLines = 1\n                )\n                \n                // Optionaler Fortschrittsindikator\n                if (scanStatus.showProgress) {\n                    CircularProgressIndicator(\n                        modifier = Modifier.size(16.dp),\n                        color = scanStatus.color,\n                        strokeWidth = 2.dp\n                    )\n                }\n            }\n        }\n    }\n}\n\n/**\n * Erweiterte AR Info Island mit mehr Informationen\n */\n@Composable\nfun ExpandedARInfoIsland(\n    scanStatus: ARScanStatus,\n    landmarkCount: Int = 0,\n    confidence: Float = 0f,\n    modifier: Modifier = Modifier,\n    isVisible: Boolean = true\n) {\n    if (!isVisible) return\n    \n    val alpha by animateFloatAsState(\n        targetValue = if (isVisible) 0.85f else 0f,\n        animationSpec = tween(durationMillis = 300),\n        label = \"expanded_island_alpha\"\n    )\n    \n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .padding(horizontal = 20.dp, vertical = 8.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Card(\n            modifier = Modifier\n                .clip(RoundedCornerShape(20.dp))\n                .blur(radius = 0.5.dp),\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = alpha)\n            ),\n            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\n        ) {\n            Column(\n                modifier = Modifier.padding(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                // Hauptstatus\n                Row(\n                    verticalAlignment = Alignment.CenterVertically,\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Icon(\n                        imageVector = scanStatus.icon,\n                        contentDescription = null,\n                        tint = scanStatus.color,\n                        modifier = Modifier.size(18.dp)\n                    )\n                    \n                    Text(\n                        text = scanStatus.message,\n                        color = Color.White.copy(alpha = 0.9f),\n                        fontSize = 14.sp,\n                        fontWeight = FontWeight.Medium\n                    )\n                }\n                \n                // Zusätzliche Informationen\n                if (landmarkCount > 0 || confidence > 0f) {\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.SpaceEvenly\n                    ) {\n                        if (landmarkCount > 0) {\n                            InfoChip(\n                                label = \"Landmarks\",\n                                value = landmarkCount.toString(),\n                                color = Color.Blue\n                            )\n                        }\n                        \n                        if (confidence > 0f) {\n                            InfoChip(\n                                label = \"Genauigkeit\",\n                                value = \"${(confidence * 100).toInt()}%\",\n                                color = getConfidenceColor(confidence)\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun InfoChip(\n    label: String,\n    value: String,\n    color: Color,\n    modifier: Modifier = Modifier\n) {\n    Row(\n        modifier = modifier\n            .background(\n                color = color.copy(alpha = 0.2f),\n                shape = RoundedCornerShape(12.dp)\n            )\n            .padding(horizontal = 8.dp, vertical = 4.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.spacedBy(4.dp)\n    ) {\n        Text(\n            text = label,\n            color = Color.White.copy(alpha = 0.7f),\n            fontSize = 10.sp\n        )\n        Text(\n            text = value,\n            color = color,\n            fontSize = 12.sp,\n            fontWeight = FontWeight.Bold\n        )\n    }\n}\n\n/**\n * AR Scan Status Datenklasse\n */\ndata class ARScanStatus(\n    val message: String,\n    val icon: ImageVector,\n    val color: Color,\n    val shouldPulse: Boolean = false,\n    val showProgress: Boolean = false\n) {\n    companion object {\n        val INITIALIZING = ARScanStatus(\n            message = \"AR wird initialisiert...\",\n            icon = Icons.Default.CameraAlt,\n            color = Color.Blue,\n            showProgress = true\n        )\n        \n        val SCANNING = ARScanStatus(\n            message = \"Suche nach Landmarks...\",\n            icon = Icons.Default.Search,\n            color = Color.Yellow,\n            shouldPulse = true\n        )\n        \n        val LANDMARK_FOUND = ARScanStatus(\n            message = \"Landmark erkannt\",\n            icon = Icons.Default.CheckCircle,\n            color = Color.Green\n        )\n        \n        val MOVE_CAMERA = ARScanStatus(\n            message = \"Bewege Kamera langsam\",\n            icon = Icons.Default.CameraAlt,\n            color = Color(0xFFFF9800),\n            shouldPulse = true\n        )\n        \n        val LOW_CONFIDENCE = ARScanStatus(\n            message = \"Bessere Beleuchtung benötigt\",\n            icon = Icons.Default.Warning,\n            color = Color.Red,\n            shouldPulse = true\n        )\n        \n        val TRACKING_LOST = ARScanStatus(\n            message = \"Tracking verloren\",\n            icon = Icons.Default.Warning,\n            color = Color.Red\n        )\n        \n        fun custom(message: String, color: Color = Color.White) = ARScanStatus(\n            message = message,\n            icon = Icons.Default.CameraAlt,\n            color = color\n        )\n    }\n}\n\n/**\n * Bestimmt die Farbe basierend auf der Confidence\n */\nprivate fun getConfidenceColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.8f -> Color.Green\n        confidence >= 0.6f -> Color.Yellow\n        confidence >= 0.4f -> Color(0xFFFF9800)\n        else -> Color.Red\n    }\n}\n\n/**\n * Hook für automatische Status-Updates basierend auf AR-Zustand\n */\n@Composable\nfun rememberARScanStatus(\n    isInitialized: Boolean,\n    landmarkCount: Int,\n    bestConfidence: Float,\n    isTracking: Boolean\n): ARScanStatus {\n    var currentStatus by remember { mutableStateOf(ARScanStatus.INITIALIZING) }\n    \n    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, isTracking) {\n        currentStatus = when {\n            !isInitialized -> ARScanStatus.INITIALIZING\n            !isTracking -> ARScanStatus.TRACKING_LOST\n            landmarkCount == 0 -> ARScanStatus.SCANNING\n            bestConfidence < 0.4f -> ARScanStatus.LOW_CONFIDENCE\n            bestConfidence < 0.7f -> ARScanStatus.MOVE_CAMERA\n            else -> ARScanStatus.LANDMARK_FOUND\n        }\n    }\n    \n    return currentStatus\n}","baseTimestamp":1754250915530,"deltas":[{"timestamp":1754306762077,"changes":[{"type":"INSERT","lineNumber":26,"content":" * Status-Enum für AR-Scanning"},{"type":"INSERT","lineNumber":27,"content":" */"},{"type":"INSERT","lineNumber":28,"content":"enum class ARScanStatus {"},{"type":"INSERT","lineNumber":29,"content":"    INITIALIZING,   // System wird initialisiert"},{"type":"INSERT","lineNumber":30,"content":"    SCANNING,       // Sucht nach Landmarks"},{"type":"INSERT","lineNumber":31,"content":"    TRACKING,       // Landmark wird getrackt"},{"type":"INSERT","lineNumber":32,"content":"    LOST,          // Tracking verloren"},{"type":"INSERT","lineNumber":33,"content":"    NAVIGATING     // Navigation aktiv"},{"type":"INSERT","lineNumber":34,"content":"}"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"/**"},{"type":"INSERT","lineNumber":37,"content":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":38,"content":" */"},{"type":"INSERT","lineNumber":39,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":40,"content":"    ARScanStatus.SCANNING, ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":41,"content":"    else -> false"},{"type":"INSERT","lineNumber":42,"content":"}"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"private fun ARScanStatus.getIcon(): ImageVector = when (this) {"},{"type":"INSERT","lineNumber":45,"content":"    ARScanStatus.INITIALIZING -> Icons.Default.CameraAlt"},{"type":"INSERT","lineNumber":46,"content":"    ARScanStatus.SCANNING -> Icons.Default.Search"},{"type":"INSERT","lineNumber":47,"content":"    ARScanStatus.TRACKING -> Icons.Default.CheckCircle"},{"type":"INSERT","lineNumber":48,"content":"    ARScanStatus.LOST -> Icons.Default.Warning"},{"type":"INSERT","lineNumber":49,"content":"    ARScanStatus.NAVIGATING -> Icons.Default.CheckCircle"},{"type":"INSERT","lineNumber":50,"content":"}"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"private fun ARScanStatus.getColor(): Color = when (this) {"},{"type":"INSERT","lineNumber":53,"content":"    ARScanStatus.INITIALIZING -> Color.Blue"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.SCANNING -> Color.Yellow"},{"type":"INSERT","lineNumber":55,"content":"    ARScanStatus.TRACKING -> Color.Green"},{"type":"INSERT","lineNumber":56,"content":"    ARScanStatus.LOST -> Color.Red"},{"type":"INSERT","lineNumber":57,"content":"    ARScanStatus.NAVIGATING -> Color.Green"},{"type":"INSERT","lineNumber":58,"content":"}"},{"type":"INSERT","lineNumber":59,"content":""},{"type":"INSERT","lineNumber":60,"content":"private fun ARScanStatus.getMessage(): String = when (this) {"},{"type":"INSERT","lineNumber":61,"content":"    ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\""},{"type":"INSERT","lineNumber":62,"content":"    ARScanStatus.SCANNING -> \"Suche nach Landmarks...\""},{"type":"INSERT","lineNumber":63,"content":"    ARScanStatus.TRACKING -> \"Landmark erkannt\""},{"type":"INSERT","lineNumber":64,"content":"    ARScanStatus.LOST -> \"Landmark verloren\""},{"type":"INSERT","lineNumber":65,"content":"    ARScanStatus.NAVIGATING -> \"Navigation aktiv\""},{"type":"INSERT","lineNumber":66,"content":"}"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":69,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":70,"content":"    else -> false"},{"type":"INSERT","lineNumber":71,"content":"}"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"/**"},{"type":"DELETE","lineNumber":78,"oldContent":"                val iconAlpha = if (scanStatus.shouldPulse) pulseAlpha else 1f"},{"type":"INSERT","lineNumber":126,"content":"                val iconAlpha = if (scanStatus.shouldPulse()) pulseAlpha else 1f"},{"type":"DELETE","lineNumber":80,"oldContent":"                    imageVector = scanStatus.icon,"},{"type":"INSERT","lineNumber":128,"content":"                    imageVector = scanStatus.getIcon(),"},{"type":"DELETE","lineNumber":82,"oldContent":"                    tint = scanStatus.color.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":130,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":88,"oldContent":"                    text = scanStatus.message,"},{"type":"INSERT","lineNumber":136,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":97,"oldContent":"                if (scanStatus.showProgress) {"},{"type":"INSERT","lineNumber":145,"content":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":100,"oldContent":"                        color = scanStatus.color,"},{"type":"INSERT","lineNumber":148,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":109,"oldContent":"/**"},{"type":"DELETE","lineNumber":110,"oldContent":" * Erweiterte AR Info Island mit mehr Informationen"},{"type":"DELETE","lineNumber":111,"oldContent":" */"},{"type":"DELETE","lineNumber":112,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":113,"oldContent":"fun ExpandedARInfoIsland("},{"type":"DELETE","lineNumber":114,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":115,"oldContent":"    landmarkCount: Int = 0,"},{"type":"DELETE","lineNumber":116,"oldContent":"    confidence: Float = 0f,"},{"type":"DELETE","lineNumber":117,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":118,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":119,"oldContent":") {"},{"type":"DELETE","lineNumber":120,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":121,"oldContent":"    "},{"type":"DELETE","lineNumber":122,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":123,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":124,"oldContent":"        animationSpec = tween(durationMillis = 300),"},{"type":"DELETE","lineNumber":125,"oldContent":"        label = \"expanded_island_alpha\""},{"type":"DELETE","lineNumber":126,"oldContent":"    )"},{"type":"DELETE","lineNumber":127,"oldContent":"    "},{"type":"DELETE","lineNumber":128,"oldContent":"    Box("},{"type":"DELETE","lineNumber":129,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":130,"oldContent":"            .fillMaxWidth()"},{"type":"DELETE","lineNumber":131,"oldContent":"            .padding(horizontal = 20.dp, vertical = 8.dp),"},{"type":"DELETE","lineNumber":132,"oldContent":"        contentAlignment = Alignment.Center"},{"type":"DELETE","lineNumber":133,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":134,"oldContent":"        Card("},{"type":"DELETE","lineNumber":135,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":136,"oldContent":"                .clip(RoundedCornerShape(20.dp))"},{"type":"DELETE","lineNumber":137,"oldContent":"                .blur(radius = 0.5.dp),"},{"type":"DELETE","lineNumber":138,"oldContent":"            colors = CardDefaults.cardColors("},{"type":"DELETE","lineNumber":139,"oldContent":"                containerColor = Color.Black.copy(alpha = alpha)"},{"type":"DELETE","lineNumber":140,"oldContent":"            ),"},{"type":"DELETE","lineNumber":141,"oldContent":"            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)"},{"type":"DELETE","lineNumber":142,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":143,"oldContent":"            Column("},{"type":"DELETE","lineNumber":144,"oldContent":"                modifier = Modifier.padding(16.dp),"},{"type":"DELETE","lineNumber":145,"oldContent":"                horizontalAlignment = Alignment.CenterHorizontally,"},{"type":"DELETE","lineNumber":146,"oldContent":"                verticalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"DELETE","lineNumber":147,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":148,"oldContent":"                // Hauptstatus"},{"type":"DELETE","lineNumber":149,"oldContent":"                Row("},{"type":"DELETE","lineNumber":150,"oldContent":"                    verticalAlignment = Alignment.CenterVertically,"},{"type":"DELETE","lineNumber":151,"oldContent":"                    horizontalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"DELETE","lineNumber":152,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                    Icon("},{"type":"DELETE","lineNumber":154,"oldContent":"                        imageVector = scanStatus.icon,"},{"type":"DELETE","lineNumber":155,"oldContent":"                        contentDescription = null,"},{"type":"DELETE","lineNumber":156,"oldContent":"                        tint = scanStatus.color,"},{"type":"DELETE","lineNumber":157,"oldContent":"                        modifier = Modifier.size(18.dp)"},{"type":"DELETE","lineNumber":158,"oldContent":"                    )"},{"type":"DELETE","lineNumber":159,"oldContent":"                    "},{"type":"DELETE","lineNumber":160,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":161,"oldContent":"                        text = scanStatus.message,"},{"type":"DELETE","lineNumber":162,"oldContent":"                        color = Color.White.copy(alpha = 0.9f),"},{"type":"DELETE","lineNumber":163,"oldContent":"                        fontSize = 14.sp,"},{"type":"DELETE","lineNumber":164,"oldContent":"                        fontWeight = FontWeight.Medium"},{"type":"DELETE","lineNumber":165,"oldContent":"                    )"},{"type":"DELETE","lineNumber":166,"oldContent":"                }"},{"type":"DELETE","lineNumber":167,"oldContent":"                "},{"type":"DELETE","lineNumber":168,"oldContent":"                // Zusätzliche Informationen"},{"type":"DELETE","lineNumber":169,"oldContent":"                if (landmarkCount > 0 || confidence > 0f) {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    Row("},{"type":"DELETE","lineNumber":171,"oldContent":"                        modifier = Modifier.fillMaxWidth(),"},{"type":"DELETE","lineNumber":172,"oldContent":"                        horizontalArrangement = Arrangement.SpaceEvenly"},{"type":"DELETE","lineNumber":173,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                        if (landmarkCount > 0) {"},{"type":"DELETE","lineNumber":175,"oldContent":"                            InfoChip("},{"type":"DELETE","lineNumber":176,"oldContent":"                                label = \"Landmarks\","},{"type":"DELETE","lineNumber":177,"oldContent":"                                value = landmarkCount.toString(),"},{"type":"DELETE","lineNumber":178,"oldContent":"                                color = Color.Blue"},{"type":"DELETE","lineNumber":179,"oldContent":"                            )"},{"type":"DELETE","lineNumber":180,"oldContent":"                        }"},{"type":"DELETE","lineNumber":181,"oldContent":"                        "},{"type":"DELETE","lineNumber":182,"oldContent":"                        if (confidence > 0f) {"},{"type":"DELETE","lineNumber":183,"oldContent":"                            InfoChip("},{"type":"DELETE","lineNumber":184,"oldContent":"                                label = \"Genauigkeit\","},{"type":"DELETE","lineNumber":185,"oldContent":"                                value = \"${(confidence * 100).toInt()}%\","},{"type":"DELETE","lineNumber":186,"oldContent":"                                color = getConfidenceColor(confidence)"},{"type":"DELETE","lineNumber":187,"oldContent":"                            )"},{"type":"DELETE","lineNumber":188,"oldContent":"                        }"},{"type":"DELETE","lineNumber":189,"oldContent":"                    }"},{"type":"DELETE","lineNumber":190,"oldContent":"                }"},{"type":"DELETE","lineNumber":191,"oldContent":"            }"},{"type":"DELETE","lineNumber":192,"oldContent":"        }"},{"type":"DELETE","lineNumber":193,"oldContent":"    }"},{"type":"DELETE","lineNumber":194,"oldContent":"}"},{"type":"DELETE","lineNumber":196,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":197,"oldContent":"private fun InfoChip("},{"type":"DELETE","lineNumber":198,"oldContent":"    label: String,"},{"type":"DELETE","lineNumber":199,"oldContent":"    value: String,"},{"type":"DELETE","lineNumber":200,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":201,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":202,"oldContent":") {"},{"type":"DELETE","lineNumber":203,"oldContent":"    Row("},{"type":"DELETE","lineNumber":204,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":205,"oldContent":"            .background("},{"type":"DELETE","lineNumber":206,"oldContent":"                color = color.copy(alpha = 0.2f),"},{"type":"DELETE","lineNumber":207,"oldContent":"                shape = RoundedCornerShape(12.dp)"},{"type":"DELETE","lineNumber":208,"oldContent":"            )"},{"type":"DELETE","lineNumber":209,"oldContent":"            .padding(horizontal = 8.dp, vertical = 4.dp),"},{"type":"DELETE","lineNumber":210,"oldContent":"        verticalAlignment = Alignment.CenterVertically,"},{"type":"DELETE","lineNumber":211,"oldContent":"        horizontalArrangement = Arrangement.spacedBy(4.dp)"},{"type":"DELETE","lineNumber":212,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":213,"oldContent":"        Text("},{"type":"DELETE","lineNumber":214,"oldContent":"            text = label,"},{"type":"DELETE","lineNumber":215,"oldContent":"            color = Color.White.copy(alpha = 0.7f),"},{"type":"DELETE","lineNumber":216,"oldContent":"            fontSize = 10.sp"},{"type":"DELETE","lineNumber":217,"oldContent":"        )"},{"type":"DELETE","lineNumber":218,"oldContent":"        Text("},{"type":"DELETE","lineNumber":219,"oldContent":"            text = value,"},{"type":"DELETE","lineNumber":220,"oldContent":"            color = color,"},{"type":"DELETE","lineNumber":221,"oldContent":"            fontSize = 12.sp,"},{"type":"DELETE","lineNumber":222,"oldContent":"            fontWeight = FontWeight.Bold"},{"type":"DELETE","lineNumber":223,"oldContent":"        )"},{"type":"DELETE","lineNumber":224,"oldContent":"    }"},{"type":"DELETE","lineNumber":225,"oldContent":"}"},{"type":"DELETE","lineNumber":228,"oldContent":" * AR Scan Status Datenklasse"},{"type":"DELETE","lineNumber":229,"oldContent":" */"},{"type":"DELETE","lineNumber":230,"oldContent":"data class ARScanStatus("},{"type":"DELETE","lineNumber":231,"oldContent":"    val message: String,"},{"type":"DELETE","lineNumber":232,"oldContent":"    val icon: ImageVector,"},{"type":"DELETE","lineNumber":233,"oldContent":"    val color: Color,"},{"type":"DELETE","lineNumber":234,"oldContent":"    val shouldPulse: Boolean = false,"},{"type":"DELETE","lineNumber":235,"oldContent":"    val showProgress: Boolean = false"},{"type":"DELETE","lineNumber":236,"oldContent":") {"},{"type":"DELETE","lineNumber":237,"oldContent":"    companion object {"},{"type":"DELETE","lineNumber":238,"oldContent":"        val INITIALIZING = ARScanStatus("},{"type":"DELETE","lineNumber":239,"oldContent":"            message = \"AR wird initialisiert...\","},{"type":"DELETE","lineNumber":240,"oldContent":"            icon = Icons.Default.CameraAlt,"},{"type":"DELETE","lineNumber":241,"oldContent":"            color = Color.Blue,"},{"type":"DELETE","lineNumber":242,"oldContent":"            showProgress = true"},{"type":"DELETE","lineNumber":243,"oldContent":"        )"},{"type":"DELETE","lineNumber":244,"oldContent":"        "},{"type":"DELETE","lineNumber":245,"oldContent":"        val SCANNING = ARScanStatus("},{"type":"DELETE","lineNumber":246,"oldContent":"            message = \"Suche nach Landmarks...\","},{"type":"DELETE","lineNumber":247,"oldContent":"            icon = Icons.Default.Search,"},{"type":"DELETE","lineNumber":248,"oldContent":"            color = Color.Yellow,"},{"type":"DELETE","lineNumber":249,"oldContent":"            shouldPulse = true"},{"type":"DELETE","lineNumber":250,"oldContent":"        )"},{"type":"DELETE","lineNumber":251,"oldContent":"        "},{"type":"DELETE","lineNumber":252,"oldContent":"        val LANDMARK_FOUND = ARScanStatus("},{"type":"DELETE","lineNumber":253,"oldContent":"            message = \"Landmark erkannt\","},{"type":"DELETE","lineNumber":254,"oldContent":"            icon = Icons.Default.CheckCircle,"},{"type":"DELETE","lineNumber":255,"oldContent":"            color = Color.Green"},{"type":"DELETE","lineNumber":256,"oldContent":"        )"},{"type":"DELETE","lineNumber":257,"oldContent":"        "},{"type":"DELETE","lineNumber":258,"oldContent":"        val MOVE_CAMERA = ARScanStatus("},{"type":"DELETE","lineNumber":259,"oldContent":"            message = \"Bewege Kamera langsam\","},{"type":"DELETE","lineNumber":260,"oldContent":"            icon = Icons.Default.CameraAlt,"},{"type":"DELETE","lineNumber":261,"oldContent":"            color = Color(0xFFFF9800),"},{"type":"DELETE","lineNumber":262,"oldContent":"            shouldPulse = true"},{"type":"DELETE","lineNumber":263,"oldContent":"        )"},{"type":"DELETE","lineNumber":264,"oldContent":"        "},{"type":"DELETE","lineNumber":265,"oldContent":"        val LOW_CONFIDENCE = ARScanStatus("},{"type":"DELETE","lineNumber":266,"oldContent":"            message = \"Bessere Beleuchtung benötigt\","},{"type":"DELETE","lineNumber":267,"oldContent":"            icon = Icons.Default.Warning,"},{"type":"DELETE","lineNumber":268,"oldContent":"            color = Color.Red,"},{"type":"DELETE","lineNumber":269,"oldContent":"            shouldPulse = true"},{"type":"DELETE","lineNumber":270,"oldContent":"        )"},{"type":"DELETE","lineNumber":271,"oldContent":"        "},{"type":"DELETE","lineNumber":272,"oldContent":"        val TRACKING_LOST = ARScanStatus("},{"type":"DELETE","lineNumber":273,"oldContent":"            message = \"Tracking verloren\","},{"type":"DELETE","lineNumber":274,"oldContent":"            icon = Icons.Default.Warning,"},{"type":"DELETE","lineNumber":275,"oldContent":"            color = Color.Red"},{"type":"DELETE","lineNumber":276,"oldContent":"        )"},{"type":"DELETE","lineNumber":277,"oldContent":"        "},{"type":"DELETE","lineNumber":278,"oldContent":"        fun custom(message: String, color: Color = Color.White) = ARScanStatus("},{"type":"DELETE","lineNumber":279,"oldContent":"            message = message,"},{"type":"DELETE","lineNumber":280,"oldContent":"            icon = Icons.Default.CameraAlt,"},{"type":"DELETE","lineNumber":281,"oldContent":"            color = color"},{"type":"DELETE","lineNumber":282,"oldContent":"        )"},{"type":"DELETE","lineNumber":283,"oldContent":"    }"},{"type":"DELETE","lineNumber":284,"oldContent":"}"},{"type":"DELETE","lineNumber":285,"oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"/**"},{"type":"INSERT","lineNumber":182,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":183,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":310,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, isTracking) {"},{"type":"INSERT","lineNumber":185,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":186,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":187,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":188,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":189,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":190,"content":"        } else {"},{"type":"INSERT","lineNumber":191,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":192,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":193,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":194,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":195,"content":"            }"},{"type":"INSERT","lineNumber":196,"content":"        }"},{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":313,"oldContent":"            !isTracking -> ARScanStatus.TRACKING_LOST"},{"type":"INSERT","lineNumber":202,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":315,"oldContent":"            bestConfidence < 0.4f -> ARScanStatus.LOW_CONFIDENCE"},{"type":"DELETE","lineNumber":316,"oldContent":"            bestConfidence < 0.7f -> ARScanStatus.MOVE_CAMERA"},{"type":"DELETE","lineNumber":317,"oldContent":"            else -> ARScanStatus.LANDMARK_FOUND"},{"type":"INSERT","lineNumber":204,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":205,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":206,"content":"            else -> ARScanStatus.SCANNING"}]},{"timestamp":1754314675801,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Apple Dynamic Island Style"},{"type":"DELETE","lineNumber":29,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":31,"oldContent":" */"},{"type":"DELETE","lineNumber":33,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":35,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":37,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":39,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":41,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":43,"oldContent":") {"},{"type":"DELETE","lineNumber":45,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":47,"oldContent":"    "},{"type":"DELETE","lineNumber":49,"oldContent":"    // Animation für das Ein-/Ausblenden"},{"type":"DELETE","lineNumber":51,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":53,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":55,"oldContent":"        animationSpec = tween(durationMillis = 300),"},{"type":"DELETE","lineNumber":57,"oldContent":"        label = \"island_alpha\""},{"type":"DELETE","lineNumber":59,"oldContent":"    )"},{"type":"DELETE","lineNumber":61,"oldContent":"    "},{"type":"DELETE","lineNumber":63,"oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"DELETE","lineNumber":65,"oldContent":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"DELETE","lineNumber":67,"oldContent":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"DELETE","lineNumber":69,"oldContent":"        initialValue = 0.7f,"},{"type":"DELETE","lineNumber":71,"oldContent":"        targetValue = 1f,"},{"type":"DELETE","lineNumber":73,"oldContent":"        animationSpec = infiniteRepeatable("},{"type":"DELETE","lineNumber":75,"oldContent":"            animation = tween(1000, easing = EaseInOut),"},{"type":"DELETE","lineNumber":77,"oldContent":"            repeatMode = RepeatMode.Reverse"},{"type":"DELETE","lineNumber":79,"oldContent":"        ),"},{"type":"DELETE","lineNumber":81,"oldContent":"        label = \"pulse_alpha\""},{"type":"DELETE","lineNumber":83,"oldContent":"    )"},{"type":"DELETE","lineNumber":85,"oldContent":"    "},{"type":"DELETE","lineNumber":87,"oldContent":"    Box("},{"type":"DELETE","lineNumber":89,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":91,"oldContent":"            .fillMaxWidth()"},{"type":"DELETE","lineNumber":93,"oldContent":"            .padding(horizontal = 24.dp, vertical = 12.dp),"},{"type":"DELETE","lineNumber":95,"oldContent":"        contentAlignment = Alignment.Center"},{"type":"DELETE","lineNumber":97,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":99,"oldContent":"        Card("},{"type":"DELETE","lineNumber":101,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":103,"oldContent":"                .clip(RoundedCornerShape(25.dp))"},{"type":"DELETE","lineNumber":105,"oldContent":"                .blur(radius = 0.5.dp), // Subtiler Blur-Effekt"},{"type":"DELETE","lineNumber":107,"oldContent":"            colors = CardDefaults.cardColors("},{"type":"DELETE","lineNumber":109,"oldContent":"                containerColor = Color.Black.copy(alpha = alpha)"},{"type":"DELETE","lineNumber":111,"oldContent":"            ),"},{"type":"DELETE","lineNumber":113,"oldContent":"            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)"},{"type":"DELETE","lineNumber":115,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":117,"oldContent":"            Row("},{"type":"DELETE","lineNumber":119,"oldContent":"                modifier = Modifier"},{"type":"INSERT","lineNumber":74,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":75,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":76,"content":" */"},{"type":"INSERT","lineNumber":77,"content":"@Composable"},{"type":"INSERT","lineNumber":78,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":79,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":80,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":81,"content":"    isVisible: Boolean = true"},{"type":"INSERT","lineNumber":82,"content":") {"},{"type":"INSERT","lineNumber":83,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":84,"content":"    "},{"type":"INSERT","lineNumber":85,"content":"    // Animation für das Ein-/Ausblenden"},{"type":"INSERT","lineNumber":86,"content":"    val alpha by animateFloatAsState("},{"type":"INSERT","lineNumber":87,"content":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"INSERT","lineNumber":88,"content":"        animationSpec = tween(durationMillis = 300),"},{"type":"INSERT","lineNumber":89,"content":"        label = \"island_alpha\""},{"type":"INSERT","lineNumber":90,"content":"    )"},{"type":"INSERT","lineNumber":91,"content":"    "},{"type":"INSERT","lineNumber":92,"content":"    // Pulsierender Effekt für bestimmte Status"},{"type":"INSERT","lineNumber":93,"content":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"INSERT","lineNumber":94,"content":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"INSERT","lineNumber":95,"content":"        initialValue = 0.7f,"},{"type":"INSERT","lineNumber":96,"content":"        targetValue = 1f,"},{"type":"INSERT","lineNumber":97,"content":"        animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":98,"content":"            animation = tween(1000, easing = EaseInOut),"},{"type":"INSERT","lineNumber":99,"content":"            repeatMode = RepeatMode.Reverse"},{"type":"INSERT","lineNumber":100,"content":"        ),"},{"type":"INSERT","lineNumber":101,"content":"        label = \"pulse_alpha\""},{"type":"INSERT","lineNumber":102,"content":"    )"},{"type":"INSERT","lineNumber":103,"content":"    "},{"type":"INSERT","lineNumber":104,"content":"    Box("},{"type":"INSERT","lineNumber":105,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":106,"content":"            .fillMaxWidth()"},{"type":"INSERT","lineNumber":107,"content":"            .padding(horizontal = 24.dp, vertical = 12.dp),"},{"type":"INSERT","lineNumber":108,"content":"        contentAlignment = Alignment.Center"},{"type":"INSERT","lineNumber":109,"content":"    ) {"},{"type":"INSERT","lineNumber":110,"content":"        Card("},{"type":"INSERT","lineNumber":111,"content":"            modifier = Modifier"},{"type":"INSERT","lineNumber":112,"content":"                .clip(RoundedCornerShape(25.dp))"},{"type":"INSERT","lineNumber":113,"content":"                .blur(radius = 0.5.dp), // Subtiler Blur-Effekt"},{"type":"INSERT","lineNumber":114,"content":"            colors = CardDefaults.cardColors("},{"type":"INSERT","lineNumber":115,"content":"                containerColor = Color.Black.copy(alpha = alpha)"},{"type":"INSERT","lineNumber":116,"content":"            ),"},{"type":"INSERT","lineNumber":117,"content":"            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)"},{"type":"INSERT","lineNumber":118,"content":"        ) {"},{"type":"INSERT","lineNumber":119,"content":"            Row("},{"type":"INSERT","lineNumber":120,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":126,"content":"                val iconAlpha = if (scanStatus.shouldPulse()) pulseAlpha else 1f"},{"type":"INSERT","lineNumber":128,"content":"                    imageVector = scanStatus.getIcon(),"},{"type":"INSERT","lineNumber":130,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":136,"content":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":145,"content":"                if (scanStatus.showProgress()) {"},{"type":"INSERT","lineNumber":148,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":151,"oldContent":"                val iconAlpha = if (scanStatus.shouldPulse()) pulseAlpha else 1f"},{"type":"DELETE","lineNumber":152,"oldContent":"                    imageVector = scanStatus.getIcon(),"},{"type":"DELETE","lineNumber":153,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":154,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":155,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":156,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":157,"oldContent":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"DELETE","lineNumber":158,"oldContent":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":159,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":160,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":161,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":162,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":163,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":164,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":165,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":166,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":167,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":168,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":169,"oldContent":"            }"},{"type":"DELETE","lineNumber":171,"oldContent":"        }"},{"type":"DELETE","lineNumber":172,"oldContent":"    }"},{"type":"DELETE","lineNumber":173,"oldContent":"    "},{"type":"DELETE","lineNumber":174,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":175,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":176,"oldContent":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"DELETE","lineNumber":177,"oldContent":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"DELETE","lineNumber":178,"oldContent":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":182,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":183,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"INSERT","lineNumber":185,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":186,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":187,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":188,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":189,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":190,"content":"        } else {"},{"type":"INSERT","lineNumber":191,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":192,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":193,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":194,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":195,"content":"            }"},{"type":"INSERT","lineNumber":196,"content":"        }"},{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"INSERT","lineNumber":202,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":204,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":205,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":206,"content":"            else -> ARScanStatus.SCANNING"}]},{"timestamp":1754326761386,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.material.icons.Icons"},{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.material.icons.filled.CameraAlt"},{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.material.icons.filled.Search"},{"type":"DELETE","lineNumber":9,"oldContent":"import androidx.compose.material.icons.filled.CheckCircle"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.material.icons.filled.Warning"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.ui.res.painterResource"},{"type":"INSERT","lineNumber":7,"content":"import com.example.arwalking.R"},{"type":"DELETE","lineNumber":44,"oldContent":"private fun ARScanStatus.getIcon(): ImageVector = when (this) {"},{"type":"DELETE","lineNumber":45,"oldContent":"    ARScanStatus.INITIALIZING -> Icons.Default.CameraAlt"},{"type":"DELETE","lineNumber":46,"oldContent":"    ARScanStatus.SCANNING -> Icons.Default.Search"},{"type":"DELETE","lineNumber":47,"oldContent":"    ARScanStatus.TRACKING -> Icons.Default.CheckCircle"},{"type":"DELETE","lineNumber":48,"oldContent":"    ARScanStatus.LOST -> Icons.Default.Warning"},{"type":"DELETE","lineNumber":49,"oldContent":"    ARScanStatus.NAVIGATING -> Icons.Default.CheckCircle"},{"type":"DELETE","lineNumber":50,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":41,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":42,"content":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":43,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":44,"content":"    ARScanStatus.TRACKING -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":45,"content":"    ARScanStatus.LOST -> R.drawable.alert_circle"},{"type":"INSERT","lineNumber":46,"content":"    ARScanStatus.NAVIGATING -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"private fun ARScanStatus.getColor(): Color = when (this) {"},{"type":"INSERT","lineNumber":50,"content":"    ARScanStatus.INITIALIZING -> Color.Blue"},{"type":"INSERT","lineNumber":51,"content":"    ARScanStatus.SCANNING -> Color.Yellow"},{"type":"INSERT","lineNumber":52,"content":"    ARScanStatus.TRACKING -> Color.Green"},{"type":"INSERT","lineNumber":53,"content":"    ARScanStatus.LOST -> Color.Red"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.NAVIGATING -> Color.Green"},{"type":"INSERT","lineNumber":55,"content":"}"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"private fun ARScanStatus.getMessage(): String = when (this) {"},{"type":"INSERT","lineNumber":58,"content":"    ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\""},{"type":"INSERT","lineNumber":59,"content":"    ARScanStatus.SCANNING -> \"Suche nach Landmarks...\""},{"type":"INSERT","lineNumber":60,"content":"    ARScanStatus.TRACKING -> \"Landmark erkannt\""},{"type":"INSERT","lineNumber":61,"content":"    ARScanStatus.LOST -> \"Landmark verloren\""},{"type":"INSERT","lineNumber":62,"content":"    ARScanStatus.NAVIGATING -> \"Navigation aktiv\""},{"type":"INSERT","lineNumber":63,"content":"}"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":66,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":67,"content":"    else -> false"},{"type":"INSERT","lineNumber":68,"content":"}"},{"type":"INSERT","lineNumber":69,"content":""},{"type":"INSERT","lineNumber":70,"content":"/**"},{"type":"INSERT","lineNumber":71,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"private fun ARScanStatus.getColor(): Color = when (this) {"},{"type":"DELETE","lineNumber":60,"oldContent":"    ARScanStatus.INITIALIZING -> Color.Blue"},{"type":"DELETE","lineNumber":63,"oldContent":"    ARScanStatus.SCANNING -> Color.Yellow"},{"type":"DELETE","lineNumber":66,"oldContent":"    ARScanStatus.TRACKING -> Color.Green"},{"type":"DELETE","lineNumber":69,"oldContent":"    ARScanStatus.LOST -> Color.Red"},{"type":"DELETE","lineNumber":72,"oldContent":"    ARScanStatus.NAVIGATING -> Color.Green"},{"type":"DELETE","lineNumber":75,"oldContent":"}"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"private fun ARScanStatus.getMessage(): String = when (this) {"},{"type":"DELETE","lineNumber":84,"oldContent":"    ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\""},{"type":"DELETE","lineNumber":87,"oldContent":"    ARScanStatus.SCANNING -> \"Suche nach Landmarks...\""},{"type":"DELETE","lineNumber":90,"oldContent":"    ARScanStatus.TRACKING -> \"Landmark erkannt\""},{"type":"DELETE","lineNumber":93,"oldContent":"    ARScanStatus.LOST -> \"Landmark verloren\""},{"type":"DELETE","lineNumber":96,"oldContent":"    ARScanStatus.NAVIGATING -> \"Navigation aktiv\""},{"type":"DELETE","lineNumber":99,"oldContent":"}"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":108,"oldContent":"    ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":111,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":114,"oldContent":"}"},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"DELETE","lineNumber":120,"oldContent":"/**"},{"type":"DELETE","lineNumber":128,"oldContent":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":126,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":127,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"MODIFY","lineNumber":133,"content":"                    text = scanStatus.getMessage(),","oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":139,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":142,"content":"                if (scanStatus.showProgress()) {"},{"type":"INSERT","lineNumber":145,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":149,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":161,"oldContent":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"DELETE","lineNumber":163,"oldContent":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":166,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":168,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":170,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":172,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":174,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":176,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":178,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":180,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":182,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":184,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":186,"oldContent":"            }"},{"type":"DELETE","lineNumber":188,"oldContent":"        }"},{"type":"DELETE","lineNumber":190,"oldContent":"    }"},{"type":"DELETE","lineNumber":192,"oldContent":"    "},{"type":"DELETE","lineNumber":194,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":198,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":179,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":180,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":201,"oldContent":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":182,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":183,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":184,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":185,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":186,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":187,"content":"        } else {"},{"type":"INSERT","lineNumber":188,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":189,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":190,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":191,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":192,"content":"            }"},{"type":"INSERT","lineNumber":193,"content":"        }"},{"type":"INSERT","lineNumber":194,"content":"    }"},{"type":"INSERT","lineNumber":195,"content":"    "},{"type":"INSERT","lineNumber":196,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":203,"oldContent":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"DELETE","lineNumber":205,"oldContent":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":199,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":201,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":202,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":203,"content":"            else -> ARScanStatus.SCANNING"}]},{"timestamp":1754329203308,"changes":[{"type":"DELETE","lineNumber":38,"oldContent":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":40,"oldContent":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":42,"oldContent":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":41,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":42,"content":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":43,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":47,"content":"}"},{"type":"DELETE","lineNumber":51,"oldContent":"}"},{"type":"DELETE","lineNumber":53,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":55,"oldContent":" */"},{"type":"DELETE","lineNumber":58,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":60,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":63,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":65,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":68,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":70,"oldContent":") {"},{"type":"DELETE","lineNumber":73,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":75,"oldContent":"    "},{"type":"DELETE","lineNumber":78,"oldContent":"    // Animation für das Ein-/Ausblenden"},{"type":"DELETE","lineNumber":80,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":83,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"INSERT","lineNumber":72,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":73,"content":" */"},{"type":"INSERT","lineNumber":74,"content":"@Composable"},{"type":"INSERT","lineNumber":75,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":76,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":77,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":78,"content":"    isVisible: Boolean = true"},{"type":"INSERT","lineNumber":79,"content":") {"},{"type":"INSERT","lineNumber":80,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":81,"content":"    "},{"type":"INSERT","lineNumber":82,"content":"    // Animation für das Ein-/Ausblenden"},{"type":"INSERT","lineNumber":83,"content":"    val alpha by animateFloatAsState("},{"type":"INSERT","lineNumber":84,"content":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":123,"oldContent":"                    contentDescription = null,"},{"type":"DELETE","lineNumber":125,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":127,"oldContent":"                    imageVector = scanStatus.getIcon(),"},{"type":"INSERT","lineNumber":125,"content":"                    painter = painterResource(id = scanStatus.getIconResource()),"},{"type":"INSERT","lineNumber":126,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":127,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":130,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":131,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":130,"content":"                "},{"type":"INSERT","lineNumber":133,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":139,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"MODIFY","lineNumber":142,"content":"                if (scanStatus.showProgress()) {","oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":145,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":167,"oldContent":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"MODIFY","lineNumber":169,"content":" * Hook für automatische Status-Updates basierend auf AR-Zustand","oldContent":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"INSERT","lineNumber":170,"content":" */"},{"type":"INSERT","lineNumber":171,"content":"@Composable"},{"type":"INSERT","lineNumber":172,"content":"fun rememberARScanStatus("},{"type":"INSERT","lineNumber":173,"content":"    isInitialized: Boolean,"},{"type":"INSERT","lineNumber":174,"content":"    landmarkCount: Int,"},{"type":"INSERT","lineNumber":175,"content":"    bestConfidence: Float,"},{"type":"INSERT","lineNumber":176,"content":"    isTracking: Boolean"},{"type":"INSERT","lineNumber":177,"content":"): ARScanStatus {"},{"type":"INSERT","lineNumber":178,"content":"    var currentStatus by remember { mutableStateOf(ARScanStatus.INITIALIZING) }"},{"type":"INSERT","lineNumber":179,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":180,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"INSERT","lineNumber":181,"content":"    "},{"type":"DELETE","lineNumber":173,"oldContent":" * Hook für automatische Status-Updates basierend auf AR-Zustand"},{"type":"DELETE","lineNumber":176,"oldContent":" */"},{"type":"DELETE","lineNumber":179,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":182,"oldContent":"fun rememberARScanStatus("},{"type":"DELETE","lineNumber":185,"oldContent":"    isInitialized: Boolean,"},{"type":"DELETE","lineNumber":188,"oldContent":"    landmarkCount: Int,"},{"type":"DELETE","lineNumber":191,"oldContent":"    bestConfidence: Float,"},{"type":"DELETE","lineNumber":193,"oldContent":"    isTracking: Boolean"},{"type":"DELETE","lineNumber":194,"oldContent":"): ARScanStatus {"},{"type":"INSERT","lineNumber":197,"content":"        currentStatus = when {"},{"type":"INSERT","lineNumber":198,"content":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"DELETE","lineNumber":196,"oldContent":"    var currentStatus by remember { mutableStateOf(ARScanStatus.INITIALIZING) }"},{"type":"DELETE","lineNumber":197,"oldContent":"    "},{"type":"INSERT","lineNumber":200,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":200,"oldContent":"        currentStatus = when {"},{"type":"DELETE","lineNumber":202,"oldContent":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"DELETE","lineNumber":203,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754330139631,"changes":[{"type":"INSERT","lineNumber":34,"content":" * Enum für verschiedene Navigationsaktionen"},{"type":"INSERT","lineNumber":35,"content":" */"},{"type":"INSERT","lineNumber":36,"content":"enum class NavigationAction {"},{"type":"INSERT","lineNumber":37,"content":"    STRAIGHT,       // Geradeaus gehen"},{"type":"INSERT","lineNumber":38,"content":"    TURN_LEFT,      // Links abbiegen"},{"type":"INSERT","lineNumber":39,"content":"    TURN_RIGHT,     // Rechts abbiegen"},{"type":"INSERT","lineNumber":40,"content":"    THROUGH_DOOR,   // Durch Tür gehen"},{"type":"INSERT","lineNumber":41,"content":"    UNKNOWN         // Unbekannte Aktion"},{"type":"INSERT","lineNumber":42,"content":"}"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"/**"},{"type":"DELETE","lineNumber":39,"oldContent":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":76,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":77,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":78,"content":"    else -> false"},{"type":"INSERT","lineNumber":79,"content":"}"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"/**"},{"type":"INSERT","lineNumber":82,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":83,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":68,"oldContent":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":71,"oldContent":"    ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":73,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":76,"oldContent":"}"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"/**"},{"type":"DELETE","lineNumber":84,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":135,"content":"                Icon("},{"type":"DELETE","lineNumber":126,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":132,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":144,"content":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":152,"content":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":142,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":144,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":156,"content":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":179,"content":"/**"},{"type":"DELETE","lineNumber":170,"oldContent":"/**"},{"type":"DELETE","lineNumber":172,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":174,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":177,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":179,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":182,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":184,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":187,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":193,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":194,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":195,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":196,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":197,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":198,"content":"        } else {"},{"type":"INSERT","lineNumber":199,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":197,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":210,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":211,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":202,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754330148124,"changes":[{"type":"DELETE","lineNumber":35,"oldContent":" * Helper functions für ARScanStatus enum"},{"type":"DELETE","lineNumber":37,"oldContent":" */"},{"type":"DELETE","lineNumber":39,"oldContent":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":41,"oldContent":"    ARScanStatus.SCANNING, ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":43,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":46,"oldContent":"}"},{"type":"DELETE","lineNumber":48,"oldContent":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":50,"oldContent":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":45,"content":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":46,"content":" */"},{"type":"INSERT","lineNumber":47,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":48,"content":"    ARScanStatus.SCANNING, ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":49,"content":"    else -> false"},{"type":"INSERT","lineNumber":50,"content":"}"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":53,"content":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":76,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":77,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":78,"content":"    else -> false"},{"type":"INSERT","lineNumber":79,"content":"}"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"/**"},{"type":"INSERT","lineNumber":82,"content":" * Bestimmt die Navigationsaktion basierend auf der Anweisung"},{"type":"INSERT","lineNumber":84,"content":"private fun getNavigationAction(instruction: String): NavigationAction {"},{"type":"INSERT","lineNumber":85,"content":"    val lowerInstruction = instruction.lowercase()"},{"type":"INSERT","lineNumber":86,"content":"    return when {"},{"type":"INSERT","lineNumber":87,"content":"        lowerInstruction.contains(\"rechts\") || lowerInstruction.contains(\"right\") -> NavigationAction.TURN_RIGHT"},{"type":"INSERT","lineNumber":88,"content":"        lowerInstruction.contains(\"links\") || lowerInstruction.contains(\"left\") -> NavigationAction.TURN_LEFT"},{"type":"INSERT","lineNumber":89,"content":"        lowerInstruction.contains(\"tür\") || lowerInstruction.contains(\"door\") || "},{"type":"INSERT","lineNumber":90,"content":"        lowerInstruction.contains(\"eingang\") || lowerInstruction.contains(\"entrance\") ||"},{"type":"INSERT","lineNumber":91,"content":"        lowerInstruction.contains(\"durch\") || lowerInstruction.contains(\"through\") -> NavigationAction.THROUGH_DOOR"},{"type":"INSERT","lineNumber":92,"content":"        else -> NavigationAction.STRAIGHT"},{"type":"INSERT","lineNumber":93,"content":"    }"},{"type":"INSERT","lineNumber":94,"content":"}"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"/**"},{"type":"INSERT","lineNumber":97,"content":" * Gibt das passende Icon für die Navigationsaktion zurück"},{"type":"INSERT","lineNumber":98,"content":" */"},{"type":"INSERT","lineNumber":99,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":100,"content":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"INSERT","lineNumber":101,"content":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"INSERT","lineNumber":102,"content":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"INSERT","lineNumber":103,"content":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"INSERT","lineNumber":104,"content":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":105,"content":"}"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"/**"},{"type":"INSERT","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":109,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":110,"content":" */"},{"type":"DELETE","lineNumber":83,"oldContent":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":84,"oldContent":"    ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":86,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":88,"oldContent":"}"},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"/**"},{"type":"DELETE","lineNumber":92,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":94,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":161,"content":"                Icon("},{"type":"INSERT","lineNumber":170,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":144,"oldContent":"                Icon("},{"type":"INSERT","lineNumber":178,"content":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":153,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":182,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":161,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":166,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":205,"content":"/**"},{"type":"DELETE","lineNumber":186,"oldContent":"/**"},{"type":"INSERT","lineNumber":219,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":220,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":221,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":222,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":223,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":224,"content":"        } else {"},{"type":"INSERT","lineNumber":225,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":197,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":199,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":201,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":203,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":205,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":206,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":208,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":236,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":237,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":218,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":219,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"}]},{"timestamp":1754330153813,"changes":[{"type":"DELETE","lineNumber":40,"oldContent":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":41,"content":"    UNKNOWN         // Unbekannte Aktion"},{"type":"INSERT","lineNumber":42,"content":"}"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"/**"},{"type":"INSERT","lineNumber":45,"content":" * Helper functions für ARScanStatus enum"},{"type":"DELETE","lineNumber":44,"oldContent":"    UNKNOWN         // Unbekannte Aktion"},{"type":"DELETE","lineNumber":48,"oldContent":"}"},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"/**"},{"type":"MODIFY","lineNumber":55,"content":"    ARScanStatus.TRACKING -> R.drawable.navigation21","oldContent":"    ARScanStatus.TRACKING -> R.drawable.navigation21"},{"type":"DELETE","lineNumber":77,"oldContent":" */"},{"type":"DELETE","lineNumber":79,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":81,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":83,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":85,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":87,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":89,"oldContent":") {"},{"type":"INSERT","lineNumber":83,"content":" */"},{"type":"DELETE","lineNumber":92,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":95,"oldContent":"    "},{"type":"DELETE","lineNumber":99,"oldContent":"    // Animation für das Ein-/Ausblenden"},{"type":"DELETE","lineNumber":103,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":106,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":108,"oldContent":"        animationSpec = tween(durationMillis = 300),"},{"type":"DELETE","lineNumber":110,"oldContent":"        label = \"island_alpha\""},{"type":"DELETE","lineNumber":112,"oldContent":"    )"},{"type":"DELETE","lineNumber":114,"oldContent":"    "},{"type":"DELETE","lineNumber":116,"oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"DELETE","lineNumber":118,"oldContent":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"DELETE","lineNumber":120,"oldContent":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"DELETE","lineNumber":122,"oldContent":"        initialValue = 0.7f,"},{"type":"DELETE","lineNumber":124,"oldContent":"        targetValue = 1f,"},{"type":"DELETE","lineNumber":126,"oldContent":"        animationSpec = infiniteRepeatable("},{"type":"DELETE","lineNumber":128,"oldContent":"            animation = tween(1000, easing = EaseInOut),"},{"type":"DELETE","lineNumber":130,"oldContent":"            repeatMode = RepeatMode.Reverse"},{"type":"DELETE","lineNumber":132,"oldContent":"        ),"},{"type":"DELETE","lineNumber":134,"oldContent":"        label = \"pulse_alpha\""},{"type":"INSERT","lineNumber":111,"content":"@Composable"},{"type":"INSERT","lineNumber":112,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":113,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":114,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":115,"content":"    isVisible: Boolean = true,"},{"type":"INSERT","lineNumber":116,"content":"    currentInstruction: String? = null"},{"type":"INSERT","lineNumber":117,"content":") {"},{"type":"INSERT","lineNumber":118,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":119,"content":"    "},{"type":"INSERT","lineNumber":120,"content":"    // Animation für das Ein-/Ausblenden"},{"type":"INSERT","lineNumber":121,"content":"    val alpha by animateFloatAsState("},{"type":"INSERT","lineNumber":122,"content":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"INSERT","lineNumber":123,"content":"        animationSpec = tween(durationMillis = 300),"},{"type":"INSERT","lineNumber":124,"content":"        label = \"island_alpha\""},{"type":"INSERT","lineNumber":127,"content":"    // Pulsierender Effekt für bestimmte Status"},{"type":"INSERT","lineNumber":128,"content":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"INSERT","lineNumber":129,"content":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"INSERT","lineNumber":130,"content":"        initialValue = 0.7f,"},{"type":"INSERT","lineNumber":131,"content":"        targetValue = 1f,"},{"type":"INSERT","lineNumber":132,"content":"        animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":133,"content":"            animation = tween(1000, easing = EaseInOut),"},{"type":"INSERT","lineNumber":134,"content":"            repeatMode = RepeatMode.Reverse"},{"type":"INSERT","lineNumber":135,"content":"        ),"},{"type":"INSERT","lineNumber":136,"content":"        label = \"pulse_alpha\""},{"type":"INSERT","lineNumber":137,"content":"    )"},{"type":"INSERT","lineNumber":138,"content":"    "},{"type":"INSERT","lineNumber":162,"content":"                Icon("},{"type":"INSERT","lineNumber":171,"content":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":179,"content":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":183,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":185,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":193,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":202,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":206,"content":"/**"},{"type":"DELETE","lineNumber":207,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":220,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":221,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":222,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":223,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":224,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":225,"content":"        } else {"},{"type":"INSERT","lineNumber":226,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":226,"oldContent":"/**"},{"type":"INSERT","lineNumber":237,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":238,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":237,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":238,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":239,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":240,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":241,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":242,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":243,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":244,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":245,"oldContent":"        } else {"}]},{"timestamp":1754330161040,"changes":[{"type":"MODIFY","lineNumber":41,"content":"    UNKNOWN         // Unbekannte Aktion","oldContent":"    UNKNOWN         // Unbekannte Aktion"},{"type":"DELETE","lineNumber":43,"oldContent":" */"},{"type":"DELETE","lineNumber":45,"oldContent":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":46,"content":" */"},{"type":"INSERT","lineNumber":47,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":55,"oldContent":"    ARScanStatus.TRACKING -> R.drawable.navigation21"},{"type":"DELETE","lineNumber":80,"oldContent":" */"},{"type":"INSERT","lineNumber":83,"content":" */"},{"type":"DELETE","lineNumber":98,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":99,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":100,"content":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"INSERT","lineNumber":101,"content":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"INSERT","lineNumber":102,"content":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"INSERT","lineNumber":103,"content":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"INSERT","lineNumber":104,"content":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":105,"content":"}"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"/**"},{"type":"INSERT","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":109,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":110,"content":" */"},{"type":"INSERT","lineNumber":111,"content":"@Composable"},{"type":"DELETE","lineNumber":102,"oldContent":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":105,"oldContent":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"DELETE","lineNumber":108,"oldContent":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"DELETE","lineNumber":111,"oldContent":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"DELETE","lineNumber":114,"oldContent":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"DELETE","lineNumber":117,"oldContent":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"DELETE","lineNumber":119,"oldContent":"}"},{"type":"INSERT","lineNumber":125,"content":"    )"},{"type":"INSERT","lineNumber":126,"content":"    "},{"type":"DELETE","lineNumber":121,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"/**"},{"type":"DELETE","lineNumber":127,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":130,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":133,"oldContent":" */"},{"type":"DELETE","lineNumber":136,"oldContent":"    )"},{"type":"DELETE","lineNumber":138,"oldContent":"    "},{"type":"MODIFY","lineNumber":160,"content":"                // Status Icon mit Animation - verwende Navigationsicon wenn verfügbar","oldContent":"                // Status Icon mit Animation"},{"type":"MODIFY","lineNumber":162,"content":"                val iconResource = if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {","oldContent":"                    painter = painterResource(id = scanStatus.getIconResource()),"},{"type":"INSERT","lineNumber":163,"content":"                    getNavigationAction(currentInstruction).getIconResource()"},{"type":"INSERT","lineNumber":164,"content":"                } else {"},{"type":"INSERT","lineNumber":165,"content":"                    scanStatus.getIconResource()"},{"type":"INSERT","lineNumber":166,"content":"                }"},{"type":"INSERT","lineNumber":167,"content":"                "},{"type":"INSERT","lineNumber":169,"content":"                    painter = painterResource(id = iconResource),"},{"type":"INSERT","lineNumber":177,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":173,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":185,"content":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":182,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":189,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":187,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":212,"content":"/**"},{"type":"DELETE","lineNumber":208,"oldContent":"/**"},{"type":"INSERT","lineNumber":226,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":227,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":228,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":229,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":230,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":231,"content":"        } else {"},{"type":"INSERT","lineNumber":232,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":222,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":224,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":226,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":228,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":230,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":232,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":234,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":243,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":244,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":245,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":246,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754330170264,"changes":[{"type":"INSERT","lineNumber":40,"content":"    THROUGH_DOOR,   // Durch Tür gehen"},{"type":"DELETE","lineNumber":41,"oldContent":"    UNKNOWN         // Unbekannte Aktion"},{"type":"DELETE","lineNumber":44,"oldContent":" */"},{"type":"MODIFY","lineNumber":46,"content":" */","oldContent":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":47,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"MODIFY","lineNumber":83,"content":" */","oldContent":" */"},{"type":"MODIFY","lineNumber":99,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {","oldContent":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":101,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":103,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":106,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":108,"oldContent":"    isVisible: Boolean = true,"},{"type":"DELETE","lineNumber":111,"oldContent":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":113,"oldContent":") {"},{"type":"DELETE","lineNumber":116,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":118,"oldContent":"    "},{"type":"INSERT","lineNumber":112,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":113,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":114,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":115,"content":"    isVisible: Boolean = true,"},{"type":"INSERT","lineNumber":116,"content":"    currentInstruction: String? = null"},{"type":"INSERT","lineNumber":117,"content":") {"},{"type":"INSERT","lineNumber":118,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":119,"content":"    "},{"type":"INSERT","lineNumber":125,"content":"    )"},{"type":"INSERT","lineNumber":126,"content":"    "},{"type":"DELETE","lineNumber":128,"oldContent":"    )"},{"type":"DELETE","lineNumber":130,"oldContent":"    "},{"type":"DELETE","lineNumber":164,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":166,"oldContent":"                    contentDescription = null,"},{"type":"DELETE","lineNumber":168,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":170,"oldContent":"                    modifier = Modifier.size(20.dp)"},{"type":"INSERT","lineNumber":168,"content":"                Icon("},{"type":"INSERT","lineNumber":169,"content":"                    painter = painterResource(id = iconResource),"},{"type":"INSERT","lineNumber":170,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":171,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":172,"content":"                    modifier = Modifier.size(20.dp)"},{"type":"DELETE","lineNumber":174,"oldContent":"                    painter = painterResource(id = iconResource),"},{"type":"MODIFY","lineNumber":175,"content":"                // Status Text - zeige Navigationsanweisung ohne Distanz wenn verfügbar","oldContent":"                // Status Text"},{"type":"INSERT","lineNumber":176,"content":"                val displayText = if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {"},{"type":"INSERT","lineNumber":177,"content":"                    // Entferne Distanzangaben aus der Anweisung"},{"type":"INSERT","lineNumber":178,"content":"                    currentInstruction"},{"type":"INSERT","lineNumber":179,"content":"                        .replace(Regex(\"\\\\d+\\\\s*m\"), \"\") // Entferne \"123m\" oder \"123 m\""},{"type":"INSERT","lineNumber":180,"content":"                        .replace(Regex(\"\\\\d+\\\\s*meter\"), \"\") // Entferne \"123 meter\""},{"type":"INSERT","lineNumber":181,"content":"                        .replace(Regex(\"\\\\d+\\\\s*Meter\"), \"\") // Entferne \"123 Meter\""},{"type":"INSERT","lineNumber":182,"content":"                        .replace(Regex(\"\\\\s+\"), \" \") // Mehrfache Leerzeichen durch einfache ersetzen"},{"type":"INSERT","lineNumber":183,"content":"                        .trim()"},{"type":"INSERT","lineNumber":184,"content":"                } else {"},{"type":"INSERT","lineNumber":185,"content":"                    scanStatus.getMessage()"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"                "},{"type":"INSERT","lineNumber":189,"content":"                    text = displayText,"},{"type":"DELETE","lineNumber":182,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":197,"content":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":201,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":190,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":194,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":224,"content":"/**"},{"type":"DELETE","lineNumber":217,"oldContent":"/**"},{"type":"DELETE","lineNumber":226,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":227,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":228,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":229,"oldContent":"            }"},{"type":"DELETE","lineNumber":232,"oldContent":"        }"},{"type":"DELETE","lineNumber":235,"oldContent":"    }"},{"type":"DELETE","lineNumber":238,"oldContent":"    "},{"type":"INSERT","lineNumber":245,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":246,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":247,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":248,"content":"            }"},{"type":"INSERT","lineNumber":249,"content":"        }"},{"type":"INSERT","lineNumber":250,"content":"    }"},{"type":"INSERT","lineNumber":251,"content":"    "},{"type":"INSERT","lineNumber":255,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":256,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":249,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":251,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754566595001,"changes":[{"type":"INSERT","lineNumber":45,"content":" * Helper functions für ARScanStatus enum"},{"type":"DELETE","lineNumber":47,"oldContent":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":82,"content":" * Bestimmt die Navigationsaktion basierend auf der Anweisung"},{"type":"DELETE","lineNumber":83,"oldContent":" */"},{"type":"INSERT","lineNumber":98,"content":" */"},{"type":"DELETE","lineNumber":99,"oldContent":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":107,"oldContent":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":109,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":110,"content":" */"},{"type":"INSERT","lineNumber":111,"content":"@Composable"},{"type":"INSERT","lineNumber":112,"content":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":111,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":113,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":116,"oldContent":" */"},{"type":"DELETE","lineNumber":119,"oldContent":"@Composable"},{"type":"MODIFY","lineNumber":127,"content":"    // Pulsierender Effekt für bestimmte Status","oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"INSERT","lineNumber":166,"content":"                }"},{"type":"INSERT","lineNumber":167,"content":"                "},{"type":"DELETE","lineNumber":168,"oldContent":"                }"},{"type":"DELETE","lineNumber":171,"oldContent":"                "},{"type":"DELETE","lineNumber":177,"oldContent":"                Text("},{"type":"DELETE","lineNumber":179,"oldContent":"                    color = Color.White.copy(alpha = 0.9f),"},{"type":"DELETE","lineNumber":181,"oldContent":"                    fontSize = 14.sp,"},{"type":"DELETE","lineNumber":183,"oldContent":"                    fontWeight = FontWeight.Medium,"},{"type":"DELETE","lineNumber":185,"oldContent":"                    textAlign = TextAlign.Center,"},{"type":"DELETE","lineNumber":187,"oldContent":"                    maxLines = 1"},{"type":"DELETE","lineNumber":190,"oldContent":"                )"},{"type":"DELETE","lineNumber":192,"oldContent":"                "},{"type":"DELETE","lineNumber":194,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":196,"oldContent":"                    CircularProgressIndicator("},{"type":"INSERT","lineNumber":188,"content":"                Text("},{"type":"INSERT","lineNumber":189,"content":"                    text = displayText,"},{"type":"INSERT","lineNumber":190,"content":"                    color = Color.White.copy(alpha = 0.9f),"},{"type":"INSERT","lineNumber":191,"content":"                    fontSize = 14.sp,"},{"type":"INSERT","lineNumber":192,"content":"                    fontWeight = FontWeight.Medium,"},{"type":"INSERT","lineNumber":193,"content":"                    textAlign = TextAlign.Center,"},{"type":"INSERT","lineNumber":194,"content":"                    maxLines = 1"},{"type":"INSERT","lineNumber":195,"content":"                )"},{"type":"INSERT","lineNumber":196,"content":"                "},{"type":"INSERT","lineNumber":197,"content":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":198,"content":"                if (scanStatus.showProgress()) {"},{"type":"INSERT","lineNumber":199,"content":"                    CircularProgressIndicator("},{"type":"INSERT","lineNumber":201,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":200,"oldContent":"                    text = displayText,"},{"type":"DELETE","lineNumber":207,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":212,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":224,"content":"/**"},{"type":"DELETE","lineNumber":235,"oldContent":"/**"},{"type":"INSERT","lineNumber":240,"content":"        android.util.Log.d(\"ARInfoIsland\", \"=== AR STATUS DEBUG ===\")"},{"type":"INSERT","lineNumber":241,"content":"        android.util.Log.d(\"ARInfoIsland\", \"isTracking changed to: $isTracking\")"},{"type":"INSERT","lineNumber":242,"content":"        android.util.Log.d(\"ARInfoIsland\", \"landmarkCount: $landmarkCount\")"},{"type":"INSERT","lineNumber":243,"content":"        android.util.Log.d(\"ARInfoIsland\", \"bestConfidence: $bestConfidence\")"},{"type":"INSERT","lineNumber":244,"content":"        android.util.Log.d(\"ARInfoIsland\", \"isInitialized: $isInitialized\")"},{"type":"INSERT","lineNumber":245,"content":"        "},{"type":"INSERT","lineNumber":247,"content":"            android.util.Log.d(\"ARInfoIsland\", \"Tracking active - setting stable state to true\")"},{"type":"INSERT","lineNumber":251,"content":"            android.util.Log.w(\"ARInfoIsland\", \"Tracking lost - waiting 5 seconds before showing 'Landmark verloren'\")"},{"type":"INSERT","lineNumber":253,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":254,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":255,"content":"                android.util.Log.w(\"ARInfoIsland\", \"5 seconds passed without tracking - setting stable state to false\")"},{"type":"INSERT","lineNumber":256,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":257,"content":"            } else {"},{"type":"INSERT","lineNumber":258,"content":"                android.util.Log.d(\"ARInfoIsland\", \"Tracking recovered within 5 seconds - keeping stable state\")"},{"type":"INSERT","lineNumber":259,"content":"            }"},{"type":"INSERT","lineNumber":260,"content":"        }"},{"type":"INSERT","lineNumber":261,"content":"        android.util.Log.d(\"ARInfoIsland\", \"=======================\")"},{"type":"INSERT","lineNumber":262,"content":"    }"},{"type":"INSERT","lineNumber":263,"content":"    "},{"type":"INSERT","lineNumber":267,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":268,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":250,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":252,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":254,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":256,"oldContent":"            }"},{"type":"DELETE","lineNumber":258,"oldContent":"        }"},{"type":"DELETE","lineNumber":259,"oldContent":"    }"},{"type":"DELETE","lineNumber":261,"oldContent":"    "},{"type":"DELETE","lineNumber":263,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":264,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"}]},{"timestamp":1754566604510,"changes":[{"type":"MODIFY","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style","oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":110,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":112,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":113,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":114,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":126,"content":"    "},{"type":"DELETE","lineNumber":127,"oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"MODIFY","lineNumber":168,"content":"                Icon(","oldContent":"                Icon("},{"type":"DELETE","lineNumber":182,"oldContent":"                Text("},{"type":"MODIFY","lineNumber":184,"content":"                } else {","oldContent":"                    text = displayText,"},{"type":"INSERT","lineNumber":185,"content":"                    scanStatus.getMessage()"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"                "},{"type":"INSERT","lineNumber":188,"content":"                Text("},{"type":"INSERT","lineNumber":189,"content":"                    text = displayText,"},{"type":"DELETE","lineNumber":188,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":191,"oldContent":"                    scanStatus.getMessage()"},{"type":"DELETE","lineNumber":194,"oldContent":"                }"},{"type":"DELETE","lineNumber":197,"oldContent":"                "},{"type":"DELETE","lineNumber":199,"oldContent":"                        modifier = Modifier.size(16.dp),"},{"type":"DELETE","lineNumber":201,"oldContent":"                        strokeWidth = 2.dp"},{"type":"INSERT","lineNumber":200,"content":"                        modifier = Modifier.size(16.dp),"},{"type":"INSERT","lineNumber":202,"content":"                        strokeWidth = 2.dp"},{"type":"DELETE","lineNumber":241,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":243,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":245,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":247,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":249,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":251,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":252,"oldContent":"        currentStatus = when {"},{"type":"INSERT","lineNumber":246,"content":"        if (isTracking) {"},{"type":"DELETE","lineNumber":254,"oldContent":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"DELETE","lineNumber":255,"oldContent":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"DELETE","lineNumber":256,"oldContent":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":248,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":249,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":250,"content":"        } else {"},{"type":"DELETE","lineNumber":258,"oldContent":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":252,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":260,"oldContent":"        }"},{"type":"DELETE","lineNumber":263,"oldContent":"    }"},{"type":"DELETE","lineNumber":266,"oldContent":"    "},{"type":"DELETE","lineNumber":270,"oldContent":"    return currentStatus"},{"type":"DELETE","lineNumber":273,"oldContent":"}"},{"type":"DELETE","lineNumber":275,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":264,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"INSERT","lineNumber":265,"content":"        val newStatus = when {"},{"type":"INSERT","lineNumber":266,"content":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"INSERT","lineNumber":268,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":269,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":270,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":271,"content":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":272,"content":"        }"},{"type":"INSERT","lineNumber":273,"content":"        "},{"type":"INSERT","lineNumber":274,"content":"        if (newStatus != currentStatus) {"},{"type":"INSERT","lineNumber":275,"content":"            android.util.Log.i(\"ARInfoIsland\", \"=== STATUS CHANGE ===\")"},{"type":"INSERT","lineNumber":276,"content":"            android.util.Log.i(\"ARInfoIsland\", \"Old status: ${currentStatus.getMessage()}\")"},{"type":"INSERT","lineNumber":277,"content":"            android.util.Log.i(\"ARInfoIsland\", \"New status: ${newStatus.getMessage()}\")"},{"type":"INSERT","lineNumber":278,"content":"            android.util.Log.i(\"ARInfoIsland\", \"Conditions:\")"},{"type":"INSERT","lineNumber":279,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- isInitialized: $isInitialized\")"},{"type":"INSERT","lineNumber":280,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- stableTrackingState: $stableTrackingState\")"},{"type":"INSERT","lineNumber":281,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- landmarkCount: $landmarkCount\")"},{"type":"INSERT","lineNumber":282,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- bestConfidence: $bestConfidence\")"},{"type":"INSERT","lineNumber":283,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- isTracking: $isTracking\")"},{"type":"INSERT","lineNumber":284,"content":"            android.util.Log.i(\"ARInfoIsland\", \"====================\")"},{"type":"INSERT","lineNumber":285,"content":"        }"},{"type":"INSERT","lineNumber":286,"content":"        "},{"type":"INSERT","lineNumber":287,"content":"        currentStatus = newStatus"},{"type":"INSERT","lineNumber":288,"content":"    }"},{"type":"INSERT","lineNumber":289,"content":"    "},{"type":"INSERT","lineNumber":290,"content":"    return currentStatus"},{"type":"INSERT","lineNumber":291,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/ARTrackingSystem.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/ARTrackingSystem.kt","baseContent":"package com.example.arwalking\n\n// Diese Datei wurde entfernt - ARTrackingSystem ist jetzt in FeatureMatchingEngine.kt definiert","baseTimestamp":1754321349663,"deltas":[{"timestamp":1754329790154,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"package com.example.arwalking"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/DrawerList.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/DrawerList.kt","baseContent":"package components\n\nimport androidx.compose.animation.core.animateDpAsState\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectDragGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.arwalking.R\n\n// Data class for Navigation Steps\ndata class NavigationStepData(val text: String, val icon: Int)\n\n@Composable\nfun NavigationDrawer(\n    navigationSteps: List<NavigationStepData>,\n    destinationLabel: String,\n    onClose: () -> Unit,\n    modifier: Modifier = Modifier,\n    availableZoomRatios: List<Float> = listOf(0.7f, 1.0f, 2.0f),\n    currentZoomRatio: Float = 1.0f,\n    onZoomChange: (Float) -> Unit = {},\n    onShowUploadDialog: () -> Unit = {}\n) {\n    var isMaximized by remember { mutableStateOf(false) }\n    var offsetY by remember { mutableStateOf(0f) }\n    var isDragging by remember { mutableStateOf(false) }\n\n    // Smooth animation for height changes (Google Maps-like behavior)\n    val containerHeight by animateDpAsState(\n        targetValue = if (isMaximized) 750.dp else 280.dp, // More space: 750dp maximized, 280dp minimized\n        animationSpec = spring(\n            dampingRatio = 0.8f,\n            stiffness = 500f\n        ),\n        label = \"ContainerHeight\"\n    )\n\n    // Subtle zoom effect during drag\n    val scale by animateFloatAsState(\n        targetValue = if (isDragging) 1.01f else 1f,\n        animationSpec = tween(durationMillis = 100),\n        label = \"Scale\"\n    )\n\n\n    // Main container with drag gestures\n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(containerHeight)\n            .graphicsLayer {\n                scaleX = scale\n                scaleY = scale\n            }\n            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))\n            .pointerInput(Unit) {\n                detectDragGestures(\n                    onDragStart = {\n                        isDragging = true\n                    },\n                    onDragEnd = {\n                        isDragging = false\n                        // Snap logic based on drag distance\n                        when {\n                            offsetY < -50 -> isMaximized = true\n                            offsetY > 50 -> isMaximized = false\n                        }\n                        offsetY = 0f\n                    },\n                    onDrag = { _, dragAmount ->\n                        offsetY += dragAmount.y\n\n                        // Immediate response for smooth UX\n                        when {\n                            offsetY < -100 -> {\n                                isMaximized = true\n                                offsetY = 0f\n                            }\n                            offsetY > 100 -> {\n                                isMaximized = false\n                                offsetY = 0f\n                            }\n                        }\n                    }\n                )\n            }\n    ) {\n        // Background\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(\n                    brush = Brush.verticalGradient(\n                        colors = listOf(\n                            Color.Black.copy(alpha = 0.8f),\n                            Color.Black.copy(alpha = 0.5f),\n                            Color.White.copy(alpha = 0.55f),\n                        )\n                    )\n                )\n                .border(\n                    width = 1.dp,\n                    color = Color.White.copy(alpha = 0.15f),\n                    shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp)\n                )\n        )\n\n        // Drag handle bar\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .offset(y = 12.dp)\n                .width(40.dp)\n                .height(4.dp)\n                .clip(RoundedCornerShape(2.dp))\n                .background(Color.White.copy(alpha = 0.8f))\n        )\n\n        // Header area with optimized UX layout\n        // Logo positioned on the left (with hidden upload function)\n        var longPressStartTime by remember { mutableStateOf(0L) }\n        var isLongPressing by remember { mutableStateOf(false) }\n        \n        Box(\n            modifier = Modifier\n                .align(Alignment.TopStart)\n                .offset(x = 20.dp, y = 7.dp)\n                .size(85.dp)\n                .pointerInput(Unit) {\n                    detectTapGestures(\n                        onPress = {\n                            longPressStartTime = System.currentTimeMillis()\n                            isLongPressing = true\n                            \n                            // Warte 5 Sekunden\n                            val pressJob = launch {\n                                delay(5000)\n                                if (isLongPressing) {\n                                    // 5 Sekunden erreicht - Upload-Dialog anzeigen\n                                    onShowUploadDialog()\n                                }\n                            }\n                            \n                            // Warte auf Release\n                            tryAwaitRelease()\n                            isLongPressing = false\n                            pressJob.cancel()\n                        }\n                    )\n                },\n            contentAlignment = Alignment.Center\n        ) {\n            // Logo mit visueller Rückmeldung bei Long Press\n            Image(\n                painter = painterResource(id = R.drawable.logo),\n                contentDescription = \"Logo\",\n                modifier = Modifier\n                    .size(90.dp)\n                    .graphicsLayer {\n                        alpha = if (isLongPressing) 0.7f else 1.0f\n                        scaleX = if (isLongPressing) 0.95f else 1.0f\n                        scaleY = if (isLongPressing) 0.95f else 1.0f\n                    }\n            )\n            \n            // Progress-Indikator für Long Press (nur sichtbar während Press)\n            if (isLongPressing) {\n                var progress by remember { mutableStateOf(0f) }\n                \n                LaunchedEffect(isLongPressing) {\n                    val startTime = System.currentTimeMillis()\n                    while (isLongPressing && progress < 1f) {\n                        val elapsed = System.currentTimeMillis() - startTime\n                        progress = (elapsed / 5000f).coerceAtMost(1f)\n                        delay(16) // ~60fps\n                    }\n                }\n                \n                CircularProgressIndicator(\n                    progress = progress,\n                    modifier = Modifier.size(95.dp),\n                    color = Color.White.copy(alpha = 0.8f),\n                    strokeWidth = 2.dp\n                )\n            }\n        }\n\n        // Zoom Level Switcher (Snapchat-style) with round elements - centered\n        val currentZoomIndex = availableZoomRatios.indexOfFirst { it == currentZoomRatio }.takeIf { it >= 0 } ?: 1\n        val zoomLabels = availableZoomRatios.map { ratio ->\n            when {\n                ratio < 1.0f -> {\n                    val formatted = if (ratio == 0.5f) \"0.5x\" else String.format(\"%.1fx\", ratio)\n                    formatted\n                }\n                ratio == 1.0f -> \"1x\"\n                else -> \"${ratio.toInt()}x\" // e.g., \"2x\"\n            }\n        }\n        \n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .offset(y = 25.dp)\n                .clip(RoundedCornerShape(20.dp))\n                .background(Color.Black.copy(alpha = 0.6f))\n                .border(\n                    width = 1.dp,\n                    color = Color.White.copy(alpha = 0.2f),\n                    shape = RoundedCornerShape(20.dp)\n                )\n                .padding(horizontal = 6.dp, vertical = 4.dp)\n        ) {\n            Row(horizontalArrangement = Arrangement.spacedBy(6.dp)) {\n                availableZoomRatios.forEachIndexed { index, zoomRatio ->\n                    Box(\n                        modifier = Modifier\n                            .size(38.dp) // Make elements perfectly round\n                            .clip(CircleShape) // Round zoom switcher elements  \n                            .background(\n                                if (currentZoomIndex == index) \n                                    Color.White.copy(alpha = 0.9f) \n                                else \n                                    Color.Transparent\n                            )\n                            .clickable { \n                                onZoomChange(zoomRatio)\n                            },\n                        contentAlignment = Alignment.Center\n                    ) {\n                        Text(\n                            text = zoomLabels[index],\n                            color = if (currentZoomIndex == index) \n                                Color.Black \n                            else \n                                Color.White.copy(alpha = 0.8f),\n                            style = TextStyle(\n                                fontSize = 11.sp,\n                                fontWeight = if (currentZoomIndex == index) \n                                    FontWeight.SemiBold \n                                else \n                                    FontWeight.Normal\n                            )\n                        )\n                    }\n                }\n            }\n        }\n\n        // Maximize/Minimize button positioned on the right\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopEnd)\n                .offset(x = (-20).dp, y = 25.dp)\n                .size(38.dp)\n                .clip(CircleShape)\n                .background(Color.Black.copy(alpha = 0.4f))\n                .border(\n                    width = 1.dp,\n                    color = Color.White.copy(alpha = 0.2f),\n                    shape = CircleShape\n                )\n                .clickable { isMaximized = !isMaximized },\n            contentAlignment = Alignment.Center\n        ) {\n            Icon(\n                painter = painterResource(\n                    id = if (isMaximized) R.drawable.minimize_2 else R.drawable.maximize_2_1\n                ),\n                contentDescription = if (isMaximized) \"Minimize\" else \"Maximize\",\n                tint = Color.White,\n                modifier = Modifier.size(16.dp)\n            )\n        }\n\n        // Content area\n        if (isMaximized) {\n            // Expanded view - show all steps\n            Column(\n                verticalArrangement = Arrangement.spacedBy(12.dp),\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .offset(y = 95.dp) // Adjusted for new header layout\n                    .fillMaxWidth()\n                    .padding(horizontal = 20.dp)\n                    .verticalScroll(rememberScrollState())\n                    .padding(bottom = 120.dp) // Increased bottom padding for larger drawer\n            ) {\n                // Current step (highlighted)\n                if (navigationSteps.isNotEmpty()) {\n                    StepCard(\n                        step = navigationSteps.first(),\n                        isActive = true,\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n\n                // Remaining steps\n                navigationSteps.drop(1).forEach { step ->\n                    StepCard(\n                        step = step,\n                        isActive = false,\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n\n                // Destination card\n                DestinationCard(\n                    destinationLabel = destinationLabel,\n                    modifier = Modifier.fillMaxWidth()\n                )\n            }\n        } else {\n            // Collapsed view - show current step and next steps\n            Column(\n                verticalArrangement = Arrangement.spacedBy(8.dp),\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .offset(y = 95.dp) // Adjusted for new header layout consistency\n                    .fillMaxWidth()\n                    .padding(horizontal = 20.dp)\n            ) {\n                // Current step (full width)\n                if (navigationSteps.isNotEmpty()) {\n                    StepCard(\n                        step = navigationSteps.first(),\n                        isActive = true,\n                        isCompact = true,\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n\n                // Next steps (narrower width)\n                navigationSteps.drop(1).take(2).forEach { step -> // Show max 2 next steps\n                    Box(\n                        modifier = Modifier.fillMaxWidth(),\n                        contentAlignment = Alignment.Center\n                    ) {\n                        StepCard(\n                            step = step,\n                            isActive = false,\n                            isCompact = true,\n                            modifier = Modifier.fillMaxWidth(0.96f)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun StepCard(\n    step: NavigationStepData,\n    isActive: Boolean,\n    isCompact: Boolean = false,\n    modifier: Modifier = Modifier\n) {\n    Box(\n        modifier = modifier\n            .height(if (isCompact) 64.dp else 72.dp)\n            .clip(RoundedCornerShape(16.dp))\n            .background(\n                if (isActive) {\n                    Color(0xFF94AC0B)\n                } else {\n                    Color.Black.copy(alpha = 0.3f)\n                }\n            )\n            .border(\n                width = 1.dp,\n                color = if (isActive) Color.Transparent else Color.White.copy(alpha = 0.15f),\n                shape = RoundedCornerShape(16.dp)\n            )\n            .padding(horizontal = 16.dp, vertical = 12.dp)\n    ) {\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Icon container\n            Box(\n                modifier = Modifier\n                    .size(if (isCompact) 36.dp else 44.dp)\n                    .clip(CircleShape)\n                    .background(\n                        if (isActive)\n                            Color.White.copy(alpha = 0.2f)\n                        else\n                            Color.White.copy(alpha = 0.1f)\n                    ),\n                contentAlignment = Alignment.Center\n            ) {\n                Image(\n                    painter = painterResource(id = step.icon),\n                    contentDescription = step.text,\n                    modifier = Modifier.size(if (isCompact) 20.dp else 24.dp),\n                    colorFilter = ColorFilter.tint(Color.White)\n                )\n            }\n\n            // Step text\n            Text(\n                text = step.text,\n                color = Color.White,\n                style = TextStyle(\n                    fontSize = if (isCompact) 15.sp else 17.sp,\n                    fontWeight = if (isActive) FontWeight.Medium else FontWeight.Normal\n                ),\n                modifier = Modifier.weight(1f)\n            )\n        }\n    }\n}\n\n@Composable\nfun DestinationCard(\n    destinationLabel: String,\n    modifier: Modifier = Modifier\n) {\n    Box(\n        modifier = modifier\n            .height(72.dp)\n            .clip(RoundedCornerShape(16.dp))\n            .background(Color.White.copy(alpha = 0.95f))\n            .border(\n                width = 1.dp,\n                color = Color.Black.copy(alpha = 0.1f),\n                shape = RoundedCornerShape(16.dp)\n            )\n            .padding(horizontal = 16.dp, vertical = 12.dp)\n    ) {\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Destination icon\n            Box(\n                modifier = Modifier\n                    .size(44.dp)\n                    .clip(CircleShape)\n                    .background(Color(0xFF94AC0B).copy(alpha = 0.15f)),\n                contentAlignment = Alignment.Center\n            ) {\n                Image(\n                    painter = painterResource(id = R.drawable.mappin1),\n                    contentDescription = \"Destination\",\n                    modifier = Modifier.size(24.dp),\n                    colorFilter = ColorFilter.tint(Color(0xFF94AC0B))\n                )\n            }\n\n            // Destination text\n            Text(\n                text = destinationLabel,\n                color = Color.Black,\n                style = TextStyle(\n                    fontSize = 17.sp,\n                    fontWeight = FontWeight.Medium\n                ),\n                modifier = Modifier.weight(1f)\n            )\n        }\n    }\n}\n\n","baseTimestamp":1754054279724,"deltas":[{"timestamp":1754054307220,"changes":[{"type":"INSERT","lineNumber":11,"content":"import androidx.compose.foundation.gestures.detectTapGestures"},{"type":"INSERT","lineNumber":12,"content":"import androidx.compose.material3.CircularProgressIndicator"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.runtime.LaunchedEffect"},{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.ui.graphics.graphicsLayer"},{"type":"INSERT","lineNumber":15,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.launch"}]},{"timestamp":1754232068035,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.compose.foundation.layout.Arrangement"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.foundation.layout.Column"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.foundation.layout.Row"},{"type":"DELETE","lineNumber":20,"oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.foundation.layout.Arrangement"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.foundation.layout.Column"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.foundation.layout.Row"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":38,"content":"import androidx.compose.runtime.rememberCoroutineScope"},{"type":"INSERT","lineNumber":46,"content":"import com.example.arwalking.ui.theme.GradientUtils"},{"type":"DELETE","lineNumber":67,"oldContent":"    onZoomChange: (Float) -> Unit = {},"},{"type":"MODIFY","lineNumber":69,"content":"    onZoomChange: (Float) -> Unit = {}","oldContent":"    onShowUploadDialog: () -> Unit = {}"},{"type":"INSERT","lineNumber":74,"content":"    val coroutineScope = rememberCoroutineScope()"},{"type":"DELETE","lineNumber":139,"oldContent":"                    brush = Brush.verticalGradient("},{"type":"INSERT","lineNumber":141,"content":"                    brush = GradientUtils.safeVerticalGradient("},{"type":"DELETE","lineNumber":166,"oldContent":"        // Logo positioned on the left (with hidden upload function)"},{"type":"DELETE","lineNumber":167,"oldContent":"        var longPressStartTime by remember { mutableStateOf(0L) }"},{"type":"DELETE","lineNumber":168,"oldContent":"        var isLongPressing by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":169,"oldContent":"        "},{"type":"INSERT","lineNumber":168,"content":"        // Logo positioned on the left"},{"type":"DELETE","lineNumber":174,"oldContent":"                .size(85.dp)"},{"type":"DELETE","lineNumber":175,"oldContent":"                .pointerInput(Unit) {"},{"type":"DELETE","lineNumber":176,"oldContent":"                    detectTapGestures("},{"type":"DELETE","lineNumber":177,"oldContent":"                        onPress = {"},{"type":"DELETE","lineNumber":178,"oldContent":"                            longPressStartTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":179,"oldContent":"                            isLongPressing = true"},{"type":"DELETE","lineNumber":180,"oldContent":"                            "},{"type":"DELETE","lineNumber":181,"oldContent":"                            // Warte 5 Sekunden"},{"type":"DELETE","lineNumber":182,"oldContent":"                            val pressJob = launch {"},{"type":"DELETE","lineNumber":183,"oldContent":"                                delay(5000)"},{"type":"DELETE","lineNumber":184,"oldContent":"                                if (isLongPressing) {"},{"type":"DELETE","lineNumber":185,"oldContent":"                                    // 5 Sekunden erreicht - Upload-Dialog anzeigen"},{"type":"DELETE","lineNumber":186,"oldContent":"                                    onShowUploadDialog()"},{"type":"DELETE","lineNumber":187,"oldContent":"                                }"},{"type":"DELETE","lineNumber":188,"oldContent":"                            }"},{"type":"DELETE","lineNumber":189,"oldContent":"                            "},{"type":"DELETE","lineNumber":190,"oldContent":"                            // Warte auf Release"},{"type":"DELETE","lineNumber":191,"oldContent":"                            tryAwaitRelease()"},{"type":"DELETE","lineNumber":192,"oldContent":"                            isLongPressing = false"},{"type":"DELETE","lineNumber":193,"oldContent":"                            pressJob.cancel()"},{"type":"DELETE","lineNumber":194,"oldContent":"                        }"},{"type":"DELETE","lineNumber":195,"oldContent":"                    )"},{"type":"DELETE","lineNumber":196,"oldContent":"                },"},{"type":"INSERT","lineNumber":173,"content":"                .size(85.dp),"},{"type":"DELETE","lineNumber":199,"oldContent":"            // Logo mit visueller Rückmeldung bei Long Press"},{"type":"DELETE","lineNumber":203,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":204,"oldContent":"                    .size(90.dp)"},{"type":"DELETE","lineNumber":205,"oldContent":"                    .graphicsLayer {"},{"type":"DELETE","lineNumber":206,"oldContent":"                        alpha = if (isLongPressing) 0.7f else 1.0f"},{"type":"DELETE","lineNumber":207,"oldContent":"                        scaleX = if (isLongPressing) 0.95f else 1.0f"},{"type":"DELETE","lineNumber":208,"oldContent":"                        scaleY = if (isLongPressing) 0.95f else 1.0f"},{"type":"DELETE","lineNumber":209,"oldContent":"                    }"},{"type":"INSERT","lineNumber":179,"content":"                modifier = Modifier.size(90.dp)"}]},{"timestamp":1754232100064,"changes":[{"type":"MODIFY","lineNumber":15,"content":"import kotlinx.coroutines.delay","oldContent":"import androidx.compose.foundation.layout.Arrangement"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.foundation.layout.Arrangement"},{"type":"DELETE","lineNumber":18,"oldContent":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":21,"oldContent":"import kotlinx.coroutines.launch"},{"type":"MODIFY","lineNumber":47,"content":"import androidx.compose.ui.graphics.Color","oldContent":"import androidx.compose.ui.graphics.Color"},{"type":"DELETE","lineNumber":69,"oldContent":"    onShowUploadDialog: () -> Unit = {}"},{"type":"INSERT","lineNumber":70,"content":") {"},{"type":"MODIFY","lineNumber":75,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":142,"content":"                        colors = listOf(","oldContent":"                        colors = listOf("},{"type":"DELETE","lineNumber":172,"oldContent":"                .size(85.dp),"},{"type":"DELETE","lineNumber":174,"oldContent":"                modifier = Modifier.size(90.dp)"},{"type":"INSERT","lineNumber":173,"content":"                .size(85.dp),"},{"type":"INSERT","lineNumber":179,"content":"                modifier = Modifier.size(90.dp)"},{"type":"DELETE","lineNumber":181,"oldContent":"            "},{"type":"DELETE","lineNumber":182,"oldContent":"            // Progress-Indikator für Long Press (nur sichtbar während Press)"},{"type":"DELETE","lineNumber":183,"oldContent":"            if (isLongPressing) {"},{"type":"DELETE","lineNumber":184,"oldContent":"                var progress by remember { mutableStateOf(0f) }"},{"type":"DELETE","lineNumber":185,"oldContent":"                "},{"type":"DELETE","lineNumber":186,"oldContent":"                LaunchedEffect(isLongPressing) {"},{"type":"DELETE","lineNumber":187,"oldContent":"                    val startTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":188,"oldContent":"                    while (isLongPressing && progress < 1f) {"},{"type":"DELETE","lineNumber":189,"oldContent":"                        val elapsed = System.currentTimeMillis() - startTime"},{"type":"DELETE","lineNumber":190,"oldContent":"                        progress = (elapsed / 5000f).coerceAtMost(1f)"},{"type":"DELETE","lineNumber":191,"oldContent":"                        delay(16) // ~60fps"},{"type":"DELETE","lineNumber":192,"oldContent":"                    }"},{"type":"DELETE","lineNumber":193,"oldContent":"                }"},{"type":"DELETE","lineNumber":194,"oldContent":"                "},{"type":"DELETE","lineNumber":195,"oldContent":"                CircularProgressIndicator("},{"type":"DELETE","lineNumber":196,"oldContent":"                    progress = progress,"},{"type":"DELETE","lineNumber":197,"oldContent":"                    modifier = Modifier.size(95.dp),"},{"type":"DELETE","lineNumber":198,"oldContent":"                    color = Color.White.copy(alpha = 0.8f),"},{"type":"DELETE","lineNumber":199,"oldContent":"                    strokeWidth = 2.dp"},{"type":"DELETE","lineNumber":200,"oldContent":"                )"},{"type":"DELETE","lineNumber":201,"oldContent":"            }"}]},{"timestamp":1754314401782,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.example.arwalking.components","oldContent":"package components"},{"type":"MODIFY","lineNumber":14,"content":"import androidx.compose.ui.graphics.graphicsLayer","oldContent":"import androidx.compose.foundation.layout.Arrangement"},{"type":"MODIFY","lineNumber":18,"content":"import androidx.compose.foundation.layout.Box","oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":46,"content":"import com.example.arwalking.ui.theme.GradientUtils"},{"type":"DELETE","lineNumber":47,"oldContent":"import androidx.compose.ui.graphics.Color"},{"type":"MODIFY","lineNumber":70,"content":") {","oldContent":") {"},{"type":"INSERT","lineNumber":74,"content":"    val coroutineScope = rememberCoroutineScope()"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"INSERT","lineNumber":141,"content":"                    brush = GradientUtils.safeVerticalGradient("},{"type":"DELETE","lineNumber":142,"oldContent":"                        colors = listOf("},{"type":"MODIFY","lineNumber":173,"content":"                .size(85.dp),","oldContent":"                .size(85.dp),"},{"type":"MODIFY","lineNumber":179,"content":"                modifier = Modifier.size(90.dp)","oldContent":"                modifier = Modifier.size(90.dp)"}]},{"timestamp":1754314407476,"changes":[{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.foundation.layout.Arrangement"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":58,"oldContent":"// Data class for Navigation Steps"},{"type":"DELETE","lineNumber":59,"oldContent":"data class NavigationStepData(val text: String, val icon: Int)"},{"type":"INSERT","lineNumber":58,"content":"// Import the correct NavigationStepData from NavigationDrawer.kt"},{"type":"INSERT","lineNumber":59,"content":"// data class NavigationStepData is already defined in NavigationDrawer.kt"},{"type":"INSERT","lineNumber":69,"content":"    onZoomChange: (Float) -> Unit = {}"},{"type":"DELETE","lineNumber":70,"oldContent":") {"},{"type":"INSERT","lineNumber":172,"content":"                .offset(x = 20.dp, y = 7.dp)"},{"type":"DELETE","lineNumber":173,"oldContent":"                .size(85.dp),"},{"type":"INSERT","lineNumber":178,"content":"                contentDescription = \"Logo\","},{"type":"DELETE","lineNumber":179,"oldContent":"                modifier = Modifier.size(90.dp)"}]},{"timestamp":1754314415283,"changes":[{"type":"MODIFY","lineNumber":62,"content":"fun NavigationDrawerList(","oldContent":"fun NavigationDrawer("}]},{"timestamp":1754314507861,"changes":[{"type":"DELETE","lineNumber":389,"oldContent":"                Image("},{"type":"DELETE","lineNumber":390,"oldContent":"                    painter = painterResource(id = step.icon),"},{"type":"DELETE","lineNumber":391,"oldContent":"                    contentDescription = step.text,"},{"type":"DELETE","lineNumber":392,"oldContent":"                    modifier = Modifier.size(if (isCompact) 20.dp else 24.dp),"},{"type":"DELETE","lineNumber":393,"oldContent":"                    colorFilter = ColorFilter.tint(Color.White)"},{"type":"INSERT","lineNumber":389,"content":"                Text("},{"type":"INSERT","lineNumber":390,"content":"                    text = step.stepNumber.toString(),"},{"type":"INSERT","lineNumber":391,"content":"                    color = Color.White,"},{"type":"INSERT","lineNumber":392,"content":"                    style = TextStyle("},{"type":"INSERT","lineNumber":393,"content":"                        fontSize = if (isCompact) 14.sp else 16.sp,"},{"type":"INSERT","lineNumber":394,"content":"                        fontWeight = FontWeight.Bold"},{"type":"INSERT","lineNumber":395,"content":"                    )"}]},{"timestamp":1754314523922,"changes":[{"type":"MODIFY","lineNumber":396,"content":"                )","oldContent":"                )"},{"type":"DELETE","lineNumber":399,"oldContent":"            // Step text"},{"type":"DELETE","lineNumber":400,"oldContent":"            Text("},{"type":"DELETE","lineNumber":401,"oldContent":"                text = step.text,"},{"type":"DELETE","lineNumber":402,"oldContent":"                color = Color.White,"},{"type":"DELETE","lineNumber":403,"oldContent":"                style = TextStyle("},{"type":"DELETE","lineNumber":404,"oldContent":"                    fontSize = if (isCompact) 15.sp else 17.sp,"},{"type":"DELETE","lineNumber":405,"oldContent":"                    fontWeight = if (isActive) FontWeight.Medium else FontWeight.Normal"},{"type":"DELETE","lineNumber":406,"oldContent":"                ),"},{"type":"INSERT","lineNumber":399,"content":"            // Step instruction and distance"},{"type":"INSERT","lineNumber":400,"content":"            Column("},{"type":"DELETE","lineNumber":408,"oldContent":"            )"},{"type":"INSERT","lineNumber":402,"content":"            ) {"},{"type":"INSERT","lineNumber":403,"content":"                Text("},{"type":"INSERT","lineNumber":404,"content":"                    text = step.instruction,"},{"type":"INSERT","lineNumber":405,"content":"                    color = Color.White,"},{"type":"INSERT","lineNumber":406,"content":"                    style = TextStyle("},{"type":"INSERT","lineNumber":407,"content":"                        fontSize = if (isCompact) 15.sp else 17.sp,"},{"type":"INSERT","lineNumber":408,"content":"                        fontWeight = if (isActive) FontWeight.Medium else FontWeight.Normal"},{"type":"INSERT","lineNumber":409,"content":"                    ),"},{"type":"INSERT","lineNumber":410,"content":"                    maxLines = if (isCompact) 1 else 2"},{"type":"INSERT","lineNumber":411,"content":"                )"},{"type":"INSERT","lineNumber":412,"content":"                if (step.distance > 0) {"},{"type":"INSERT","lineNumber":413,"content":"                    Text("},{"type":"INSERT","lineNumber":414,"content":"                        text = \"${step.distance.toInt()}m\","},{"type":"INSERT","lineNumber":415,"content":"                        color = Color.White.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":416,"content":"                        style = TextStyle("},{"type":"INSERT","lineNumber":417,"content":"                            fontSize = if (isCompact) 12.sp else 14.sp,"},{"type":"INSERT","lineNumber":418,"content":"                            fontWeight = FontWeight.Normal"},{"type":"INSERT","lineNumber":419,"content":"                        )"},{"type":"INSERT","lineNumber":420,"content":"                    )"},{"type":"INSERT","lineNumber":421,"content":"                }"},{"type":"INSERT","lineNumber":422,"content":"            }"}]},{"timestamp":1754314533308,"changes":[{"type":"MODIFY","lineNumber":63,"content":"    steps: List<NavigationStepData>,","oldContent":"    navigationSteps: List<NavigationStepData>,"},{"type":"INSERT","lineNumber":64,"content":"    currentStep: Int,"},{"type":"INSERT","lineNumber":396,"content":"                    )"},{"type":"DELETE","lineNumber":396,"oldContent":"                )"},{"type":"INSERT","lineNumber":402,"content":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":407,"oldContent":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":410,"oldContent":"        }"},{"type":"DELETE","lineNumber":412,"oldContent":"    }"},{"type":"DELETE","lineNumber":414,"oldContent":"}"},{"type":"DELETE","lineNumber":416,"oldContent":""},{"type":"DELETE","lineNumber":418,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":420,"oldContent":"fun DestinationCard("},{"type":"DELETE","lineNumber":422,"oldContent":"    destinationLabel: String,"},{"type":"DELETE","lineNumber":424,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":426,"oldContent":") {"},{"type":"DELETE","lineNumber":428,"oldContent":"    Box("},{"type":"DELETE","lineNumber":430,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":432,"oldContent":"            .height(72.dp)"},{"type":"DELETE","lineNumber":434,"oldContent":"            .clip(RoundedCornerShape(16.dp))"},{"type":"INSERT","lineNumber":424,"content":"        }"},{"type":"INSERT","lineNumber":425,"content":"    }"},{"type":"INSERT","lineNumber":426,"content":"}"},{"type":"INSERT","lineNumber":427,"content":""},{"type":"INSERT","lineNumber":428,"content":"@Composable"},{"type":"INSERT","lineNumber":429,"content":"fun DestinationCard("},{"type":"INSERT","lineNumber":430,"content":"    destinationLabel: String,"},{"type":"INSERT","lineNumber":431,"content":"    modifier: Modifier = Modifier"},{"type":"INSERT","lineNumber":432,"content":") {"},{"type":"INSERT","lineNumber":433,"content":"    Box("},{"type":"INSERT","lineNumber":434,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":435,"content":"            .height(72.dp)"},{"type":"INSERT","lineNumber":436,"content":"            .clip(RoundedCornerShape(16.dp))"}]},{"timestamp":1754314540307,"changes":[{"type":"MODIFY","lineNumber":320,"content":"                if (steps.isNotEmpty()) {","oldContent":"                if (navigationSteps.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":322,"content":"                        step = steps.getOrNull(currentStep - 1) ?: steps.first(),","oldContent":"                        step = navigationSteps.first(),"},{"type":"MODIFY","lineNumber":330,"content":"                steps.drop(currentStep).take(2).forEach { step -> // Show max 2 next steps","oldContent":"                navigationSteps.drop(1).take(2).forEach { step -> // Show max 2 next steps"},{"type":"MODIFY","lineNumber":397,"content":"                )","oldContent":"                )"},{"type":"MODIFY","lineNumber":403,"content":"            ) {","oldContent":"            ) {"},{"type":"INSERT","lineNumber":418,"content":"                            fontSize = if (isCompact) 12.sp else 14.sp,"},{"type":"INSERT","lineNumber":419,"content":"                            fontWeight = FontWeight.Normal"},{"type":"INSERT","lineNumber":420,"content":"                        )"},{"type":"INSERT","lineNumber":421,"content":"                    )"},{"type":"INSERT","lineNumber":422,"content":"                }"},{"type":"INSERT","lineNumber":423,"content":"            }"},{"type":"DELETE","lineNumber":420,"oldContent":"                            fontSize = if (isCompact) 12.sp else 14.sp,"},{"type":"DELETE","lineNumber":423,"oldContent":"                            fontWeight = FontWeight.Normal"},{"type":"DELETE","lineNumber":426,"oldContent":"                        )"},{"type":"DELETE","lineNumber":429,"oldContent":"                    )"},{"type":"DELETE","lineNumber":432,"oldContent":"                }"},{"type":"DELETE","lineNumber":435,"oldContent":"            }"}]},{"timestamp":1754314559412,"changes":[{"type":"DELETE","lineNumber":285,"oldContent":"                // Current step (highlighted)"},{"type":"DELETE","lineNumber":286,"oldContent":"                if (navigationSteps.isNotEmpty()) {"},{"type":"INSERT","lineNumber":285,"content":"                // All steps with current step highlighted"},{"type":"INSERT","lineNumber":286,"content":"                steps.forEachIndexed { index, step ->"},{"type":"DELETE","lineNumber":288,"oldContent":"                        step = navigationSteps.first(),"},{"type":"DELETE","lineNumber":289,"oldContent":"                        isActive = true,"},{"type":"DELETE","lineNumber":290,"oldContent":"                        modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":291,"oldContent":"                    )"},{"type":"DELETE","lineNumber":292,"oldContent":"                }"},{"type":"DELETE","lineNumber":293,"oldContent":""},{"type":"DELETE","lineNumber":294,"oldContent":"                // Remaining steps"},{"type":"DELETE","lineNumber":295,"oldContent":"                navigationSteps.drop(1).forEach { step ->"},{"type":"DELETE","lineNumber":296,"oldContent":"                    StepCard("},{"type":"DELETE","lineNumber":298,"oldContent":"                        isActive = false,"},{"type":"INSERT","lineNumber":289,"content":"                        isActive = (index + 1) == currentStep,"},{"type":"INSERT","lineNumber":387,"content":"                    )"},{"type":"DELETE","lineNumber":397,"oldContent":"                )"},{"type":"INSERT","lineNumber":393,"content":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":403,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":419,"oldContent":"        }"},{"type":"DELETE","lineNumber":421,"oldContent":"    }"},{"type":"DELETE","lineNumber":424,"oldContent":"}"},{"type":"DELETE","lineNumber":426,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"        }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1754329853109,"changes":[{"type":"MODIFY","lineNumber":289,"content":"                        isActive = (index + 1) == currentStep,","oldContent":"                        isActive = (index + 1) == currentStep,"},{"type":"DELETE","lineNumber":378,"oldContent":"                    )"},{"type":"DELETE","lineNumber":385,"oldContent":"                modifier = Modifier.weight(1f)"},{"type":"INSERT","lineNumber":387,"content":"                    )"},{"type":"INSERT","lineNumber":393,"content":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":406,"oldContent":"        }"},{"type":"DELETE","lineNumber":408,"oldContent":"    }"},{"type":"DELETE","lineNumber":410,"oldContent":"}"},{"type":"DELETE","lineNumber":412,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"        }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1754329855820,"changes":[{"type":"INSERT","lineNumber":288,"content":"                        step = step,"},{"type":"DELETE","lineNumber":289,"oldContent":"                        isActive = (index + 1) == currentStep,"},{"type":"DELETE","lineNumber":385,"oldContent":"                    )"},{"type":"INSERT","lineNumber":387,"content":"                    )"},{"type":"MODIFY","lineNumber":393,"content":"                modifier = Modifier.weight(1f)","oldContent":"                modifier = Modifier.weight(1f)"},{"type":"MODIFY","lineNumber":406,"content":"                       // text = \"${step.distance.toInt()}m\",","oldContent":"                        text = \"${step.distance.toInt()}m\","},{"type":"DELETE","lineNumber":411,"oldContent":"        }"},{"type":"DELETE","lineNumber":413,"oldContent":"    }"},{"type":"DELETE","lineNumber":415,"oldContent":"}"},{"type":"DELETE","lineNumber":417,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"        }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1754329867421,"changes":[{"type":"MODIFY","lineNumber":387,"content":"                    )","oldContent":"                    )"},{"type":"INSERT","lineNumber":392,"content":"            Column("},{"type":"DELETE","lineNumber":393,"oldContent":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":406,"oldContent":"                       // text = \"${step.distance.toInt()}m\","},{"type":"INSERT","lineNumber":412,"content":"                }"},{"type":"INSERT","lineNumber":413,"content":"            }"},{"type":"DELETE","lineNumber":415,"oldContent":"                }"},{"type":"DELETE","lineNumber":418,"oldContent":"            }"}]},{"timestamp":1754329878609,"changes":[{"type":"INSERT","lineNumber":386,"content":"                        fontWeight = FontWeight.Bold"},{"type":"DELETE","lineNumber":387,"oldContent":"                    )"},{"type":"INSERT","lineNumber":406,"content":"                        text = \"${step.distance.toInt()}m\","},{"type":"DELETE","lineNumber":411,"oldContent":"                }"},{"type":"INSERT","lineNumber":413,"content":"                }"}]},{"timestamp":1754329882004,"changes":[{"type":"INSERT","lineNumber":404,"content":"                "}]},{"timestamp":1754330131989,"changes":[{"type":"MODIFY","lineNumber":404,"content":"","oldContent":"                "}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ExpandedARInfoIsland.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ExpandedARInfoIsland.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.core.*\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.CameraAlt\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.CheckCircle\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.delay\nimport com.example.arwalking.R\n\n/**\n * Erweiterte AR Info Island mit detaillierten Informationen\n * Zeigt Landmark-Count, Confidence und erweiterte Status-Informationen\n */\n@Composable\nfun ExpandedARInfoIsland(\n    scanStatus: ARScanStatus,\n    landmarkCount: Int = 0,\n    confidence: Float = 0f,\n    isVisible: Boolean = true,\n    modifier: Modifier = Modifier,\n    currentInstruction: String? = null\n) {\n    if (!isVisible) return\n    \n    // Animation für das Ein-/Ausblenden\n    val alpha by animateFloatAsState(\n        targetValue = if (isVisible) 0.9f else 0f,\n        animationSpec = tween(durationMillis = 300),\n        label = \"expanded_island_alpha\"\n    )\n    \n    // Pulsierender Effekt für bestimmte Status\n    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")\n    val pulseAlpha by pulseAnimation.animateFloat(\n        initialValue = 0.8f,\n        targetValue = 1f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(1000, easing = EaseInOut),\n            repeatMode = RepeatMode.Reverse\n        ),\n        label = \"pulse_alpha\"\n    )\n    \n    // Bestimme Farben basierend auf Status\n    val (backgroundColor, contentColor, accentColor) = when (scanStatus) {\n        ARScanStatus.INITIALIZING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Yellow\n        )\n        ARScanStatus.SCANNING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Cyan\n        )\n        ARScanStatus.TRACKING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Green\n        )\n        ARScanStatus.LOST -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Red\n        )\n        ARScanStatus.NAVIGATING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Blue\n        )\n    }\n    \n    Card(\n        modifier = modifier\n            .padding(16.dp),\n        shape = RoundedCornerShape(24.dp),\n        colors = CardDefaults.cardColors(\n            containerColor = backgroundColor.copy(alpha = alpha)\n        ),\n        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\n    ) {\n        Row(\n            modifier = Modifier\n                .padding(horizontal = 20.dp, vertical = 12.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Status-Icon mit Animation\n            val iconAlpha = if (scanStatus == ARScanStatus.SCANNING || scanStatus == ARScanStatus.INITIALIZING) {\n                pulseAlpha\n            } else {\n                1f\n            }\n            \n            Icon(\n                imageVector = getStatusIcon(scanStatus),\n                contentDescription = null,\n                tint = accentColor.copy(alpha = iconAlpha),\n                modifier = Modifier.size(24.dp)\n            )\n            \n            // Status-Text und Details\n            Column(\n                verticalArrangement = Arrangement.spacedBy(2.dp)\n            ) {\n                Text(\n                    text = getStatusText(scanStatus),\n                    color = contentColor,\n                    fontSize = 14.sp,\n                    fontWeight = FontWeight.Medium\n                )\n                \n                // Erweiterte Informationen\n                if (landmarkCount > 0 || confidence > 0f) {\n                    Row(\n                        horizontalArrangement = Arrangement.spacedBy(8.dp),\n                        verticalAlignment = Alignment.CenterVertically\n                    ) {\n                        if (landmarkCount > 0) {\n                            Text(\n                                text = \"$landmarkCount Landmarks\",\n                                color = contentColor.copy(alpha = 0.7f),\n                                fontSize = 11.sp\n                            )\n                        }\n                        \n                        if (confidence > 0f) {\n                            Text(\n                                text = \"•\",\n                                color = contentColor.copy(alpha = 0.5f),\n                                fontSize = 11.sp\n                            )\n                            \n                            Text(\n                                text = \"${(confidence * 100).toInt()}%\",\n                                color = getConfidenceColor(confidence),\n                                fontSize = 11.sp,\n                                fontWeight = FontWeight.Medium\n                            )\n                        }\n                    }\n                }\n            }\n            \n            // Zusätzlicher Status-Indikator\n            if (scanStatus == ARScanStatus.TRACKING || scanStatus == ARScanStatus.NAVIGATING) {\n                Box(\n                    modifier = Modifier\n                        .size(8.dp)\n                        .background(\n                            accentColor.copy(alpha = pulseAlpha),\n                            shape = RoundedCornerShape(4.dp)\n                        )\n                )\n            }\n        }\n    }\n}\n\n/**\n * Bestimmt das Icon basierend auf dem Scan-Status\n */\nprivate fun getStatusIcon(status: ARScanStatus): ImageVector {\n    return when (status) {\n        ARScanStatus.INITIALIZING -> Icons.Default.CameraAlt\n        ARScanStatus.SCANNING -> Icons.Default.Search\n        ARScanStatus.TRACKING -> Icons.Default.CheckCircle\n        ARScanStatus.LOST -> Icons.Default.Warning\n        ARScanStatus.NAVIGATING -> Icons.Default.LocationOn\n    }\n}\n\n/**\n * Bestimmt den Status-Text\n */\nprivate fun getStatusText(status: ARScanStatus): String {\n    return when (status) {\n        ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\"\n        ARScanStatus.SCANNING -> \"Suche nach Landmarks...\"\n        ARScanStatus.TRACKING -> \"Landmark erkannt\"\n        ARScanStatus.LOST -> \"Landmark verloren\"\n        ARScanStatus.NAVIGATING -> \"Navigation aktiv\"\n    }\n}\n\n/**\n * Bestimmt die Farbe basierend auf der Confidence\n */\nprivate fun getConfidenceColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.9f -> Color.Green\n        confidence >= 0.8f -> Color(0xFF90EE90) // Light Green\n        confidence >= 0.7f -> Color.Yellow\n        confidence >= 0.6f -> Color(0xFFFFA500) // Orange\n        else -> Color.Red\n    }\n}","baseTimestamp":1754330242450,"deltas":[{"timestamp":1754330248631,"changes":[{"type":"DELETE","lineNumber":113,"oldContent":"            Icon("},{"type":"DELETE","lineNumber":114,"oldContent":"                imageVector = getStatusIcon(scanStatus),"},{"type":"DELETE","lineNumber":115,"oldContent":"                contentDescription = null,"},{"type":"DELETE","lineNumber":116,"oldContent":"                tint = accentColor.copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":117,"oldContent":"                modifier = Modifier.size(24.dp)"},{"type":"DELETE","lineNumber":118,"oldContent":"            )"},{"type":"INSERT","lineNumber":113,"content":"            // Verwende Navigationsicon wenn verfügbar, sonst Standard-Icon"},{"type":"INSERT","lineNumber":114,"content":"            if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {"},{"type":"INSERT","lineNumber":115,"content":"                val navigationAction = getNavigationAction(currentInstruction)"},{"type":"INSERT","lineNumber":116,"content":"                Icon("},{"type":"INSERT","lineNumber":117,"content":"                    painter = painterResource(id = navigationAction.getIconResource()),"},{"type":"INSERT","lineNumber":118,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":119,"content":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":120,"content":"                    modifier = Modifier.size(24.dp)"},{"type":"INSERT","lineNumber":121,"content":"                )"},{"type":"INSERT","lineNumber":122,"content":"            } else {"},{"type":"INSERT","lineNumber":123,"content":"                Icon("},{"type":"INSERT","lineNumber":124,"content":"                    imageVector = getStatusIcon(scanStatus),"},{"type":"INSERT","lineNumber":125,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":126,"content":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":127,"content":"                    modifier = Modifier.size(24.dp)"},{"type":"INSERT","lineNumber":128,"content":"                )"},{"type":"INSERT","lineNumber":129,"content":"            }"}]},{"timestamp":1754330256506,"changes":[{"type":"DELETE","lineNumber":120,"oldContent":"            "},{"type":"DELETE","lineNumber":122,"oldContent":"            // Status-Text und Details"},{"type":"DELETE","lineNumber":124,"oldContent":"            Column("},{"type":"DELETE","lineNumber":126,"oldContent":"                verticalArrangement = Arrangement.spacedBy(2.dp)"},{"type":"DELETE","lineNumber":128,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":130,"oldContent":"                Text("},{"type":"DELETE","lineNumber":132,"oldContent":"                    text = getStatusText(scanStatus),"},{"type":"DELETE","lineNumber":134,"oldContent":"                    color = contentColor,"},{"type":"DELETE","lineNumber":136,"oldContent":"                    fontSize = 14.sp,"},{"type":"DELETE","lineNumber":138,"oldContent":"                    fontWeight = FontWeight.Medium"},{"type":"INSERT","lineNumber":130,"content":"            "},{"type":"INSERT","lineNumber":131,"content":"            // Status-Text und Details"},{"type":"INSERT","lineNumber":132,"content":"            Column("},{"type":"INSERT","lineNumber":133,"content":"                verticalArrangement = Arrangement.spacedBy(2.dp)"},{"type":"INSERT","lineNumber":134,"content":"            ) {"},{"type":"INSERT","lineNumber":135,"content":"                // Status Text - zeige Navigationsanweisung ohne Distanz wenn verfügbar"},{"type":"INSERT","lineNumber":136,"content":"                val displayText = if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {"},{"type":"INSERT","lineNumber":137,"content":"                    // Entferne Distanzangaben aus der Anweisung"},{"type":"INSERT","lineNumber":138,"content":"                    currentInstruction"},{"type":"INSERT","lineNumber":139,"content":"                        .replace(Regex(\"\\\\d+\\\\s*m\"), \"\") // Entferne \"123m\" oder \"123 m\""},{"type":"INSERT","lineNumber":140,"content":"                        .replace(Regex(\"\\\\d+\\\\s*meter\"), \"\") // Entferne \"123 meter\""},{"type":"INSERT","lineNumber":141,"content":"                        .replace(Regex(\"\\\\d+\\\\s*Meter\"), \"\") // Entferne \"123 Meter\""},{"type":"INSERT","lineNumber":142,"content":"                        .replace(Regex(\"\\\\s+\"), \" \") // Mehrfache Leerzeichen durch einfache ersetzen"},{"type":"INSERT","lineNumber":143,"content":"                        .trim()"},{"type":"INSERT","lineNumber":144,"content":"                } else {"},{"type":"INSERT","lineNumber":145,"content":"                    getStatusText(scanStatus)"},{"type":"INSERT","lineNumber":146,"content":"                }"},{"type":"INSERT","lineNumber":147,"content":"                "},{"type":"INSERT","lineNumber":148,"content":"                Text("},{"type":"INSERT","lineNumber":149,"content":"                    text = displayText,"},{"type":"INSERT","lineNumber":150,"content":"                    color = contentColor,"},{"type":"INSERT","lineNumber":151,"content":"                    fontSize = 14.sp,"},{"type":"INSERT","lineNumber":152,"content":"                    fontWeight = FontWeight.Medium"}]},{"timestamp":1754330267999,"changes":[{"type":"INSERT","lineNumber":125,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":126,"content":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":127,"content":"                    modifier = Modifier.size(24.dp)"},{"type":"INSERT","lineNumber":128,"content":"                )"},{"type":"INSERT","lineNumber":129,"content":"            }"},{"type":"DELETE","lineNumber":127,"oldContent":"                    contentDescription = null,"},{"type":"DELETE","lineNumber":130,"oldContent":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":133,"oldContent":"                    modifier = Modifier.size(24.dp)"},{"type":"DELETE","lineNumber":136,"oldContent":"                )"},{"type":"DELETE","lineNumber":139,"oldContent":"            }"},{"type":"DELETE","lineNumber":141,"oldContent":"                )"},{"type":"DELETE","lineNumber":143,"oldContent":"                "},{"type":"DELETE","lineNumber":145,"oldContent":"                // Erweiterte Informationen"},{"type":"DELETE","lineNumber":147,"oldContent":"                if (landmarkCount > 0 || confidence > 0f) {"},{"type":"DELETE","lineNumber":149,"oldContent":"                    Row("},{"type":"DELETE","lineNumber":151,"oldContent":"                        horizontalArrangement = Arrangement.spacedBy(8.dp),"},{"type":"DELETE","lineNumber":153,"oldContent":"                        verticalAlignment = Alignment.CenterVertically"},{"type":"DELETE","lineNumber":155,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":157,"oldContent":"                        if (landmarkCount > 0) {"},{"type":"DELETE","lineNumber":159,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":161,"oldContent":"                                text = \"$landmarkCount Landmarks\","},{"type":"DELETE","lineNumber":163,"oldContent":"                                color = contentColor.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":153,"content":"                )"},{"type":"INSERT","lineNumber":154,"content":"                "},{"type":"INSERT","lineNumber":155,"content":"                // Erweiterte Informationen"},{"type":"INSERT","lineNumber":156,"content":"                if (landmarkCount > 0 || confidence > 0f) {"},{"type":"INSERT","lineNumber":157,"content":"                    Row("},{"type":"INSERT","lineNumber":158,"content":"                        horizontalArrangement = Arrangement.spacedBy(8.dp),"},{"type":"INSERT","lineNumber":159,"content":"                        verticalAlignment = Alignment.CenterVertically"},{"type":"INSERT","lineNumber":160,"content":"                    ) {"},{"type":"INSERT","lineNumber":161,"content":"                        if (landmarkCount > 0) {"},{"type":"INSERT","lineNumber":162,"content":"                            Text("},{"type":"INSERT","lineNumber":163,"content":"                                text = \"$landmarkCount Landmarks\","},{"type":"INSERT","lineNumber":164,"content":"                                color = contentColor.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":240,"content":""},{"type":"INSERT","lineNumber":241,"content":"/**"},{"type":"INSERT","lineNumber":242,"content":" * Bestimmt die Navigationsaktion basierend auf der Anweisung"},{"type":"INSERT","lineNumber":243,"content":" */"},{"type":"INSERT","lineNumber":244,"content":"private fun getNavigationAction(instruction: String): NavigationAction {"},{"type":"INSERT","lineNumber":245,"content":"    val lowerInstruction = instruction.lowercase()"},{"type":"INSERT","lineNumber":246,"content":"    return when {"},{"type":"INSERT","lineNumber":247,"content":"        lowerInstruction.contains(\"rechts\") || lowerInstruction.contains(\"right\") -> NavigationAction.TURN_RIGHT"},{"type":"INSERT","lineNumber":248,"content":"        lowerInstruction.contains(\"links\") || lowerInstruction.contains(\"left\") -> NavigationAction.TURN_LEFT"},{"type":"INSERT","lineNumber":249,"content":"        lowerInstruction.contains(\"tür\") || lowerInstruction.contains(\"door\") || "},{"type":"INSERT","lineNumber":250,"content":"        lowerInstruction.contains(\"eingang\") || lowerInstruction.contains(\"entrance\") ||"},{"type":"INSERT","lineNumber":251,"content":"        lowerInstruction.contains(\"durch\") || lowerInstruction.contains(\"through\") -> NavigationAction.THROUGH_DOOR"},{"type":"INSERT","lineNumber":252,"content":"        else -> NavigationAction.STRAIGHT"},{"type":"INSERT","lineNumber":253,"content":"    }"},{"type":"INSERT","lineNumber":254,"content":"}"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"/**"},{"type":"INSERT","lineNumber":257,"content":" * Gibt das passende Icon für die Navigationsaktion zurück"},{"type":"INSERT","lineNumber":258,"content":" */"},{"type":"INSERT","lineNumber":259,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":260,"content":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"INSERT","lineNumber":261,"content":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"INSERT","lineNumber":262,"content":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"INSERT","lineNumber":263,"content":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"INSERT","lineNumber":264,"content":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":265,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/AR3DArrowOverlay.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/AR3DArrowOverlay.kt","baseContent":"package com.example.arwalking.components\n\nimport android.graphics.Canvas\nimport android.graphics.Paint\nimport android.graphics.Path\nimport android.graphics.PointF\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.*\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\nimport androidx.compose.ui.graphics.drawscope.rotate\nimport androidx.compose.ui.graphics.drawscope.scale\nimport androidx.compose.ui.graphics.drawscope.translate\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.dp\nimport com.example.arwalking.FeatureMatchResult\nimport kotlin.math.*\n\n/**\n * 3D-Pfeil Overlay für AR-Navigation\n * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt\n */\n@Composable\nfun AR3DArrowOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    screenWidth: Float,\n    screenHeight: Float,\n    modifier: Modifier = Modifier\n) {\n    // Nur den besten Match verwenden\n    val bestMatch = matches.maxByOrNull { it.confidence }\n    \n    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {\n        \n        // Berechne die Position des Pfeils basierend auf dem Landmark\n        val arrowPosition = calculateArrowPosition(\n            landmark = bestMatch.landmark,\n            screenPosition = bestMatch.screenPosition,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight\n        )\n        \n        // Berechne die Richtung des Pfeils\n        val arrowDirection = calculateArrowDirection(bestMatch.landmark)\n        \n        Box(modifier = modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.fillMaxSize()) {\n                draw3DArrow(\n                    position = arrowPosition,\n                    direction = arrowDirection,\n                    confidence = bestMatch.confidence,\n                    size = size\n                )\n            }\n        }\n    }\n}\n\n/**\n * Berechnet die Position des 3D-Pfeils auf dem Bildschirm\n */\nprivate fun calculateArrowPosition(\n    landmark: com.example.arwalking.FeatureLandmark,\n    screenWidth: Float,\n    screenHeight: Float\n): Offset {\n    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen\n    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man\n    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden\n    \n    val x = landmark.position.x.toFloat()\n    val y = landmark.position.y.toFloat()\n    \n    // Normalisiere die Position auf Bildschirmkoordinaten\n    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung\n    val normalizedY = (y % 100) / 100f\n    \n    return Offset(\n        x = normalizedX * screenWidth,\n        y = normalizedY * screenHeight\n    )\n}\n\n/**\n * Berechnet die Richtung des Pfeils basierend auf der Navigation\n */\nprivate fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {\n    // Vereinfachte Richtungsberechnung\n    // In einer echten Implementierung würde man die aktuelle Position des Benutzers\n    // und die Zielposition verwenden\n    \n    val angle = landmark.position.x.toFloat() * 0.1f // Vereinfachte Berechnung\n    return angle % 360f\n}\n\n/**\n * Zeichnet einen 3D-Pfeil auf dem Canvas\n */\nprivate fun DrawScope.draw3DArrow(\n    position: Offset,\n    direction: Float,\n    confidence: Float,\n    size: androidx.compose.ui.geometry.Size\n) {\n    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence\n    val arrowColor = getArrowColor(confidence)\n    \n    drawIntoCanvas { canvas ->\n        // Speichere den aktuellen Zustand\n        canvas.save()\n        \n        // Verschiebe zum Pfeil-Zentrum\n        canvas.translate(position.x, position.y)\n        \n        // Rotiere basierend auf der Richtung\n        canvas.rotate(direction)\n        \n        // Zeichne den 3D-Pfeil\n        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)\n        \n        // Stelle den ursprünglichen Zustand wieder her\n        canvas.restore()\n    }\n}\n\n/**\n * Zeichnet die 3D-Pfeil-Form\n */\nprivate fun DrawScope.draw3DArrowShape(\n    canvas: Canvas,\n    size: Float,\n    color: Color,\n    confidence: Float\n) {\n    val paint = Paint().apply {\n        this.color = color.toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    val strokePaint = Paint().apply {\n        this.color = Color.White.copy(alpha = 0.8f).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.STROKE\n        strokeWidth = 3f\n    }\n    \n    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)\n    val arrowPath = Path().apply {\n        // Pfeilspitze\n        moveTo(0f, -size * 0.5f)\n        lineTo(size * 0.3f, -size * 0.2f)\n        lineTo(size * 0.15f, -size * 0.2f)\n        \n        // Pfeilkörper\n        lineTo(size * 0.15f, size * 0.3f)\n        lineTo(-size * 0.15f, size * 0.3f)\n        lineTo(-size * 0.15f, -size * 0.2f)\n        lineTo(-size * 0.3f, -size * 0.2f)\n        \n        close()\n    }\n    \n    // Schatten-Effekt (3D-Tiefe)\n    val shadowPath = Path(arrowPath).apply {\n        offset(size * 0.05f, size * 0.05f)\n    }\n    \n    val shadowPaint = Paint().apply {\n        this.color = Color.Black.copy(alpha = 0.3f).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    // Zeichne Schatten\n    canvas.drawPath(shadowPath, shadowPaint)\n    \n    // Zeichne Hauptpfeil\n    canvas.drawPath(arrowPath, paint)\n    \n    // Zeichne Umriss\n    canvas.drawPath(arrowPath, strokePaint)\n    \n    // Zeichne Glanz-Effekt für 3D-Look\n    val highlightPaint = Paint().apply {\n        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    val highlightPath = Path().apply {\n        moveTo(-size * 0.05f, -size * 0.4f)\n        lineTo(size * 0.05f, -size * 0.3f)\n        lineTo(size * 0.05f, -size * 0.1f)\n        lineTo(-size * 0.05f, -size * 0.2f)\n        close()\n    }\n    \n    canvas.drawPath(highlightPath, highlightPaint)\n}\n\n/**\n * Bestimmt die Farbe des Pfeils basierend auf der Confidence\n */\nprivate fun getArrowColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher\n        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher\n        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay\n        else -> Color(0xFFFF9800) // Orange - Unsicher\n    }\n}\n\n/**\n * Erweiterte 3D-Pfeil-Komponente mit Animation\n */\n@Composable\nfun Animated3DArrowOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    screenWidth: Float,\n    screenHeight: Float,\n    modifier: Modifier = Modifier\n) {\n    val bestMatch = matches.maxByOrNull { it.confidence }\n    var animationProgress by remember { mutableStateOf(0f) }\n    \n    // Animation für pulsierenden Effekt\n    LaunchedEffect(bestMatch) {\n        if (bestMatch != null && bestMatch.confidence >= 0.7f) {\n            while (true) {\n                animationProgress = (animationProgress + 0.02f) % 1f\n                kotlinx.coroutines.delay(16) // ~60 FPS\n            }\n        }\n    }\n    \n    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {\n        val arrowPosition = calculateArrowPosition(\n            landmark = bestMatch.landmark,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight\n        )\n        \n        val arrowDirection = calculateArrowDirection(bestMatch.landmark)\n        \n        Box(modifier = modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.fillMaxSize()) {\n                drawAnimated3DArrow(\n                    position = arrowPosition,\n                    direction = arrowDirection,\n                    confidence = bestMatch.confidence,\n                    animationProgress = animationProgress,\n                    size = size\n                )\n            }\n        }\n    }\n}\n\n/**\n * Zeichnet einen animierten 3D-Pfeil\n */\nprivate fun DrawScope.drawAnimated3DArrow(\n    position: Offset,\n    direction: Float,\n    confidence: Float,\n    animationProgress: Float,\n    size: androidx.compose.ui.geometry.Size\n) {\n    val baseSize = 60.dp.toPx()\n    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f\n    val arrowSize = baseSize * confidence * pulseScale\n    val arrowColor = getArrowColor(confidence)\n    \n    // Leichtes Schweben des Pfeils\n    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f\n    val adjustedPosition = position.copy(y = position.y + hoverOffset)\n    \n    drawIntoCanvas { canvas ->\n        canvas.save()\n        canvas.translate(adjustedPosition.x, adjustedPosition.y)\n        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation\n        \n        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)\n        \n        canvas.restore()\n    }\n}","baseTimestamp":1754116843411,"deltas":[{"timestamp":1754347306407,"changes":[{"type":"INSERT","lineNumber":64,"content":"            val currentInstruction = null"},{"type":"DELETE","lineNumber":170,"oldContent":"        }"},{"type":"DELETE","lineNumber":172,"oldContent":"    }"},{"type":"DELETE","lineNumber":175,"oldContent":"    "},{"type":"MODIFY","lineNumber":177,"content":"        }","oldContent":"    // Füge leichte Variation basierend auf Position hinzu"},{"type":"INSERT","lineNumber":178,"content":"    }"},{"type":"INSERT","lineNumber":179,"content":"    "},{"type":"INSERT","lineNumber":180,"content":"    // Füge leichte Variation basierend auf Position hinzu"},{"type":"DELETE","lineNumber":350,"oldContent":"                totalSteps = totalSteps"},{"type":"INSERT","lineNumber":353,"content":"            )"},{"type":"DELETE","lineNumber":424,"oldContent":"}"},{"type":"INSERT","lineNumber":426,"content":"}"},{"type":"INSERT","lineNumber":429,"content":""},{"type":"DELETE","lineNumber":430,"oldContent":""},{"type":"DELETE","lineNumber":458,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":460,"content":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":469,"oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":471,"content":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":486,"oldContent":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":488,"content":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":490,"oldContent":"    "},{"type":"INSERT","lineNumber":492,"content":"    "},{"type":"INSERT","lineNumber":499,"content":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"DELETE","lineNumber":500,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"DELETE","lineNumber":512,"oldContent":"    // Für jetzt verwenden wir eine verbesserte 2D-Darstellung"},{"type":"INSERT","lineNumber":514,"content":"    // Für jetzt verwenden wir eine verbesserte 2D-Darstellung"},{"type":"INSERT","lineNumber":515,"content":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"DELETE","lineNumber":516,"oldContent":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"DELETE","lineNumber":533,"oldContent":"        // Zeichne mehrschichtigen 3D-Effekt"},{"type":"INSERT","lineNumber":535,"content":"        // Zeichne mehrschichtigen 3D-Effekt"},{"type":"INSERT","lineNumber":538,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":539,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":555,"oldContent":"    )"},{"type":"DELETE","lineNumber":556,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":557,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":558,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":559,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":560,"oldContent":" */"},{"type":"DELETE","lineNumber":561,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":562,"oldContent":"/**"},{"type":"DELETE","lineNumber":563,"oldContent":""},{"type":"INSERT","lineNumber":556,"content":"    drawArrowLayer(canvas, size * 1.05f, Color.Black.copy(alpha = 0.2f),"},{"type":"INSERT","lineNumber":557,"content":"                  offsetX = size * 0.04f, offsetY = size * 0.04f)"},{"type":"INSERT","lineNumber":558,"content":"    "},{"type":"INSERT","lineNumber":559,"content":"    // Hauptkörper"},{"type":"INSERT","lineNumber":560,"content":"    drawArrowLayer(canvas, size, color)"},{"type":"INSERT","lineNumber":561,"content":"    "},{"type":"INSERT","lineNumber":562,"content":"    // Glanz-Highlight (oberste Schicht)"},{"type":"INSERT","lineNumber":563,"content":"    drawArrowLayer(canvas, size * 0.8f, Color.White.copy(alpha = 0.3f * confidence),"},{"type":"INSERT","lineNumber":565,"content":"}"},{"type":"DELETE","lineNumber":568,"oldContent":"private fun drawArrowLayer("},{"type":"INSERT","lineNumber":570,"content":"private fun drawArrowLayer("},{"type":"INSERT","lineNumber":588,"content":"        "},{"type":"DELETE","lineNumber":589,"oldContent":"        "},{"type":"DELETE","lineNumber":591,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":593,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":599,"oldContent":"/**"},{"type":"MODIFY","lineNumber":601,"content":"/**","oldContent":"}"},{"type":"INSERT","lineNumber":602,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":608,"oldContent":"}"},{"type":"MODIFY","lineNumber":609,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),","oldContent":"    )"},{"type":"INSERT","lineNumber":611,"content":"    )"},{"type":"INSERT","lineNumber":612,"content":"}"}]},{"timestamp":1754347351823,"changes":[{"type":"DELETE","lineNumber":64,"oldContent":"            val currentInstruction = null"},{"type":"INSERT","lineNumber":174,"content":"                }"},{"type":"INSERT","lineNumber":175,"content":"            }"},{"type":"DELETE","lineNumber":177,"oldContent":"                }"},{"type":"DELETE","lineNumber":179,"oldContent":"            }"},{"type":"MODIFY","lineNumber":429,"content":"/**","oldContent":"/**"},{"type":"DELETE","lineNumber":493,"oldContent":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":492,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"MODIFY","lineNumber":499,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":515,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":538,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":547,"oldContent":"}"},{"type":"DELETE","lineNumber":548,"oldContent":"    )"},{"type":"INSERT","lineNumber":546,"content":"    size: Float,"},{"type":"INSERT","lineNumber":547,"content":"    color: Color,"},{"type":"DELETE","lineNumber":551,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":552,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":553,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":550,"content":"    // Basis-Schatten (tiefste Schicht)"},{"type":"INSERT","lineNumber":551,"content":"    drawArrowLayer(canvas, size * 1.1f, Color.Black.copy(alpha = 0.3f), "},{"type":"INSERT","lineNumber":552,"content":"                  offsetX = size * 0.08f, offsetY = size * 0.08f)"},{"type":"DELETE","lineNumber":555,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":554,"content":"    // Mittlerer Schatten"},{"type":"DELETE","lineNumber":584,"oldContent":"}"},{"type":"INSERT","lineNumber":583,"content":"        // Pfeilspitze"},{"type":"MODIFY","lineNumber":588,"content":"        // Pfeilkörper","oldContent":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":609,"content":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":611,"content":"}"}]},{"timestamp":1754554647564,"changes":[{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"DELETE","lineNumber":15,"oldContent":"import androidx.compose.ui.graphics.drawscope.Stroke"},{"type":"DELETE","lineNumber":17,"oldContent":"import androidx.compose.ui.graphics.drawscope.rotate"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.ui.graphics.drawscope.scale"},{"type":"DELETE","lineNumber":19,"oldContent":"import androidx.compose.ui.graphics.drawscope.translate"},{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"DELETE","lineNumber":21,"oldContent":"import androidx.compose.ui.platform.LocalDensity"},{"type":"DELETE","lineNumber":24,"oldContent":"import com.example.arwalking.ARTrackingSystem"},{"type":"DELETE","lineNumber":25,"oldContent":"import com.example.arwalking.TrackedLandmark"},{"type":"INSERT","lineNumber":19,"content":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":173,"oldContent":"                }"},{"type":"INSERT","lineNumber":168,"content":"                }"},{"type":"DELETE","lineNumber":395,"oldContent":"    }"},{"type":"DELETE","lineNumber":396,"oldContent":"        close()"},{"type":"INSERT","lineNumber":389,"content":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":390,"content":"        "},{"type":"DELETE","lineNumber":428,"oldContent":"/**"},{"type":"INSERT","lineNumber":423,"content":"/**"},{"type":"DELETE","lineNumber":491,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":486,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":498,"oldContent":"}"},{"type":"INSERT","lineNumber":493,"content":"}"},{"type":"DELETE","lineNumber":514,"oldContent":"}"},{"type":"INSERT","lineNumber":509,"content":"}"},{"type":"DELETE","lineNumber":537,"oldContent":"    }"},{"type":"INSERT","lineNumber":532,"content":"    }"},{"type":"DELETE","lineNumber":543,"oldContent":"}"},{"type":"DELETE","lineNumber":544,"oldContent":"    )"},{"type":"INSERT","lineNumber":537,"content":" */"},{"type":"INSERT","lineNumber":538,"content":"private fun DrawScope.drawLayered3DArrow("},{"type":"INSERT","lineNumber":539,"content":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":546,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":549,"oldContent":"    // Basis-Schatten (tiefste Schicht)"},{"type":"INSERT","lineNumber":544,"content":"    // Basis-Schatten (tiefste Schicht)"},{"type":"DELETE","lineNumber":553,"oldContent":"    // Mittlerer Schatten"},{"type":"INSERT","lineNumber":548,"content":"    // Mittlerer Schatten"},{"type":"DELETE","lineNumber":581,"oldContent":"}"},{"type":"INSERT","lineNumber":575,"content":"    "},{"type":"INSERT","lineNumber":576,"content":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":583,"oldContent":"        imageUrl = \"\""},{"type":"DELETE","lineNumber":587,"oldContent":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":582,"content":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":603,"oldContent":"    )"},{"type":"INSERT","lineNumber":597,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":607,"oldContent":"}"},{"type":"INSERT","lineNumber":601,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":602,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":604,"content":"    )"}]},{"timestamp":1754554662046,"changes":[{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"MODIFY","lineNumber":15,"content":"import androidx.compose.ui.graphics.nativeCanvas","oldContent":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":19,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":36,"content":"    currentInstruction: String? = null,"},{"type":"DELETE","lineNumber":162,"oldContent":"                }"},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"DELETE","lineNumber":383,"oldContent":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":385,"oldContent":"        "},{"type":"INSERT","lineNumber":390,"content":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":391,"content":"        "},{"type":"INSERT","lineNumber":392,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":392,"oldContent":"    }"},{"type":"DELETE","lineNumber":417,"oldContent":"/**"},{"type":"INSERT","lineNumber":424,"content":"/**"},{"type":"DELETE","lineNumber":480,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"MODIFY","lineNumber":487,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung","oldContent":"}"},{"type":"INSERT","lineNumber":494,"content":"}"},{"type":"DELETE","lineNumber":503,"oldContent":"}"},{"type":"INSERT","lineNumber":510,"content":"}"},{"type":"DELETE","lineNumber":526,"oldContent":"    }"},{"type":"INSERT","lineNumber":531,"content":"        "},{"type":"INSERT","lineNumber":532,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":533,"content":"    }"},{"type":"INSERT","lineNumber":535,"content":""},{"type":"INSERT","lineNumber":536,"content":"/**"},{"type":"INSERT","lineNumber":537,"content":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"DELETE","lineNumber":534,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":536,"oldContent":"}"},{"type":"DELETE","lineNumber":537,"oldContent":""},{"type":"DELETE","lineNumber":538,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":539,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":540,"oldContent":"    // Basis-Schatten (tiefste Schicht)"},{"type":"DELETE","lineNumber":543,"oldContent":"    // Mittlerer Schatten"},{"type":"INSERT","lineNumber":545,"content":"    // Basis-Schatten (tiefste Schicht)"},{"type":"INSERT","lineNumber":549,"content":"    // Mittlerer Schatten"},{"type":"DELETE","lineNumber":569,"oldContent":"    "},{"type":"DELETE","lineNumber":571,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":575,"oldContent":"}"},{"type":"DELETE","lineNumber":576,"oldContent":"    )"},{"type":"DELETE","lineNumber":577,"oldContent":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":574,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":575,"content":"    }"},{"type":"INSERT","lineNumber":576,"content":"    "},{"type":"INSERT","lineNumber":577,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":583,"content":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":587,"oldContent":"}"},{"type":"INSERT","lineNumber":588,"content":"        "},{"type":"DELETE","lineNumber":591,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":596,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":597,"content":" */"},{"type":"INSERT","lineNumber":598,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":599,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":600,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":601,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":602,"content":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":601,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":603,"oldContent":"    )"},{"type":"DELETE","lineNumber":604,"oldContent":"        imageUrl = \"\""}]},{"timestamp":1754554667014,"changes":[{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.ui.graphics.drawscope.drawIntoCanvas"},{"type":"DELETE","lineNumber":15,"oldContent":"import kotlinx.coroutines.delay"},{"type":"MODIFY","lineNumber":19,"content":"import kotlinx.coroutines.delay","oldContent":"import kotlinx.coroutines.delay"},{"type":"MODIFY","lineNumber":203,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)","oldContent":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":389,"content":"        "},{"type":"DELETE","lineNumber":391,"oldContent":"        "},{"type":"DELETE","lineNumber":392,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":393,"content":"    }"},{"type":"MODIFY","lineNumber":530,"content":"        drawLayered3DArrow(canvas.nativeCanvas, arrowSize, arrowColor, confidence)","oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":532,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":534,"oldContent":" */"},{"type":"DELETE","lineNumber":536,"oldContent":"private fun DrawScope.drawLayered3DArrow("},{"type":"INSERT","lineNumber":534,"content":"}"},{"type":"MODIFY","lineNumber":538,"content":" */","oldContent":"    canvas: android.graphics.Canvas,"},{"type":"INSERT","lineNumber":539,"content":"private fun DrawScope.drawLayered3DArrow("},{"type":"INSERT","lineNumber":540,"content":"    canvas: android.graphics.Canvas,"},{"type":"MODIFY","lineNumber":545,"content":"    // Basis-Schatten (tiefste Schicht)","oldContent":"    // Basis-Schatten (tiefste Schicht)"},{"type":"INSERT","lineNumber":573,"content":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":574,"oldContent":"}"},{"type":"MODIFY","lineNumber":597,"content":" */","oldContent":" */"},{"type":"DELETE","lineNumber":599,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":601,"oldContent":"        description = \"Processed landmark\","},{"type":"MODIFY","lineNumber":603,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),","oldContent":"    )"},{"type":"INSERT","lineNumber":604,"content":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":605,"content":"    )"}]},{"timestamp":1754554672556,"changes":[{"type":"INSERT","lineNumber":18,"content":"import com.example.arwalking.FeatureMatchResult"},{"type":"DELETE","lineNumber":19,"oldContent":"import kotlinx.coroutines.delay"},{"type":"MODIFY","lineNumber":214,"content":"    canvas: android.graphics.Canvas,","oldContent":"    canvas: Canvas,"},{"type":"INSERT","lineNumber":361,"content":"            }"},{"type":"INSERT","lineNumber":362,"content":"        }"},{"type":"DELETE","lineNumber":362,"oldContent":"        close()"},{"type":"DELETE","lineNumber":363,"oldContent":"    "},{"type":"MODIFY","lineNumber":364,"content":"}","oldContent":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"MODIFY","lineNumber":371,"content":"    direction: Float,","oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"MODIFY","lineNumber":393,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":524,"oldContent":"}"},{"type":"DELETE","lineNumber":525,"oldContent":"    )"},{"type":"DELETE","lineNumber":526,"oldContent":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":524,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":525,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":526,"content":"        canvas.translate(position.x, position.y)"},{"type":"MODIFY","lineNumber":534,"content":"}","oldContent":"}"},{"type":"INSERT","lineNumber":536,"content":"/**"},{"type":"INSERT","lineNumber":537,"content":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"DELETE","lineNumber":538,"oldContent":"/**"},{"type":"DELETE","lineNumber":540,"oldContent":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"INSERT","lineNumber":544,"content":") {"},{"type":"DELETE","lineNumber":545,"oldContent":"    // Basis-Schatten (tiefste Schicht)"},{"type":"INSERT","lineNumber":596,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":597,"oldContent":" */"},{"type":"INSERT","lineNumber":601,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":602,"content":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":603,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":605,"oldContent":"        description = \"Processed landmark\","}]},{"timestamp":1754554680084,"changes":[{"type":"DELETE","lineNumber":91,"oldContent":"    )"},{"type":"DELETE","lineNumber":92,"oldContent":"}"},{"type":"DELETE","lineNumber":93,"oldContent":""},{"type":"DELETE","lineNumber":94,"oldContent":"/**"},{"type":"DELETE","lineNumber":95,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":91,"content":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"INSERT","lineNumber":92,"content":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":93,"content":"        return Offset("},{"type":"INSERT","lineNumber":94,"content":"            x = screenPosition.x,"},{"type":"INSERT","lineNumber":95,"content":"            y = screenPosition.y"},{"type":"MODIFY","lineNumber":108,"content":"    val normalizedY = (y % 100) / 100f","oldContent":" */"},{"type":"DELETE","lineNumber":110,"oldContent":"private fun DrawScope.draw3DArrow("},{"type":"DELETE","lineNumber":111,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":112,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":113,"oldContent":"    confidence: Float,"},{"type":"INSERT","lineNumber":110,"content":"    return Offset("},{"type":"INSERT","lineNumber":111,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":112,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":113,"content":"    )"},{"type":"DELETE","lineNumber":116,"oldContent":") {"},{"type":"DELETE","lineNumber":117,"oldContent":"    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence"},{"type":"DELETE","lineNumber":118,"oldContent":"    "},{"type":"INSERT","lineNumber":116,"content":"/**"},{"type":"INSERT","lineNumber":117,"content":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":118,"content":" */"},{"type":"DELETE","lineNumber":209,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":210,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":211,"oldContent":"    }"},{"type":"DELETE","lineNumber":212,"oldContent":"    val highlightPath = Path().apply {"},{"type":"DELETE","lineNumber":213,"oldContent":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"INSERT","lineNumber":209,"content":""},{"type":"INSERT","lineNumber":210,"content":"/**"},{"type":"INSERT","lineNumber":211,"content":" * Zeichnet die 3D-Pfeil-Form"},{"type":"INSERT","lineNumber":212,"content":" */"},{"type":"INSERT","lineNumber":213,"content":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":260,"oldContent":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":261,"oldContent":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"DELETE","lineNumber":262,"oldContent":"    )"},{"type":"INSERT","lineNumber":260,"content":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":265,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":263,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":268,"oldContent":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":266,"content":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"DELETE","lineNumber":362,"oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":361,"content":"    }"},{"type":"DELETE","lineNumber":368,"oldContent":""},{"type":"DELETE","lineNumber":369,"oldContent":"}"},{"type":"DELETE","lineNumber":370,"oldContent":"    )"},{"type":"INSERT","lineNumber":366,"content":" */"},{"type":"INSERT","lineNumber":367,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":368,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":390,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":393,"oldContent":"    }"},{"type":"DELETE","lineNumber":518,"oldContent":"}"},{"type":"DELETE","lineNumber":519,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":520,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":521,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":522,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":523,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":516,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":517,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":518,"content":") {"},{"type":"INSERT","lineNumber":519,"content":"    val arrowSize = 80.dp.toPx() * confidence"},{"type":"INSERT","lineNumber":520,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":521,"content":"    "},{"type":"INSERT","lineNumber":531,"content":"    }"},{"type":"DELETE","lineNumber":534,"oldContent":"}"},{"type":"MODIFY","lineNumber":536,"content":" */","oldContent":" */"},{"type":"DELETE","lineNumber":548,"oldContent":"    )"},{"type":"INSERT","lineNumber":546,"content":"    "},{"type":"DELETE","lineNumber":572,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":570,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":589,"content":"    "},{"type":"INSERT","lineNumber":590,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":592,"oldContent":"        imageUrl = \"\""},{"type":"DELETE","lineNumber":593,"oldContent":"}"},{"type":"MODIFY","lineNumber":601,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),","oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"}]},{"timestamp":1754554690143,"changes":[{"type":"DELETE","lineNumber":106,"oldContent":"/**"},{"type":"DELETE","lineNumber":107,"oldContent":" * Zeichnet einen 3D-Pfeil auf dem Canvas"},{"type":"INSERT","lineNumber":106,"content":"    // Normalisiere die Position auf Bildschirmkoordinaten"},{"type":"INSERT","lineNumber":107,"content":"    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung"},{"type":"MODIFY","lineNumber":109,"content":"    ","oldContent":"private fun DrawScope.draw3DArrow("},{"type":"MODIFY","lineNumber":114,"content":"}","oldContent":") {"},{"type":"DELETE","lineNumber":220,"oldContent":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"DELETE","lineNumber":221,"oldContent":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"DELETE","lineNumber":222,"oldContent":"        close()"},{"type":"INSERT","lineNumber":220,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":221,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":222,"content":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":224,"oldContent":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"DELETE","lineNumber":225,"oldContent":"}"},{"type":"INSERT","lineNumber":224,"content":"    "},{"type":"INSERT","lineNumber":225,"content":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":261,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"MODIFY","lineNumber":263,"content":"    canvas.drawPath(arrowPath, paint)","oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"INSERT","lineNumber":266,"content":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"DELETE","lineNumber":283,"oldContent":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":284,"oldContent":"        highlightPaint as androidx.compose.ui.graphics.Paint"},{"type":"DELETE","lineNumber":285,"oldContent":"    )"},{"type":"INSERT","lineNumber":283,"content":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"MODIFY","lineNumber":359,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":364,"oldContent":" */"},{"type":"DELETE","lineNumber":366,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":364,"content":" */"},{"type":"INSERT","lineNumber":365,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":388,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":390,"oldContent":"}"},{"type":"INSERT","lineNumber":387,"content":"        "},{"type":"INSERT","lineNumber":388,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":392,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":390,"content":"}"},{"type":"DELETE","lineNumber":509,"oldContent":"    )"},{"type":"DELETE","lineNumber":510,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":511,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":512,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":513,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":507,"content":""},{"type":"INSERT","lineNumber":508,"content":"/**"},{"type":"INSERT","lineNumber":509,"content":" * Verbesserte 3D-Pfeil-Darstellung mit realistischeren Effekten"},{"type":"INSERT","lineNumber":510,"content":" */"},{"type":"INSERT","lineNumber":511,"content":"private fun DrawScope.drawEnhanced3DArrow("},{"type":"INSERT","lineNumber":512,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":513,"content":"    orientation: Float,"},{"type":"DELETE","lineNumber":515,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":517,"oldContent":"        id = processedLandmark.id,"},{"type":"MODIFY","lineNumber":529,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":534,"oldContent":" */"},{"type":"DELETE","lineNumber":535,"oldContent":" */"},{"type":"INSERT","lineNumber":532,"content":"/**"},{"type":"INSERT","lineNumber":534,"content":" */"},{"type":"MODIFY","lineNumber":544,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":568,"content":"        this.color = color.toArgb()","oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":587,"oldContent":"    "},{"type":"INSERT","lineNumber":586,"content":"    }"},{"type":"INSERT","lineNumber":587,"content":"    "},{"type":"DELETE","lineNumber":591,"oldContent":"    )"},{"type":"DELETE","lineNumber":599,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":600,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":597,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":599,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":604,"oldContent":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":602,"content":"}"}]},{"timestamp":1754554694974,"changes":[{"type":"DELETE","lineNumber":96,"oldContent":" */"},{"type":"DELETE","lineNumber":97,"oldContent":"    // Vereinfachte Richtungsberechnung"},{"type":"INSERT","lineNumber":96,"content":"        )"},{"type":"INSERT","lineNumber":97,"content":"    }"},{"type":"MODIFY","lineNumber":99,"content":"    // Fallback: Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen","oldContent":"    // In einer echten Implementierung würde man die aktuelle Position des Benutzers"},{"type":"DELETE","lineNumber":215,"oldContent":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"DELETE","lineNumber":216,"oldContent":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"DELETE","lineNumber":217,"oldContent":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"INSERT","lineNumber":215,"content":"    size: Float,"},{"type":"INSERT","lineNumber":216,"content":"    color: Color,"},{"type":"INSERT","lineNumber":217,"content":"    confidence: Float"},{"type":"MODIFY","lineNumber":223,"content":"    }","oldContent":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"INSERT","lineNumber":262,"content":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":263,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"MODIFY","lineNumber":266,"content":"    canvas.drawPath(arrowPath, strokePaint)","oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"MODIFY","lineNumber":320,"content":"                delay(16) // ~60 FPS","oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":330,"oldContent":"}"},{"type":"DELETE","lineNumber":331,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":332,"oldContent":"        position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":330,"content":"                screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":331,"content":"                screenHeight = screenHeight"},{"type":"INSERT","lineNumber":332,"content":"            )"},{"type":"DELETE","lineNumber":357,"oldContent":"    }"},{"type":"INSERT","lineNumber":359,"content":"    }"},{"type":"DELETE","lineNumber":362,"oldContent":" */"},{"type":"DELETE","lineNumber":363,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":364,"content":" */"},{"type":"INSERT","lineNumber":365,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":378,"oldContent":"}"},{"type":"DELETE","lineNumber":379,"oldContent":"    )"},{"type":"DELETE","lineNumber":380,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":381,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":382,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":383,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":384,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":378,"content":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"INSERT","lineNumber":379,"content":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"INSERT","lineNumber":380,"content":"    "},{"type":"INSERT","lineNumber":381,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":382,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":383,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":384,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":386,"content":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":388,"oldContent":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"MODIFY","lineNumber":390,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":501,"content":"    // Placeholder: In einer echten Implementierung würde hier","oldContent":"}"},{"type":"DELETE","lineNumber":505,"oldContent":""},{"type":"MODIFY","lineNumber":507,"content":"","oldContent":"/**"},{"type":"INSERT","lineNumber":508,"content":"/**"},{"type":"DELETE","lineNumber":527,"oldContent":"    }"},{"type":"DELETE","lineNumber":530,"oldContent":"/**"},{"type":"INSERT","lineNumber":529,"content":"    }"},{"type":"MODIFY","lineNumber":532,"content":"/**","oldContent":" */"},{"type":"INSERT","lineNumber":534,"content":" */"},{"type":"DELETE","lineNumber":542,"oldContent":"    "},{"type":"INSERT","lineNumber":544,"content":"    "},{"type":"DELETE","lineNumber":566,"oldContent":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":568,"content":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":584,"oldContent":"    }"},{"type":"MODIFY","lineNumber":586,"content":"    }","oldContent":"    "},{"type":"INSERT","lineNumber":587,"content":"    "},{"type":"DELETE","lineNumber":595,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":598,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":597,"content":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":600,"oldContent":"}"},{"type":"INSERT","lineNumber":599,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":602,"content":"}"}]},{"timestamp":1754554699064,"changes":[{"type":"DELETE","lineNumber":46,"oldContent":"        "},{"type":"DELETE","lineNumber":47,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":48,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":49,"oldContent":"                draw3DArrow("},{"type":"DELETE","lineNumber":50,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":51,"oldContent":"                    direction = arrowDirection,"},{"type":"DELETE","lineNumber":52,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":53,"oldContent":"                )"},{"type":"INSERT","lineNumber":46,"content":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":47,"content":"            calculateArrowPosition("},{"type":"INSERT","lineNumber":48,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":49,"content":"                screenPosition = bestMatch.screenPosition,"},{"type":"INSERT","lineNumber":50,"content":"                screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":51,"content":"                screenHeight = screenHeight"},{"type":"INSERT","lineNumber":52,"content":"            )"},{"type":"INSERT","lineNumber":53,"content":"        } else {"},{"type":"DELETE","lineNumber":58,"oldContent":"}"},{"type":"DELETE","lineNumber":59,"oldContent":""},{"type":"DELETE","lineNumber":60,"oldContent":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"DELETE","lineNumber":61,"oldContent":"private fun calculateArrowPosition("},{"type":"INSERT","lineNumber":58,"content":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":59,"content":"            calculateArrowDirection("},{"type":"INSERT","lineNumber":60,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":61,"content":"                currentStep = currentStep,"},{"type":"INSERT","lineNumber":265,"content":"    // Zeichne Umriss"},{"type":"DELETE","lineNumber":266,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"DELETE","lineNumber":326,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":327,"oldContent":"    }"},{"type":"DELETE","lineNumber":328,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":329,"oldContent":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":326,"content":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":327,"content":"            calculateArrowPosition("},{"type":"INSERT","lineNumber":328,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":329,"content":"                screenPosition = bestMatch.screenPosition,"},{"type":"MODIFY","lineNumber":359,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":361,"oldContent":"}"},{"type":"DELETE","lineNumber":362,"oldContent":" */"},{"type":"INSERT","lineNumber":361,"content":""},{"type":"MODIFY","lineNumber":364,"content":" */","oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":365,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":369,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":370,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":371,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":372,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":369,"content":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":370,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":371,"content":") {"},{"type":"INSERT","lineNumber":372,"content":"    val baseSize = 60.dp.toPx()"},{"type":"INSERT","lineNumber":373,"content":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"INSERT","lineNumber":374,"content":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"INSERT","lineNumber":375,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":374,"oldContent":"    }"},{"type":"DELETE","lineNumber":375,"oldContent":"        "},{"type":"DELETE","lineNumber":376,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"MODIFY","lineNumber":377,"content":"    // Leichtes Schweben des Pfeils","oldContent":"        "},{"type":"MODIFY","lineNumber":386,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)","oldContent":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":389,"content":"    }"},{"type":"DELETE","lineNumber":390,"oldContent":"}"},{"type":"DELETE","lineNumber":494,"oldContent":"}"},{"type":"DELETE","lineNumber":495,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":496,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":497,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":498,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":499,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":500,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":494,"content":" */"},{"type":"INSERT","lineNumber":495,"content":"private fun DrawScope.drawGLBArrow("},{"type":"INSERT","lineNumber":496,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":497,"content":"    orientation: Float,"},{"type":"INSERT","lineNumber":498,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":499,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":500,"content":") {"},{"type":"INSERT","lineNumber":506,"content":"}"},{"type":"DELETE","lineNumber":508,"oldContent":"}"},{"type":"MODIFY","lineNumber":529,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":531,"content":""},{"type":"DELETE","lineNumber":532,"oldContent":" */"},{"type":"MODIFY","lineNumber":534,"content":" */","oldContent":" */"},{"type":"MODIFY","lineNumber":544,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":565,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":566,"oldContent":" */"},{"type":"INSERT","lineNumber":565,"content":"    offsetY: Float = 0f"},{"type":"INSERT","lineNumber":566,"content":") {"},{"type":"INSERT","lineNumber":567,"content":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":568,"oldContent":"        "},{"type":"INSERT","lineNumber":585,"content":"        close()"},{"type":"DELETE","lineNumber":587,"oldContent":"        close()"},{"type":"DELETE","lineNumber":589,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":590,"content":""},{"type":"DELETE","lineNumber":596,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":598,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":597,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":599,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"MODIFY","lineNumber":602,"content":"}","oldContent":"}"}]},{"timestamp":1754554708079,"changes":[{"type":"MODIFY","lineNumber":33,"content":"    currentStep: Int = 1,","oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"MODIFY","lineNumber":38,"content":") {","oldContent":"            landmark = bestMatch.landmark,"},{"type":"MODIFY","lineNumber":40,"content":"    // Nur den besten Match verwenden","oldContent":"            screenWidth = screenWidth,"},{"type":"MODIFY","lineNumber":57,"content":"        // Berechne die Richtung des Pfeils mit Navigationsdaten","oldContent":"        }"},{"type":"DELETE","lineNumber":71,"oldContent":"    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen"},{"type":"DELETE","lineNumber":72,"oldContent":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"DELETE","lineNumber":73,"oldContent":"    "},{"type":"DELETE","lineNumber":74,"oldContent":"    val x = landmark.position.x.toFloat()"},{"type":"DELETE","lineNumber":75,"oldContent":"    "},{"type":"DELETE","lineNumber":76,"oldContent":"    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung"},{"type":"DELETE","lineNumber":77,"oldContent":"    "},{"type":"INSERT","lineNumber":71,"content":"                draw3DArrow("},{"type":"INSERT","lineNumber":72,"content":"                    position = arrowPosition,"},{"type":"INSERT","lineNumber":73,"content":"                    direction = arrowDirection,"},{"type":"INSERT","lineNumber":74,"content":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":75,"content":"                    size = size"},{"type":"INSERT","lineNumber":76,"content":"                )"},{"type":"INSERT","lineNumber":77,"content":"            }"},{"type":"MODIFY","lineNumber":98,"content":"    ","oldContent":"/**"},{"type":"MODIFY","lineNumber":115,"content":"","oldContent":"        canvas.translate(position.x, position.y)"},{"type":"DELETE","lineNumber":119,"oldContent":"        "},{"type":"DELETE","lineNumber":120,"oldContent":"        // Zeichne den 3D-Pfeil"},{"type":"DELETE","lineNumber":121,"oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":119,"content":"private fun calculateArrowDirection("},{"type":"INSERT","lineNumber":120,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":121,"content":"    currentStep: Int = 1,"},{"type":"MODIFY","lineNumber":124,"content":"): Float {","oldContent":"        // Stelle den ursprünglichen Zustand wieder her"},{"type":"MODIFY","lineNumber":218,"content":") {","oldContent":"/**"},{"type":"INSERT","lineNumber":226,"content":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"INSERT","lineNumber":227,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":228,"content":"        style = Paint.Style.STROKE"},{"type":"INSERT","lineNumber":229,"content":"        strokeWidth = 3f"},{"type":"DELETE","lineNumber":227,"oldContent":"}"},{"type":"DELETE","lineNumber":228,"oldContent":""},{"type":"DELETE","lineNumber":229,"oldContent":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"DELETE","lineNumber":230,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":231,"oldContent":"fun Animated3DArrowOverlay("},{"type":"DELETE","lineNumber":232,"oldContent":"    isFeatureMappingEnabled: Boolean,"},{"type":"DELETE","lineNumber":233,"oldContent":"    screenHeight: Float,"},{"type":"DELETE","lineNumber":234,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":235,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":237,"oldContent":"    LaunchedEffect(bestMatch) {"},{"type":"DELETE","lineNumber":238,"oldContent":"            while (true) {"},{"type":"DELETE","lineNumber":239,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":240,"oldContent":"        }"},{"type":"DELETE","lineNumber":241,"oldContent":"    "},{"type":"DELETE","lineNumber":242,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":243,"oldContent":"            screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":244,"oldContent":"        )"},{"type":"INSERT","lineNumber":232,"content":"    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)"},{"type":"INSERT","lineNumber":233,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":234,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":235,"content":"        moveTo(0f, -size * 0.5f)"},{"type":"INSERT","lineNumber":236,"content":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":237,"content":"        lineTo(size * 0.15f, -size * 0.2f)"},{"type":"INSERT","lineNumber":238,"content":"        "},{"type":"INSERT","lineNumber":239,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":240,"content":"        lineTo(size * 0.15f, size * 0.3f)"},{"type":"INSERT","lineNumber":241,"content":"        lineTo(-size * 0.15f, size * 0.3f)"},{"type":"INSERT","lineNumber":242,"content":"        lineTo(-size * 0.15f, -size * 0.2f)"},{"type":"INSERT","lineNumber":243,"content":"        lineTo(-size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":244,"content":"        "},{"type":"MODIFY","lineNumber":252,"content":"    ","oldContent":"                drawAnimated3DArrow("},{"type":"MODIFY","lineNumber":274,"content":"    ","oldContent":"    }"},{"type":"MODIFY","lineNumber":333,"content":"        } else {","oldContent":""},{"type":"DELETE","lineNumber":338,"oldContent":"    "},{"type":"DELETE","lineNumber":339,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":340,"oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":338,"content":"            calculateArrowDirection("},{"type":"INSERT","lineNumber":339,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":340,"content":"                currentStep = currentStep,"},{"type":"INSERT","lineNumber":344,"content":"        } else {"},{"type":"INSERT","lineNumber":345,"content":"            0f"},{"type":"INSERT","lineNumber":346,"content":"        }"},{"type":"INSERT","lineNumber":347,"content":"        "},{"type":"INSERT","lineNumber":348,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":345,"oldContent":"}"},{"type":"DELETE","lineNumber":346,"oldContent":"    )"},{"type":"DELETE","lineNumber":347,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":348,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":349,"oldContent":"    }"},{"type":"MODIFY","lineNumber":350,"content":"                drawAnimated3DArrow(","oldContent":" */"},{"type":"DELETE","lineNumber":354,"oldContent":"/**"},{"type":"DELETE","lineNumber":355,"oldContent":"}"},{"type":"DELETE","lineNumber":356,"oldContent":"    )"},{"type":"INSERT","lineNumber":354,"content":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":355,"content":"                    size = size"},{"type":"INSERT","lineNumber":356,"content":"                )"},{"type":"INSERT","lineNumber":358,"content":"        }"},{"type":"DELETE","lineNumber":359,"oldContent":"    }"},{"type":"MODIFY","lineNumber":362,"content":"/**","oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":363,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":365,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"MODIFY","lineNumber":368,"content":"    confidence: Float,","oldContent":"        close()"},{"type":"DELETE","lineNumber":374,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":376,"content":"    "},{"type":"DELETE","lineNumber":464,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":465,"oldContent":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":464,"content":"    // Basis-Richtung basierend auf Landmark-Typ"},{"type":"INSERT","lineNumber":465,"content":"    val baseDirection = when {"},{"type":"DELETE","lineNumber":472,"oldContent":" */"},{"type":"DELETE","lineNumber":473,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":474,"oldContent":"/**"},{"type":"DELETE","lineNumber":475,"oldContent":""},{"type":"INSERT","lineNumber":472,"content":"        landmark.name.contains(\"Entry\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":473,"content":"        landmark.name.contains(\"entrance\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":474,"content":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":475,"content":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f     // Diagonal nach oben"},{"type":"DELETE","lineNumber":485,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":486,"oldContent":"        "},{"type":"DELETE","lineNumber":487,"oldContent":") {"},{"type":"DELETE","lineNumber":488,"oldContent":"}"},{"type":"INSERT","lineNumber":485,"content":"    "},{"type":"INSERT","lineNumber":486,"content":"    // Füge Confidence-basierte Variation hinzu"},{"type":"INSERT","lineNumber":487,"content":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"INSERT","lineNumber":488,"content":"    "},{"type":"DELETE","lineNumber":491,"oldContent":"        "},{"type":"DELETE","lineNumber":492,"oldContent":"}"},{"type":"DELETE","lineNumber":493,"oldContent":"}"},{"type":"INSERT","lineNumber":491,"content":""},{"type":"INSERT","lineNumber":492,"content":"/**"},{"type":"INSERT","lineNumber":493,"content":" * Zeichnet GLB-basierte 3D-Pfeil (Placeholder für echte GLB-Rendering)"},{"type":"INSERT","lineNumber":528,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":529,"oldContent":"    }"},{"type":"INSERT","lineNumber":533,"content":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"DELETE","lineNumber":534,"oldContent":" */"},{"type":"MODIFY","lineNumber":539,"content":"    confidence: Float","oldContent":"}"},{"type":"INSERT","lineNumber":543,"content":"                  offsetX = size * 0.08f, offsetY = size * 0.08f)"},{"type":"DELETE","lineNumber":544,"oldContent":"    "},{"type":"DELETE","lineNumber":562,"oldContent":"}"},{"type":"DELETE","lineNumber":563,"oldContent":"    )"},{"type":"DELETE","lineNumber":564,"oldContent":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":562,"content":"    size: Float,"},{"type":"INSERT","lineNumber":563,"content":"    color: Color,"},{"type":"INSERT","lineNumber":564,"content":"    offsetX: Float = 0f,"},{"type":"DELETE","lineNumber":575,"oldContent":"}"},{"type":"DELETE","lineNumber":576,"oldContent":"    )"},{"type":"DELETE","lineNumber":577,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":575,"content":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"INSERT","lineNumber":576,"content":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":577,"content":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":580,"oldContent":"}"},{"type":"DELETE","lineNumber":581,"oldContent":"        imageUrl = \"\""},{"type":"DELETE","lineNumber":582,"oldContent":"    )"},{"type":"DELETE","lineNumber":583,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":580,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":581,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":582,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":583,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":589,"content":"}"},{"type":"DELETE","lineNumber":590,"oldContent":" */"},{"type":"MODIFY","lineNumber":591,"content":"/**","oldContent":"    )"},{"type":"MODIFY","lineNumber":593,"content":" */","oldContent":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":594,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":595,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":596,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":598,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":599,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":600,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":601,"content":"    )"},{"type":"DELETE","lineNumber":596,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":597,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":598,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"}]},{"timestamp":1754554719472,"changes":[{"type":"MODIFY","lineNumber":42,"content":"    ","oldContent":"        )"},{"type":"DELETE","lineNumber":65,"oldContent":"private fun calculateArrowPosition("},{"type":"DELETE","lineNumber":66,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":67,"oldContent":"): Offset {"},{"type":"INSERT","lineNumber":65,"content":"        } else {"},{"type":"INSERT","lineNumber":66,"content":"            0f"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":"    return Offset("},{"type":"DELETE","lineNumber":83,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":84,"oldContent":"    )"},{"type":"DELETE","lineNumber":85,"oldContent":"}"},{"type":"INSERT","lineNumber":82,"content":"/**"},{"type":"INSERT","lineNumber":83,"content":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"INSERT","lineNumber":84,"content":" */"},{"type":"INSERT","lineNumber":85,"content":"private fun calculateArrowPosition("},{"type":"MODIFY","lineNumber":87,"content":"    screenPosition: android.graphics.PointF?,","oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"DELETE","lineNumber":99,"oldContent":"    // Fallback: Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen"},{"type":"DELETE","lineNumber":100,"oldContent":" */"},{"type":"DELETE","lineNumber":101,"oldContent":"private fun DrawScope.draw3DArrow("},{"type":"INSERT","lineNumber":99,"content":"    // Fallback: Verwende eine berechnete Position basierend auf Landmark-ID"},{"type":"INSERT","lineNumber":100,"content":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"INSERT","lineNumber":101,"content":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"DELETE","lineNumber":103,"oldContent":"    val x = landmark.position?.x?.toFloat() ?: 0f"},{"type":"DELETE","lineNumber":104,"oldContent":"    val y = landmark.position?.y?.toFloat() ?: 0f"},{"type":"INSERT","lineNumber":103,"content":"    // Generiere eine konsistente Position basierend auf der Landmark-ID"},{"type":"INSERT","lineNumber":104,"content":"    val hashCode = landmark.id.hashCode()"},{"type":"INSERT","lineNumber":105,"content":"    val normalizedX = (abs(hashCode) % 100) / 100f"},{"type":"INSERT","lineNumber":106,"content":"    val normalizedY = (abs(hashCode / 100) % 100) / 100f"},{"type":"DELETE","lineNumber":106,"oldContent":"    // Normalisiere die Position auf Bildschirmkoordinaten"},{"type":"DELETE","lineNumber":107,"oldContent":"    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung"},{"type":"DELETE","lineNumber":108,"oldContent":"    val normalizedY = (y % 100) / 100f"},{"type":"DELETE","lineNumber":109,"oldContent":"    "},{"type":"DELETE","lineNumber":192,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":193,"oldContent":"    "},{"type":"DELETE","lineNumber":194,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":190,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":191,"content":"        // Speichere den aktuellen Zustand"},{"type":"INSERT","lineNumber":192,"content":"        canvas.save()"},{"type":"DELETE","lineNumber":196,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":197,"oldContent":"    "},{"type":"DELETE","lineNumber":198,"oldContent":"    // Zeichne Umriss"},{"type":"DELETE","lineNumber":199,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"DELETE","lineNumber":200,"oldContent":"    "},{"type":"DELETE","lineNumber":201,"oldContent":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"DELETE","lineNumber":202,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":194,"content":"        // Verschiebe zum Pfeil-Zentrum"},{"type":"INSERT","lineNumber":195,"content":"        canvas.translate(position.x, position.y)"},{"type":"INSERT","lineNumber":196,"content":"        "},{"type":"INSERT","lineNumber":197,"content":"        // Rotiere basierend auf der Richtung"},{"type":"INSERT","lineNumber":198,"content":"        canvas.rotate(direction)"},{"type":"INSERT","lineNumber":199,"content":"        "},{"type":"INSERT","lineNumber":200,"content":"        // Zeichne den 3D-Pfeil"},{"type":"DELETE","lineNumber":204,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":205,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":206,"oldContent":"    "},{"type":"INSERT","lineNumber":202,"content":"        "},{"type":"INSERT","lineNumber":203,"content":"        // Stelle den ursprünglichen Zustand wieder her"},{"type":"INSERT","lineNumber":204,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":208,"oldContent":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"INSERT","lineNumber":206,"content":"}"},{"type":"DELETE","lineNumber":227,"oldContent":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"INSERT","lineNumber":228,"content":"    }"},{"type":"INSERT","lineNumber":229,"content":"    "},{"type":"DELETE","lineNumber":236,"oldContent":"    isFeatureMappingEnabled: Boolean,"},{"type":"DELETE","lineNumber":247,"oldContent":"            while (true) {"},{"type":"INSERT","lineNumber":245,"content":"    "},{"type":"DELETE","lineNumber":271,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":272,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":269,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":270,"content":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":275,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":276,"oldContent":"                    animationProgress = animationProgress,"},{"type":"DELETE","lineNumber":277,"oldContent":"                )"},{"type":"DELETE","lineNumber":278,"oldContent":"            }"},{"type":"INSERT","lineNumber":273,"content":"    val highlightPath = Path().apply {"},{"type":"INSERT","lineNumber":274,"content":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"INSERT","lineNumber":275,"content":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"INSERT","lineNumber":276,"content":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"INSERT","lineNumber":277,"content":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"INSERT","lineNumber":278,"content":"        close()"},{"type":"DELETE","lineNumber":280,"oldContent":"}"},{"type":"DELETE","lineNumber":281,"oldContent":"/**"},{"type":"DELETE","lineNumber":282,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":280,"content":"    "},{"type":"DELETE","lineNumber":284,"oldContent":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":282,"content":"}"},{"type":"DELETE","lineNumber":289,"oldContent":"    "},{"type":"DELETE","lineNumber":290,"oldContent":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"DELETE","lineNumber":291,"oldContent":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"DELETE","lineNumber":292,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":293,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":294,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":295,"oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":296,"oldContent":"        canvas.restore()"},{"type":"INSERT","lineNumber":287,"content":"private fun getArrowColor(confidence: Float): Color {"},{"type":"INSERT","lineNumber":288,"content":"    return when {"},{"type":"INSERT","lineNumber":289,"content":"        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher"},{"type":"INSERT","lineNumber":290,"content":"        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher"},{"type":"INSERT","lineNumber":291,"content":"        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay"},{"type":"INSERT","lineNumber":292,"content":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"INSERT","lineNumber":293,"content":"    }"},{"type":"INSERT","lineNumber":294,"content":"}"},{"type":"DELETE","lineNumber":335,"oldContent":"}"},{"type":"DELETE","lineNumber":336,"oldContent":"    )"},{"type":"DELETE","lineNumber":337,"oldContent":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":333,"content":"        }"},{"type":"INSERT","lineNumber":334,"content":"        "},{"type":"INSERT","lineNumber":335,"content":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":345,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":347,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":352,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":353,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":350,"content":"                    direction = arrowDirection,"},{"type":"INSERT","lineNumber":351,"content":"                    confidence = bestMatch.confidence,"},{"type":"MODIFY","lineNumber":374,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":479,"oldContent":"}"},{"type":"INSERT","lineNumber":477,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"DELETE","lineNumber":484,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":482,"content":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":561,"oldContent":"        close()"},{"type":"INSERT","lineNumber":559,"content":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":574,"oldContent":"    )"},{"type":"INSERT","lineNumber":572,"content":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":578,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":576,"content":"        "},{"type":"DELETE","lineNumber":584,"oldContent":"    )"},{"type":"INSERT","lineNumber":582,"content":"        "},{"type":"DELETE","lineNumber":592,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":595,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":597,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":595,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":597,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":598,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":599,"content":"    )"},{"type":"INSERT","lineNumber":600,"content":"}"}]},{"timestamp":1754554731088,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.content.Context","oldContent":"import android.graphics.Canvas"},{"type":"INSERT","lineNumber":4,"content":"import android.graphics.Path"},{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.foundation.layout.Box","oldContent":"import androidx.compose.foundation.Canvas"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.ui.graphics.drawscope.Stroke"},{"type":"MODIFY","lineNumber":20,"content":"import kotlin.math.*","oldContent":" * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt"},{"type":"MODIFY","lineNumber":24,"content":" * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt","oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":26,"content":" */","oldContent":"    screenWidth: Float,"},{"type":"MODIFY","lineNumber":32,"content":"    screenHeight: Float,","oldContent":") {"},{"type":"MODIFY","lineNumber":34,"content":"    totalSteps: Int = 3,","oldContent":"        "},{"type":"MODIFY","lineNumber":41,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }","oldContent":"            screenHeight = screenHeight"},{"type":"INSERT","lineNumber":43,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"DELETE","lineNumber":44,"oldContent":"        "},{"type":"MODIFY","lineNumber":54,"content":"            Offset(screenWidth / 2, screenHeight / 2)","oldContent":"                )"},{"type":"MODIFY","lineNumber":56,"content":"        ","oldContent":"            }"},{"type":"DELETE","lineNumber":69,"oldContent":"): Offset {"},{"type":"DELETE","lineNumber":70,"oldContent":"    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen"},{"type":"INSERT","lineNumber":69,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":70,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":79,"oldContent":"    val normalizedY = (y % 100) / 100f"},{"type":"DELETE","lineNumber":80,"oldContent":"    return Offset("},{"type":"INSERT","lineNumber":79,"content":"    }"},{"type":"INSERT","lineNumber":80,"content":"}"},{"type":"MODIFY","lineNumber":86,"content":"    landmark: com.example.arwalking.FeatureLandmark,","oldContent":"/**"},{"type":"MODIFY","lineNumber":88,"content":"    screenWidth: Float,","oldContent":" */"},{"type":"MODIFY","lineNumber":102,"content":"    ","oldContent":"    position: Offset,"},{"type":"MODIFY","lineNumber":107,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":172,"oldContent":"    // Füge leichte Variation basierend auf Position hinzu"},{"type":"DELETE","lineNumber":173,"oldContent":"    val positionVariation = ((landmark.position?.x ?: 0.0) % 10).toFloat() * 2f - 10f"},{"type":"INSERT","lineNumber":172,"content":"    // Füge leichte Variation basierend auf Landmark-ID hinzu"},{"type":"INSERT","lineNumber":173,"content":"    val positionVariation = (landmark.id.hashCode() % 10).toFloat() * 2f - 10f"},{"type":"DELETE","lineNumber":188,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"MODIFY","lineNumber":190,"content":"    drawIntoCanvas { canvas ->","oldContent":"        // Speichere den aktuellen Zustand"},{"type":"INSERT","lineNumber":191,"content":"        // Speichere den aktuellen Zustand"},{"type":"INSERT","lineNumber":193,"content":"        "},{"type":"DELETE","lineNumber":195,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":201,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":203,"oldContent":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":205,"content":"    }"},{"type":"DELETE","lineNumber":206,"oldContent":"    val highlightPath = Path().apply {"},{"type":"MODIFY","lineNumber":217,"content":"    val paint = Paint().apply {","oldContent":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence"},{"type":"DELETE","lineNumber":225,"oldContent":"    }"},{"type":"DELETE","lineNumber":227,"oldContent":"    "},{"type":"INSERT","lineNumber":228,"content":"    }"},{"type":"INSERT","lineNumber":229,"content":"    "},{"type":"DELETE","lineNumber":243,"oldContent":"    "},{"type":"DELETE","lineNumber":245,"oldContent":"    LaunchedEffect(bestMatch) {"},{"type":"DELETE","lineNumber":246,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":247,"oldContent":"            }"},{"type":"INSERT","lineNumber":244,"content":"    }"},{"type":"INSERT","lineNumber":245,"content":"    "},{"type":"INSERT","lineNumber":246,"content":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"INSERT","lineNumber":247,"content":"    val shadowPath = Path(arrowPath).apply {"},{"type":"DELETE","lineNumber":251,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":252,"oldContent":"            screenHeight = screenHeight"},{"type":"DELETE","lineNumber":253,"oldContent":"        )"},{"type":"DELETE","lineNumber":254,"oldContent":"        val arrowDirection = calculateArrowDirection(bestMatch.landmark)"},{"type":"DELETE","lineNumber":255,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":251,"content":"    val shadowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":252,"content":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"INSERT","lineNumber":253,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":254,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":255,"content":"    }"},{"type":"DELETE","lineNumber":267,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":269,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":271,"oldContent":"    val highlightPath = Path().apply {"},{"type":"INSERT","lineNumber":269,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":270,"content":"        style = Paint.Style.FILL"},{"type":"MODIFY","lineNumber":273,"content":"    val highlightPath = Path().apply {","oldContent":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"INSERT","lineNumber":274,"content":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"MODIFY","lineNumber":279,"content":"    }","oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":281,"oldContent":"}"},{"type":"DELETE","lineNumber":283,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":282,"content":"}"},{"type":"INSERT","lineNumber":283,"content":""},{"type":"DELETE","lineNumber":285,"oldContent":"private fun getArrowColor(confidence: Float): Color {"},{"type":"MODIFY","lineNumber":287,"content":"private fun getArrowColor(confidence: Float): Color {","oldContent":"    return when {"},{"type":"INSERT","lineNumber":288,"content":"    return when {"},{"type":"DELETE","lineNumber":302,"oldContent":"}"},{"type":"DELETE","lineNumber":303,"oldContent":"    )"},{"type":"DELETE","lineNumber":304,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":305,"oldContent":"    }"},{"type":"DELETE","lineNumber":306,"oldContent":" */"},{"type":"INSERT","lineNumber":302,"content":"    isFeatureMappingEnabled: Boolean,"},{"type":"INSERT","lineNumber":303,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":304,"content":"    screenHeight: Float,"},{"type":"INSERT","lineNumber":305,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":306,"content":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":309,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":310,"oldContent":"        }"},{"type":"INSERT","lineNumber":309,"content":") {"},{"type":"INSERT","lineNumber":310,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":322,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":323,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":322,"content":"    "},{"type":"INSERT","lineNumber":323,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"DELETE","lineNumber":331,"oldContent":"        }"},{"type":"INSERT","lineNumber":332,"content":"            Offset(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":333,"content":"        }"},{"type":"DELETE","lineNumber":334,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":344,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":348,"oldContent":"                    direction = arrowDirection,"},{"type":"INSERT","lineNumber":347,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"MODIFY","lineNumber":350,"content":"                    direction = arrowDirection,","oldContent":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":351,"content":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":372,"oldContent":"    "},{"type":"DELETE","lineNumber":373,"oldContent":"    "},{"type":"INSERT","lineNumber":372,"content":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"INSERT","lineNumber":374,"content":"    "},{"type":"DELETE","lineNumber":468,"oldContent":"}"},{"type":"DELETE","lineNumber":469,"oldContent":"    )"},{"type":"INSERT","lineNumber":468,"content":"        "},{"type":"INSERT","lineNumber":469,"content":"        // Allgemeine Typen basierend auf Namen"},{"type":"DELETE","lineNumber":475,"oldContent":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"INSERT","lineNumber":477,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"DELETE","lineNumber":480,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":482,"content":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":556,"oldContent":"}"},{"type":"DELETE","lineNumber":557,"oldContent":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":558,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":556,"content":" * Zeichnet eine einzelne Pfeil-Schicht"},{"type":"INSERT","lineNumber":557,"content":" */"},{"type":"INSERT","lineNumber":559,"content":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":570,"oldContent":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":572,"content":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":574,"oldContent":"        "},{"type":"INSERT","lineNumber":576,"content":"        "},{"type":"DELETE","lineNumber":580,"oldContent":"        "},{"type":"INSERT","lineNumber":582,"content":"        "},{"type":"INSERT","lineNumber":586,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":587,"oldContent":"}"},{"type":"DELETE","lineNumber":588,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":590,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"MODIFY","lineNumber":594,"content":"        id = processedLandmark.id,","oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":595,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":596,"content":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":597,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":599,"oldContent":"        description = \"Processed landmark\","}]},{"timestamp":1754554746072,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import androidx.compose.foundation.layout.fillMaxSize","oldContent":"import androidx.compose.foundation.Canvas"},{"type":"DELETE","lineNumber":22,"oldContent":" */"},{"type":"DELETE","lineNumber":23,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":22,"content":"/**"},{"type":"INSERT","lineNumber":23,"content":" * 3D-Pfeil Overlay für AR-Navigation (Snapchat-Style)"},{"type":"MODIFY","lineNumber":25,"content":" * Unterstützt GLB-Modelle für realistischere 3D-Darstellung","oldContent":"    isFeatureMappingEnabled: Boolean,"},{"type":"DELETE","lineNumber":28,"oldContent":"    screenHeight: Float,"},{"type":"DELETE","lineNumber":29,"oldContent":") {"},{"type":"INSERT","lineNumber":28,"content":"fun AR3DArrowOverlay("},{"type":"INSERT","lineNumber":29,"content":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":35,"content":"    useGLBModel: Boolean = true,","oldContent":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"MODIFY","lineNumber":45,"content":"        // Berechne die Position des Pfeils basierend auf dem Landmark","oldContent":"        // Berechne die Richtung des Pfeils"},{"type":"MODIFY","lineNumber":64,"content":"            )","oldContent":"private fun calculateArrowPosition("},{"type":"MODIFY","lineNumber":68,"content":"        ","oldContent":"): Offset {"},{"type":"MODIFY","lineNumber":90,"content":"): Offset {","oldContent":"private fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {"},{"type":"INSERT","lineNumber":106,"content":"    val normalizedY = (abs(hashCode / 100) % 100) / 100f"},{"type":"DELETE","lineNumber":107,"oldContent":"    "},{"type":"DELETE","lineNumber":181,"oldContent":"    }"},{"type":"DELETE","lineNumber":182,"oldContent":"    "},{"type":"DELETE","lineNumber":183,"oldContent":"    val shadowPaint = Paint().apply {"},{"type":"DELETE","lineNumber":184,"oldContent":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"DELETE","lineNumber":185,"oldContent":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":181,"content":"private fun DrawScope.draw3DArrow("},{"type":"INSERT","lineNumber":182,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":183,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":184,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":185,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":189,"content":"    "},{"type":"DELETE","lineNumber":191,"oldContent":"    "},{"type":"DELETE","lineNumber":226,"oldContent":"    }"},{"type":"MODIFY","lineNumber":228,"content":"    }","oldContent":"    "},{"type":"INSERT","lineNumber":229,"content":"    "},{"type":"MODIFY","lineNumber":244,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":249,"content":"    }","oldContent":"            }"},{"type":"DELETE","lineNumber":265,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":266,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":267,"oldContent":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":265,"content":"    "},{"type":"INSERT","lineNumber":266,"content":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"INSERT","lineNumber":267,"content":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":268,"content":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"DELETE","lineNumber":270,"oldContent":"                )"},{"type":"MODIFY","lineNumber":271,"content":"    }","oldContent":"}"},{"type":"INSERT","lineNumber":272,"content":"    "},{"type":"DELETE","lineNumber":274,"oldContent":"    "},{"type":"MODIFY","lineNumber":282,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":285,"content":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence","oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":286,"content":" */"},{"type":"DELETE","lineNumber":288,"oldContent":"    "},{"type":"DELETE","lineNumber":296,"oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":297,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":298,"oldContent":"}"},{"type":"INSERT","lineNumber":296,"content":"/**"},{"type":"INSERT","lineNumber":297,"content":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"INSERT","lineNumber":298,"content":" */"},{"type":"DELETE","lineNumber":313,"oldContent":"}"},{"type":"DELETE","lineNumber":314,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":315,"oldContent":"        close()"},{"type":"DELETE","lineNumber":316,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":317,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":313,"content":"    // Animation für pulsierenden Effekt"},{"type":"INSERT","lineNumber":314,"content":"    LaunchedEffect(bestMatch) {"},{"type":"INSERT","lineNumber":315,"content":"        if (bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":316,"content":"            while (true) {"},{"type":"INSERT","lineNumber":317,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"MODIFY","lineNumber":332,"content":"            Offset(screenWidth / 2, screenHeight / 2)","oldContent":"            Offset(screenWidth / 2, screenHeight / 2)"},{"type":"MODIFY","lineNumber":347,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {","oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":349,"content":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":351,"oldContent":"                    position = arrowPosition,"},{"type":"MODIFY","lineNumber":374,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":419,"oldContent":"}"},{"type":"DELETE","lineNumber":420,"oldContent":"    )"},{"type":"DELETE","lineNumber":421,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":422,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":423,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":424,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":425,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":426,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":427,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":419,"content":" * Berechnet stabilisierte 3D-Position für Snapchat-Style AR"},{"type":"INSERT","lineNumber":420,"content":" */"},{"type":"INSERT","lineNumber":421,"content":"private fun calculateStabilized3DPosition("},{"type":"INSERT","lineNumber":422,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":423,"content":"    screenPosition: PointF?,"},{"type":"INSERT","lineNumber":424,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":425,"content":"    screenHeight: Float,"},{"type":"INSERT","lineNumber":426,"content":"    cameraRotation: Float,"},{"type":"INSERT","lineNumber":427,"content":"    deviceOrientation: Float"},{"type":"DELETE","lineNumber":443,"oldContent":"    // Fallback: Verwende Landmark-Position mit verbesserter Berechnung"},{"type":"DELETE","lineNumber":444,"oldContent":"    val normalizedX = ((landmark.position?.x?.toFloat() ?: 0f) % 100) / 100f"},{"type":"DELETE","lineNumber":445,"oldContent":"    val normalizedY = ((landmark.position?.y?.toFloat() ?: 0f) % 100) / 100f"},{"type":"INSERT","lineNumber":443,"content":"    // Fallback: Verwende berechnete Position basierend auf Landmark-ID"},{"type":"INSERT","lineNumber":444,"content":"    val hashCode = landmark.id.hashCode()"},{"type":"INSERT","lineNumber":445,"content":"    val normalizedX = (abs(hashCode) % 100) / 100f"},{"type":"INSERT","lineNumber":446,"content":"    val normalizedY = (abs(hashCode / 100) % 100) / 100f"},{"type":"DELETE","lineNumber":464,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":465,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":466,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":467,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":465,"content":"        // Spezifische Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":466,"content":"        landmark.id == \"PT-1-86\" -> 270f    // Prof. Ludwig Büro - nach links"},{"type":"INSERT","lineNumber":467,"content":"        landmark.id == \"PT-1-566\" -> 0f     // Tür - geradeaus"},{"type":"INSERT","lineNumber":468,"content":"        landmark.id == \"PT-1-697\" -> 0f     // Entry - geradeaus"},{"type":"DELETE","lineNumber":476,"oldContent":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"INSERT","lineNumber":478,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"DELETE","lineNumber":481,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":483,"content":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":554,"oldContent":"}"},{"type":"MODIFY","lineNumber":555,"content":"","oldContent":"    )"},{"type":"INSERT","lineNumber":556,"content":"/**"},{"type":"DELETE","lineNumber":558,"oldContent":"    canvas: android.graphics.Canvas,"},{"type":"INSERT","lineNumber":560,"content":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":571,"oldContent":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":573,"content":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":575,"oldContent":"        "},{"type":"MODIFY","lineNumber":577,"content":"        ","oldContent":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":578,"content":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":581,"oldContent":"        "},{"type":"INSERT","lineNumber":583,"content":"        "},{"type":"DELETE","lineNumber":587,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":588,"content":"}"},{"type":"DELETE","lineNumber":589,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":591,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":593,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":594,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":596,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":598,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":601,"content":"}"}]},{"timestamp":1754555228760,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.foundation.layout.Box","oldContent":"import androidx.compose.foundation.Canvas"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.ui.platform.LocalContext"},{"type":"DELETE","lineNumber":17,"oldContent":"import kotlin.math.*"},{"type":"MODIFY","lineNumber":21,"content":"","oldContent":" */"},{"type":"MODIFY","lineNumber":39,"content":"    val context = LocalContext.current","oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"MODIFY","lineNumber":55,"content":"        }","oldContent":"            }"},{"type":"MODIFY","lineNumber":78,"content":"        }","oldContent":"    val normalizedY = (y % 100) / 100f"},{"type":"MODIFY","lineNumber":81,"content":"","oldContent":"        x = normalizedX * screenWidth,"},{"type":"MODIFY","lineNumber":187,"content":"    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence","oldContent":"    }"},{"type":"INSERT","lineNumber":188,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":189,"oldContent":"    "},{"type":"INSERT","lineNumber":227,"content":"        strokeWidth = 3f"},{"type":"DELETE","lineNumber":229,"oldContent":"        strokeWidth = 3f"},{"type":"INSERT","lineNumber":243,"content":"        close()"},{"type":"DELETE","lineNumber":244,"oldContent":"    }"},{"type":"MODIFY","lineNumber":257,"content":"    // Zeichne Schatten","oldContent":"        )"},{"type":"MODIFY","lineNumber":262,"content":"    ","oldContent":"                drawAnimated3DArrow("},{"type":"INSERT","lineNumber":281,"content":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"DELETE","lineNumber":282,"oldContent":"}"},{"type":"MODIFY","lineNumber":284,"content":"/**","oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":300,"oldContent":"}"},{"type":"DELETE","lineNumber":301,"oldContent":"}"},{"type":"INSERT","lineNumber":300,"content":"fun Animated3DArrowOverlay("},{"type":"INSERT","lineNumber":301,"content":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":311,"content":"    var animationProgress by remember { mutableStateOf(0f) }","oldContent":" */"},{"type":"DELETE","lineNumber":320,"oldContent":"        "},{"type":"DELETE","lineNumber":321,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":320,"content":"        }"},{"type":"INSERT","lineNumber":321,"content":"    }"},{"type":"INSERT","lineNumber":331,"content":"        } else {"},{"type":"DELETE","lineNumber":332,"oldContent":"            Offset(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":346,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":347,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":373,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":374,"oldContent":"    "},{"type":"DELETE","lineNumber":389,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":390,"oldContent":"    "},{"type":"DELETE","lineNumber":391,"oldContent":"    }"},{"type":"DELETE","lineNumber":392,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":393,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":394,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":396,"oldContent":"}"},{"type":"DELETE","lineNumber":397,"oldContent":"    }"},{"type":"DELETE","lineNumber":398,"oldContent":"        "},{"type":"DELETE","lineNumber":399,"oldContent":"}"},{"type":"DELETE","lineNumber":400,"oldContent":"}"},{"type":"INSERT","lineNumber":390,"content":"/**"},{"type":"INSERT","lineNumber":391,"content":" * GLB-Model Loader für 3D-Pfeil"},{"type":"INSERT","lineNumber":392,"content":" * Lädt das arrow.glb Modell aus den Assets"},{"type":"INSERT","lineNumber":393,"content":" */"},{"type":"INSERT","lineNumber":394,"content":"class GLBArrowModel(private val context: Context) {"},{"type":"INSERT","lineNumber":395,"content":"    private var isLoaded = false"},{"type":"INSERT","lineNumber":396,"content":"    private var modelData: ByteArray? = null"},{"type":"INSERT","lineNumber":398,"content":"    suspend fun loadModel(): Boolean {"},{"type":"INSERT","lineNumber":399,"content":"        return try {"},{"type":"INSERT","lineNumber":400,"content":"            val inputStream = context.assets.open(\"models/arrow.glb\")"},{"type":"INSERT","lineNumber":401,"content":"            modelData = inputStream.readBytes()"},{"type":"INSERT","lineNumber":402,"content":"            inputStream.close()"},{"type":"INSERT","lineNumber":403,"content":"            isLoaded = true"},{"type":"INSERT","lineNumber":404,"content":"            true"},{"type":"INSERT","lineNumber":405,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":406,"content":"            android.util.Log.e(\"GLBArrowModel\", \"Fehler beim Laden des GLB-Modells: ${e.message}\")"},{"type":"INSERT","lineNumber":407,"content":"            false"},{"type":"INSERT","lineNumber":408,"content":"        }"},{"type":"DELETE","lineNumber":404,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":405,"oldContent":"    "},{"type":"DELETE","lineNumber":406,"oldContent":"    "},{"type":"DELETE","lineNumber":407,"oldContent":"    "},{"type":"DELETE","lineNumber":408,"oldContent":"}"},{"type":"DELETE","lineNumber":409,"oldContent":"    }"},{"type":"DELETE","lineNumber":410,"oldContent":"        imageUrl = \"\""},{"type":"DELETE","lineNumber":415,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":416,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":418,"oldContent":"/**"},{"type":"DELETE","lineNumber":419,"oldContent":" * Berechnet stabilisierte 3D-Position für Snapchat-Style AR"},{"type":"DELETE","lineNumber":420,"oldContent":" */"},{"type":"DELETE","lineNumber":421,"oldContent":"private fun calculateStabilized3DPosition("},{"type":"DELETE","lineNumber":422,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":423,"oldContent":"    screenPosition: PointF?,"},{"type":"DELETE","lineNumber":424,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":425,"oldContent":"    screenHeight: Float,"},{"type":"DELETE","lineNumber":426,"oldContent":"    cameraRotation: Float,"},{"type":"DELETE","lineNumber":427,"oldContent":"    deviceOrientation: Float"},{"type":"DELETE","lineNumber":428,"oldContent":"): Offset {"},{"type":"DELETE","lineNumber":429,"oldContent":"    offsetY: Float = 0f"},{"type":"DELETE","lineNumber":430,"oldContent":"    }"},{"type":"DELETE","lineNumber":431,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":432,"oldContent":"}"},{"type":"DELETE","lineNumber":433,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":434,"oldContent":" */"},{"type":"DELETE","lineNumber":435,"oldContent":"        "},{"type":"DELETE","lineNumber":436,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":437,"oldContent":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":438,"oldContent":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"DELETE","lineNumber":439,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":440,"oldContent":"        canvas.rotate(orientation)"},{"type":"DELETE","lineNumber":441,"oldContent":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"DELETE","lineNumber":442,"oldContent":"    // das GLB-Modell mit einer 3D-Rendering-Engine gerendert"},{"type":"DELETE","lineNumber":443,"oldContent":"    // Fallback: Verwende berechnete Position basierend auf Landmark-ID"},{"type":"DELETE","lineNumber":444,"oldContent":"    val hashCode = landmark.id.hashCode()"},{"type":"DELETE","lineNumber":445,"oldContent":"    val normalizedX = (abs(hashCode) % 100) / 100f"},{"type":"DELETE","lineNumber":446,"oldContent":"    val normalizedY = (abs(hashCode / 100) % 100) / 100f"},{"type":"DELETE","lineNumber":447,"oldContent":"    "},{"type":"DELETE","lineNumber":448,"oldContent":"    return Offset("},{"type":"DELETE","lineNumber":449,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":450,"oldContent":"        imageUrl = \"\""},{"type":"DELETE","lineNumber":451,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":452,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":453,"oldContent":" */"},{"type":"DELETE","lineNumber":454,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":455,"oldContent":"    "},{"type":"DELETE","lineNumber":456,"oldContent":"    }"},{"type":"DELETE","lineNumber":457,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":458,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":459,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":460,"oldContent":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":461,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":462,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":463,"oldContent":"    // Basis-Richtung basierend auf Landmark-Typ"},{"type":"DELETE","lineNumber":464,"oldContent":"    val baseDirection = when {"},{"type":"DELETE","lineNumber":465,"oldContent":"        // Spezifische Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":466,"oldContent":"        landmark.id == \"PT-1-86\" -> 270f    // Prof. Ludwig Büro - nach links"},{"type":"DELETE","lineNumber":467,"oldContent":"        landmark.id == \"PT-1-566\" -> 0f     // Tür - geradeaus"},{"type":"DELETE","lineNumber":468,"oldContent":"        landmark.id == \"PT-1-697\" -> 0f     // Entry - geradeaus"},{"type":"DELETE","lineNumber":469,"oldContent":"        "},{"type":"DELETE","lineNumber":470,"oldContent":"        // Allgemeine Typen basierend auf Namen"},{"type":"DELETE","lineNumber":471,"oldContent":"        landmark.name.contains(\"Entry\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":472,"oldContent":"        landmark.name.contains(\"entrance\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":473,"oldContent":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":474,"oldContent":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f     // Diagonal nach oben"},{"type":"DELETE","lineNumber":475,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":476,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":477,"oldContent":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":478,"oldContent":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"DELETE","lineNumber":479,"oldContent":"        close()"},{"type":"DELETE","lineNumber":480,"oldContent":"    }"},{"type":"DELETE","lineNumber":481,"oldContent":"    "},{"type":"DELETE","lineNumber":482,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":483,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":484,"oldContent":"    "},{"type":"DELETE","lineNumber":485,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":486,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":487,"oldContent":"    "},{"type":"DELETE","lineNumber":488,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"DELETE","lineNumber":489,"oldContent":"}"},{"type":"DELETE","lineNumber":491,"oldContent":"/**"},{"type":"DELETE","lineNumber":492,"oldContent":" * Zeichnet GLB-basierte 3D-Pfeil (Placeholder für echte GLB-Rendering)"},{"type":"DELETE","lineNumber":493,"oldContent":" */"},{"type":"DELETE","lineNumber":494,"oldContent":"private fun DrawScope.drawGLBArrow("},{"type":"DELETE","lineNumber":495,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":496,"oldContent":"    orientation: Float,"},{"type":"DELETE","lineNumber":497,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":498,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":499,"oldContent":") {"},{"type":"DELETE","lineNumber":500,"oldContent":"    // Placeholder: In einer echten Implementierung würde hier"},{"type":"DELETE","lineNumber":501,"oldContent":"    // Glanz-Highlight (oberste Schicht)"},{"type":"DELETE","lineNumber":502,"oldContent":"    drawArrowLayer(canvas, size, color)"},{"type":"DELETE","lineNumber":503,"oldContent":"    // Für jetzt verwenden wir eine verbesserte 2D-Darstellung"},{"type":"DELETE","lineNumber":504,"oldContent":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"DELETE","lineNumber":505,"oldContent":"}"},{"type":"DELETE","lineNumber":507,"oldContent":"/**"},{"type":"DELETE","lineNumber":508,"oldContent":" * Verbesserte 3D-Pfeil-Darstellung mit realistischeren Effekten"},{"type":"DELETE","lineNumber":509,"oldContent":" */"},{"type":"DELETE","lineNumber":510,"oldContent":"private fun DrawScope.drawEnhanced3DArrow("},{"type":"DELETE","lineNumber":511,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":512,"oldContent":"    orientation: Float,"},{"type":"DELETE","lineNumber":513,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":514,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":515,"oldContent":") {"},{"type":"DELETE","lineNumber":516,"oldContent":"    val arrowSize = 80.dp.toPx() * confidence"},{"type":"DELETE","lineNumber":517,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":518,"oldContent":"    "},{"type":"DELETE","lineNumber":519,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":520,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":521,"oldContent":"        canvas.translate(position.x, position.y)"},{"type":"DELETE","lineNumber":522,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":523,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":524,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":525,"oldContent":"        drawLayered3DArrow(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":526,"oldContent":"        "},{"type":"DELETE","lineNumber":527,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":528,"oldContent":"    }"},{"type":"DELETE","lineNumber":529,"oldContent":"}"},{"type":"DELETE","lineNumber":531,"oldContent":"/**"},{"type":"DELETE","lineNumber":532,"oldContent":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"DELETE","lineNumber":533,"oldContent":" */"},{"type":"DELETE","lineNumber":534,"oldContent":"private fun DrawScope.drawLayered3DArrow("},{"type":"DELETE","lineNumber":535,"oldContent":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":536,"oldContent":"        "},{"type":"DELETE","lineNumber":537,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":538,"oldContent":"    confidence: Float"},{"type":"DELETE","lineNumber":539,"oldContent":") {"},{"type":"DELETE","lineNumber":540,"oldContent":"    // Basis-Schatten (tiefste Schicht)"},{"type":"DELETE","lineNumber":541,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":542,"oldContent":"                  offsetX = size * 0.08f, offsetY = size * 0.08f)"},{"type":"DELETE","lineNumber":543,"oldContent":"    "},{"type":"DELETE","lineNumber":544,"oldContent":"        imageUrl = \"\""},{"type":"DELETE","lineNumber":545,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":546,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":547,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":548,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":549,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":550,"oldContent":"    "},{"type":"DELETE","lineNumber":551,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":552,"oldContent":"}"},{"type":"DELETE","lineNumber":553,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":554,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":557,"oldContent":" * Zeichnet eine einzelne Pfeil-Schicht"},{"type":"INSERT","lineNumber":421,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":423,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":424,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":425,"content":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":560,"oldContent":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":561,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":562,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":563,"oldContent":"    offsetX: Float = 0f,"},{"type":"DELETE","lineNumber":564,"oldContent":"    offsetY: Float = 0f"},{"type":"DELETE","lineNumber":565,"oldContent":") {"},{"type":"DELETE","lineNumber":566,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":567,"oldContent":"    )"},{"type":"DELETE","lineNumber":568,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":569,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":571,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":572,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":573,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":574,"oldContent":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"DELETE","lineNumber":575,"oldContent":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":576,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":577,"oldContent":"        "},{"type":"DELETE","lineNumber":578,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":579,"oldContent":"}"},{"type":"DELETE","lineNumber":580,"oldContent":"    )"},{"type":"DELETE","lineNumber":581,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":583,"oldContent":"        "},{"type":"DELETE","lineNumber":584,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":585,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":586,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":587,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":429,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":430,"content":"    )"},{"type":"DELETE","lineNumber":589,"oldContent":"}"},{"type":"DELETE","lineNumber":590,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":591,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"}]},{"timestamp":1754562673411,"changes":[{"type":"MODIFY","lineNumber":27,"content":"@Composable","oldContent":"    screenHeight: Float,"},{"type":"MODIFY","lineNumber":37,"content":"    modifier: Modifier = Modifier","oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"MODIFY","lineNumber":89,"content":"    screenHeight: Float","oldContent":"private fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {"},{"type":"MODIFY","lineNumber":107,"content":"    ","oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"MODIFY","lineNumber":186,"content":") {","oldContent":"        style = Paint.Style.FILL"},{"type":"MODIFY","lineNumber":248,"content":"        offset(size * 0.05f, size * 0.05f)","oldContent":"            }"},{"type":"MODIFY","lineNumber":256,"content":"    ","oldContent":"            screenHeight = screenHeight"},{"type":"MODIFY","lineNumber":295,"content":"","oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"MODIFY","lineNumber":299,"content":"@Composable","oldContent":"}"},{"type":"MODIFY","lineNumber":319,"content":"            }","oldContent":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":389,"content":""},{"type":"DELETE","lineNumber":390,"oldContent":" * GLB-Model Loader für 3D-Pfeil"},{"type":"MODIFY","lineNumber":391,"content":" * GLB-Model Loader für 3D-Pfeil (Fallback auf 2D-Rendering)","oldContent":" * Lädt das arrow.glb Modell aus den Assets"},{"type":"INSERT","lineNumber":392,"content":" * Lädt das arrow.glb Modell aus den Assets oder verwendet 2D-Fallback"},{"type":"DELETE","lineNumber":395,"oldContent":"    color: Color,"},{"type":"INSERT","lineNumber":397,"content":"    "},{"type":"DELETE","lineNumber":401,"oldContent":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"DELETE","lineNumber":403,"oldContent":"    // das GLB-Modell mit einer 3D-Rendering-Engine gerendert"},{"type":"DELETE","lineNumber":405,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"INSERT","lineNumber":404,"content":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"MODIFY","lineNumber":407,"content":"            android.util.Log.w(\"GLBArrowModel\", \"GLB-Modell nicht gefunden, verwende 2D-Fallback: ${e.message}\")","oldContent":"            android.util.Log.e(\"GLBArrowModel\", \"Fehler beim Laden des GLB-Modells: ${e.message}\")"},{"type":"INSERT","lineNumber":408,"content":"            // Fallback: Verwende 2D-Rendering"},{"type":"INSERT","lineNumber":409,"content":"            isLoaded = false"},{"type":"DELETE","lineNumber":411,"oldContent":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":412,"content":"    }"},{"type":"INSERT","lineNumber":414,"content":"    fun isModelLoaded(): Boolean = isLoaded"},{"type":"INSERT","lineNumber":415,"content":"    "},{"type":"INSERT","lineNumber":417,"content":"    "},{"type":"INSERT","lineNumber":418,"content":"    fun hasGLBSupport(): Boolean = isLoaded && modelData != null"},{"type":"DELETE","lineNumber":416,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":417,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":418,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":419,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":420,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":421,"oldContent":"    )"},{"type":"INSERT","lineNumber":426,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":428,"oldContent":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"DELETE","lineNumber":429,"oldContent":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":428,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":429,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":430,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":431,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":432,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":433,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":434,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":435,"content":"    )"},{"type":"INSERT","lineNumber":436,"content":"}"}]},{"timestamp":1754562682392,"changes":[{"type":"MODIFY","lineNumber":30,"content":"    isFeatureMappingEnabled: Boolean,","oldContent":"    // Nur den besten Match verwenden"},{"type":"MODIFY","lineNumber":35,"content":"    useGLBModel: Boolean = false, // Standardmäßig 2D-Rendering verwenden","oldContent":"    useGLBModel: Boolean = true,"},{"type":"INSERT","lineNumber":40,"content":"    var glbModel by remember { mutableStateOf<GLBArrowModel?>(null) }"},{"type":"INSERT","lineNumber":41,"content":"    var isGLBLoaded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":42,"content":"    "},{"type":"INSERT","lineNumber":43,"content":"    // GLB-Modell laden wenn gewünscht"},{"type":"INSERT","lineNumber":44,"content":"    LaunchedEffect(useGLBModel) {"},{"type":"INSERT","lineNumber":45,"content":"        if (useGLBModel) {"},{"type":"INSERT","lineNumber":46,"content":"            val model = GLBArrowModel(context)"},{"type":"INSERT","lineNumber":47,"content":"            isGLBLoaded = model.loadModel()"},{"type":"INSERT","lineNumber":48,"content":"            glbModel = model"},{"type":"INSERT","lineNumber":49,"content":"        }"},{"type":"INSERT","lineNumber":50,"content":"    }"},{"type":"INSERT","lineNumber":51,"content":"    "},{"type":"DELETE","lineNumber":259,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":271,"content":"    "},{"type":"DELETE","lineNumber":312,"oldContent":"        "},{"type":"INSERT","lineNumber":324,"content":"    "},{"type":"DELETE","lineNumber":403,"oldContent":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":416,"content":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":418,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":408,"oldContent":"            android.util.Log.e(\"GLBArrowModel\", \"Fehler beim Laden des GLB-Modells: ${e.message}\")"},{"type":"DELETE","lineNumber":413,"oldContent":"    // Glanz-Highlight (oberste Schicht)"},{"type":"DELETE","lineNumber":414,"oldContent":"    drawArrowLayer(canvas, size, color)"},{"type":"INSERT","lineNumber":425,"content":"    "},{"type":"DELETE","lineNumber":416,"oldContent":"}"},{"type":"DELETE","lineNumber":418,"oldContent":""},{"type":"INSERT","lineNumber":428,"content":"    fun getModelData(): ByteArray? = modelData"},{"type":"INSERT","lineNumber":431,"content":"}"},{"type":"DELETE","lineNumber":423,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":425,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":435,"content":""},{"type":"INSERT","lineNumber":436,"content":""},{"type":"INSERT","lineNumber":438,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":431,"oldContent":"}"},{"type":"DELETE","lineNumber":433,"oldContent":"    )"},{"type":"DELETE","lineNumber":435,"oldContent":"        imageUrl = null"},{"type":"INSERT","lineNumber":446,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":447,"content":"    )"},{"type":"INSERT","lineNumber":448,"content":"}"}]},{"timestamp":1754564055266,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import android.graphics.Path"},{"type":"MODIFY","lineNumber":5,"content":"import androidx.compose.foundation.Canvas","oldContent":"import android.graphics.PointF"},{"type":"DELETE","lineNumber":41,"oldContent":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":43,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":45,"oldContent":"    "},{"type":"DELETE","lineNumber":47,"oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"DELETE","lineNumber":49,"oldContent":"        "},{"type":"DELETE","lineNumber":51,"oldContent":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"DELETE","lineNumber":53,"oldContent":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":55,"oldContent":"            calculateArrowPosition("},{"type":"DELETE","lineNumber":57,"oldContent":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"DELETE","lineNumber":59,"oldContent":"                screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":61,"oldContent":"                screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":51,"content":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":52,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":53,"content":"    "},{"type":"INSERT","lineNumber":54,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":55,"content":"        "},{"type":"INSERT","lineNumber":56,"content":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"INSERT","lineNumber":57,"content":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":58,"content":"            calculateArrowPosition("},{"type":"INSERT","lineNumber":59,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":60,"content":"                screenPosition = bestMatch.screenPosition,"},{"type":"INSERT","lineNumber":61,"content":"                screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":270,"content":"    "},{"type":"DELETE","lineNumber":282,"oldContent":"    "},{"type":"INSERT","lineNumber":323,"content":"    "},{"type":"DELETE","lineNumber":335,"oldContent":"    "},{"type":"INSERT","lineNumber":415,"content":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":417,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":424,"content":"    "},{"type":"DELETE","lineNumber":424,"oldContent":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"DELETE","lineNumber":426,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":427,"content":"    fun getModelData(): ByteArray? = modelData"},{"type":"INSERT","lineNumber":430,"content":"}"},{"type":"DELETE","lineNumber":432,"oldContent":"    "},{"type":"INSERT","lineNumber":434,"content":""},{"type":"INSERT","lineNumber":435,"content":""},{"type":"DELETE","lineNumber":434,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":435,"oldContent":"    fun getModelData(): ByteArray? = modelData"},{"type":"INSERT","lineNumber":437,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":438,"content":" */"},{"type":"DELETE","lineNumber":439,"oldContent":"}"},{"type":"DELETE","lineNumber":442,"oldContent":""},{"type":"DELETE","lineNumber":443,"oldContent":""},{"type":"MODIFY","lineNumber":444,"content":"        position = null, // Position wird aus screenPosition berechnet","oldContent":"    )"},{"type":"MODIFY","lineNumber":446,"content":"    )","oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":447,"content":"}"}]},{"timestamp":1754564059867,"changes":[{"type":"INSERT","lineNumber":5,"content":"import android.graphics.PointF"},{"type":"DELETE","lineNumber":30,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":31,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":46,"content":"            val model = GLBArrowModel(context)"},{"type":"INSERT","lineNumber":47,"content":"            isGLBLoaded = model.loadModel()"},{"type":"INSERT","lineNumber":48,"content":"            glbModel = model"},{"type":"INSERT","lineNumber":49,"content":"        }"},{"type":"INSERT","lineNumber":50,"content":"    }"},{"type":"INSERT","lineNumber":51,"content":"    "},{"type":"DELETE","lineNumber":47,"oldContent":"            val model = GLBArrowModel(context)"},{"type":"DELETE","lineNumber":50,"oldContent":"            isGLBLoaded = model.loadModel()"},{"type":"DELETE","lineNumber":53,"oldContent":"            glbModel = model"},{"type":"DELETE","lineNumber":56,"oldContent":"        }"},{"type":"DELETE","lineNumber":59,"oldContent":"    }"},{"type":"DELETE","lineNumber":61,"oldContent":"    "},{"type":"DELETE","lineNumber":131,"oldContent":"        "},{"type":"MODIFY","lineNumber":132,"content":"    totalSteps: Int = 3,","oldContent":"        // Stelle den ursprünglichen Zustand wieder her"},{"type":"INSERT","lineNumber":133,"content":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":134,"oldContent":"    }"},{"type":"DELETE","lineNumber":135,"oldContent":"}"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"/**"},{"type":"DELETE","lineNumber":138,"oldContent":" * Zeichnet die 3D-Pfeil-Form"},{"type":"DELETE","lineNumber":139,"oldContent":" */"},{"type":"DELETE","lineNumber":140,"oldContent":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":141,"oldContent":"    canvas: Canvas,"},{"type":"DELETE","lineNumber":142,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":143,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":144,"oldContent":"    confidence: Float"},{"type":"DELETE","lineNumber":145,"oldContent":") {"},{"type":"DELETE","lineNumber":146,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":147,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":148,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":149,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":150,"oldContent":"    }"},{"type":"DELETE","lineNumber":151,"oldContent":"    "},{"type":"DELETE","lineNumber":152,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":153,"oldContent":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"DELETE","lineNumber":154,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":155,"oldContent":"        style = Paint.Style.STROKE"},{"type":"DELETE","lineNumber":156,"oldContent":"        strokeWidth = 3f"},{"type":"DELETE","lineNumber":157,"oldContent":"    }"},{"type":"DELETE","lineNumber":158,"oldContent":"    "},{"type":"DELETE","lineNumber":159,"oldContent":"    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)"},{"type":"DELETE","lineNumber":160,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":161,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":162,"oldContent":"        moveTo(0f, -size * 0.5f)"},{"type":"DELETE","lineNumber":163,"oldContent":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"DELETE","lineNumber":164,"oldContent":"        lineTo(size * 0.15f, -size * 0.2f)"},{"type":"DELETE","lineNumber":165,"oldContent":"        "},{"type":"DELETE","lineNumber":166,"oldContent":"        lineTo(size * 0.15f, size * 0.3f)"},{"type":"DELETE","lineNumber":167,"oldContent":"        lineTo(-size * 0.15f, -size * 0.2f)"},{"type":"DELETE","lineNumber":168,"oldContent":"        "},{"type":"DELETE","lineNumber":169,"oldContent":"    }"},{"type":"DELETE","lineNumber":170,"oldContent":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"DELETE","lineNumber":171,"oldContent":"        offset(size * 0.05f, size * 0.05f)"},{"type":"DELETE","lineNumber":172,"oldContent":"    "},{"type":"INSERT","lineNumber":135,"content":"    // Priorität: Verwende Navigationsanweisung wenn verfügbar"},{"type":"INSERT","lineNumber":136,"content":"    val baseAngle = if (currentInstruction != null) {"},{"type":"INSERT","lineNumber":137,"content":"        val lowerInstruction = currentInstruction.lowercase()"},{"type":"INSERT","lineNumber":138,"content":"        when {"},{"type":"INSERT","lineNumber":139,"content":"            lowerInstruction.contains(\"rechts\") || lowerInstruction.contains(\"right\") -> 90f // Nach rechts"},{"type":"INSERT","lineNumber":140,"content":"            lowerInstruction.contains(\"links\") || lowerInstruction.contains(\"left\") -> 270f // Nach links"},{"type":"INSERT","lineNumber":141,"content":"            lowerInstruction.contains(\"tür\") || lowerInstruction.contains(\"door\") || "},{"type":"INSERT","lineNumber":142,"content":"            lowerInstruction.contains(\"eingang\") || lowerInstruction.contains(\"entrance\") ||"},{"type":"INSERT","lineNumber":143,"content":"            lowerInstruction.contains(\"durch\") || lowerInstruction.contains(\"through\") -> 0f // Geradeaus durch Tür"},{"type":"INSERT","lineNumber":144,"content":"            else -> 0f // Standard: geradeaus"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":"    } else {"},{"type":"INSERT","lineNumber":147,"content":"        // Fallback: Berechne Richtung basierend auf Landmark-Typ und Position"},{"type":"INSERT","lineNumber":148,"content":"        when {"},{"type":"INSERT","lineNumber":149,"content":"            // Prof. Ludwig Büro (PT-1-86) - Ausgang nach links"},{"type":"INSERT","lineNumber":150,"content":"            landmark.id == \"PT-1-86\" -> 270f // Nach links"},{"type":"INSERT","lineNumber":151,"content":"            "},{"type":"INSERT","lineNumber":152,"content":"            // Türen/Eingänge - geradeaus durch (z.B. PT-1-566, PT-1-697)"},{"type":"INSERT","lineNumber":153,"content":"            landmark.id.contains(\"PT-1-566\") || landmark.id.contains(\"PT-1-697\") -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":154,"content":"            "},{"type":"INSERT","lineNumber":155,"content":"            // Allgemeine Türen basierend auf Typ"},{"type":"INSERT","lineNumber":156,"content":"            landmark.name.contains(\"Tür\", ignoreCase = true) || "},{"type":"INSERT","lineNumber":157,"content":"            landmark.name.contains(\"door\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":158,"content":"            landmark.name.contains(\"Entry\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":159,"content":"            "},{"type":"INSERT","lineNumber":160,"content":"            // Büros - nach links"},{"type":"INSERT","lineNumber":161,"content":"            landmark.name.contains(\"Prof.\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":162,"content":"            landmark.name.contains(\"Office\", ignoreCase = true) -> 270f // Nach links"},{"type":"INSERT","lineNumber":163,"content":"            "},{"type":"INSERT","lineNumber":164,"content":"            // Treppen - nach oben/unten"},{"type":"INSERT","lineNumber":165,"content":"            landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":166,"content":"            landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f // Diagonal nach oben"},{"type":"INSERT","lineNumber":167,"content":"            "},{"type":"INSERT","lineNumber":168,"content":"            // Aufzüge - geradeaus"},{"type":"INSERT","lineNumber":169,"content":"            landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":170,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":171,"content":"            "},{"type":"INSERT","lineNumber":172,"content":"            else -> {"},{"type":"INSERT","lineNumber":173,"content":"                // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"DELETE","lineNumber":200,"oldContent":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":201,"content":"    "},{"type":"DELETE","lineNumber":269,"oldContent":"    "},{"type":"INSERT","lineNumber":271,"content":"    "},{"type":"DELETE","lineNumber":322,"oldContent":"    "},{"type":"INSERT","lineNumber":324,"content":"    "},{"type":"DELETE","lineNumber":414,"oldContent":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":416,"content":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":425,"content":"    "},{"type":"DELETE","lineNumber":426,"oldContent":"    "},{"type":"DELETE","lineNumber":430,"oldContent":""},{"type":"DELETE","lineNumber":432,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":433,"oldContent":"}"},{"type":"DELETE","lineNumber":434,"oldContent":"    )"},{"type":"DELETE","lineNumber":437,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":434,"content":""},{"type":"INSERT","lineNumber":435,"content":""},{"type":"INSERT","lineNumber":436,"content":""},{"type":"INSERT","lineNumber":437,"content":"/**"},{"type":"MODIFY","lineNumber":440,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {","oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":441,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":442,"oldContent":"}"},{"type":"MODIFY","lineNumber":443,"content":"        name = processedLandmark.name,","oldContent":"        imageUrl = null"},{"type":"INSERT","lineNumber":444,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":446,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":447,"content":"    )"},{"type":"INSERT","lineNumber":448,"content":"}"}]},{"timestamp":1754564805927,"changes":[{"type":"DELETE","lineNumber":46,"oldContent":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":48,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":51,"oldContent":"    "},{"type":"DELETE","lineNumber":53,"oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":52,"content":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":53,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":54,"content":"    "},{"type":"INSERT","lineNumber":55,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"MODIFY","lineNumber":116,"content":"    val hashCode = (landmark.id ?: \"default\").hashCode()","oldContent":"    val hashCode = landmark.id.hashCode()"},{"type":"MODIFY","lineNumber":153,"content":"            (landmark.id?.contains(\"PT-1-566\") == true) || (landmark.id?.contains(\"PT-1-697\") == true) -> 0f // Geradeaus","oldContent":"            landmark.id.contains(\"PT-1-566\") || landmark.id.contains(\"PT-1-697\") -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":185,"oldContent":"    val positionVariation = (landmark.id.hashCode() % 10).toFloat() * 2f - 10f"},{"type":"DELETE","lineNumber":186,"oldContent":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"DELETE","lineNumber":187,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":188,"oldContent":"    }"},{"type":"DELETE","lineNumber":189,"oldContent":"    // Zeichne Schatten"},{"type":"DELETE","lineNumber":190,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":191,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":192,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":185,"content":"    val positionVariation = ((landmark.id ?: \"default\").hashCode() % 10).toFloat() * 2f - 10f"},{"type":"INSERT","lineNumber":186,"content":"    "},{"type":"INSERT","lineNumber":187,"content":"    return (baseAngle + positionVariation) % 360f"},{"type":"INSERT","lineNumber":188,"content":"}"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"/**"},{"type":"INSERT","lineNumber":191,"content":" * Zeichnet einen 3D-Pfeil auf dem Canvas"},{"type":"INSERT","lineNumber":192,"content":" */"},{"type":"DELETE","lineNumber":319,"oldContent":"    "},{"type":"DELETE","lineNumber":320,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"INSERT","lineNumber":319,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":320,"content":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":351,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":352,"oldContent":""},{"type":"INSERT","lineNumber":351,"content":"                totalSteps = totalSteps,"},{"type":"INSERT","lineNumber":352,"content":"                currentInstruction = currentInstruction"},{"type":"INSERT","lineNumber":425,"content":"    "},{"type":"DELETE","lineNumber":427,"oldContent":"    "},{"type":"MODIFY","lineNumber":439,"content":" */","oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":445,"oldContent":"}"},{"type":"DELETE","lineNumber":446,"oldContent":"    )"},{"type":"INSERT","lineNumber":445,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":447,"content":"    )"},{"type":"INSERT","lineNumber":448,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/RouteViewModel.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/RouteViewModel.kt","baseContent":"// RouteViewModel.kt (erweitert)\npackage com.example.arwalking\n\nimport RouteData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport android.util.Log\nimport android.content.Context\nimport com.google.gson.Gson\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\nclass RouteViewModel : ViewModel() {\n\n    private val TAG = \"RouteViewModel\"\n    \n    // Feature Map Manager\n    private var featureMapManager: FeatureMapManager? = null\n    \n    // State für Feature-Navigation\n    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)\n    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()\n    \n    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())\n    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()\n    \n    private val _isFeatureMappingEnabled = MutableStateFlow(false)\n    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()\n\n    // Die neue Funktion die das NavigationRoute-Objekt zurückgibt\n    fun loadNavigationRoute(context: Context): NavigationRoute? {\n        return try {\n            Log.i(TAG, \"Route wird geladen...\")\n\n            // JSON laden und parsen (wie vorher)\n            val jsonString = loadJSONFromAsset(context, \"route.json\")\n            val gson = Gson()\n            val routeData = gson.fromJson(jsonString, RouteData::class.java)\n\n            // In NavigationRoute umwandeln\n            convertToNavigationRoute(routeData)\n\n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")\n            null\n        }\n    }\n\n    // Konvertierung von RouteData zu NavigationRoute\n    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {\n        val steps = mutableListOf<NavigationStep>()\n        var stepNumber = 1\n\n        routeData.route.path.forEach { pathItem ->\n            pathItem.routeParts.forEach { routePart ->\n                val landmarkIds = routePart.landmarks.map { it.id }\n\n                val step = NavigationStep(\n                    stepNumber = stepNumber,\n                    instruction = routePart.instructionDe,\n                    building = pathItem.xmlName,\n                    landmarkIds = landmarkIds\n                )\n\n                steps.add(step)\n                stepNumber++\n            }\n        }\n\n        return NavigationRoute(\n            totalLength = routeData.route.routeInfo.routeLength,\n            steps = steps\n        )\n    }\n\n    // Optional: Für Debugging - die alte Logging-Funktion angepasst\n    fun logNavigationRoute(navigationRoute: NavigationRoute) {\n        Log.i(TAG, \"=== NAVIGATION ROUTE START ===\")\n        Log.i(TAG, \"Gesamte Routenlänge: ${navigationRoute.totalLength} Meter\")\n        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")\n        Log.i(TAG, \"\")\n\n        navigationRoute.steps.forEach { step ->\n            Log.i(TAG, \"Schritt ${step.stepNumber}: ${step.instruction}\")\n            Log.i(TAG, \"  Gebäude: ${step.building}\")\n            if (step.landmarkIds.isNotEmpty()) {\n                Log.i(TAG, \"  Landmark IDs: ${step.landmarkIds.joinToString(\", \")}\")\n            } else {\n                Log.i(TAG, \"  Keine Landmarks\")\n            }\n            Log.i(TAG, \"\")\n        }\n\n        Log.i(TAG, \"=== NAVIGATION ROUTE ENDE ===\")\n    }\n\n    private fun loadJSONFromAsset(context: Context, filename: String): String {\n        return context.assets.open(filename).bufferedReader().use { it.readText() }\n    }\n}","baseTimestamp":1754044850874,"deltas":[{"timestamp":1754345876135,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.example.arwalking","oldContent":"// RouteViewModel.kt (erweitert)"},{"type":"MODIFY","lineNumber":11,"content":"import kotlinx.coroutines.delay","oldContent":"import kotlinx.coroutines.flow.MutableStateFlow"},{"type":"MODIFY","lineNumber":60,"content":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()","oldContent":"                    stepNumber = stepNumber,"},{"type":"MODIFY","lineNumber":92,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":108,"oldContent":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"DELETE","lineNumber":110,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":113,"oldContent":"            Log.i(TAG, \"Lade Route aus JSON-Datei...\")"},{"type":"DELETE","lineNumber":115,"oldContent":"            "},{"type":"DELETE","lineNumber":118,"oldContent":"            // Stelle sicher, dass die ViewModel initialisiert ist"},{"type":"DELETE","lineNumber":121,"oldContent":"            initialize(context)"},{"type":"DELETE","lineNumber":123,"oldContent":"            "},{"type":"DELETE","lineNumber":126,"oldContent":"            // Lade Route aus JSON-Datei asynchron"},{"type":"DELETE","lineNumber":128,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":131,"oldContent":"                try {"},{"type":"INSERT","lineNumber":124,"content":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"INSERT","lineNumber":125,"content":"        return try {"},{"type":"INSERT","lineNumber":126,"content":"            Log.i(TAG, \"Lade Route aus JSON-Datei...\")"},{"type":"INSERT","lineNumber":127,"content":"            "},{"type":"INSERT","lineNumber":128,"content":"            // Stelle sicher, dass die ViewModel initialisiert ist"},{"type":"INSERT","lineNumber":129,"content":"            initialize(context)"},{"type":"INSERT","lineNumber":130,"content":"            "},{"type":"INSERT","lineNumber":131,"content":"            // Lade Route aus JSON-Datei asynchron"},{"type":"INSERT","lineNumber":132,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":133,"content":"                try {"},{"type":"DELETE","lineNumber":167,"oldContent":"    }"},{"type":"INSERT","lineNumber":168,"content":"            "},{"type":"INSERT","lineNumber":169,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":170,"content":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"INSERT","lineNumber":171,"content":"            null"},{"type":"INSERT","lineNumber":172,"content":"        }"},{"type":"INSERT","lineNumber":173,"content":"    }"},{"type":"DELETE","lineNumber":171,"oldContent":"            "},{"type":"DELETE","lineNumber":174,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":177,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"DELETE","lineNumber":180,"oldContent":"            null"},{"type":"DELETE","lineNumber":183,"oldContent":"        }"},{"type":"MODIFY","lineNumber":196,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":199,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":203,"content":"        ","oldContent":"        "},{"type":"INSERT","lineNumber":225,"content":"        }"},{"type":"INSERT","lineNumber":226,"content":"        "},{"type":"DELETE","lineNumber":227,"oldContent":"        }"},{"type":"DELETE","lineNumber":230,"oldContent":"        "},{"type":"DELETE","lineNumber":243,"oldContent":"                // Feature-Matching System initialisieren"},{"type":"INSERT","lineNumber":244,"content":"            try {"},{"type":"INSERT","lineNumber":245,"content":"                Log.i(TAG, \"Initialisiere neues Storage-System und Feature-Matching...\")"},{"type":"INSERT","lineNumber":246,"content":"                "},{"type":"INSERT","lineNumber":247,"content":"                // Neues Storage-System initialisieren"},{"type":"INSERT","lineNumber":248,"content":"                storageManager = ArWalkingStorageManager(context)"},{"type":"INSERT","lineNumber":249,"content":"                "},{"type":"INSERT","lineNumber":250,"content":"                // Feature-Matching System initialisieren"},{"type":"DELETE","lineNumber":247,"oldContent":"            try {"},{"type":"DELETE","lineNumber":250,"oldContent":"                Log.i(TAG, \"Initialisiere neues Storage-System und Feature-Matching...\")"},{"type":"DELETE","lineNumber":253,"oldContent":"                "},{"type":"DELETE","lineNumber":255,"oldContent":"                // Neues Storage-System initialisieren"},{"type":"DELETE","lineNumber":257,"oldContent":"                storageManager = ArWalkingStorageManager(context)"},{"type":"DELETE","lineNumber":260,"oldContent":"                "},{"type":"INSERT","lineNumber":283,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":284,"oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"INSERT","lineNumber":298,"content":"            }"},{"type":"INSERT","lineNumber":299,"content":"        }"},{"type":"INSERT","lineNumber":300,"content":"    }"},{"type":"INSERT","lineNumber":301,"content":"    "},{"type":"INSERT","lineNumber":302,"content":"    /**"},{"type":"DELETE","lineNumber":300,"oldContent":"            }"},{"type":"DELETE","lineNumber":303,"oldContent":"        }"},{"type":"DELETE","lineNumber":306,"oldContent":"    }"},{"type":"DELETE","lineNumber":309,"oldContent":"    "},{"type":"DELETE","lineNumber":312,"oldContent":"    /**"},{"type":"DELETE","lineNumber":317,"oldContent":"            "},{"type":"DELETE","lineNumber":318,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":319,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":320,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":321,"oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":322,"oldContent":"    "},{"type":"DELETE","lineNumber":323,"oldContent":""},{"type":"INSERT","lineNumber":317,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"INSERT","lineNumber":318,"content":"                    landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":319,"content":"                        Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")"},{"type":"INSERT","lineNumber":320,"content":"                    }"},{"type":"INSERT","lineNumber":321,"content":"                } else {"},{"type":"INSERT","lineNumber":322,"content":"                    Log.w(TAG, \"Keine Landmark-Bilder im Projektverzeichnis gefunden\")"},{"type":"INSERT","lineNumber":323,"content":"                    Log.i(TAG, \"Tipp: Kopiere Bilder in /Users/florian/Documents/GitHub/ar-walking/landmark_images/\")"},{"type":"INSERT","lineNumber":354,"content":"    "},{"type":"DELETE","lineNumber":355,"oldContent":"                android.os.Build.BRAND.startsWith(\"generic\") && android.os.Build.DEVICE.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":412,"content":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":413,"oldContent":"                false"},{"type":"INSERT","lineNumber":424,"content":""},{"type":"DELETE","lineNumber":426,"oldContent":""},{"type":"INSERT","lineNumber":436,"content":"                android.os.Build.BRAND.startsWith(\"generic\") && android.os.Build.DEVICE.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":437,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":438,"oldContent":"                "},{"type":"MODIFY","lineNumber":439,"content":"    ","oldContent":"            try {"},{"type":"INSERT","lineNumber":441,"content":"    "},{"type":"INSERT","lineNumber":447,"content":"    }"},{"type":"DELETE","lineNumber":448,"oldContent":"    "},{"type":"MODIFY","lineNumber":450,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System","oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":476,"oldContent":"}"},{"type":"DELETE","lineNumber":477,"oldContent":"        }"},{"type":"INSERT","lineNumber":476,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":477,"content":"     */"},{"type":"MODIFY","lineNumber":482,"content":"    /**","oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":489,"oldContent":"    }"},{"type":"DELETE","lineNumber":490,"oldContent":"    }"},{"type":"INSERT","lineNumber":489,"content":"                "},{"type":"INSERT","lineNumber":490,"content":"                if (storageManager != null) {"},{"type":"DELETE","lineNumber":496,"oldContent":"                "},{"type":"MODIFY","lineNumber":499,"content":"                ","oldContent":"    }"},{"type":"INSERT","lineNumber":500,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":501,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"INSERT","lineNumber":502,"content":"            }"},{"type":"INSERT","lineNumber":503,"content":"        }"},{"type":"INSERT","lineNumber":504,"content":"    }"},{"type":"DELETE","lineNumber":504,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":508,"content":"    /**"},{"type":"DELETE","lineNumber":506,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"DELETE","lineNumber":509,"oldContent":"            }"},{"type":"DELETE","lineNumber":512,"oldContent":"        }"},{"type":"DELETE","lineNumber":514,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":518,"content":"     * Geht zum vorherigen Navigationsschritt","oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":566,"content":"    "},{"type":"DELETE","lineNumber":567,"oldContent":"    /**"},{"type":"DELETE","lineNumber":589,"oldContent":"}"},{"type":"DELETE","lineNumber":590,"oldContent":"        }"},{"type":"DELETE","lineNumber":591,"oldContent":"            }"},{"type":"DELETE","lineNumber":592,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":589,"content":"                    ),"},{"type":"INSERT","lineNumber":590,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":591,"content":"                        stepNumber = 3,"},{"type":"INSERT","lineNumber":592,"content":"                        instruction = \"Gehen Sie die Treppe hoch zu Stockwerk $floor\","},{"type":"DELETE","lineNumber":595,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":596,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":595,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":596,"content":"                        stepNumber = 4,"},{"type":"INSERT","lineNumber":616,"content":"    "},{"type":"DELETE","lineNumber":617,"oldContent":"    /**"},{"type":"DELETE","lineNumber":621,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":624,"oldContent":"            try {"},{"type":"MODIFY","lineNumber":626,"content":"        viewModelScope.launch {","oldContent":"                Log.d(TAG, \"processFrameForFeatureMatching called\")"},{"type":"INSERT","lineNumber":627,"content":"            try {"},{"type":"INSERT","lineNumber":628,"content":"                Log.d(TAG, \"processFrameForFeatureMatching called\")"},{"type":"DELETE","lineNumber":637,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":639,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":641,"oldContent":"                }"},{"type":"DELETE","lineNumber":644,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":646,"oldContent":"     */"},{"type":"DELETE","lineNumber":648,"oldContent":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":650,"oldContent":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":644,"content":"                } else {"},{"type":"DELETE","lineNumber":652,"oldContent":"        "},{"type":"INSERT","lineNumber":646,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":647,"content":"                }"},{"type":"DELETE","lineNumber":655,"oldContent":"        try {"},{"type":"DELETE","lineNumber":658,"oldContent":"            val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":661,"oldContent":"            if (currentStep > 0 && currentStep <= steps.size) {"},{"type":"INSERT","lineNumber":656,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":657,"content":"     */"},{"type":"INSERT","lineNumber":658,"content":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":659,"content":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":660,"content":"        "},{"type":"INSERT","lineNumber":661,"content":"        try {"},{"type":"INSERT","lineNumber":662,"content":"            val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":663,"content":"            if (currentStep > 0 && currentStep <= steps.size) {"},{"type":"MODIFY","lineNumber":704,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":716,"oldContent":"    /**"},{"type":"INSERT","lineNumber":718,"content":"    /**"},{"type":"INSERT","lineNumber":727,"content":"        }"},{"type":"DELETE","lineNumber":729,"oldContent":"        }"},{"type":"DELETE","lineNumber":737,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":739,"oldContent":"        if (_isFeatureMappingEnabled.value && _currentRoute.value != null) {"},{"type":"DELETE","lineNumber":741,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":740,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":741,"content":"        if (_isFeatureMappingEnabled.value && _currentRoute.value != null) {"},{"type":"INSERT","lineNumber":742,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":743,"content":"                val simulatedMatches = generateSimulatedMatches(_currentRoute.value!!, validStep)"},{"type":"DELETE","lineNumber":745,"oldContent":"                val simulatedMatches = generateSimulatedMatches(_currentRoute.value!!, validStep)"},{"type":"DELETE","lineNumber":749,"oldContent":""},{"type":"DELETE","lineNumber":750,"oldContent":"    "},{"type":"DELETE","lineNumber":751,"oldContent":""},{"type":"DELETE","lineNumber":753,"oldContent":"    "},{"type":"DELETE","lineNumber":755,"oldContent":"    /**"},{"type":"DELETE","lineNumber":757,"oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":759,"oldContent":"     */"},{"type":"DELETE","lineNumber":761,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":763,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":765,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":767,"oldContent":"            "},{"type":"DELETE","lineNumber":769,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":771,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":773,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":775,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":777,"oldContent":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"DELETE","lineNumber":779,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":781,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":783,"oldContent":"                                id = landmark, // String aus JSON"},{"type":"DELETE","lineNumber":785,"oldContent":"                                name = landmark,"},{"type":"DELETE","lineNumber":787,"oldContent":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":790,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":792,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":805,"oldContent":"                            )"},{"type":"DELETE","lineNumber":807,"oldContent":"                        )"},{"type":"DELETE","lineNumber":810,"oldContent":"                    }"},{"type":"DELETE","lineNumber":812,"oldContent":"                }"},{"type":"DELETE","lineNumber":815,"oldContent":"            "},{"type":"DELETE","lineNumber":817,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":820,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":823,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":825,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":796,"content":"    /**"},{"type":"INSERT","lineNumber":797,"content":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"INSERT","lineNumber":798,"content":"     */"},{"type":"INSERT","lineNumber":799,"content":"    fun getStatus(): String {"},{"type":"INSERT","lineNumber":800,"content":"        val route = _currentRoute.value"},{"type":"INSERT","lineNumber":801,"content":"        val step = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":802,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":803,"content":"        val matchesCount = _currentMatches.value.size"},{"type":"INSERT","lineNumber":804,"content":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"INSERT","lineNumber":805,"content":"        "},{"type":"INSERT","lineNumber":806,"content":"        return buildString {"},{"type":"INSERT","lineNumber":807,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":808,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":809,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":810,"content":"                appendLine(\"Route ID: ${route.route.id}\")"},{"type":"INSERT","lineNumber":811,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":812,"content":"            }"},{"type":"INSERT","lineNumber":813,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":814,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":815,"content":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"INSERT","lineNumber":816,"content":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":817,"content":"            appendLine(\"=== Ende Status ===\")"},{"type":"INSERT","lineNumber":818,"content":"        }"},{"type":"INSERT","lineNumber":819,"content":"    }"},{"type":"INSERT","lineNumber":820,"content":"    "},{"type":"INSERT","lineNumber":821,"content":"    /**"},{"type":"INSERT","lineNumber":822,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":823,"content":"     */"},{"type":"INSERT","lineNumber":824,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":825,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":826,"content":"        try {"},{"type":"INSERT","lineNumber":827,"content":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"INSERT","lineNumber":828,"content":"            "},{"type":"INSERT","lineNumber":829,"content":"            // Stoppe Navigation"},{"type":"INSERT","lineNumber":830,"content":"            stopNavigation()"},{"type":"INSERT","lineNumber":831,"content":"            "},{"type":"INSERT","lineNumber":832,"content":"            // Bereinige Ressourcen"},{"type":"INSERT","lineNumber":833,"content":"            arTrackingSystem?.resetTracking()"},{"type":"INSERT","lineNumber":834,"content":"            processedLandmarks.clear()"},{"type":"INSERT","lineNumber":835,"content":"            "},{"type":"INSERT","lineNumber":836,"content":"            Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":837,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":838,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"INSERT","lineNumber":839,"content":"        }"},{"type":"INSERT","lineNumber":840,"content":"    }"},{"type":"INSERT","lineNumber":841,"content":"    "},{"type":"INSERT","lineNumber":842,"content":""},{"type":"INSERT","lineNumber":843,"content":"    "},{"type":"INSERT","lineNumber":844,"content":""},{"type":"INSERT","lineNumber":845,"content":"    "},{"type":"INSERT","lineNumber":846,"content":"    /**"},{"type":"INSERT","lineNumber":847,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":848,"content":"     */"},{"type":"INSERT","lineNumber":849,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":850,"content":"        return try {"},{"type":"INSERT","lineNumber":851,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":852,"content":"            "},{"type":"INSERT","lineNumber":853,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":854,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":855,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":856,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":857,"content":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"INSERT","lineNumber":858,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":859,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":860,"content":"                                id = landmark, // String aus JSON"},{"type":"INSERT","lineNumber":861,"content":"                                name = landmark,"},{"type":"INSERT","lineNumber":862,"content":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":863,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":864,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":865,"content":"                            )"},{"type":"INSERT","lineNumber":866,"content":"                        )"},{"type":"INSERT","lineNumber":867,"content":"                    }"},{"type":"INSERT","lineNumber":868,"content":"                }"},{"type":"INSERT","lineNumber":869,"content":"            }"},{"type":"INSERT","lineNumber":870,"content":"            "},{"type":"INSERT","lineNumber":871,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":872,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":873,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":874,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":882,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":883,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":889,"content":"            "},{"type":"INSERT","lineNumber":890,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":891,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":892,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":893,"content":"            }"},{"type":"INSERT","lineNumber":894,"content":"            "},{"type":"INSERT","lineNumber":895,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":896,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":897,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":898,"content":"            emptyList()"},{"type":"INSERT","lineNumber":903,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":904,"content":"     */"},{"type":"INSERT","lineNumber":905,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":906,"content":"        return try {"},{"type":"INSERT","lineNumber":907,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":908,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":909,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":910,"content":"            } else {"},{"type":"INSERT","lineNumber":911,"content":"                emptyList()"},{"type":"INSERT","lineNumber":912,"content":"            }"},{"type":"INSERT","lineNumber":913,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":914,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":915,"content":"            emptyList()"},{"type":"INSERT","lineNumber":918,"content":""},{"type":"INSERT","lineNumber":919,"content":""},{"type":"INSERT","lineNumber":920,"content":""},{"type":"INSERT","lineNumber":921,"content":"    /**"},{"type":"INSERT","lineNumber":922,"content":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"INSERT","lineNumber":924,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":925,"content":"        try {"},{"type":"INSERT","lineNumber":926,"content":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":927,"content":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":928,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":929,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":930,"content":"        }"},{"type":"INSERT","lineNumber":931,"content":"    }"},{"type":"DELETE","lineNumber":849,"oldContent":"            }"},{"type":"INSERT","lineNumber":934,"content":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":936,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"DELETE","lineNumber":859,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":861,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":865,"oldContent":"            "},{"type":"DELETE","lineNumber":866,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":868,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":869,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":870,"oldContent":"            }"},{"type":"DELETE","lineNumber":872,"oldContent":"            "},{"type":"DELETE","lineNumber":873,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":874,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":876,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":877,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":880,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":883,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":884,"oldContent":"     */"},{"type":"DELETE","lineNumber":885,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":887,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":889,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":891,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":893,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":895,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":897,"oldContent":"            }"},{"type":"DELETE","lineNumber":899,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":901,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"DELETE","lineNumber":903,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":907,"oldContent":""},{"type":"DELETE","lineNumber":909,"oldContent":""},{"type":"DELETE","lineNumber":912,"oldContent":""},{"type":"DELETE","lineNumber":914,"oldContent":"    /**"},{"type":"DELETE","lineNumber":915,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":918,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":920,"oldContent":"        try {"},{"type":"DELETE","lineNumber":922,"oldContent":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"DELETE","lineNumber":924,"oldContent":"            // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":926,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":928,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":979,"content":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":930,"oldContent":"        }"},{"type":"DELETE","lineNumber":933,"oldContent":"    }"},{"type":"INSERT","lineNumber":983,"content":"    "},{"type":"DELETE","lineNumber":936,"oldContent":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"DELETE","lineNumber":939,"oldContent":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":999,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1000,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1001,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1002,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1003,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":952,"oldContent":"            }"},{"type":"DELETE","lineNumber":953,"oldContent":"    }"},{"type":"DELETE","lineNumber":962,"oldContent":"}"},{"type":"DELETE","lineNumber":963,"oldContent":"        }"},{"type":"INSERT","lineNumber":1013,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":1014,"content":"            try {"},{"type":"INSERT","lineNumber":1015,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":1016,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":1017,"content":"                "},{"type":"INSERT","lineNumber":1018,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":1019,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":1020,"content":"                "},{"type":"INSERT","lineNumber":1021,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":1022,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1025,"content":"        }"},{"type":"DELETE","lineNumber":967,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":968,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":969,"oldContent":"                "},{"type":"DELETE","lineNumber":970,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":971,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":972,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":973,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":974,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":975,"oldContent":"    "},{"type":"DELETE","lineNumber":976,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1027,"content":"}"}]},{"timestamp":1754345899986,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import kotlinx.coroutines.flow.StateFlow","oldContent":"import com.google.gson.Gson"},{"type":"INSERT","lineNumber":9,"content":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"DELETE","lineNumber":10,"oldContent":"import kotlinx.coroutines.flow.MutableStateFlow"},{"type":"DELETE","lineNumber":21,"oldContent":"    // State für Feature-Navigation"},{"type":"DELETE","lineNumber":22,"oldContent":"    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)"},{"type":"INSERT","lineNumber":21,"content":" * ViewModel für Route-Management und Feature-Mapping"},{"type":"INSERT","lineNumber":22,"content":" * Verwendet das neue Storage-System - kein Trainingsmodus erforderlich!"},{"type":"DELETE","lineNumber":28,"oldContent":"    private val _isFeatureMappingEnabled = MutableStateFlow(false)"},{"type":"DELETE","lineNumber":29,"oldContent":"    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()"},{"type":"INSERT","lineNumber":28,"content":"    // Neues Storage-System (ersetzt LocalFeatureMapManager)"},{"type":"INSERT","lineNumber":29,"content":"    private var storageManager: ArWalkingStorageManager? = null"},{"type":"DELETE","lineNumber":75,"oldContent":"            // Initialisiere Storage-System"},{"type":"DELETE","lineNumber":76,"oldContent":"            if (storageManager == null) {"},{"type":"DELETE","lineNumber":77,"oldContent":"                storageManager = ArWalkingStorageManager(context)"},{"type":"DELETE","lineNumber":78,"oldContent":"                Log.d(TAG, \"StorageManager initialisiert\")"},{"type":"DELETE","lineNumber":79,"oldContent":"            }"},{"type":"INSERT","lineNumber":75,"content":"            // Verwende die bestehende initializeStorage-Funktion"},{"type":"INSERT","lineNumber":76,"content":"            initializeStorage(context)"},{"type":"DELETE","lineNumber":81,"oldContent":"            // Initialisiere Feature-Matching-Systeme"},{"type":"DELETE","lineNumber":82,"oldContent":"            initializeFeatureMatchingSystems(context)"},{"type":"DELETE","lineNumber":83,"oldContent":"            "},{"type":"INSERT","lineNumber":85,"content":"     * Initialisiert die Feature-Matching-Systeme"},{"type":"DELETE","lineNumber":92,"oldContent":"     */"},{"type":"DELETE","lineNumber":117,"oldContent":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"DELETE","lineNumber":119,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":113,"content":"    }"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"INSERT","lineNumber":115,"content":"    /**"},{"type":"INSERT","lineNumber":116,"content":"     * Lädt die Route aus der JSON-Datei"},{"type":"INSERT","lineNumber":117,"content":"     */"},{"type":"INSERT","lineNumber":118,"content":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"INSERT","lineNumber":119,"content":"        return try {"},{"type":"DELETE","lineNumber":123,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"    /**"},{"type":"DELETE","lineNumber":131,"oldContent":"     * Lädt die Route aus der JSON-Datei"},{"type":"DELETE","lineNumber":133,"oldContent":"     */"},{"type":"DELETE","lineNumber":167,"oldContent":"            "},{"type":"INSERT","lineNumber":162,"content":"            "},{"type":"DELETE","lineNumber":170,"oldContent":"    "},{"type":"DELETE","lineNumber":172,"oldContent":"    /**"},{"type":"DELETE","lineNumber":175,"oldContent":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":168,"content":"    "},{"type":"INSERT","lineNumber":169,"content":"    /**"},{"type":"INSERT","lineNumber":170,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":189,"content":"    }"},{"type":"DELETE","lineNumber":196,"oldContent":"    "},{"type":"INSERT","lineNumber":192,"content":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":199,"oldContent":"     */"},{"type":"INSERT","lineNumber":196,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":203,"oldContent":"        "},{"type":"DELETE","lineNumber":226,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":221,"content":"        return NavigationRoute("},{"type":"DELETE","lineNumber":243,"oldContent":"            try {"},{"type":"INSERT","lineNumber":238,"content":"            try {"},{"type":"DELETE","lineNumber":246,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":248,"oldContent":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"DELETE","lineNumber":251,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"DELETE","lineNumber":253,"oldContent":"                "},{"type":"INSERT","lineNumber":245,"content":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"INSERT","lineNumber":246,"content":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"INSERT","lineNumber":247,"content":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":248,"content":"                "},{"type":"DELETE","lineNumber":299,"oldContent":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"DELETE","lineNumber":301,"oldContent":"     */"},{"type":"DELETE","lineNumber":304,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":297,"content":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"INSERT","lineNumber":298,"content":"     */"},{"type":"INSERT","lineNumber":299,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":339,"oldContent":"}"},{"type":"INSERT","lineNumber":333,"content":"                return null"},{"type":"DELETE","lineNumber":341,"oldContent":"        }"},{"type":"INSERT","lineNumber":335,"content":"            "},{"type":"INSERT","lineNumber":336,"content":"            val image = storageManager!!.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":337,"content":"            if (image != null) {"},{"type":"INSERT","lineNumber":338,"content":"                Log.d(TAG, \"Landmark-Bild geladen: $landmarkId (${image.width}x${image.height})\")"},{"type":"INSERT","lineNumber":339,"content":"            } else {"},{"type":"INSERT","lineNumber":340,"content":"                Log.w(TAG, \"Landmark-Bild nicht gefunden: $landmarkId\")"},{"type":"DELETE","lineNumber":343,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":344,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":345,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":346,"oldContent":"                "},{"type":"DELETE","lineNumber":347,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":348,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":349,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":350,"oldContent":"        super.onCleared()"},{"type":"INSERT","lineNumber":342,"content":"            image"},{"type":"INSERT","lineNumber":343,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":344,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":356,"oldContent":""},{"type":"DELETE","lineNumber":357,"oldContent":"    "},{"type":"DELETE","lineNumber":358,"oldContent":"    }"},{"type":"DELETE","lineNumber":359,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":360,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":361,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":362,"oldContent":"    }"},{"type":"INSERT","lineNumber":350,"content":"     * Lädt ein Landmark-Thumbnail für die Anzeige"},{"type":"INSERT","lineNumber":351,"content":"     */"},{"type":"INSERT","lineNumber":352,"content":"    suspend fun loadLandmarkThumbnail(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":353,"content":"        return try {"},{"type":"INSERT","lineNumber":354,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":355,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":356,"content":"                return null"},{"type":"DELETE","lineNumber":427,"oldContent":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":421,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":432,"content":"    }"},{"type":"INSERT","lineNumber":434,"content":""},{"type":"DELETE","lineNumber":440,"oldContent":"    "},{"type":"DELETE","lineNumber":441,"oldContent":"    "},{"type":"DELETE","lineNumber":457,"oldContent":"    }"},{"type":"DELETE","lineNumber":458,"oldContent":"        }"},{"type":"INSERT","lineNumber":451,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":452,"content":"     */"},{"type":"DELETE","lineNumber":464,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":465,"oldContent":"    "},{"type":"INSERT","lineNumber":458,"content":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":459,"content":"     */"},{"type":"INSERT","lineNumber":492,"content":"                }"},{"type":"DELETE","lineNumber":500,"oldContent":"                }"},{"type":"DELETE","lineNumber":502,"oldContent":"    "},{"type":"DELETE","lineNumber":504,"oldContent":""},{"type":"DELETE","lineNumber":506,"oldContent":"    "},{"type":"INSERT","lineNumber":499,"content":"    "},{"type":"INSERT","lineNumber":500,"content":""},{"type":"INSERT","lineNumber":501,"content":"    "},{"type":"INSERT","lineNumber":502,"content":"    /**"},{"type":"MODIFY","lineNumber":511,"content":"    /**","oldContent":"    /**"},{"type":"DELETE","lineNumber":518,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":582,"oldContent":"        }"},{"type":"INSERT","lineNumber":576,"content":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"DELETE","lineNumber":584,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":585,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":586,"oldContent":"                "},{"type":"INSERT","lineNumber":578,"content":"                    ),"},{"type":"INSERT","lineNumber":579,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":580,"content":"                        stepNumber = 2,"},{"type":"INSERT","lineNumber":618,"content":"        }"},{"type":"INSERT","lineNumber":619,"content":"        "},{"type":"DELETE","lineNumber":626,"oldContent":"        }"},{"type":"DELETE","lineNumber":628,"oldContent":"        "},{"type":"DELETE","lineNumber":641,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":643,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":644,"oldContent":"                }"},{"type":"INSERT","lineNumber":638,"content":"                } else {"},{"type":"INSERT","lineNumber":640,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":641,"content":"                }"},{"type":"DELETE","lineNumber":650,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":652,"oldContent":"     */"},{"type":"INSERT","lineNumber":646,"content":"        }"},{"type":"INSERT","lineNumber":647,"content":"    }"},{"type":"INSERT","lineNumber":648,"content":"    "},{"type":"INSERT","lineNumber":649,"content":"    /**"},{"type":"INSERT","lineNumber":650,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":651,"content":"     */"},{"type":"DELETE","lineNumber":656,"oldContent":"        }"},{"type":"DELETE","lineNumber":658,"oldContent":"    }"},{"type":"DELETE","lineNumber":661,"oldContent":"    "},{"type":"DELETE","lineNumber":663,"oldContent":"    /**"},{"type":"INSERT","lineNumber":697,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":704,"oldContent":"     */"},{"type":"DELETE","lineNumber":717,"oldContent":"    /**"},{"type":"INSERT","lineNumber":712,"content":"    /**"},{"type":"DELETE","lineNumber":738,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":733,"content":"        "},{"type":"INSERT","lineNumber":734,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":742,"oldContent":"        "},{"type":"DELETE","lineNumber":773,"oldContent":"    /**"},{"type":"DELETE","lineNumber":775,"oldContent":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"DELETE","lineNumber":777,"oldContent":"     */"},{"type":"DELETE","lineNumber":779,"oldContent":"    fun getStatus(): String {"},{"type":"DELETE","lineNumber":781,"oldContent":"        val route = _currentRoute.value"},{"type":"DELETE","lineNumber":783,"oldContent":"        val step = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":785,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":787,"oldContent":"        val matchesCount = _currentMatches.value.size"},{"type":"DELETE","lineNumber":789,"oldContent":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"INSERT","lineNumber":776,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":777,"content":"        setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":778,"content":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":779,"content":"    }"},{"type":"INSERT","lineNumber":780,"content":"    "},{"type":"INSERT","lineNumber":781,"content":"    /**"},{"type":"INSERT","lineNumber":782,"content":"     * Stoppt die Navigation"},{"type":"INSERT","lineNumber":783,"content":"     */"},{"type":"INSERT","lineNumber":784,"content":"    fun stopNavigation() {"},{"type":"INSERT","lineNumber":785,"content":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"INSERT","lineNumber":786,"content":"        setFeatureMappingEnabled(false)"},{"type":"INSERT","lineNumber":787,"content":"        _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":788,"content":"    }"},{"type":"INSERT","lineNumber":789,"content":"    "},{"type":"INSERT","lineNumber":790,"content":"    /**"},{"type":"INSERT","lineNumber":791,"content":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"INSERT","lineNumber":792,"content":"     */"},{"type":"INSERT","lineNumber":793,"content":"    fun getStatus(): String {"},{"type":"INSERT","lineNumber":794,"content":"        val route = _currentRoute.value"},{"type":"INSERT","lineNumber":795,"content":"        val step = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":796,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":797,"content":"        val matchesCount = _currentMatches.value.size"},{"type":"INSERT","lineNumber":798,"content":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"DELETE","lineNumber":793,"oldContent":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"DELETE","lineNumber":796,"oldContent":"        setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":798,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":801,"oldContent":"    }"},{"type":"DELETE","lineNumber":804,"oldContent":"    "},{"type":"DELETE","lineNumber":806,"oldContent":"    /**"},{"type":"DELETE","lineNumber":809,"oldContent":"     * Stoppt die Navigation"},{"type":"DELETE","lineNumber":812,"oldContent":"     */"},{"type":"DELETE","lineNumber":814,"oldContent":"    fun stopNavigation() {"},{"type":"DELETE","lineNumber":817,"oldContent":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"DELETE","lineNumber":819,"oldContent":"        setFeatureMappingEnabled(false)"},{"type":"DELETE","lineNumber":822,"oldContent":"        _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":825,"oldContent":"    }"},{"type":"DELETE","lineNumber":827,"oldContent":"    "},{"type":"DELETE","lineNumber":829,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":831,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":833,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":835,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":837,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":839,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":841,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":843,"oldContent":"                            )"},{"type":"DELETE","lineNumber":845,"oldContent":"                        )"},{"type":"DELETE","lineNumber":847,"oldContent":"                    }"},{"type":"DELETE","lineNumber":849,"oldContent":"                }"},{"type":"DELETE","lineNumber":851,"oldContent":"            }"},{"type":"DELETE","lineNumber":853,"oldContent":"        }"},{"type":"DELETE","lineNumber":855,"oldContent":"    }"},{"type":"DELETE","lineNumber":858,"oldContent":"    "},{"type":"DELETE","lineNumber":859,"oldContent":"    /**"},{"type":"DELETE","lineNumber":861,"oldContent":"        }"},{"type":"DELETE","lineNumber":863,"oldContent":"    }"},{"type":"DELETE","lineNumber":865,"oldContent":"     */"},{"type":"DELETE","lineNumber":867,"oldContent":"    "},{"type":"DELETE","lineNumber":869,"oldContent":"    /**"},{"type":"DELETE","lineNumber":872,"oldContent":"     */"},{"type":"DELETE","lineNumber":874,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":876,"oldContent":"            val currentRoute = _currentRoute.value"},{"type":"DELETE","lineNumber":878,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":880,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":882,"oldContent":"            }"},{"type":"DELETE","lineNumber":884,"oldContent":"        }"},{"type":"DELETE","lineNumber":886,"oldContent":"    }"},{"type":"DELETE","lineNumber":888,"oldContent":"    "},{"type":"DELETE","lineNumber":891,"oldContent":"    /**"},{"type":"DELETE","lineNumber":894,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"DELETE","lineNumber":896,"oldContent":"     */"},{"type":"DELETE","lineNumber":898,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":902,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":907,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":911,"oldContent":"    }"},{"type":"DELETE","lineNumber":912,"oldContent":"    "},{"type":"DELETE","lineNumber":913,"oldContent":"    /**"},{"type":"DELETE","lineNumber":914,"oldContent":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":869,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":870,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":871,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":872,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":873,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":874,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":875,"content":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":916,"oldContent":"     */"},{"type":"DELETE","lineNumber":918,"oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":919,"oldContent":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":878,"content":"                            )"},{"type":"INSERT","lineNumber":879,"content":"                        )"},{"type":"INSERT","lineNumber":880,"content":"                    }"},{"type":"INSERT","lineNumber":881,"content":"                }"},{"type":"INSERT","lineNumber":882,"content":"            }"},{"type":"DELETE","lineNumber":922,"oldContent":"        "},{"type":"DELETE","lineNumber":925,"oldContent":"        val landmarkIds = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":928,"oldContent":"        for (pathItem in currentRoute.route.path) {"},{"type":"DELETE","lineNumber":931,"oldContent":"            for (routePart in pathItem.routeParts) {"},{"type":"DELETE","lineNumber":934,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":935,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":936,"oldContent":"                }"},{"type":"INSERT","lineNumber":893,"content":"        }"},{"type":"INSERT","lineNumber":894,"content":"    }"},{"type":"INSERT","lineNumber":895,"content":"    "},{"type":"INSERT","lineNumber":896,"content":"    /**"},{"type":"DELETE","lineNumber":939,"oldContent":"            }"},{"type":"DELETE","lineNumber":941,"oldContent":"        }"},{"type":"DELETE","lineNumber":943,"oldContent":"        "},{"type":"DELETE","lineNumber":946,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":949,"oldContent":"    }"},{"type":"DELETE","lineNumber":951,"oldContent":""},{"type":"DELETE","lineNumber":954,"oldContent":"    /**"},{"type":"DELETE","lineNumber":957,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":958,"oldContent":"     */"},{"type":"INSERT","lineNumber":910,"content":"        }"},{"type":"INSERT","lineNumber":911,"content":"    }"},{"type":"DELETE","lineNumber":961,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":964,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":966,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":917,"content":"     */"},{"type":"DELETE","lineNumber":969,"oldContent":"    }"},{"type":"DELETE","lineNumber":972,"oldContent":"    "},{"type":"DELETE","lineNumber":975,"oldContent":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"INSERT","lineNumber":926,"content":"    "},{"type":"INSERT","lineNumber":927,"content":"    /**"},{"type":"INSERT","lineNumber":928,"content":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":929,"content":"     */"},{"type":"INSERT","lineNumber":930,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":931,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":932,"content":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":933,"content":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":934,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":935,"content":"            }"},{"type":"INSERT","lineNumber":936,"content":"        }"},{"type":"INSERT","lineNumber":937,"content":"    }"},{"type":"INSERT","lineNumber":938,"content":"    "},{"type":"INSERT","lineNumber":939,"content":"    /**"},{"type":"INSERT","lineNumber":940,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":941,"content":"     */"},{"type":"INSERT","lineNumber":942,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":943,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":944,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":945,"content":"    }"},{"type":"INSERT","lineNumber":946,"content":"    "},{"type":"INSERT","lineNumber":947,"content":"    /**"},{"type":"INSERT","lineNumber":948,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":949,"content":"     */"},{"type":"INSERT","lineNumber":950,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":951,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":952,"content":"        "},{"type":"INSERT","lineNumber":953,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":954,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":955,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":956,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":957,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":958,"content":"                }"},{"type":"INSERT","lineNumber":959,"content":"            }"},{"type":"INSERT","lineNumber":960,"content":"        }"},{"type":"INSERT","lineNumber":961,"content":"        "},{"type":"INSERT","lineNumber":962,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":963,"content":"    }"},{"type":"INSERT","lineNumber":964,"content":""},{"type":"INSERT","lineNumber":965,"content":"    /**"},{"type":"INSERT","lineNumber":966,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":967,"content":"     */"},{"type":"INSERT","lineNumber":968,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":969,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":980,"oldContent":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":972,"content":"    "},{"type":"INSERT","lineNumber":973,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":974,"content":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"INSERT","lineNumber":975,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":976,"content":"    }"},{"type":"INSERT","lineNumber":977,"content":"    "},{"type":"DELETE","lineNumber":983,"oldContent":"    fun updateLandmarksForCurrentRoute() {"},{"type":"DELETE","lineNumber":994,"oldContent":"}"},{"type":"DELETE","lineNumber":995,"oldContent":"        }"},{"type":"DELETE","lineNumber":996,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":997,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":990,"content":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":991,"content":"    }"},{"type":"INSERT","lineNumber":993,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":994,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":995,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":996,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":997,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":998,"content":"    }"},{"type":"INSERT","lineNumber":999,"content":"    "},{"type":"DELETE","lineNumber":1004,"oldContent":"    }"},{"type":"DELETE","lineNumber":1005,"oldContent":"            }"},{"type":"DELETE","lineNumber":1006,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1007,"oldContent":"}"},{"type":"DELETE","lineNumber":1008,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1005,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":1006,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":1007,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":1008,"content":"            try {"},{"type":"INSERT","lineNumber":1009,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":1010,"content":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":1010,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":1011,"oldContent":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1013,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":1014,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":1015,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":1016,"oldContent":"    "},{"type":"DELETE","lineNumber":1017,"oldContent":"            try {"},{"type":"DELETE","lineNumber":1018,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":1019,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":1020,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1021,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1022,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":1023,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1015,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":1016,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1017,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":1018,"content":"            }"},{"type":"INSERT","lineNumber":1019,"content":"        }"},{"type":"INSERT","lineNumber":1020,"content":"    }"},{"type":"INSERT","lineNumber":1021,"content":"}"}]},{"timestamp":1754345906560,"changes":[{"type":"MODIFY","lineNumber":14,"content":"import com.example.arwalking.storage.ArWalkingStorageManager","oldContent":"class RouteViewModel : ViewModel() {"},{"type":"DELETE","lineNumber":79,"oldContent":"     * Initialisiert die Feature-Matching-Systeme"},{"type":"DELETE","lineNumber":85,"oldContent":"    /**"},{"type":"DELETE","lineNumber":86,"oldContent":"     */"},{"type":"DELETE","lineNumber":87,"oldContent":"    private fun initializeFeatureMatchingSystems(context: Context) {"},{"type":"DELETE","lineNumber":88,"oldContent":"        try {"},{"type":"DELETE","lineNumber":89,"oldContent":"            Log.d(TAG, \"Initialisiere Feature-Matching-Systeme...\")"},{"type":"DELETE","lineNumber":90,"oldContent":"            "},{"type":"DELETE","lineNumber":91,"oldContent":"            // Initialisiere Feature-Matching-Engine"},{"type":"DELETE","lineNumber":92,"oldContent":"            if (featureMatchingEngine == null) {"},{"type":"DELETE","lineNumber":93,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":94,"oldContent":"                Log.d(TAG, \"FeatureMatchingEngine initialisiert\")"},{"type":"DELETE","lineNumber":95,"oldContent":"            }"},{"type":"DELETE","lineNumber":96,"oldContent":"            "},{"type":"DELETE","lineNumber":97,"oldContent":"            // Initialisiere Landmark-Feature-Storage"},{"type":"DELETE","lineNumber":98,"oldContent":"            if (landmarkFeatureStorage == null) {"},{"type":"DELETE","lineNumber":99,"oldContent":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"DELETE","lineNumber":100,"oldContent":"                Log.d(TAG, \"LandmarkFeatureStorage initialisiert\")"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"},{"type":"DELETE","lineNumber":102,"oldContent":"            "},{"type":"DELETE","lineNumber":103,"oldContent":"            // Initialisiere AR-Tracking-System"},{"type":"DELETE","lineNumber":104,"oldContent":"            if (arTrackingSystem == null) {"},{"type":"DELETE","lineNumber":105,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"DELETE","lineNumber":106,"oldContent":"                Log.d(TAG, \"ARTrackingSystem initialisiert\")"},{"type":"DELETE","lineNumber":107,"oldContent":"    }"},{"type":"DELETE","lineNumber":108,"oldContent":"            }"},{"type":"DELETE","lineNumber":110,"oldContent":"            "},{"type":"INSERT","lineNumber":85,"content":""},{"type":"DELETE","lineNumber":112,"oldContent":"            Log.d(TAG, \"Feature-Matching-Systeme erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":114,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":117,"oldContent":"            Log.e(TAG, \"Fehler bei der Initialisierung der Feature-Matching-Systeme: ${e.message}\")"},{"type":"DELETE","lineNumber":119,"oldContent":"        }"},{"type":"DELETE","lineNumber":156,"oldContent":"            "},{"type":"DELETE","lineNumber":162,"oldContent":"    "},{"type":"DELETE","lineNumber":164,"oldContent":"    /**"},{"type":"INSERT","lineNumber":133,"content":"            "},{"type":"DELETE","lineNumber":166,"oldContent":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":139,"content":"    "},{"type":"INSERT","lineNumber":140,"content":"    /**"},{"type":"INSERT","lineNumber":141,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"DELETE","lineNumber":183,"oldContent":"    }"},{"type":"DELETE","lineNumber":187,"oldContent":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"INSERT","lineNumber":160,"content":"    }"},{"type":"DELETE","lineNumber":192,"oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":163,"content":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"INSERT","lineNumber":167,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":215,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":192,"content":"        return NavigationRoute("},{"type":"DELETE","lineNumber":232,"oldContent":"            try {"},{"type":"DELETE","lineNumber":239,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"INSERT","lineNumber":209,"content":"            try {"},{"type":"DELETE","lineNumber":241,"oldContent":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"DELETE","lineNumber":242,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"DELETE","lineNumber":244,"oldContent":"                "},{"type":"INSERT","lineNumber":216,"content":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"INSERT","lineNumber":217,"content":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"INSERT","lineNumber":218,"content":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":219,"content":"                "},{"type":"DELETE","lineNumber":291,"oldContent":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"DELETE","lineNumber":293,"oldContent":"     */"},{"type":"DELETE","lineNumber":295,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":268,"content":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"INSERT","lineNumber":269,"content":"     */"},{"type":"INSERT","lineNumber":270,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":322,"oldContent":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":293,"content":"            }"},{"type":"DELETE","lineNumber":324,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"INSERT","lineNumber":295,"content":"    }"},{"type":"DELETE","lineNumber":327,"oldContent":"                return null"},{"type":"DELETE","lineNumber":328,"oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":298,"content":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"DELETE","lineNumber":330,"oldContent":"            "},{"type":"INSERT","lineNumber":301,"content":"        return try {"},{"type":"INSERT","lineNumber":302,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":303,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":304,"content":"                return null"},{"type":"INSERT","lineNumber":305,"content":"            }"},{"type":"INSERT","lineNumber":306,"content":"            "},{"type":"DELETE","lineNumber":333,"oldContent":""},{"type":"DELETE","lineNumber":335,"oldContent":"    "},{"type":"DELETE","lineNumber":337,"oldContent":"    }"},{"type":"DELETE","lineNumber":342,"oldContent":"        context: Context,"},{"type":"INSERT","lineNumber":316,"content":"            null"},{"type":"INSERT","lineNumber":317,"content":"        }"},{"type":"INSERT","lineNumber":318,"content":"    }"},{"type":"INSERT","lineNumber":319,"content":"    "},{"type":"INSERT","lineNumber":320,"content":"    /**"},{"type":"DELETE","lineNumber":347,"oldContent":"            null"},{"type":"DELETE","lineNumber":349,"oldContent":"    /**"},{"type":"DELETE","lineNumber":351,"oldContent":"    }"},{"type":"DELETE","lineNumber":353,"oldContent":"    "},{"type":"DELETE","lineNumber":355,"oldContent":"    /**"},{"type":"DELETE","lineNumber":358,"oldContent":"        "},{"type":"INSERT","lineNumber":329,"content":"            "},{"type":"DELETE","lineNumber":375,"oldContent":"                "},{"type":"DELETE","lineNumber":376,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":377,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":346,"content":"    suspend fun addLandmark("},{"type":"INSERT","lineNumber":347,"content":"        context: Context,"},{"type":"INSERT","lineNumber":348,"content":"        bitmap: Bitmap,"},{"type":"DELETE","lineNumber":415,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":392,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":426,"oldContent":"    }"},{"type":"DELETE","lineNumber":429,"oldContent":""},{"type":"DELETE","lineNumber":433,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":402,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"DELETE","lineNumber":435,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":405,"content":""},{"type":"INSERT","lineNumber":406,"content":"    "},{"type":"DELETE","lineNumber":443,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":414,"content":"    /**"},{"type":"DELETE","lineNumber":445,"oldContent":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":447,"oldContent":"     */"},{"type":"DELETE","lineNumber":453,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":422,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":429,"content":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":430,"content":"     */"},{"type":"DELETE","lineNumber":461,"oldContent":"    }"},{"type":"DELETE","lineNumber":462,"oldContent":"            }"},{"type":"INSERT","lineNumber":432,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":433,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"DELETE","lineNumber":473,"oldContent":"            Log.e(TAG, \"Fehler beim Laden des aktuellen Schritts: ${e.message}\")"},{"type":"INSERT","lineNumber":444,"content":"        return storageManager?.cleanup()"},{"type":"DELETE","lineNumber":481,"oldContent":"            val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":482,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":452,"content":"            try {"},{"type":"INSERT","lineNumber":453,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":486,"oldContent":"                }"},{"type":"INSERT","lineNumber":463,"content":"                }"},{"type":"DELETE","lineNumber":494,"oldContent":"    "},{"type":"DELETE","lineNumber":496,"oldContent":""},{"type":"DELETE","lineNumber":497,"oldContent":"    "},{"type":"DELETE","lineNumber":499,"oldContent":"    /**"},{"type":"INSERT","lineNumber":470,"content":"    "},{"type":"INSERT","lineNumber":471,"content":""},{"type":"INSERT","lineNumber":472,"content":"    "},{"type":"INSERT","lineNumber":473,"content":"    /**"},{"type":"DELETE","lineNumber":505,"oldContent":"    /**"},{"type":"DELETE","lineNumber":506,"oldContent":"    /**"},{"type":"INSERT","lineNumber":476,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":482,"content":"    /**"},{"type":"DELETE","lineNumber":570,"oldContent":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"INSERT","lineNumber":543,"content":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"INSERT","lineNumber":544,"content":"                val demoSteps = listOf("},{"type":"INSERT","lineNumber":545,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":546,"content":"                        stepNumber = 1,"},{"type":"INSERT","lineNumber":547,"content":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"INSERT","lineNumber":548,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":574,"oldContent":"}"},{"type":"DELETE","lineNumber":576,"oldContent":"    }"},{"type":"DELETE","lineNumber":578,"oldContent":"        }"},{"type":"DELETE","lineNumber":579,"oldContent":"            }"},{"type":"DELETE","lineNumber":580,"oldContent":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":612,"oldContent":"        }"},{"type":"DELETE","lineNumber":614,"oldContent":"        "},{"type":"INSERT","lineNumber":589,"content":"        }"},{"type":"INSERT","lineNumber":590,"content":"        "},{"type":"DELETE","lineNumber":632,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":635,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":637,"oldContent":"                }"},{"type":"DELETE","lineNumber":640,"oldContent":"        }"},{"type":"DELETE","lineNumber":642,"oldContent":"    }"},{"type":"INSERT","lineNumber":609,"content":"                } else {"},{"type":"DELETE","lineNumber":644,"oldContent":"    "},{"type":"INSERT","lineNumber":611,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":612,"content":"                }"},{"type":"DELETE","lineNumber":646,"oldContent":"    /**"},{"type":"DELETE","lineNumber":648,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":649,"oldContent":"     */"},{"type":"INSERT","lineNumber":617,"content":"        }"},{"type":"INSERT","lineNumber":618,"content":"    }"},{"type":"INSERT","lineNumber":619,"content":"    "},{"type":"INSERT","lineNumber":620,"content":"    /**"},{"type":"INSERT","lineNumber":621,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":622,"content":"     */"},{"type":"DELETE","lineNumber":691,"oldContent":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"INSERT","lineNumber":668,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":706,"oldContent":"    /**"},{"type":"INSERT","lineNumber":683,"content":"    /**"},{"type":"DELETE","lineNumber":727,"oldContent":"        "},{"type":"DELETE","lineNumber":729,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":704,"content":"        "},{"type":"INSERT","lineNumber":705,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":768,"oldContent":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"DELETE","lineNumber":770,"oldContent":"        setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":771,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":743,"content":"    /**"},{"type":"INSERT","lineNumber":744,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":745,"content":"     */"},{"type":"INSERT","lineNumber":746,"content":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":747,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":748,"content":"        setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":749,"content":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":751,"content":"    "},{"type":"DELETE","lineNumber":778,"oldContent":"    "},{"type":"DELETE","lineNumber":781,"oldContent":"    /**"},{"type":"DELETE","lineNumber":784,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":787,"oldContent":"     */"},{"type":"DELETE","lineNumber":790,"oldContent":"    fun startNavigation() {"},{"type":"DELETE","lineNumber":792,"oldContent":"        "},{"type":"DELETE","lineNumber":794,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":797,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":799,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":802,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":770,"content":"        "},{"type":"INSERT","lineNumber":771,"content":"        return buildString {"},{"type":"INSERT","lineNumber":772,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":773,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":774,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":843,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":844,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":846,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":848,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":849,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":851,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":852,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":855,"oldContent":"                            )"},{"type":"DELETE","lineNumber":856,"oldContent":"                        )"},{"type":"DELETE","lineNumber":858,"oldContent":"                    }"},{"type":"DELETE","lineNumber":859,"oldContent":"                }"},{"type":"DELETE","lineNumber":861,"oldContent":"            }"},{"type":"DELETE","lineNumber":868,"oldContent":"        }"},{"type":"DELETE","lineNumber":870,"oldContent":"    }"},{"type":"DELETE","lineNumber":871,"oldContent":"    "},{"type":"DELETE","lineNumber":873,"oldContent":"    /**"},{"type":"DELETE","lineNumber":884,"oldContent":"        }"},{"type":"DELETE","lineNumber":886,"oldContent":"    }"},{"type":"INSERT","lineNumber":840,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":841,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":842,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":843,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":844,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":845,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":846,"content":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":888,"oldContent":"     */"},{"type":"INSERT","lineNumber":849,"content":"                            )"},{"type":"INSERT","lineNumber":850,"content":"                        )"},{"type":"INSERT","lineNumber":851,"content":"                    }"},{"type":"INSERT","lineNumber":852,"content":"                }"},{"type":"INSERT","lineNumber":853,"content":"            }"},{"type":"INSERT","lineNumber":858,"content":"            }"},{"type":"INSERT","lineNumber":859,"content":"            "},{"type":"INSERT","lineNumber":860,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":861,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":862,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":863,"content":"            emptyList()"},{"type":"INSERT","lineNumber":864,"content":"        }"},{"type":"INSERT","lineNumber":865,"content":"    }"},{"type":"INSERT","lineNumber":867,"content":"    /**"},{"type":"INSERT","lineNumber":868,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":869,"content":"     */"},{"type":"INSERT","lineNumber":870,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":871,"content":"        return try {"},{"type":"INSERT","lineNumber":872,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":873,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":874,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":875,"content":"            } else {"},{"type":"INSERT","lineNumber":876,"content":"                emptyList()"},{"type":"INSERT","lineNumber":878,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":879,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":880,"content":"            emptyList()"},{"type":"INSERT","lineNumber":881,"content":"        }"},{"type":"INSERT","lineNumber":882,"content":"    }"},{"type":"INSERT","lineNumber":883,"content":""},{"type":"INSERT","lineNumber":884,"content":""},{"type":"INSERT","lineNumber":885,"content":""},{"type":"DELETE","lineNumber":897,"oldContent":"            "},{"type":"INSERT","lineNumber":887,"content":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"INSERT","lineNumber":888,"content":"     */"},{"type":"INSERT","lineNumber":889,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":890,"content":"        try {"},{"type":"INSERT","lineNumber":891,"content":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":892,"content":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":893,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":894,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":895,"content":"        }"},{"type":"INSERT","lineNumber":896,"content":"    }"},{"type":"INSERT","lineNumber":897,"content":"    "},{"type":"INSERT","lineNumber":898,"content":"    /**"},{"type":"DELETE","lineNumber":900,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":902,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":905,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":907,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":912,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":914,"oldContent":"     */"},{"type":"DELETE","lineNumber":917,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":920,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":923,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":925,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":928,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":930,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":933,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":936,"oldContent":"            }"},{"type":"DELETE","lineNumber":938,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":941,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"DELETE","lineNumber":943,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":947,"oldContent":""},{"type":"DELETE","lineNumber":949,"oldContent":""},{"type":"DELETE","lineNumber":952,"oldContent":""},{"type":"DELETE","lineNumber":954,"oldContent":"    /**"},{"type":"DELETE","lineNumber":957,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":960,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":962,"oldContent":"        try {"},{"type":"DELETE","lineNumber":964,"oldContent":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"DELETE","lineNumber":965,"oldContent":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":941,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":942,"content":"    }"},{"type":"DELETE","lineNumber":968,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":970,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":973,"oldContent":"        }"},{"type":"DELETE","lineNumber":975,"oldContent":"    }"},{"type":"DELETE","lineNumber":976,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":977,"oldContent":"    }"},{"type":"INSERT","lineNumber":954,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":955,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":956,"content":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":984,"oldContent":"        }"},{"type":"DELETE","lineNumber":985,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":958,"content":"    "},{"type":"INSERT","lineNumber":959,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":960,"content":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":987,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":989,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":990,"oldContent":"                "},{"type":"INSERT","lineNumber":963,"content":"    "},{"type":"DELETE","lineNumber":992,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":998,"oldContent":"        }"},{"type":"DELETE","lineNumber":1000,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":1001,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1002,"oldContent":"                "},{"type":"DELETE","lineNumber":1003,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1004,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":971,"content":""},{"type":"INSERT","lineNumber":972,"content":""},{"type":"INSERT","lineNumber":973,"content":"    /**"},{"type":"INSERT","lineNumber":974,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":975,"content":"     */"},{"type":"DELETE","lineNumber":1010,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":983,"content":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1014,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":985,"content":"                "}]},{"timestamp":1754345916994,"changes":[{"type":"DELETE","lineNumber":104,"oldContent":"            "},{"type":"DELETE","lineNumber":111,"oldContent":"    "},{"type":"DELETE","lineNumber":113,"oldContent":"    /**"},{"type":"DELETE","lineNumber":115,"oldContent":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"DELETE","lineNumber":134,"oldContent":"    }"},{"type":"DELETE","lineNumber":137,"oldContent":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"INSERT","lineNumber":133,"content":"            "},{"type":"DELETE","lineNumber":140,"oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":139,"content":"    "},{"type":"INSERT","lineNumber":140,"content":"    /**"},{"type":"INSERT","lineNumber":141,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":160,"content":"    }"},{"type":"MODIFY","lineNumber":163,"content":"     * Konvertiert RouteData zu NavigationRoute","oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":167,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":181,"oldContent":"            try {"},{"type":"DELETE","lineNumber":188,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":190,"oldContent":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"DELETE","lineNumber":192,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"DELETE","lineNumber":194,"oldContent":"                "},{"type":"INSERT","lineNumber":192,"content":"        return NavigationRoute("},{"type":"INSERT","lineNumber":209,"content":"            try {"},{"type":"INSERT","lineNumber":216,"content":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"INSERT","lineNumber":217,"content":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"INSERT","lineNumber":218,"content":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":219,"content":"                "},{"type":"DELETE","lineNumber":239,"oldContent":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"DELETE","lineNumber":241,"oldContent":"     */"},{"type":"DELETE","lineNumber":243,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":267,"oldContent":"            }"},{"type":"DELETE","lineNumber":268,"oldContent":"    }"},{"type":"DELETE","lineNumber":271,"oldContent":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"INSERT","lineNumber":268,"content":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"INSERT","lineNumber":269,"content":"     */"},{"type":"INSERT","lineNumber":270,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":275,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":277,"oldContent":"            if (storageManager == null) {"},{"type":"DELETE","lineNumber":279,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"DELETE","lineNumber":281,"oldContent":"                return null"},{"type":"DELETE","lineNumber":283,"oldContent":"            }"},{"type":"DELETE","lineNumber":285,"oldContent":"            "},{"type":"DELETE","lineNumber":288,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":289,"oldContent":"    "},{"type":"DELETE","lineNumber":290,"oldContent":"    }"},{"type":"INSERT","lineNumber":279,"content":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"INSERT","lineNumber":280,"content":"                "},{"type":"INSERT","lineNumber":281,"content":"                if (landmarks.isNotEmpty()) {"},{"type":"DELETE","lineNumber":296,"oldContent":"            null"},{"type":"DELETE","lineNumber":298,"oldContent":"        }"},{"type":"DELETE","lineNumber":300,"oldContent":"    }"},{"type":"DELETE","lineNumber":302,"oldContent":"    "},{"type":"DELETE","lineNumber":304,"oldContent":"    /**"},{"type":"DELETE","lineNumber":306,"oldContent":"    }"},{"type":"INSERT","lineNumber":292,"content":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":293,"content":"            }"},{"type":"INSERT","lineNumber":295,"content":"    }"},{"type":"DELETE","lineNumber":310,"oldContent":"            "},{"type":"INSERT","lineNumber":298,"content":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"INSERT","lineNumber":301,"content":"        return try {"},{"type":"INSERT","lineNumber":302,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":303,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":304,"content":"                return null"},{"type":"INSERT","lineNumber":305,"content":"            }"},{"type":"INSERT","lineNumber":306,"content":"            "},{"type":"DELETE","lineNumber":318,"oldContent":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":312,"content":"            }"},{"type":"INSERT","lineNumber":316,"content":"            null"},{"type":"INSERT","lineNumber":317,"content":"        }"},{"type":"INSERT","lineNumber":318,"content":"    }"},{"type":"INSERT","lineNumber":319,"content":"    "},{"type":"INSERT","lineNumber":320,"content":"    /**"},{"type":"DELETE","lineNumber":323,"oldContent":"    suspend fun addLandmark("},{"type":"DELETE","lineNumber":325,"oldContent":"        context: Context,"},{"type":"DELETE","lineNumber":326,"oldContent":"        bitmap: Bitmap,"},{"type":"INSERT","lineNumber":329,"content":"            "},{"type":"DELETE","lineNumber":342,"oldContent":"     */"},{"type":"DELETE","lineNumber":343,"oldContent":"    /**"},{"type":"DELETE","lineNumber":344,"oldContent":"    "},{"type":"INSERT","lineNumber":339,"content":"            null"},{"type":"INSERT","lineNumber":340,"content":"        }"},{"type":"DELETE","lineNumber":346,"oldContent":"    }"},{"type":"INSERT","lineNumber":342,"content":"    "},{"type":"INSERT","lineNumber":343,"content":"    /**"},{"type":"DELETE","lineNumber":348,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":349,"oldContent":""},{"type":"DELETE","lineNumber":350,"oldContent":"    }"},{"type":"DELETE","lineNumber":351,"oldContent":"            }"},{"type":"DELETE","lineNumber":352,"oldContent":"    }"},{"type":"INSERT","lineNumber":345,"content":"     */"},{"type":"INSERT","lineNumber":346,"content":"    suspend fun addLandmark("},{"type":"INSERT","lineNumber":347,"content":"        context: Context,"},{"type":"INSERT","lineNumber":348,"content":"        bitmap: Bitmap,"},{"type":"INSERT","lineNumber":349,"content":"        landmarkId: String,"},{"type":"INSERT","lineNumber":350,"content":"        landmarkName: String,"},{"type":"INSERT","lineNumber":351,"content":"        description: String,"},{"type":"INSERT","lineNumber":352,"content":"        onProgress: (String) -> Unit = {}"},{"type":"DELETE","lineNumber":354,"oldContent":"        }"},{"type":"DELETE","lineNumber":355,"oldContent":"            }"},{"type":"DELETE","lineNumber":356,"oldContent":"    }"},{"type":"INSERT","lineNumber":354,"content":"        return try {"},{"type":"INSERT","lineNumber":355,"content":"            Log.i(TAG, \"Füge neuen Landmark hinzu: $landmarkId\")"},{"type":"INSERT","lineNumber":356,"content":"            "},{"type":"DELETE","lineNumber":363,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":374,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":376,"oldContent":"    }"},{"type":"DELETE","lineNumber":379,"oldContent":""},{"type":"DELETE","lineNumber":381,"oldContent":"    "},{"type":"DELETE","lineNumber":390,"oldContent":"    /**"},{"type":"DELETE","lineNumber":398,"oldContent":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":399,"oldContent":"                )"},{"type":"INSERT","lineNumber":392,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":393,"content":"     */"},{"type":"DELETE","lineNumber":405,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"DELETE","lineNumber":406,"oldContent":"     */"},{"type":"DELETE","lineNumber":409,"oldContent":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":411,"oldContent":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"INSERT","lineNumber":402,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"INSERT","lineNumber":405,"content":""},{"type":"INSERT","lineNumber":406,"content":"    "},{"type":"DELETE","lineNumber":414,"oldContent":"                        targetLandmark = null"},{"type":"DELETE","lineNumber":415,"oldContent":"                        building = building,"},{"type":"INSERT","lineNumber":408,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":409,"content":"     */"},{"type":"DELETE","lineNumber":420,"oldContent":"        return storageManager?.cleanup()"},{"type":"INSERT","lineNumber":414,"content":"    /**"},{"type":"DELETE","lineNumber":427,"oldContent":"            try {"},{"type":"DELETE","lineNumber":428,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":429,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":421,"content":"    /**"},{"type":"INSERT","lineNumber":422,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":436,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":437,"oldContent":"                }"},{"type":"INSERT","lineNumber":429,"content":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":430,"content":"     */"},{"type":"INSERT","lineNumber":431,"content":"    fun getPerformanceInfo(): String {"},{"type":"INSERT","lineNumber":432,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":433,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"DELETE","lineNumber":445,"oldContent":"    "},{"type":"DELETE","lineNumber":447,"oldContent":""},{"type":"DELETE","lineNumber":449,"oldContent":"    "},{"type":"DELETE","lineNumber":451,"oldContent":"    /**"},{"type":"INSERT","lineNumber":444,"content":"        return storageManager?.cleanup()"},{"type":"DELETE","lineNumber":454,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":460,"oldContent":"    /**"},{"type":"INSERT","lineNumber":452,"content":"            try {"},{"type":"INSERT","lineNumber":453,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":463,"content":"                }"},{"type":"INSERT","lineNumber":470,"content":"    "},{"type":"INSERT","lineNumber":471,"content":""},{"type":"INSERT","lineNumber":472,"content":"    "},{"type":"INSERT","lineNumber":473,"content":"    /**"},{"type":"INSERT","lineNumber":476,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":482,"content":"    /**"},{"type":"DELETE","lineNumber":514,"oldContent":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"DELETE","lineNumber":516,"oldContent":"                val demoSteps = listOf("},{"type":"DELETE","lineNumber":518,"oldContent":"                    FeatureNavigationStep("},{"type":"DELETE","lineNumber":520,"oldContent":"                        stepNumber = 1,"},{"type":"DELETE","lineNumber":522,"oldContent":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"DELETE","lineNumber":524,"oldContent":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":539,"oldContent":"    }"},{"type":"DELETE","lineNumber":540,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":541,"oldContent":"    "},{"type":"INSERT","lineNumber":533,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":534,"content":"     */"},{"type":"INSERT","lineNumber":535,"content":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"DELETE","lineNumber":544,"oldContent":""},{"type":"INSERT","lineNumber":538,"content":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")"},{"type":"DELETE","lineNumber":548,"oldContent":"    }"},{"type":"INSERT","lineNumber":542,"content":"                "},{"type":"INSERT","lineNumber":543,"content":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"INSERT","lineNumber":544,"content":"                val demoSteps = listOf("},{"type":"INSERT","lineNumber":545,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":546,"content":"                        stepNumber = 1,"},{"type":"INSERT","lineNumber":547,"content":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"INSERT","lineNumber":548,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":560,"oldContent":"        }"},{"type":"DELETE","lineNumber":562,"oldContent":"        "},{"type":"DELETE","lineNumber":582,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":585,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":587,"oldContent":"                }"},{"type":"DELETE","lineNumber":591,"oldContent":"        }"},{"type":"DELETE","lineNumber":593,"oldContent":"    }"},{"type":"DELETE","lineNumber":595,"oldContent":"    "},{"type":"DELETE","lineNumber":597,"oldContent":"    /**"},{"type":"INSERT","lineNumber":589,"content":"        }"},{"type":"INSERT","lineNumber":590,"content":"        "},{"type":"DELETE","lineNumber":599,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":601,"oldContent":"     */"},{"type":"INSERT","lineNumber":609,"content":"                } else {"},{"type":"INSERT","lineNumber":611,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":612,"content":"                }"},{"type":"INSERT","lineNumber":617,"content":"        }"},{"type":"INSERT","lineNumber":618,"content":"    }"},{"type":"INSERT","lineNumber":619,"content":"    "},{"type":"INSERT","lineNumber":620,"content":"    /**"},{"type":"INSERT","lineNumber":621,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":622,"content":"     */"},{"type":"DELETE","lineNumber":639,"oldContent":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":655,"oldContent":"    /**"},{"type":"INSERT","lineNumber":668,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":676,"oldContent":"        "},{"type":"DELETE","lineNumber":678,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":683,"content":"    /**"},{"type":"INSERT","lineNumber":704,"content":"        "},{"type":"INSERT","lineNumber":705,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":715,"oldContent":"    /**"},{"type":"DELETE","lineNumber":716,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":719,"oldContent":"     */"},{"type":"DELETE","lineNumber":720,"oldContent":"    fun startNavigation() {"},{"type":"DELETE","lineNumber":722,"oldContent":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"DELETE","lineNumber":724,"oldContent":"        setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":726,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":729,"oldContent":"    "},{"type":"DELETE","lineNumber":748,"oldContent":"        "},{"type":"DELETE","lineNumber":749,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":750,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":752,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":754,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":743,"content":"    /**"},{"type":"INSERT","lineNumber":744,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":745,"content":"     */"},{"type":"INSERT","lineNumber":746,"content":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":747,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":748,"content":"        setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":749,"content":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":751,"content":"    "},{"type":"INSERT","lineNumber":770,"content":"        "},{"type":"INSERT","lineNumber":771,"content":"        return buildString {"},{"type":"INSERT","lineNumber":772,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":773,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":774,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":807,"content":"    /**"},{"type":"INSERT","lineNumber":808,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":809,"content":"     */"},{"type":"INSERT","lineNumber":810,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":811,"content":"        return try {"},{"type":"INSERT","lineNumber":812,"content":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"INSERT","lineNumber":813,"content":"            "},{"type":"INSERT","lineNumber":814,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":815,"content":"            initialize(context)"},{"type":"INSERT","lineNumber":816,"content":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"INSERT","lineNumber":817,"content":"            "},{"type":"INSERT","lineNumber":818,"content":"            // Test 2: Route laden"},{"type":"INSERT","lineNumber":819,"content":"            loadNavigationRoute(context)"},{"type":"INSERT","lineNumber":820,"content":"            Thread.sleep(1000) // Warte auf Coroutine"},{"type":"INSERT","lineNumber":821,"content":"            Log.d(TAG, \"✓ Route-Loading gestartet\")"},{"type":"INSERT","lineNumber":822,"content":"            "},{"type":"INSERT","lineNumber":823,"content":"            // Test 3: Feature-Mapping aktivieren"},{"type":"INSERT","lineNumber":824,"content":"            setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":825,"content":"            Log.d(TAG, \"✓ Feature-Mapping aktiviert\")"},{"type":"INSERT","lineNumber":826,"content":"            "},{"type":"INSERT","lineNumber":827,"content":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":828,"content":"            startNavigation()"},{"type":"INSERT","lineNumber":829,"content":"            Log.d(TAG, \"✓ Navigation gestartet\")"},{"type":"INSERT","lineNumber":830,"content":"            "},{"type":"INSERT","lineNumber":831,"content":"            // Test 5: Status ausgeben"},{"type":"INSERT","lineNumber":832,"content":"            Log.i(TAG, getStatus())"},{"type":"INSERT","lineNumber":833,"content":"            "},{"type":"INSERT","lineNumber":834,"content":"            Log.i(TAG, \"=== Self-Test erfolgreich ===\")"},{"type":"INSERT","lineNumber":835,"content":"            true"},{"type":"INSERT","lineNumber":836,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":837,"content":"            Log.e(TAG, \"=== Self-Test fehlgeschlagen: ${e.message} ===\")"},{"type":"INSERT","lineNumber":838,"content":"            false"},{"type":"INSERT","lineNumber":839,"content":"        }"},{"type":"INSERT","lineNumber":840,"content":"    }"},{"type":"INSERT","lineNumber":841,"content":"    "},{"type":"DELETE","lineNumber":811,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":813,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":815,"oldContent":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":849,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":850,"content":"        return try {"},{"type":"INSERT","lineNumber":851,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":852,"content":"            "},{"type":"INSERT","lineNumber":853,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":854,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":855,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":856,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":857,"content":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"INSERT","lineNumber":858,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":860,"content":"                                id = landmark, // String aus JSON"},{"type":"INSERT","lineNumber":861,"content":"                                name = landmark,"},{"type":"INSERT","lineNumber":862,"content":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":863,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":864,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":865,"content":"                            )"},{"type":"INSERT","lineNumber":866,"content":"                        )"},{"type":"INSERT","lineNumber":867,"content":"                    }"},{"type":"INSERT","lineNumber":868,"content":"                }"},{"type":"INSERT","lineNumber":869,"content":"            }"},{"type":"INSERT","lineNumber":870,"content":"            "},{"type":"INSERT","lineNumber":871,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":872,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":873,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":874,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":875,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":876,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":877,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":878,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":820,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":822,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":882,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":883,"content":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":825,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":830,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":831,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":890,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":891,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":892,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":835,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":838,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":840,"oldContent":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"DELETE","lineNumber":842,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":844,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":845,"oldContent":"                                id = landmark, // String aus JSON"},{"type":"INSERT","lineNumber":901,"content":"    "},{"type":"DELETE","lineNumber":847,"oldContent":"                                name = landmark,"},{"type":"DELETE","lineNumber":850,"oldContent":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":854,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":857,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":859,"oldContent":"                            )"},{"type":"DELETE","lineNumber":861,"oldContent":"                        )"},{"type":"DELETE","lineNumber":862,"oldContent":"                    }"},{"type":"INSERT","lineNumber":912,"content":"            }"},{"type":"DELETE","lineNumber":864,"oldContent":"                }"},{"type":"DELETE","lineNumber":866,"oldContent":"            }"},{"type":"DELETE","lineNumber":868,"oldContent":"            "},{"type":"DELETE","lineNumber":870,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":872,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":874,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":877,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":921,"content":"    /**"},{"type":"DELETE","lineNumber":879,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":882,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":884,"oldContent":"            "},{"type":"DELETE","lineNumber":886,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":888,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":890,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":892,"oldContent":"    "},{"type":"DELETE","lineNumber":894,"oldContent":"            }"},{"type":"DELETE","lineNumber":896,"oldContent":"    /**"},{"type":"DELETE","lineNumber":927,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":928,"oldContent":"    }"},{"type":"DELETE","lineNumber":937,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":938,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":940,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":942,"oldContent":"    "},{"type":"DELETE","lineNumber":944,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":946,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":948,"oldContent":"    "},{"type":"INSERT","lineNumber":976,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":977,"content":"    }"},{"type":"DELETE","lineNumber":953,"oldContent":""},{"type":"DELETE","lineNumber":955,"oldContent":""},{"type":"DELETE","lineNumber":957,"oldContent":"    /**"},{"type":"DELETE","lineNumber":958,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":960,"oldContent":"     */"},{"type":"DELETE","lineNumber":961,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":962,"oldContent":"            try {"},{"type":"DELETE","lineNumber":963,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":964,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":965,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":966,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":967,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":968,"oldContent":"                "},{"type":"INSERT","lineNumber":984,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":985,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":986,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":987,"content":"    }"},{"type":"INSERT","lineNumber":988,"content":"    "},{"type":"INSERT","lineNumber":989,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":990,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":991,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":992,"content":"    }"},{"type":"INSERT","lineNumber":993,"content":"    "},{"type":"INSERT","lineNumber":994,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":995,"content":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"INSERT","lineNumber":998,"content":"    "},{"type":"INSERT","lineNumber":1006,"content":""},{"type":"INSERT","lineNumber":1007,"content":""},{"type":"INSERT","lineNumber":1008,"content":"    /**"},{"type":"INSERT","lineNumber":1009,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":1010,"content":"     */"},{"type":"DELETE","lineNumber":984,"oldContent":"            try {"},{"type":"INSERT","lineNumber":1017,"content":"                "},{"type":"INSERT","lineNumber":1018,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":1020,"content":"                "},{"type":"INSERT","lineNumber":1027,"content":"}"}]},{"timestamp":1754346314872,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import java.io.ByteArrayOutputStream","oldContent":""},{"type":"DELETE","lineNumber":129,"oldContent":"            "},{"type":"MODIFY","lineNumber":133,"content":"            ","oldContent":"    "},{"type":"DELETE","lineNumber":136,"oldContent":"    /**"},{"type":"DELETE","lineNumber":137,"oldContent":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":139,"content":"    "},{"type":"INSERT","lineNumber":140,"content":"    /**"},{"type":"INSERT","lineNumber":141,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"DELETE","lineNumber":157,"oldContent":"    }"},{"type":"DELETE","lineNumber":161,"oldContent":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":162,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":160,"content":"    }"},{"type":"INSERT","lineNumber":161,"content":"    "},{"type":"INSERT","lineNumber":163,"content":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":165,"oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":167,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":188,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":192,"content":"        return NavigationRoute("},{"type":"DELETE","lineNumber":204,"oldContent":"            try {"},{"type":"INSERT","lineNumber":209,"content":"            try {"},{"type":"DELETE","lineNumber":212,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":214,"oldContent":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"DELETE","lineNumber":216,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"DELETE","lineNumber":218,"oldContent":"                "},{"type":"INSERT","lineNumber":216,"content":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"INSERT","lineNumber":217,"content":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"INSERT","lineNumber":218,"content":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":219,"content":"                "},{"type":"DELETE","lineNumber":264,"oldContent":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"DELETE","lineNumber":265,"oldContent":"     */"},{"type":"DELETE","lineNumber":267,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":268,"content":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"INSERT","lineNumber":269,"content":"     */"},{"type":"INSERT","lineNumber":270,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":274,"oldContent":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"DELETE","lineNumber":276,"oldContent":"                "},{"type":"DELETE","lineNumber":277,"oldContent":"                if (landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":279,"content":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"INSERT","lineNumber":280,"content":"                "},{"type":"INSERT","lineNumber":281,"content":"                if (landmarks.isNotEmpty()) {"},{"type":"DELETE","lineNumber":283,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":285,"oldContent":"            }"},{"type":"DELETE","lineNumber":288,"oldContent":"    }"},{"type":"DELETE","lineNumber":291,"oldContent":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"DELETE","lineNumber":293,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":295,"oldContent":"            if (storageManager == null) {"},{"type":"DELETE","lineNumber":296,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"DELETE","lineNumber":298,"oldContent":"                return null"},{"type":"DELETE","lineNumber":299,"oldContent":"            }"},{"type":"DELETE","lineNumber":301,"oldContent":"            "},{"type":"INSERT","lineNumber":292,"content":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":293,"content":"            }"},{"type":"INSERT","lineNumber":295,"content":"    }"},{"type":"INSERT","lineNumber":298,"content":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"DELETE","lineNumber":306,"oldContent":"            }"},{"type":"INSERT","lineNumber":301,"content":"        return try {"},{"type":"INSERT","lineNumber":302,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":303,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":304,"content":"                return null"},{"type":"INSERT","lineNumber":305,"content":"            }"},{"type":"INSERT","lineNumber":306,"content":"            "},{"type":"DELETE","lineNumber":311,"oldContent":"            null"},{"type":"DELETE","lineNumber":313,"oldContent":"        }"},{"type":"DELETE","lineNumber":315,"oldContent":"    }"},{"type":"DELETE","lineNumber":316,"oldContent":"    "},{"type":"INSERT","lineNumber":312,"content":"            }"},{"type":"DELETE","lineNumber":318,"oldContent":"    /**"},{"type":"INSERT","lineNumber":316,"content":"            null"},{"type":"INSERT","lineNumber":317,"content":"        }"},{"type":"INSERT","lineNumber":318,"content":"    }"},{"type":"INSERT","lineNumber":319,"content":"    "},{"type":"INSERT","lineNumber":320,"content":"    /**"},{"type":"DELETE","lineNumber":325,"oldContent":"            "},{"type":"DELETE","lineNumber":329,"oldContent":"                        stepNumber = 3,"},{"type":"INSERT","lineNumber":328,"content":"            }"},{"type":"INSERT","lineNumber":329,"content":"            "},{"type":"DELETE","lineNumber":336,"oldContent":"            null"},{"type":"DELETE","lineNumber":338,"oldContent":"        }"},{"type":"INSERT","lineNumber":339,"content":"            null"},{"type":"INSERT","lineNumber":340,"content":"        }"},{"type":"INSERT","lineNumber":341,"content":"    }"},{"type":"INSERT","lineNumber":344,"content":"     * Fügt einen neuen Landmark hinzu (nur lokale Speicherung)"},{"type":"DELETE","lineNumber":344,"oldContent":"}"},{"type":"DELETE","lineNumber":347,"oldContent":"     * Fügt einen neuen Landmark hinzu (nur lokale Speicherung)"},{"type":"DELETE","lineNumber":386,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":388,"oldContent":"     */"},{"type":"INSERT","lineNumber":392,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":393,"content":"     */"},{"type":"DELETE","lineNumber":396,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":398,"oldContent":"    }"},{"type":"DELETE","lineNumber":401,"oldContent":""},{"type":"DELETE","lineNumber":402,"oldContent":"    "},{"type":"DELETE","lineNumber":404,"oldContent":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":406,"oldContent":"     */"},{"type":"INSERT","lineNumber":402,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"DELETE","lineNumber":409,"oldContent":"                "},{"type":"INSERT","lineNumber":405,"content":""},{"type":"INSERT","lineNumber":406,"content":"    "},{"type":"INSERT","lineNumber":408,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":409,"content":"     */"},{"type":"DELETE","lineNumber":417,"oldContent":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":423,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":421,"content":"    /**"},{"type":"INSERT","lineNumber":422,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":425,"oldContent":"     */"},{"type":"DELETE","lineNumber":426,"oldContent":"    fun getPerformanceInfo(): String {"},{"type":"DELETE","lineNumber":428,"oldContent":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":430,"oldContent":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"INSERT","lineNumber":429,"content":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":430,"content":"     */"},{"type":"INSERT","lineNumber":431,"content":"    fun getPerformanceInfo(): String {"},{"type":"INSERT","lineNumber":432,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":433,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"DELETE","lineNumber":440,"oldContent":"        return storageManager?.cleanup()"},{"type":"DELETE","lineNumber":444,"oldContent":"                "},{"type":"DELETE","lineNumber":445,"oldContent":"            try {"},{"type":"INSERT","lineNumber":443,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":444,"content":"        return storageManager?.cleanup()"},{"type":"DELETE","lineNumber":447,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":453,"oldContent":""},{"type":"INSERT","lineNumber":451,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":452,"content":"            try {"},{"type":"INSERT","lineNumber":453,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":456,"oldContent":"                }"},{"type":"DELETE","lineNumber":464,"oldContent":"    "},{"type":"INSERT","lineNumber":463,"content":"                }"},{"type":"DELETE","lineNumber":466,"oldContent":""},{"type":"DELETE","lineNumber":468,"oldContent":"    "},{"type":"DELETE","lineNumber":470,"oldContent":"    /**"},{"type":"DELETE","lineNumber":474,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":475,"oldContent":"     * Geht zum nächsten Navigationsschritt"},{"type":"DELETE","lineNumber":476,"oldContent":"     */"},{"type":"DELETE","lineNumber":477,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":478,"oldContent":"        _currentNavigationStep.value = currentStep + 1"},{"type":"DELETE","lineNumber":479,"oldContent":"        Log.d(TAG, \"Nächster Navigationsschritt: ${currentStep + 1}\")"},{"type":"DELETE","lineNumber":480,"oldContent":"    }"},{"type":"DELETE","lineNumber":481,"oldContent":"    /**"},{"type":"DELETE","lineNumber":483,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":484,"oldContent":"     */"},{"type":"DELETE","lineNumber":485,"oldContent":"    fun previousNavigationStep() {"},{"type":"DELETE","lineNumber":486,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":487,"oldContent":"        if (currentStep > 1) {"},{"type":"DELETE","lineNumber":488,"oldContent":"            _currentNavigationStep.value = currentStep - 1"},{"type":"DELETE","lineNumber":489,"oldContent":"            Log.d(TAG, \"Vorheriger Navigationsschritt: ${currentStep - 1}\")"},{"type":"DELETE","lineNumber":490,"oldContent":"        }"},{"type":"DELETE","lineNumber":491,"oldContent":"    }"},{"type":"INSERT","lineNumber":471,"content":""},{"type":"INSERT","lineNumber":473,"content":""},{"type":"INSERT","lineNumber":474,"content":"    "},{"type":"DELETE","lineNumber":523,"oldContent":"            "},{"type":"INSERT","lineNumber":505,"content":"            } else {"},{"type":"DELETE","lineNumber":527,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":529,"oldContent":"     */"},{"type":"DELETE","lineNumber":531,"oldContent":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"DELETE","lineNumber":535,"oldContent":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")"},{"type":"DELETE","lineNumber":537,"oldContent":"                "},{"type":"INSERT","lineNumber":515,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":516,"content":"     */"},{"type":"INSERT","lineNumber":517,"content":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"INSERT","lineNumber":519,"content":"            try {"},{"type":"INSERT","lineNumber":520,"content":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")"},{"type":"INSERT","lineNumber":521,"content":"                "},{"type":"INSERT","lineNumber":522,"content":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"INSERT","lineNumber":523,"content":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"INSERT","lineNumber":524,"content":"                "},{"type":"DELETE","lineNumber":540,"oldContent":"                    name = \"Demo Route\","},{"type":"DELETE","lineNumber":543,"oldContent":"                "},{"type":"DELETE","lineNumber":545,"oldContent":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"DELETE","lineNumber":547,"oldContent":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"DELETE","lineNumber":553,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":535,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":584,"oldContent":"        }"},{"type":"DELETE","lineNumber":586,"oldContent":"        "},{"type":"INSERT","lineNumber":571,"content":"        }"},{"type":"INSERT","lineNumber":572,"content":"        "},{"type":"DELETE","lineNumber":600,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":603,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":605,"oldContent":"                }"},{"type":"DELETE","lineNumber":611,"oldContent":"        }"},{"type":"DELETE","lineNumber":613,"oldContent":"    }"},{"type":"INSERT","lineNumber":591,"content":"                } else {"},{"type":"DELETE","lineNumber":615,"oldContent":"    "},{"type":"INSERT","lineNumber":593,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":594,"content":"                }"},{"type":"DELETE","lineNumber":617,"oldContent":"    /**"},{"type":"DELETE","lineNumber":619,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":621,"oldContent":"     */"},{"type":"INSERT","lineNumber":599,"content":"        }"},{"type":"INSERT","lineNumber":600,"content":"    }"},{"type":"INSERT","lineNumber":601,"content":"    "},{"type":"INSERT","lineNumber":602,"content":"    /**"},{"type":"INSERT","lineNumber":603,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":604,"content":"     */"},{"type":"DELETE","lineNumber":666,"oldContent":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"INSERT","lineNumber":650,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":680,"oldContent":"    /**"},{"type":"INSERT","lineNumber":665,"content":"    /**"},{"type":"DELETE","lineNumber":702,"oldContent":"        "},{"type":"DELETE","lineNumber":704,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":686,"content":"        "},{"type":"INSERT","lineNumber":687,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":735,"oldContent":"    /**"},{"type":"DELETE","lineNumber":737,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":739,"oldContent":"     */"},{"type":"DELETE","lineNumber":741,"oldContent":"    fun startNavigation() {"},{"type":"DELETE","lineNumber":743,"oldContent":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"DELETE","lineNumber":745,"oldContent":"        setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":746,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":747,"oldContent":"    "},{"type":"INSERT","lineNumber":725,"content":"    /**"},{"type":"INSERT","lineNumber":726,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":727,"content":"     */"},{"type":"INSERT","lineNumber":728,"content":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":729,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":730,"content":"        setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":731,"content":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":733,"content":"    "},{"type":"DELETE","lineNumber":765,"oldContent":"        "},{"type":"DELETE","lineNumber":767,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":769,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":771,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":773,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":752,"content":"        "},{"type":"INSERT","lineNumber":753,"content":"        return buildString {"},{"type":"INSERT","lineNumber":754,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":755,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":756,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":808,"oldContent":""},{"type":"DELETE","lineNumber":810,"oldContent":"    "},{"type":"DELETE","lineNumber":812,"oldContent":""},{"type":"DELETE","lineNumber":814,"oldContent":"    "},{"type":"DELETE","lineNumber":817,"oldContent":"    /**"},{"type":"DELETE","lineNumber":820,"oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":823,"oldContent":"     */"},{"type":"DELETE","lineNumber":825,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":827,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":829,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":832,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":835,"oldContent":"                            )"},{"type":"DELETE","lineNumber":837,"oldContent":"                        )"},{"type":"DELETE","lineNumber":840,"oldContent":"                    }"},{"type":"DELETE","lineNumber":842,"oldContent":"                }"},{"type":"DELETE","lineNumber":844,"oldContent":"            }"},{"type":"DELETE","lineNumber":847,"oldContent":"            "},{"type":"DELETE","lineNumber":850,"oldContent":"            }"},{"type":"DELETE","lineNumber":852,"oldContent":"            "},{"type":"DELETE","lineNumber":854,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":857,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":859,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":862,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":865,"oldContent":"        }"},{"type":"DELETE","lineNumber":866,"oldContent":"    }"},{"type":"INSERT","lineNumber":824,"content":""},{"type":"INSERT","lineNumber":825,"content":"    "},{"type":"INSERT","lineNumber":826,"content":""},{"type":"INSERT","lineNumber":827,"content":"    "},{"type":"DELETE","lineNumber":868,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":869,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":829,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":831,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":873,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":875,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":877,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":880,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":882,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":885,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":841,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":887,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":891,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":894,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"DELETE","lineNumber":897,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":900,"oldContent":"        }"},{"type":"DELETE","lineNumber":903,"oldContent":"    }"},{"type":"DELETE","lineNumber":906,"oldContent":""},{"type":"DELETE","lineNumber":909,"oldContent":""},{"type":"DELETE","lineNumber":911,"oldContent":""},{"type":"INSERT","lineNumber":861,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":862,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":863,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":864,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":865,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":866,"content":"                            )"},{"type":"INSERT","lineNumber":867,"content":"                        )"},{"type":"INSERT","lineNumber":868,"content":"                    }"},{"type":"INSERT","lineNumber":869,"content":"                }"},{"type":"INSERT","lineNumber":870,"content":"            }"},{"type":"INSERT","lineNumber":871,"content":"            "},{"type":"INSERT","lineNumber":872,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":873,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":874,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":875,"content":"            }"},{"type":"INSERT","lineNumber":876,"content":"            "},{"type":"INSERT","lineNumber":877,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":878,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":879,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":880,"content":"            emptyList()"},{"type":"INSERT","lineNumber":881,"content":"        }"},{"type":"INSERT","lineNumber":882,"content":"    }"},{"type":"INSERT","lineNumber":883,"content":"    "},{"type":"INSERT","lineNumber":884,"content":"    /**"},{"type":"INSERT","lineNumber":885,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":886,"content":"     */"},{"type":"INSERT","lineNumber":887,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":888,"content":"        return try {"},{"type":"INSERT","lineNumber":889,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":890,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":891,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":892,"content":"            } else {"},{"type":"INSERT","lineNumber":893,"content":"                emptyList()"},{"type":"INSERT","lineNumber":894,"content":"            }"},{"type":"INSERT","lineNumber":895,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":896,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":897,"content":"            emptyList()"},{"type":"INSERT","lineNumber":898,"content":"        }"},{"type":"INSERT","lineNumber":899,"content":"    }"},{"type":"INSERT","lineNumber":900,"content":""},{"type":"INSERT","lineNumber":901,"content":""},{"type":"INSERT","lineNumber":902,"content":""},{"type":"INSERT","lineNumber":903,"content":"    /**"},{"type":"DELETE","lineNumber":917,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":918,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":923,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":924,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":926,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":933,"oldContent":"    "},{"type":"DELETE","lineNumber":945,"oldContent":"            }"},{"type":"DELETE","lineNumber":955,"oldContent":"    /**"},{"type":"INSERT","lineNumber":958,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":959,"content":"    }"},{"type":"INSERT","lineNumber":966,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":967,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":968,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":969,"content":"    }"},{"type":"INSERT","lineNumber":970,"content":"    "},{"type":"INSERT","lineNumber":971,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":972,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":973,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":974,"content":"    }"},{"type":"INSERT","lineNumber":975,"content":"    "},{"type":"INSERT","lineNumber":976,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":977,"content":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"INSERT","lineNumber":980,"content":"    "},{"type":"DELETE","lineNumber":989,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":991,"oldContent":"    }"},{"type":"INSERT","lineNumber":988,"content":""},{"type":"INSERT","lineNumber":989,"content":""},{"type":"INSERT","lineNumber":990,"content":"    /**"},{"type":"INSERT","lineNumber":991,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":992,"content":"     */"},{"type":"DELETE","lineNumber":999,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":1000,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":999,"content":"                "},{"type":"INSERT","lineNumber":1000,"content":"                // Bereinige Feature-Storage Cache"},{"type":"MODIFY","lineNumber":1002,"content":"                ","oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1004,"oldContent":"    }"},{"type":"DELETE","lineNumber":1006,"oldContent":"    "},{"type":"DELETE","lineNumber":1008,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1010,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":1011,"oldContent":"}"},{"type":"DELETE","lineNumber":1012,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":1013,"oldContent":"                "},{"type":"INSERT","lineNumber":1007,"content":"        }"},{"type":"DELETE","lineNumber":1015,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1016,"oldContent":"    "},{"type":"DELETE","lineNumber":1017,"oldContent":"                "},{"type":"DELETE","lineNumber":1018,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":1019,"oldContent":"     */"},{"type":"DELETE","lineNumber":1020,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":1021,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":1022,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1023,"oldContent":""},{"type":"DELETE","lineNumber":1024,"oldContent":"    "},{"type":"DELETE","lineNumber":1025,"oldContent":""},{"type":"INSERT","lineNumber":1009,"content":"}"}]},{"timestamp":1754560065048,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.content.Context","oldContent":""},{"type":"INSERT","lineNumber":42,"content":"    // Flag für echtes vs. simuliertes Feature-Matching"},{"type":"INSERT","lineNumber":43,"content":"    private var useRealFeatureMatching = true"},{"type":"INSERT","lineNumber":44,"content":"    "},{"type":"INSERT","lineNumber":135,"content":"            )"},{"type":"DELETE","lineNumber":133,"oldContent":"    "},{"type":"DELETE","lineNumber":136,"oldContent":"    "},{"type":"DELETE","lineNumber":138,"oldContent":"    /**"},{"type":"DELETE","lineNumber":140,"oldContent":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":142,"content":"    "},{"type":"INSERT","lineNumber":143,"content":"    /**"},{"type":"INSERT","lineNumber":144,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"DELETE","lineNumber":162,"oldContent":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"INSERT","lineNumber":166,"content":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":166,"oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":170,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":191,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":195,"content":"        return NavigationRoute("},{"type":"DELETE","lineNumber":208,"oldContent":"            try {"},{"type":"INSERT","lineNumber":212,"content":"            try {"},{"type":"INSERT","lineNumber":217,"content":"                "},{"type":"INSERT","lineNumber":218,"content":"                // Feature-Matching System initialisieren"},{"type":"DELETE","lineNumber":216,"oldContent":"                "},{"type":"DELETE","lineNumber":219,"oldContent":"                // Feature-Matching System initialisieren"},{"type":"DELETE","lineNumber":228,"oldContent":""},{"type":"INSERT","lineNumber":231,"content":"                "},{"type":"DELETE","lineNumber":265,"oldContent":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"DELETE","lineNumber":267,"oldContent":"     */"},{"type":"DELETE","lineNumber":269,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":271,"content":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"INSERT","lineNumber":272,"content":"     */"},{"type":"INSERT","lineNumber":273,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":276,"oldContent":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"DELETE","lineNumber":278,"oldContent":"                "},{"type":"DELETE","lineNumber":280,"oldContent":"                if (landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":282,"content":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"INSERT","lineNumber":283,"content":"                "},{"type":"INSERT","lineNumber":284,"content":"                if (landmarks.isNotEmpty()) {"},{"type":"DELETE","lineNumber":288,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":290,"oldContent":"            }"},{"type":"DELETE","lineNumber":292,"oldContent":"    }"},{"type":"DELETE","lineNumber":294,"oldContent":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"INSERT","lineNumber":295,"content":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":296,"content":"            }"},{"type":"INSERT","lineNumber":297,"content":"        }"},{"type":"INSERT","lineNumber":298,"content":"    }"},{"type":"INSERT","lineNumber":299,"content":"    "},{"type":"INSERT","lineNumber":300,"content":"    /**"},{"type":"INSERT","lineNumber":301,"content":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"INSERT","lineNumber":302,"content":"     */"},{"type":"INSERT","lineNumber":303,"content":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":298,"oldContent":"        }"},{"type":"DELETE","lineNumber":300,"oldContent":"    "},{"type":"DELETE","lineNumber":302,"oldContent":"    /**"},{"type":"DELETE","lineNumber":304,"oldContent":"     */"},{"type":"DELETE","lineNumber":306,"oldContent":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":310,"oldContent":"            }"},{"type":"INSERT","lineNumber":315,"content":"            }"},{"type":"INSERT","lineNumber":316,"content":"            image"},{"type":"INSERT","lineNumber":317,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":318,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":315,"oldContent":"            image"},{"type":"DELETE","lineNumber":318,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":320,"oldContent":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":327,"oldContent":"            }"},{"type":"INSERT","lineNumber":331,"content":"            }"},{"type":"DELETE","lineNumber":337,"oldContent":"            null"},{"type":"INSERT","lineNumber":341,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Thumbnails $landmarkId: ${e.message}\")"},{"type":"INSERT","lineNumber":342,"content":"            null"},{"type":"DELETE","lineNumber":340,"oldContent":"                "},{"type":"DELETE","lineNumber":344,"oldContent":"     */"},{"type":"INSERT","lineNumber":348,"content":"     */"},{"type":"DELETE","lineNumber":390,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":392,"oldContent":"     */"},{"type":"INSERT","lineNumber":395,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":396,"content":"     */"},{"type":"INSERT","lineNumber":402,"content":"                android.os.Build.MODEL.contains(\"Android SDK built for x86\") ||"},{"type":"INSERT","lineNumber":403,"content":"                android.os.Build.MANUFACTURER.contains(\"Genymotion\") ||"},{"type":"INSERT","lineNumber":404,"content":"                android.os.Build.BRAND.startsWith(\"generic\") && android.os.Build.DEVICE.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":401,"oldContent":"                android.os.Build.MODEL.contains(\"Android SDK built for x86\") ||"},{"type":"INSERT","lineNumber":407,"content":"    "},{"type":"DELETE","lineNumber":403,"oldContent":"                android.os.Build.MANUFACTURER.contains(\"Genymotion\") ||"},{"type":"DELETE","lineNumber":405,"oldContent":"                android.os.Build.BRAND.startsWith(\"generic\") && android.os.Build.DEVICE.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":410,"content":"    /**"},{"type":"DELETE","lineNumber":407,"oldContent":"    "},{"type":"DELETE","lineNumber":409,"oldContent":"    /**"},{"type":"DELETE","lineNumber":419,"oldContent":"    /**"},{"type":"DELETE","lineNumber":421,"oldContent":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":424,"content":"    /**"},{"type":"INSERT","lineNumber":425,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":425,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":429,"content":"    }"},{"type":"INSERT","lineNumber":430,"content":"    "},{"type":"INSERT","lineNumber":431,"content":"    /**"},{"type":"INSERT","lineNumber":432,"content":"     * Gibt Performance-Informationen zurück"},{"type":"DELETE","lineNumber":429,"oldContent":"    }"},{"type":"DELETE","lineNumber":431,"oldContent":"    "},{"type":"DELETE","lineNumber":433,"oldContent":"    /**"},{"type":"DELETE","lineNumber":442,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":446,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":449,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":451,"oldContent":"            try {"},{"type":"INSERT","lineNumber":454,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":455,"content":"            try {"},{"type":"DELETE","lineNumber":462,"oldContent":"                }"},{"type":"INSERT","lineNumber":466,"content":"                }"},{"type":"DELETE","lineNumber":467,"oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":""},{"type":"INSERT","lineNumber":474,"content":""},{"type":"INSERT","lineNumber":476,"content":""},{"type":"DELETE","lineNumber":487,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":498,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":500,"oldContent":"     */"},{"type":"DELETE","lineNumber":502,"oldContent":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"DELETE","lineNumber":505,"oldContent":"            try {"},{"type":"DELETE","lineNumber":507,"oldContent":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")"},{"type":"DELETE","lineNumber":509,"oldContent":"                "},{"type":"DELETE","lineNumber":511,"oldContent":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"DELETE","lineNumber":513,"oldContent":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"DELETE","lineNumber":514,"oldContent":"                "},{"type":"INSERT","lineNumber":508,"content":"            } else {"},{"type":"DELETE","lineNumber":523,"oldContent":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":525,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":518,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":519,"content":"     */"},{"type":"INSERT","lineNumber":520,"content":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"INSERT","lineNumber":521,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":522,"content":"            try {"},{"type":"INSERT","lineNumber":523,"content":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")"},{"type":"INSERT","lineNumber":524,"content":"                "},{"type":"INSERT","lineNumber":525,"content":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"INSERT","lineNumber":526,"content":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"INSERT","lineNumber":527,"content":"                "},{"type":"INSERT","lineNumber":538,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":541,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":544,"content":"                    ),"},{"type":"DELETE","lineNumber":553,"oldContent":"        }"},{"type":"DELETE","lineNumber":555,"oldContent":"        "},{"type":"DELETE","lineNumber":558,"oldContent":"    "},{"type":"INSERT","lineNumber":559,"content":"                Log.i(TAG, \"Feature-Navigation Route geladen: ${demoSteps.size} Schritte\")"},{"type":"DELETE","lineNumber":573,"oldContent":"                } else {"},{"type":"INSERT","lineNumber":574,"content":"        }"},{"type":"INSERT","lineNumber":575,"content":"        "},{"type":"DELETE","lineNumber":576,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":578,"oldContent":"                }"},{"type":"DELETE","lineNumber":584,"oldContent":"        }"},{"type":"DELETE","lineNumber":586,"oldContent":"    }"},{"type":"DELETE","lineNumber":587,"oldContent":"    "},{"type":"DELETE","lineNumber":589,"oldContent":"    /**"},{"type":"DELETE","lineNumber":591,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":592,"oldContent":"     */"},{"type":"INSERT","lineNumber":594,"content":"                } else {"},{"type":"INSERT","lineNumber":596,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":597,"content":"                }"},{"type":"INSERT","lineNumber":602,"content":"        }"},{"type":"INSERT","lineNumber":603,"content":"    }"},{"type":"INSERT","lineNumber":604,"content":"    "},{"type":"INSERT","lineNumber":605,"content":"    /**"},{"type":"INSERT","lineNumber":606,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":607,"content":"     */"},{"type":"DELETE","lineNumber":632,"oldContent":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":648,"oldContent":"    /**"},{"type":"INSERT","lineNumber":653,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"INSERT","lineNumber":668,"content":"    /**"},{"type":"DELETE","lineNumber":668,"oldContent":"        "},{"type":"DELETE","lineNumber":670,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":689,"content":"        "},{"type":"INSERT","lineNumber":690,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":707,"oldContent":"    /**"},{"type":"DELETE","lineNumber":709,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":711,"oldContent":"     */"},{"type":"DELETE","lineNumber":713,"oldContent":"    fun startNavigation() {"},{"type":"DELETE","lineNumber":715,"oldContent":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"DELETE","lineNumber":717,"oldContent":"        setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":719,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":722,"oldContent":"    "},{"type":"INSERT","lineNumber":728,"content":"    /**"},{"type":"INSERT","lineNumber":729,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":730,"content":"     */"},{"type":"INSERT","lineNumber":731,"content":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":732,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":733,"content":"        setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":734,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":734,"oldContent":"        "},{"type":"INSERT","lineNumber":736,"content":"    "},{"type":"DELETE","lineNumber":736,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":738,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":740,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":742,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":757,"oldContent":"                appendLine(\"Route ID: ${route.route.id}\")"},{"type":"INSERT","lineNumber":755,"content":"        "},{"type":"INSERT","lineNumber":756,"content":"        return buildString {"},{"type":"INSERT","lineNumber":757,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":758,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":759,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":760,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":783,"oldContent":"            Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":786,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":787,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":788,"content":"                try {"},{"type":"INSERT","lineNumber":789,"content":"                    storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":790,"content":"                    "},{"type":"INSERT","lineNumber":791,"content":"                    // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":792,"content":"                    landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":793,"content":"                    "},{"type":"INSERT","lineNumber":794,"content":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":795,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":796,"content":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"INSERT","lineNumber":797,"content":"                }"},{"type":"INSERT","lineNumber":798,"content":"            }"},{"type":"INSERT","lineNumber":799,"content":"            "},{"type":"DELETE","lineNumber":799,"oldContent":""},{"type":"DELETE","lineNumber":801,"oldContent":"    "},{"type":"DELETE","lineNumber":802,"oldContent":""},{"type":"DELETE","lineNumber":804,"oldContent":"    "},{"type":"DELETE","lineNumber":806,"oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":808,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":815,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":828,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":838,"content":"    }"},{"type":"INSERT","lineNumber":839,"content":"    "},{"type":"INSERT","lineNumber":840,"content":""},{"type":"INSERT","lineNumber":841,"content":"    "},{"type":"INSERT","lineNumber":842,"content":""},{"type":"INSERT","lineNumber":843,"content":"    "},{"type":"INSERT","lineNumber":844,"content":"    /**"},{"type":"INSERT","lineNumber":845,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":846,"content":"     */"},{"type":"INSERT","lineNumber":847,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":848,"content":"        return try {"},{"type":"INSERT","lineNumber":849,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":850,"content":"            "},{"type":"INSERT","lineNumber":851,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":852,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":853,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":854,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":855,"content":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"INSERT","lineNumber":856,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":857,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":858,"content":"                                id = landmark, // String aus JSON"},{"type":"INSERT","lineNumber":859,"content":"                                name = landmark,"},{"type":"INSERT","lineNumber":860,"content":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":861,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":862,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":863,"content":"                            )"},{"type":"INSERT","lineNumber":864,"content":"                        )"},{"type":"INSERT","lineNumber":865,"content":"                    }"},{"type":"INSERT","lineNumber":866,"content":"                }"},{"type":"INSERT","lineNumber":867,"content":"            }"},{"type":"INSERT","lineNumber":868,"content":"            "},{"type":"INSERT","lineNumber":869,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":870,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":871,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":872,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":873,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":874,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":875,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":876,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":877,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":832,"oldContent":"    }"},{"type":"DELETE","lineNumber":834,"oldContent":"    "},{"type":"DELETE","lineNumber":838,"oldContent":"    /**"},{"type":"DELETE","lineNumber":842,"oldContent":"     */"},{"type":"DELETE","lineNumber":844,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":846,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":849,"oldContent":"            "},{"type":"DELETE","lineNumber":852,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":855,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":857,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":860,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":863,"oldContent":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"DELETE","lineNumber":865,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":868,"oldContent":"                                id = landmark, // String aus JSON"},{"type":"DELETE","lineNumber":871,"oldContent":"                                name = landmark,"},{"type":"DELETE","lineNumber":873,"oldContent":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":875,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":878,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":880,"oldContent":"                            )"},{"type":"DELETE","lineNumber":883,"oldContent":"                        )"},{"type":"DELETE","lineNumber":885,"oldContent":"                    }"},{"type":"DELETE","lineNumber":888,"oldContent":"                }"},{"type":"DELETE","lineNumber":890,"oldContent":"            }"},{"type":"DELETE","lineNumber":893,"oldContent":"            "},{"type":"DELETE","lineNumber":895,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":897,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":898,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":899,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":900,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":901,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":902,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":903,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":940,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":942,"oldContent":"    }"},{"type":"DELETE","lineNumber":950,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":952,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":954,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":957,"oldContent":"    }"},{"type":"DELETE","lineNumber":958,"oldContent":"    "},{"type":"DELETE","lineNumber":960,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":962,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":964,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":966,"oldContent":"    }"},{"type":"DELETE","lineNumber":968,"oldContent":"    "},{"type":"DELETE","lineNumber":970,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":974,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":975,"content":"    }"},{"type":"DELETE","lineNumber":972,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"INSERT","lineNumber":980,"content":"    }"},{"type":"INSERT","lineNumber":982,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":983,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":984,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":979,"oldContent":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":987,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":988,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":989,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":991,"content":"    "},{"type":"DELETE","lineNumber":985,"oldContent":""},{"type":"DELETE","lineNumber":987,"oldContent":""},{"type":"DELETE","lineNumber":988,"oldContent":"    /**"},{"type":"DELETE","lineNumber":990,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":991,"oldContent":"     */"},{"type":"DELETE","lineNumber":993,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":994,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":995,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":996,"oldContent":"            try {"},{"type":"DELETE","lineNumber":997,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":998,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":999,"oldContent":"                "},{"type":"DELETE","lineNumber":1000,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1001,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":1002,"oldContent":"                "},{"type":"DELETE","lineNumber":1003,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":999,"content":""},{"type":"DELETE","lineNumber":1005,"oldContent":"        }"},{"type":"DELETE","lineNumber":1006,"oldContent":"                "},{"type":"DELETE","lineNumber":1007,"oldContent":"}"},{"type":"DELETE","lineNumber":1008,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1009,"oldContent":"    }"}]},{"timestamp":1754560084288,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.graphics.Bitmap","oldContent":"import RouteData"},{"type":"MODIFY","lineNumber":30,"content":"    ","oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"INSERT","lineNumber":45,"content":""},{"type":"MODIFY","lineNumber":56,"content":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()","oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":135,"content":"            )"},{"type":"DELETE","lineNumber":137,"oldContent":"            )"},{"type":"DELETE","lineNumber":143,"oldContent":"     */"},{"type":"MODIFY","lineNumber":145,"content":"     */","oldContent":"    fun logNavigationRoute(navigationRoute: NavigationRoute) {"},{"type":"INSERT","lineNumber":146,"content":"    fun logNavigationRoute(navigationRoute: NavigationRoute) {"},{"type":"MODIFY","lineNumber":164,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":166,"content":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":168,"oldContent":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"INSERT","lineNumber":170,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":172,"oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":195,"content":"        return NavigationRoute("},{"type":"DELETE","lineNumber":197,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":212,"content":"            try {"},{"type":"DELETE","lineNumber":214,"oldContent":"            try {"},{"type":"DELETE","lineNumber":217,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":218,"oldContent":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"MODIFY","lineNumber":219,"content":"                featureMatchingEngine = FeatureMatchingEngine(context)","oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":220,"content":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"INSERT","lineNumber":221,"content":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":231,"content":"                "},{"type":"DELETE","lineNumber":233,"oldContent":"                "},{"type":"DELETE","lineNumber":272,"oldContent":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":274,"content":"        viewModelScope.launch {","oldContent":"            try {"},{"type":"INSERT","lineNumber":275,"content":"            try {"},{"type":"DELETE","lineNumber":283,"oldContent":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"MODIFY","lineNumber":285,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")","oldContent":"                    landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":286,"content":"                    landmarks.forEach { landmark ->"},{"type":"MODIFY","lineNumber":295,"content":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")","oldContent":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":297,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":299,"oldContent":"            if (storageManager == null) {"},{"type":"DELETE","lineNumber":302,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"MODIFY","lineNumber":304,"content":"        return try {","oldContent":"                return null"},{"type":"INSERT","lineNumber":305,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":306,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":307,"content":"                return null"},{"type":"DELETE","lineNumber":315,"oldContent":"            null"},{"type":"DELETE","lineNumber":316,"oldContent":"        }"},{"type":"DELETE","lineNumber":319,"oldContent":"    }"},{"type":"DELETE","lineNumber":321,"oldContent":"    "},{"type":"INSERT","lineNumber":319,"content":"            null"},{"type":"INSERT","lineNumber":320,"content":"        }"},{"type":"INSERT","lineNumber":321,"content":"    }"},{"type":"INSERT","lineNumber":322,"content":"    "},{"type":"INSERT","lineNumber":331,"content":"            }"},{"type":"DELETE","lineNumber":333,"oldContent":"            }"},{"type":"DELETE","lineNumber":341,"oldContent":"        }"},{"type":"MODIFY","lineNumber":343,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":344,"content":"    }"},{"type":"INSERT","lineNumber":348,"content":"     */"},{"type":"DELETE","lineNumber":350,"oldContent":"     */"},{"type":"DELETE","lineNumber":395,"oldContent":"    private fun isEmulatorDevice(): Boolean {"},{"type":"MODIFY","lineNumber":397,"content":"    private fun isEmulatorDevice(): Boolean {","oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":398,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":402,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":403,"oldContent":"    }"},{"type":"MODIFY","lineNumber":405,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)","oldContent":""},{"type":"INSERT","lineNumber":406,"content":"    }"},{"type":"DELETE","lineNumber":409,"oldContent":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":408,"content":""},{"type":"MODIFY","lineNumber":411,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System","oldContent":"     */"},{"type":"INSERT","lineNumber":412,"content":"     */"},{"type":"DELETE","lineNumber":424,"oldContent":"     */"},{"type":"DELETE","lineNumber":426,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"DELETE","lineNumber":428,"oldContent":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"DELETE","lineNumber":430,"oldContent":"    fun getPerformanceInfo(): String {"},{"type":"INSERT","lineNumber":427,"content":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"INSERT","lineNumber":428,"content":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"MODIFY","lineNumber":433,"content":"     */","oldContent":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":434,"content":"    fun getPerformanceInfo(): String {"},{"type":"INSERT","lineNumber":435,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":446,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":448,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":454,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"MODIFY","lineNumber":456,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")","oldContent":"                "},{"type":"INSERT","lineNumber":457,"content":"                "},{"type":"INSERT","lineNumber":466,"content":"                }"},{"type":"DELETE","lineNumber":468,"oldContent":"                }"},{"type":"INSERT","lineNumber":474,"content":""},{"type":"DELETE","lineNumber":478,"oldContent":""},{"type":"DELETE","lineNumber":505,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":508,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":507,"content":"                result is SaveResult.Success"},{"type":"INSERT","lineNumber":508,"content":"            } else {"},{"type":"DELETE","lineNumber":512,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":514,"oldContent":"     */"},{"type":"DELETE","lineNumber":516,"oldContent":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"DELETE","lineNumber":518,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":520,"oldContent":"            try {"},{"type":"INSERT","lineNumber":517,"content":"    /**"},{"type":"INSERT","lineNumber":518,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":519,"content":"     */"},{"type":"INSERT","lineNumber":520,"content":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"INSERT","lineNumber":521,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":522,"content":"            try {"},{"type":"DELETE","lineNumber":524,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":528,"content":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation","oldContent":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"MODIFY","lineNumber":537,"content":"                        instruction = \"Biegen Sie links ab zur Treppe\",","oldContent":"    }"},{"type":"INSERT","lineNumber":538,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":540,"oldContent":"                        landmarks = emptyList()"},{"type":"INSERT","lineNumber":544,"content":"                    ),"},{"type":"DELETE","lineNumber":546,"oldContent":"                    ),"},{"type":"MODIFY","lineNumber":548,"content":"                        landmarks = emptyList()","oldContent":"    /**"},{"type":"MODIFY","lineNumber":551,"content":"                ","oldContent":"            } else {"},{"type":"DELETE","lineNumber":553,"oldContent":"    }"},{"type":"DELETE","lineNumber":554,"oldContent":"                }"},{"type":"INSERT","lineNumber":553,"content":"                    id = \"demo_route\","},{"type":"INSERT","lineNumber":554,"content":"                    name = \"Demo Route\","},{"type":"MODIFY","lineNumber":567,"content":"    /**","oldContent":"        }"},{"type":"MODIFY","lineNumber":576,"content":"        viewModelScope.launch {","oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":588,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":591,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":593,"oldContent":"                }"},{"type":"INSERT","lineNumber":594,"content":"                } else {"},{"type":"INSERT","lineNumber":596,"content":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":597,"content":"                }"},{"type":"DELETE","lineNumber":599,"oldContent":"        }"},{"type":"DELETE","lineNumber":601,"oldContent":"    }"},{"type":"DELETE","lineNumber":603,"oldContent":"    "},{"type":"INSERT","lineNumber":602,"content":"        }"},{"type":"INSERT","lineNumber":603,"content":"    }"},{"type":"INSERT","lineNumber":604,"content":"    "},{"type":"DELETE","lineNumber":606,"oldContent":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"MODIFY","lineNumber":608,"content":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {","oldContent":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":609,"content":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"MODIFY","lineNumber":654,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":668,"oldContent":"     * Aktiviert/Deaktiviert das Feature-Mapping"},{"type":"DELETE","lineNumber":669,"oldContent":"}"},{"type":"DELETE","lineNumber":671,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":672,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":673,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":674,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":675,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":676,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":669,"content":"     * Aktiviert/Deaktiviert das Feature-Mapping"},{"type":"INSERT","lineNumber":670,"content":"     */"},{"type":"INSERT","lineNumber":671,"content":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"INSERT","lineNumber":672,"content":"        _isFeatureMappingEnabled.value = enabled"},{"type":"INSERT","lineNumber":673,"content":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"INSERT","lineNumber":674,"content":"        "},{"type":"INSERT","lineNumber":675,"content":"        if (!enabled) {"},{"type":"INSERT","lineNumber":676,"content":"            _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":678,"oldContent":"            try {"},{"type":"DELETE","lineNumber":679,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":680,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":681,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":678,"content":"    }"},{"type":"INSERT","lineNumber":679,"content":"    "},{"type":"DELETE","lineNumber":683,"oldContent":""},{"type":"INSERT","lineNumber":681,"content":"     * Aktualisiert den aktuellen Navigationsschritt"},{"type":"INSERT","lineNumber":682,"content":"     */"},{"type":"INSERT","lineNumber":683,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"MODIFY","lineNumber":686,"content":"        ","oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":689,"oldContent":"        if (_isFeatureMappingEnabled.value && _currentRoute.value != null) {"},{"type":"MODIFY","lineNumber":691,"content":"        if (_isFeatureMappingEnabled.value && _currentRoute.value != null) {","oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":692,"content":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":723,"oldContent":"    /**"},{"type":"DELETE","lineNumber":725,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":727,"oldContent":"     */"},{"type":"DELETE","lineNumber":729,"oldContent":"    fun startNavigation() {"},{"type":"DELETE","lineNumber":731,"oldContent":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":728,"content":"    /**"},{"type":"INSERT","lineNumber":729,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":730,"content":"     */"},{"type":"INSERT","lineNumber":731,"content":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":732,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"DELETE","lineNumber":734,"oldContent":"    }"},{"type":"DELETE","lineNumber":736,"oldContent":"    /**"},{"type":"INSERT","lineNumber":735,"content":"    }"},{"type":"INSERT","lineNumber":737,"content":"    /**"},{"type":"DELETE","lineNumber":753,"oldContent":"        "},{"type":"MODIFY","lineNumber":755,"content":"        ","oldContent":"        return buildString {"},{"type":"INSERT","lineNumber":756,"content":"        return buildString {"},{"type":"DELETE","lineNumber":759,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"MODIFY","lineNumber":761,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")","oldContent":"            }"},{"type":"INSERT","lineNumber":762,"content":"            }"},{"type":"INSERT","lineNumber":786,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":787,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":788,"content":"                try {"},{"type":"INSERT","lineNumber":789,"content":"                    storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":790,"content":"                    "},{"type":"INSERT","lineNumber":791,"content":"                    // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":792,"content":"                    landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":793,"content":"                    "},{"type":"INSERT","lineNumber":794,"content":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":795,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":796,"content":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"INSERT","lineNumber":797,"content":"                }"},{"type":"INSERT","lineNumber":798,"content":"            }"},{"type":"INSERT","lineNumber":799,"content":"            "},{"type":"DELETE","lineNumber":788,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":790,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":792,"oldContent":"                try {"},{"type":"DELETE","lineNumber":794,"oldContent":"                    storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":796,"oldContent":"                    "},{"type":"DELETE","lineNumber":798,"oldContent":"                    // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":800,"oldContent":"                    landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":802,"oldContent":"                    "},{"type":"DELETE","lineNumber":804,"oldContent":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"DELETE","lineNumber":806,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":808,"oldContent":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"DELETE","lineNumber":810,"oldContent":"                }"},{"type":"DELETE","lineNumber":812,"oldContent":"            }"},{"type":"DELETE","lineNumber":815,"oldContent":"            "},{"type":"DELETE","lineNumber":838,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":839,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":840,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":841,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":842,"oldContent":"                            )"},{"type":"DELETE","lineNumber":843,"oldContent":"                        )"},{"type":"DELETE","lineNumber":846,"oldContent":"                    }"},{"type":"DELETE","lineNumber":848,"oldContent":"                }"},{"type":"DELETE","lineNumber":850,"oldContent":"            }"},{"type":"DELETE","lineNumber":853,"oldContent":"            "},{"type":"DELETE","lineNumber":856,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":859,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":861,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":864,"oldContent":"            }"},{"type":"DELETE","lineNumber":866,"oldContent":"            "},{"type":"DELETE","lineNumber":869,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":871,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":874,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":877,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":879,"oldContent":"        }"},{"type":"DELETE","lineNumber":882,"oldContent":"    }"},{"type":"DELETE","lineNumber":884,"oldContent":"    "},{"type":"DELETE","lineNumber":887,"oldContent":"    /**"},{"type":"DELETE","lineNumber":890,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":892,"oldContent":"     */"},{"type":"DELETE","lineNumber":895,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":897,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":900,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":903,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":906,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":878,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":879,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":880,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":881,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":882,"content":"                            )"},{"type":"INSERT","lineNumber":883,"content":"                        )"},{"type":"INSERT","lineNumber":884,"content":"                    }"},{"type":"INSERT","lineNumber":885,"content":"                }"},{"type":"INSERT","lineNumber":886,"content":"            }"},{"type":"INSERT","lineNumber":887,"content":"            "},{"type":"INSERT","lineNumber":888,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":889,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":890,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":891,"content":"            }"},{"type":"INSERT","lineNumber":892,"content":"            "},{"type":"INSERT","lineNumber":893,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":894,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":895,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":896,"content":"            emptyList()"},{"type":"INSERT","lineNumber":897,"content":"        }"},{"type":"INSERT","lineNumber":898,"content":"    }"},{"type":"INSERT","lineNumber":899,"content":"    "},{"type":"INSERT","lineNumber":900,"content":"    /**"},{"type":"INSERT","lineNumber":901,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":902,"content":"     */"},{"type":"INSERT","lineNumber":903,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":904,"content":"        return try {"},{"type":"INSERT","lineNumber":905,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":906,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":907,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":974,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":975,"content":"    }"},{"type":"DELETE","lineNumber":976,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":978,"oldContent":"    }"},{"type":"INSERT","lineNumber":980,"content":"    }"},{"type":"INSERT","lineNumber":982,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":983,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":984,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":987,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":988,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":989,"content":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":984,"oldContent":"    }"},{"type":"INSERT","lineNumber":991,"content":"    "},{"type":"DELETE","lineNumber":986,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":988,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":990,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":993,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":994,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":995,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":998,"oldContent":"    "},{"type":"MODIFY","lineNumber":1000,"content":"}","oldContent":"                "}]},{"timestamp":1754560099233,"changes":[{"type":"INSERT","lineNumber":24,"content":"class RouteViewModel : ViewModel() {"},{"type":"DELETE","lineNumber":25,"oldContent":"    "},{"type":"MODIFY","lineNumber":31,"content":"    // Route Repository für JSON-Daten","oldContent":"    // Die neue Funktion die das NavigationRoute-Objekt zurückgibt"},{"type":"INSERT","lineNumber":44,"content":"    "},{"type":"DELETE","lineNumber":46,"oldContent":"    "},{"type":"MODIFY","lineNumber":57,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":77,"content":"            ","oldContent":"            steps = steps"},{"type":"INSERT","lineNumber":144,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"DELETE","lineNumber":146,"oldContent":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"DELETE","lineNumber":164,"oldContent":"    "},{"type":"INSERT","lineNumber":217,"content":"                "},{"type":"INSERT","lineNumber":218,"content":"                // Feature-Matching System initialisieren"},{"type":"DELETE","lineNumber":220,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"DELETE","lineNumber":221,"oldContent":"                // Feature-Matching System initialisieren"},{"type":"INSERT","lineNumber":273,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":275,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":284,"content":"                if (landmarks.isNotEmpty()) {"},{"type":"DELETE","lineNumber":286,"oldContent":"                if (landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":294,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":295,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":301,"content":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"INSERT","lineNumber":302,"content":"     */"},{"type":"INSERT","lineNumber":303,"content":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":303,"oldContent":"                return null"},{"type":"DELETE","lineNumber":305,"oldContent":"     */"},{"type":"DELETE","lineNumber":307,"oldContent":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":317,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":318,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":319,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":322,"oldContent":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"INSERT","lineNumber":342,"content":"            null"},{"type":"DELETE","lineNumber":344,"oldContent":"            null"},{"type":"INSERT","lineNumber":396,"content":"     */"},{"type":"DELETE","lineNumber":398,"oldContent":"     */"},{"type":"DELETE","lineNumber":403,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":404,"oldContent":"    }"},{"type":"INSERT","lineNumber":405,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":406,"content":"    }"},{"type":"INSERT","lineNumber":407,"content":"    "},{"type":"DELETE","lineNumber":409,"oldContent":"    "},{"type":"INSERT","lineNumber":410,"content":"    /**"},{"type":"DELETE","lineNumber":412,"oldContent":"    /**"},{"type":"DELETE","lineNumber":425,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"MODIFY","lineNumber":427,"content":"    suspend fun deleteLandmark(landmarkId: String): Boolean {","oldContent":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"INSERT","lineNumber":428,"content":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"INSERT","lineNumber":431,"content":"    /**"},{"type":"INSERT","lineNumber":432,"content":"     * Gibt Performance-Informationen zurück"},{"type":"DELETE","lineNumber":433,"oldContent":"    /**"},{"type":"DELETE","lineNumber":435,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":455,"content":"            try {"},{"type":"DELETE","lineNumber":457,"oldContent":"            try {"},{"type":"DELETE","lineNumber":493,"oldContent":"    /**"},{"type":"DELETE","lineNumber":494,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":495,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":496,"oldContent":"                    category = \"Manual\""},{"type":"DELETE","lineNumber":497,"oldContent":"                    description = description,"},{"type":"INSERT","lineNumber":493,"content":"        name: String,"},{"type":"INSERT","lineNumber":494,"content":"        description: String,"},{"type":"INSERT","lineNumber":495,"content":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":496,"content":"    ): Boolean {"},{"type":"INSERT","lineNumber":497,"content":"        return try {"},{"type":"DELETE","lineNumber":500,"oldContent":"}"},{"type":"DELETE","lineNumber":501,"oldContent":"    }"},{"type":"DELETE","lineNumber":502,"oldContent":"        }"},{"type":"DELETE","lineNumber":503,"oldContent":"            }"},{"type":"DELETE","lineNumber":504,"oldContent":"                "},{"type":"DELETE","lineNumber":505,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":506,"oldContent":"                result is SaveResult.Success"},{"type":"INSERT","lineNumber":500,"content":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":501,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":502,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":503,"content":"                    landmarkName = name,"},{"type":"INSERT","lineNumber":504,"content":"                    description = description,"},{"type":"INSERT","lineNumber":505,"content":"                    category = \"Manual\""},{"type":"INSERT","lineNumber":507,"content":"                result is SaveResult.Success"},{"type":"MODIFY","lineNumber":509,"content":"                false","oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":511,"oldContent":""},{"type":"DELETE","lineNumber":512,"oldContent":""},{"type":"INSERT","lineNumber":511,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":512,"content":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":513,"content":"            false"},{"type":"INSERT","lineNumber":514,"content":"        }"},{"type":"INSERT","lineNumber":515,"content":"    }"},{"type":"DELETE","lineNumber":515,"oldContent":"    }"},{"type":"DELETE","lineNumber":518,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":521,"oldContent":"    "},{"type":"INSERT","lineNumber":527,"content":"                "},{"type":"DELETE","lineNumber":528,"oldContent":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"MODIFY","lineNumber":543,"content":"                        landmarks = emptyList()","oldContent":""},{"type":"MODIFY","lineNumber":552,"content":"                val featureRoute = FeatureNavigationRoute(","oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"MODIFY","lineNumber":563,"content":"            }","oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"MODIFY","lineNumber":568,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching","oldContent":"     * Verarbeitet einen Kamera-Frame und simuliert Feature-Matching"},{"type":"INSERT","lineNumber":575,"content":"        "},{"type":"DELETE","lineNumber":576,"oldContent":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":578,"content":"                Log.v(TAG, \"processFrameForFeatureMatching called\")","oldContent":"                Log.d(TAG, \"processFrameForFeatureMatching called\")"},{"type":"DELETE","lineNumber":580,"oldContent":"                // Simuliere Feature-Matching basierend auf aktueller Route und Schritt"},{"type":"DELETE","lineNumber":581,"oldContent":"                val currentRoute = _currentRoute.value"},{"type":"DELETE","lineNumber":582,"oldContent":"                val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":583,"oldContent":"                "},{"type":"DELETE","lineNumber":584,"oldContent":"                if (currentRoute != null) {"},{"type":"DELETE","lineNumber":585,"oldContent":"                    val simulatedMatches = generateSimulatedMatches(currentRoute, currentStep)"},{"type":"DELETE","lineNumber":586,"oldContent":"                    _currentMatches.value = simulatedMatches"},{"type":"DELETE","lineNumber":587,"oldContent":"                    "},{"type":"DELETE","lineNumber":588,"oldContent":"                    if (simulatedMatches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":589,"oldContent":"                        Log.d(TAG, \"Generated ${simulatedMatches.size} simulated matches for step $currentStep\")"},{"type":"DELETE","lineNumber":590,"oldContent":"                        simulatedMatches.forEach { match ->"},{"type":"INSERT","lineNumber":580,"content":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":581,"content":"                    // Echtes Feature-Matching mit OpenCV"},{"type":"INSERT","lineNumber":582,"content":"                    featureMatchingEngine!!.processFrame(frame)"},{"type":"DELETE","lineNumber":592,"oldContent":"                            Log.v(TAG, \"- ${match.landmarkId}: ${match.confidence}\")"},{"type":"DELETE","lineNumber":593,"oldContent":"                        }"},{"type":"DELETE","lineNumber":594,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":584,"content":"                    // Fallback: Simulierte Matches"},{"type":"INSERT","lineNumber":585,"content":"                    val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":586,"content":"                    val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":587,"content":"                    "},{"type":"INSERT","lineNumber":588,"content":"                    if (currentRoute != null) {"},{"type":"INSERT","lineNumber":589,"content":"                        generateSimulatedMatches(currentRoute, currentStep)"},{"type":"INSERT","lineNumber":590,"content":"                    } else {"},{"type":"INSERT","lineNumber":591,"content":"                        emptyList()"},{"type":"DELETE","lineNumber":597,"oldContent":"                    Log.d(TAG, \"Keine Route geladen - keine Matches generiert\")"},{"type":"INSERT","lineNumber":594,"content":"                "},{"type":"INSERT","lineNumber":595,"content":"                _currentMatches.value = matches"},{"type":"INSERT","lineNumber":596,"content":"                "},{"type":"INSERT","lineNumber":597,"content":"                if (matches.isNotEmpty()) {"},{"type":"INSERT","lineNumber":598,"content":"                    Log.d(TAG, \"Found ${matches.size} landmark matches\")"},{"type":"INSERT","lineNumber":599,"content":"                    matches.take(3).forEach { match ->"},{"type":"INSERT","lineNumber":600,"content":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}% confidence\")"},{"type":"INSERT","lineNumber":601,"content":"                    }"},{"type":"INSERT","lineNumber":602,"content":"                } else {"},{"type":"INSERT","lineNumber":603,"content":"                    Log.v(TAG, \"No landmark matches found\")"},{"type":"INSERT","lineNumber":604,"content":"                }"},{"type":"INSERT","lineNumber":605,"content":"                "},{"type":"DELETE","lineNumber":600,"oldContent":"        }"},{"type":"INSERT","lineNumber":609,"content":"            }"},{"type":"INSERT","lineNumber":610,"content":"        }"},{"type":"DELETE","lineNumber":604,"oldContent":"            }"},{"type":"INSERT","lineNumber":615,"content":"     */"},{"type":"DELETE","lineNumber":609,"oldContent":"     */"},{"type":"DELETE","lineNumber":636,"oldContent":"}"},{"type":"DELETE","lineNumber":637,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":638,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":639,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":640,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":641,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":642,"oldContent":"            try {"},{"type":"DELETE","lineNumber":643,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":644,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":645,"oldContent":""},{"type":"INSERT","lineNumber":644,"content":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"INSERT","lineNumber":645,"content":"                            screenPosition = android.graphics.PointF("},{"type":"INSERT","lineNumber":646,"content":"                                (200f + Math.random() * 400f).toFloat(),"},{"type":"INSERT","lineNumber":647,"content":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"INSERT","lineNumber":648,"content":"                            )"},{"type":"INSERT","lineNumber":649,"content":"                        )"},{"type":"INSERT","lineNumber":650,"content":"                    )"},{"type":"INSERT","lineNumber":651,"content":"                }"},{"type":"INSERT","lineNumber":652,"content":"            }"},{"type":"INSERT","lineNumber":653,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":654,"content":"            Log.e(TAG, \"Fehler beim Generieren simulierter Matches: ${e.message}\")"},{"type":"INSERT","lineNumber":655,"content":"        }"},{"type":"INSERT","lineNumber":656,"content":"        "},{"type":"INSERT","lineNumber":657,"content":"        return matches"},{"type":"DELETE","lineNumber":647,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":648,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":650,"oldContent":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":651,"oldContent":"    "},{"type":"DELETE","lineNumber":653,"oldContent":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":661,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"DELETE","lineNumber":655,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":656,"oldContent":"    "},{"type":"INSERT","lineNumber":663,"content":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"INSERT","lineNumber":664,"content":"        return when {"},{"type":"INSERT","lineNumber":665,"content":"            landmarkId.contains(\"PT-1-86\") -> \"Prof. Ludwig Büro\""},{"type":"INSERT","lineNumber":666,"content":"            landmarkId.contains(\"PT-1-566\") -> \"Haupteingang PT\""},{"type":"INSERT","lineNumber":667,"content":"            landmarkId.contains(\"PT-1-697\") -> \"Tür Raum 697\""},{"type":"INSERT","lineNumber":668,"content":"            landmarkId.contains(\"door\") -> \"Tür\""},{"type":"INSERT","lineNumber":669,"content":"            landmarkId.contains(\"entrance\") -> \"Eingang\""},{"type":"INSERT","lineNumber":670,"content":"            landmarkId.contains(\"stairs\") -> \"Treppe\""},{"type":"INSERT","lineNumber":671,"content":"            landmarkId.contains(\"elevator\") -> \"Aufzug\""},{"type":"INSERT","lineNumber":672,"content":"            else -> \"Landmark $landmarkId\""},{"type":"INSERT","lineNumber":673,"content":"        }"},{"type":"DELETE","lineNumber":658,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":659,"oldContent":"    }"},{"type":"DELETE","lineNumber":660,"oldContent":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"DELETE","lineNumber":661,"oldContent":"    }"},{"type":"DELETE","lineNumber":662,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":663,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":664,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":665,"oldContent":"    /**"},{"type":"DELETE","lineNumber":666,"oldContent":"    }"},{"type":"INSERT","lineNumber":676,"content":"    /**"},{"type":"DELETE","lineNumber":670,"oldContent":"    /**"},{"type":"INSERT","lineNumber":688,"content":"    /**"},{"type":"DELETE","lineNumber":682,"oldContent":"     */"},{"type":"INSERT","lineNumber":698,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":692,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":725,"oldContent":"    /**"},{"type":"INSERT","lineNumber":734,"content":"    }"},{"type":"INSERT","lineNumber":735,"content":"    "},{"type":"INSERT","lineNumber":736,"content":"    /**"},{"type":"DELETE","lineNumber":729,"oldContent":"    }"},{"type":"DELETE","lineNumber":732,"oldContent":"    "},{"type":"DELETE","lineNumber":734,"oldContent":"    }"},{"type":"DELETE","lineNumber":736,"oldContent":"    /**"},{"type":"INSERT","lineNumber":743,"content":"    }"},{"type":"INSERT","lineNumber":745,"content":"    /**"},{"type":"INSERT","lineNumber":762,"content":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"DELETE","lineNumber":756,"oldContent":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"INSERT","lineNumber":768,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":762,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":787,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":789,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":792,"oldContent":"        }"},{"type":"DELETE","lineNumber":795,"oldContent":"    }"},{"type":"DELETE","lineNumber":798,"oldContent":"    "},{"type":"DELETE","lineNumber":801,"oldContent":"    /**"},{"type":"DELETE","lineNumber":804,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":808,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":809,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"INSERT","lineNumber":810,"content":"        }"},{"type":"INSERT","lineNumber":811,"content":"    }"},{"type":"INSERT","lineNumber":812,"content":"    "},{"type":"INSERT","lineNumber":813,"content":"    /**"},{"type":"INSERT","lineNumber":814,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":859,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":861,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":862,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":864,"oldContent":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":870,"content":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":868,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":871,"oldContent":"                            )"},{"type":"INSERT","lineNumber":876,"content":"            "},{"type":"INSERT","lineNumber":877,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":878,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":879,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":880,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":881,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":882,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":883,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":884,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":885,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":886,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":887,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":888,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":889,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":890,"content":"                            )"},{"type":"INSERT","lineNumber":892,"content":"                    }"},{"type":"INSERT","lineNumber":893,"content":"                }"},{"type":"INSERT","lineNumber":894,"content":"            }"},{"type":"DELETE","lineNumber":876,"oldContent":"                    }"},{"type":"DELETE","lineNumber":878,"oldContent":"                }"},{"type":"DELETE","lineNumber":881,"oldContent":"            }"},{"type":"DELETE","lineNumber":884,"oldContent":"            "},{"type":"DELETE","lineNumber":886,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":889,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":892,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":894,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":897,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":899,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":902,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":904,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":907,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":975,"oldContent":"    "},{"type":"INSERT","lineNumber":984,"content":"    "},{"type":"DELETE","lineNumber":982,"oldContent":"    }"},{"type":"DELETE","lineNumber":984,"oldContent":"    "},{"type":"DELETE","lineNumber":986,"oldContent":"    }"},{"type":"DELETE","lineNumber":988,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":993,"content":"    }"},{"type":"INSERT","lineNumber":994,"content":"    "},{"type":"DELETE","lineNumber":990,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":993,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":998,"content":"    }"},{"type":"INSERT","lineNumber":1000,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1001,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1002,"content":"        val steps = getCurrentNavigationSteps()"}]},{"timestamp":1754560118581,"changes":[{"type":"DELETE","lineNumber":59,"oldContent":"            pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":60,"oldContent":"                val landmarkIds = routePart.landmarks.map { it.id }"},{"type":"INSERT","lineNumber":59,"content":"    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()"},{"type":"INSERT","lineNumber":60,"content":"    "},{"type":"MODIFY","lineNumber":76,"content":"            }","oldContent":"            totalLength = routeData.route.routeInfo.routeLength,"},{"type":"MODIFY","lineNumber":219,"content":"                featureMatchingEngine = FeatureMatchingEngine(context)","oldContent":"                featureMatchingEngine = FeatureMatchingEngine(context)"},{"type":"INSERT","lineNumber":251,"content":"                // Lade Features für echtes Feature-Matching"},{"type":"INSERT","lineNumber":252,"content":"                if (useRealFeatureMatching && featureMatchingEngine != null && processedLandmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":253,"content":"                    Log.i(TAG, \"Lade Features für echtes Feature-Matching...\")"},{"type":"INSERT","lineNumber":254,"content":"                    featureMatchingEngine!!.loadLandmarkFeatures(processedLandmarks)"},{"type":"INSERT","lineNumber":255,"content":"                }"},{"type":"INSERT","lineNumber":256,"content":"                "},{"type":"DELETE","lineNumber":302,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":304,"oldContent":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":310,"content":"        return try {"},{"type":"INSERT","lineNumber":311,"content":"            if (storageManager == null) {"},{"type":"DELETE","lineNumber":318,"oldContent":"            null"},{"type":"INSERT","lineNumber":325,"content":"            null"},{"type":"DELETE","lineNumber":403,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":405,"oldContent":"    }"},{"type":"INSERT","lineNumber":411,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":412,"content":"    }"},{"type":"INSERT","lineNumber":432,"content":"     */"},{"type":"DELETE","lineNumber":428,"oldContent":"     */"},{"type":"DELETE","lineNumber":432,"oldContent":"     */"},{"type":"INSERT","lineNumber":439,"content":"     */"},{"type":"DELETE","lineNumber":477,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":483,"content":"    "},{"type":"DELETE","lineNumber":479,"oldContent":""},{"type":"DELETE","lineNumber":480,"oldContent":"    }"},{"type":"DELETE","lineNumber":481,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":482,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":485,"content":"     * Konvertiert Bitmap zu Base64 String"},{"type":"INSERT","lineNumber":486,"content":"     */"},{"type":"INSERT","lineNumber":487,"content":"    private fun bitmapToBase64(bitmap: Bitmap): String {"},{"type":"INSERT","lineNumber":488,"content":"        val byteArrayOutputStream = ByteArrayOutputStream()"},{"type":"DELETE","lineNumber":484,"oldContent":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":490,"content":"        val byteArray = byteArrayOutputStream.toByteArray()"},{"type":"INSERT","lineNumber":491,"content":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"DELETE","lineNumber":486,"oldContent":"    }"},{"type":"DELETE","lineNumber":487,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":489,"oldContent":"        "},{"type":"INSERT","lineNumber":494,"content":"    /**"},{"type":"INSERT","lineNumber":495,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":491,"oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":492,"oldContent":"    }"},{"type":"INSERT","lineNumber":497,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":498,"content":"        landmarkId: String,"},{"type":"DELETE","lineNumber":498,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":499,"oldContent":"        }"},{"type":"INSERT","lineNumber":504,"content":"            Log.d(TAG, \"createLandmark called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":505,"content":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":506,"oldContent":"                result is SaveResult.Success"},{"type":"INSERT","lineNumber":513,"content":"                result is SaveResult.Success"},{"type":"DELETE","lineNumber":514,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":516,"oldContent":"    /**"},{"type":"INSERT","lineNumber":522,"content":"    "},{"type":"INSERT","lineNumber":523,"content":"    /**"},{"type":"INSERT","lineNumber":589,"content":"                } else {"},{"type":"DELETE","lineNumber":591,"oldContent":"                } else {"},{"type":"INSERT","lineNumber":598,"content":"                    }"},{"type":"INSERT","lineNumber":599,"content":"                }"},{"type":"DELETE","lineNumber":594,"oldContent":"                    }"},{"type":"DELETE","lineNumber":596,"oldContent":"                }"},{"type":"DELETE","lineNumber":599,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":601,"oldContent":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"DELETE","lineNumber":604,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":606,"oldContent":"    }"},{"type":"DELETE","lineNumber":608,"oldContent":"    "},{"type":"INSERT","lineNumber":612,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":613,"content":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":614,"content":"                _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":615,"content":"            }"},{"type":"INSERT","lineNumber":616,"content":"        }"},{"type":"INSERT","lineNumber":617,"content":"    }"},{"type":"INSERT","lineNumber":618,"content":"    "},{"type":"INSERT","lineNumber":621,"content":"     */"},{"type":"DELETE","lineNumber":615,"oldContent":"            }"},{"type":"DELETE","lineNumber":616,"oldContent":"        }"},{"type":"DELETE","lineNumber":622,"oldContent":"     */"},{"type":"DELETE","lineNumber":627,"oldContent":"}"},{"type":"DELETE","lineNumber":628,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":629,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":630,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":631,"oldContent":"                "},{"type":"DELETE","lineNumber":632,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":633,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":634,"oldContent":"     */"},{"type":"DELETE","lineNumber":635,"oldContent":"    /**"},{"type":"DELETE","lineNumber":636,"oldContent":"    "},{"type":"DELETE","lineNumber":637,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":638,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":639,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":640,"oldContent":"    "},{"type":"DELETE","lineNumber":641,"oldContent":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":642,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":643,"oldContent":"    }"},{"type":"INSERT","lineNumber":633,"content":"                        0 -> 0.85f + (Math.random() * 0.1f).toFloat() // Beste Match"},{"type":"INSERT","lineNumber":634,"content":"                        1 -> 0.75f + (Math.random() * 0.1f).toFloat() // Gute Match"},{"type":"INSERT","lineNumber":635,"content":"                        else -> 0.65f + (Math.random() * 0.1f).toFloat() // Okay Match"},{"type":"INSERT","lineNumber":636,"content":"                    }"},{"type":"INSERT","lineNumber":637,"content":"                    "},{"type":"INSERT","lineNumber":638,"content":"                    val landmark = ProcessedLandmark("},{"type":"INSERT","lineNumber":639,"content":"                        id = landmarkId,"},{"type":"INSERT","lineNumber":640,"content":"                        name = getLandmarkDisplayName(landmarkId)"},{"type":"INSERT","lineNumber":641,"content":"                    )"},{"type":"INSERT","lineNumber":642,"content":"                    "},{"type":"INSERT","lineNumber":643,"content":"                    matches.add("},{"type":"INSERT","lineNumber":644,"content":"                        FeatureMatchResult("},{"type":"INSERT","lineNumber":645,"content":"                            landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":646,"content":"                            confidence = confidence,"},{"type":"INSERT","lineNumber":647,"content":"                            landmark = landmark,"},{"type":"INSERT","lineNumber":648,"content":"                            matchCount = (50 + Math.random() * 100).toInt(),"},{"type":"INSERT","lineNumber":649,"content":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"DELETE","lineNumber":647,"oldContent":"    }"},{"type":"DELETE","lineNumber":651,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":655,"oldContent":"    /**"},{"type":"DELETE","lineNumber":658,"oldContent":"     */"},{"type":"INSERT","lineNumber":664,"content":"    }"},{"type":"INSERT","lineNumber":666,"content":"    /**"},{"type":"INSERT","lineNumber":668,"content":"     */"},{"type":"DELETE","lineNumber":669,"oldContent":"    "},{"type":"DELETE","lineNumber":671,"oldContent":"     * Aktiviert/Deaktiviert das Feature-Mapping"},{"type":"DELETE","lineNumber":673,"oldContent":"     */"},{"type":"DELETE","lineNumber":676,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":678,"oldContent":"        _isFeatureMappingEnabled.value = enabled"},{"type":"INSERT","lineNumber":680,"content":"    }"},{"type":"INSERT","lineNumber":681,"content":"    "},{"type":"INSERT","lineNumber":682,"content":"    /**"},{"type":"INSERT","lineNumber":683,"content":"     * Aktiviert/Deaktiviert das Feature-Mapping"},{"type":"INSERT","lineNumber":684,"content":"     */"},{"type":"INSERT","lineNumber":685,"content":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"INSERT","lineNumber":686,"content":"        _isFeatureMappingEnabled.value = enabled"},{"type":"DELETE","lineNumber":683,"oldContent":"    /**"},{"type":"INSERT","lineNumber":694,"content":"    /**"},{"type":"DELETE","lineNumber":695,"oldContent":"    /**"},{"type":"INSERT","lineNumber":704,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":705,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":740,"content":"    }"},{"type":"INSERT","lineNumber":741,"content":"    "},{"type":"INSERT","lineNumber":742,"content":"    /**"},{"type":"INSERT","lineNumber":748,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":741,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":743,"oldContent":"    "},{"type":"DELETE","lineNumber":749,"oldContent":"    }"},{"type":"DELETE","lineNumber":752,"oldContent":"    /**"},{"type":"INSERT","lineNumber":768,"content":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"INSERT","lineNumber":774,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":769,"oldContent":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"DELETE","lineNumber":775,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":808,"oldContent":"     */"},{"type":"DELETE","lineNumber":810,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":812,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":814,"oldContent":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"DELETE","lineNumber":816,"oldContent":"            "},{"type":"DELETE","lineNumber":818,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":820,"oldContent":"            initialize(context)"},{"type":"INSERT","lineNumber":821,"content":"     */"},{"type":"INSERT","lineNumber":822,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":823,"content":"        return try {"},{"type":"INSERT","lineNumber":824,"content":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"INSERT","lineNumber":825,"content":"            "},{"type":"INSERT","lineNumber":826,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":827,"content":"            initialize(context)"},{"type":"INSERT","lineNumber":876,"content":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":873,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":876,"oldContent":"                        )"},{"type":"DELETE","lineNumber":878,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":879,"oldContent":"            "},{"type":"DELETE","lineNumber":881,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":884,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":886,"oldContent":"            }"},{"type":"DELETE","lineNumber":889,"oldContent":"            "},{"type":"DELETE","lineNumber":891,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":894,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":897,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":899,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":902,"oldContent":"        }"},{"type":"DELETE","lineNumber":903,"oldContent":"    }"},{"type":"INSERT","lineNumber":897,"content":"                        )"},{"type":"DELETE","lineNumber":906,"oldContent":"    "},{"type":"INSERT","lineNumber":901,"content":"            "},{"type":"INSERT","lineNumber":902,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":903,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":904,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":905,"content":"            }"},{"type":"INSERT","lineNumber":906,"content":"            "},{"type":"INSERT","lineNumber":907,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":908,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":909,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":910,"content":"            emptyList()"},{"type":"INSERT","lineNumber":911,"content":"        }"},{"type":"INSERT","lineNumber":912,"content":"    }"},{"type":"INSERT","lineNumber":913,"content":"    "},{"type":"INSERT","lineNumber":990,"content":"    "},{"type":"DELETE","lineNumber":990,"oldContent":"    "},{"type":"INSERT","lineNumber":999,"content":"    }"},{"type":"INSERT","lineNumber":1000,"content":"    "},{"type":"DELETE","lineNumber":998,"oldContent":"    "},{"type":"INSERT","lineNumber":1006,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1007,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1008,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1002,"oldContent":"    }"},{"type":"DELETE","lineNumber":1005,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1007,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":1008,"oldContent":"        val steps = getCurrentNavigationSteps()"}]},{"timestamp":1754562011601,"changes":[{"type":"MODIFY","lineNumber":32,"content":"    private var routeRepository: RouteRepository? = null","oldContent":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"MODIFY","lineNumber":58,"content":"    private val _isFeatureMappingEnabled = MutableStateFlow(false)","oldContent":"        routeData.route.path.forEach { pathItem ->"},{"type":"MODIFY","lineNumber":102,"content":"                    val routeData = routeRepository?.getRouteFromAssets(\"models/final-route.json\")","oldContent":"                    val routeData = routeRepository?.getRouteFromAssets(\"route.json\")"},{"type":"INSERT","lineNumber":218,"content":"                // Feature-Matching System initialisieren"},{"type":"DELETE","lineNumber":219,"oldContent":"                featureMatchingEngine = FeatureMatchingEngine(context)"},{"type":"DELETE","lineNumber":252,"oldContent":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":254,"oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"DELETE","lineNumber":256,"oldContent":"                "},{"type":"DELETE","lineNumber":258,"oldContent":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":257,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":258,"content":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"INSERT","lineNumber":260,"content":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":261,"content":"                "},{"type":"INSERT","lineNumber":310,"content":"        return try {"},{"type":"INSERT","lineNumber":311,"content":"            if (storageManager == null) {"},{"type":"DELETE","lineNumber":314,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":316,"oldContent":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":325,"content":"            null"},{"type":"DELETE","lineNumber":330,"oldContent":"            null"},{"type":"MODIFY","lineNumber":376,"content":"                    is SaveResult.Success -> {","oldContent":"}"},{"type":"MODIFY","lineNumber":389,"content":"            ","oldContent":"    "},{"type":"INSERT","lineNumber":390,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":391,"content":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":392,"content":"            false"},{"type":"INSERT","lineNumber":393,"content":"        }"},{"type":"DELETE","lineNumber":391,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":392,"oldContent":"        "},{"type":"DELETE","lineNumber":393,"oldContent":"    /**"},{"type":"DELETE","lineNumber":394,"oldContent":"    }"},{"type":"DELETE","lineNumber":395,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":396,"oldContent":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":398,"content":""},{"type":"INSERT","lineNumber":399,"content":"    "},{"type":"INSERT","lineNumber":411,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":412,"content":"    }"},{"type":"DELETE","lineNumber":415,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":417,"oldContent":"    }"},{"type":"INSERT","lineNumber":432,"content":"     */"},{"type":"DELETE","lineNumber":437,"oldContent":"     */"},{"type":"INSERT","lineNumber":439,"content":"     */"},{"type":"DELETE","lineNumber":444,"oldContent":"     */"},{"type":"DELETE","lineNumber":483,"oldContent":"            }"},{"type":"DELETE","lineNumber":485,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":484,"content":"    /**"},{"type":"DELETE","lineNumber":487,"oldContent":"                                name = landmark,"},{"type":"DELETE","lineNumber":491,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":489,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":493,"oldContent":"     */"},{"type":"DELETE","lineNumber":495,"oldContent":"        name: String,"},{"type":"INSERT","lineNumber":492,"content":"    }"},{"type":"INSERT","lineNumber":493,"content":"    "},{"type":"DELETE","lineNumber":497,"oldContent":"        description: String,"},{"type":"INSERT","lineNumber":496,"content":"     */"},{"type":"INSERT","lineNumber":497,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":498,"content":"        landmarkId: String,"},{"type":"INSERT","lineNumber":499,"content":"        name: String,"},{"type":"INSERT","lineNumber":500,"content":"        description: String,"},{"type":"DELETE","lineNumber":501,"oldContent":"    suspend fun createLandmark("},{"type":"DELETE","lineNumber":503,"oldContent":"        landmarkId: String,"},{"type":"INSERT","lineNumber":504,"content":"            Log.d(TAG, \"createLandmark called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":505,"content":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":508,"oldContent":"            Log.d(TAG, \"createLandmark called (stub): $landmarkId\")"},{"type":"DELETE","lineNumber":510,"oldContent":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":513,"content":"                result is SaveResult.Success"},{"type":"DELETE","lineNumber":518,"oldContent":"                result is SaveResult.Success"},{"type":"INSERT","lineNumber":522,"content":"    "},{"type":"INSERT","lineNumber":523,"content":"    /**"},{"type":"DELETE","lineNumber":526,"oldContent":"    "},{"type":"DELETE","lineNumber":528,"oldContent":"    /**"},{"type":"INSERT","lineNumber":589,"content":"                } else {"},{"type":"DELETE","lineNumber":595,"oldContent":"                } else {"},{"type":"INSERT","lineNumber":598,"content":"                    }"},{"type":"INSERT","lineNumber":599,"content":"                }"},{"type":"DELETE","lineNumber":602,"oldContent":"                    }"},{"type":"DELETE","lineNumber":604,"oldContent":"                }"},{"type":"DELETE","lineNumber":612,"oldContent":"    /**"},{"type":"DELETE","lineNumber":614,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":616,"oldContent":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":618,"oldContent":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"DELETE","lineNumber":622,"oldContent":"        "},{"type":"INSERT","lineNumber":619,"content":"    /**"},{"type":"INSERT","lineNumber":620,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":621,"content":"     */"},{"type":"INSERT","lineNumber":622,"content":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":623,"content":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":624,"content":"        "},{"type":"DELETE","lineNumber":627,"oldContent":"     */"},{"type":"DELETE","lineNumber":628,"oldContent":""},{"type":"DELETE","lineNumber":629,"oldContent":"    "},{"type":"DELETE","lineNumber":630,"oldContent":"    }"},{"type":"DELETE","lineNumber":631,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":632,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":628,"content":"                val step = steps[currentStep - 1]"},{"type":"INSERT","lineNumber":629,"content":"                "},{"type":"INSERT","lineNumber":630,"content":"                // Simuliere Matches für Landmarken im aktuellen Schritt"},{"type":"INSERT","lineNumber":631,"content":"                step.landmarks.take(3).forEachIndexed { index, landmarkId ->"},{"type":"INSERT","lineNumber":632,"content":"                    val confidence = when (index) {"},{"type":"DELETE","lineNumber":645,"oldContent":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"DELETE","lineNumber":647,"oldContent":"                            screenPosition = android.graphics.PointF("},{"type":"DELETE","lineNumber":649,"oldContent":"                                (200f + Math.random() * 400f).toFloat(),"},{"type":"DELETE","lineNumber":652,"oldContent":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"INSERT","lineNumber":650,"content":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"INSERT","lineNumber":651,"content":"                            screenPosition = android.graphics.PointF("},{"type":"INSERT","lineNumber":652,"content":"                                (200f + Math.random() * 400f).toFloat(),"},{"type":"INSERT","lineNumber":653,"content":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"DELETE","lineNumber":664,"oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":665,"content":"    ","oldContent":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"INSERT","lineNumber":666,"content":"    /**"},{"type":"INSERT","lineNumber":667,"content":"     * Gibt einen benutzerfreundlichen Namen für eine Landmark-ID zurück"},{"type":"INSERT","lineNumber":668,"content":"     */"},{"type":"DELETE","lineNumber":669,"oldContent":"    /**"},{"type":"DELETE","lineNumber":672,"oldContent":"     */"},{"type":"DELETE","lineNumber":681,"oldContent":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"DELETE","lineNumber":683,"oldContent":"        "},{"type":"DELETE","lineNumber":685,"oldContent":"        if (!enabled) {"},{"type":"DELETE","lineNumber":688,"oldContent":"            _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":690,"oldContent":"        }"},{"type":"INSERT","lineNumber":687,"content":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"INSERT","lineNumber":688,"content":"        "},{"type":"INSERT","lineNumber":689,"content":"        if (!enabled) {"},{"type":"INSERT","lineNumber":690,"content":"            _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":691,"content":"        }"},{"type":"INSERT","lineNumber":694,"content":"    /**"},{"type":"DELETE","lineNumber":700,"oldContent":"    /**"},{"type":"INSERT","lineNumber":704,"content":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"DELETE","lineNumber":710,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":740,"content":"    }"},{"type":"INSERT","lineNumber":741,"content":"    "},{"type":"INSERT","lineNumber":742,"content":"    /**"},{"type":"INSERT","lineNumber":748,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":746,"oldContent":"    }"},{"type":"DELETE","lineNumber":748,"oldContent":"    "},{"type":"DELETE","lineNumber":750,"oldContent":"    /**"},{"type":"DELETE","lineNumber":755,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":768,"content":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"INSERT","lineNumber":774,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":774,"oldContent":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"DELETE","lineNumber":780,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"MODIFY","lineNumber":821,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":823,"oldContent":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"DELETE","lineNumber":825,"oldContent":"            "},{"type":"DELETE","lineNumber":827,"oldContent":"            // Test 2: Route laden"},{"type":"DELETE","lineNumber":829,"oldContent":"            loadNavigationRoute(context)"},{"type":"DELETE","lineNumber":831,"oldContent":"            Thread.sleep(1000) // Warte auf Coroutine"},{"type":"INSERT","lineNumber":828,"content":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"INSERT","lineNumber":829,"content":"            "},{"type":"INSERT","lineNumber":830,"content":"            // Test 2: Route laden"},{"type":"INSERT","lineNumber":831,"content":"            loadNavigationRoute(context)"},{"type":"INSERT","lineNumber":832,"content":"            Thread.sleep(1000) // Warte auf Coroutine"},{"type":"INSERT","lineNumber":876,"content":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":881,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":894,"oldContent":"                        )"},{"type":"MODIFY","lineNumber":897,"content":"                        )","oldContent":"            "},{"type":"INSERT","lineNumber":898,"content":"                    }"},{"type":"INSERT","lineNumber":899,"content":"                }"},{"type":"INSERT","lineNumber":900,"content":"            }"},{"type":"INSERT","lineNumber":901,"content":"            "},{"type":"DELETE","lineNumber":902,"oldContent":"                    }"},{"type":"DELETE","lineNumber":904,"oldContent":"                }"},{"type":"DELETE","lineNumber":907,"oldContent":"            }"},{"type":"DELETE","lineNumber":909,"oldContent":"    /**"},{"type":"DELETE","lineNumber":911,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":913,"oldContent":"     */"},{"type":"DELETE","lineNumber":915,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":917,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":914,"content":"    /**"},{"type":"INSERT","lineNumber":915,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":916,"content":"     */"},{"type":"INSERT","lineNumber":917,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":918,"content":"        return try {"},{"type":"INSERT","lineNumber":990,"content":"    "},{"type":"DELETE","lineNumber":996,"oldContent":"    "},{"type":"INSERT","lineNumber":999,"content":"    }"},{"type":"INSERT","lineNumber":1000,"content":"    "},{"type":"DELETE","lineNumber":1004,"oldContent":"    }"},{"type":"INSERT","lineNumber":1006,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1007,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1008,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1006,"oldContent":"    "},{"type":"DELETE","lineNumber":1011,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1013,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":1014,"oldContent":"        val steps = getCurrentNavigationSteps()"}]},{"timestamp":1754562031725,"changes":[{"type":"INSERT","lineNumber":4,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":6,"oldContent":"import android.util.Log"},{"type":"MODIFY","lineNumber":166,"content":"     * Konvertiert RouteData zu NavigationRoute und extrahiert Landmark-IDs","oldContent":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"INSERT","lineNumber":172,"content":"        // Sammle alle Landmark-IDs für Feature-Matching"},{"type":"INSERT","lineNumber":173,"content":"        val allLandmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":174,"content":"        "},{"type":"DELETE","lineNumber":176,"oldContent":"                val instruction = routePart.instructionDe ?: routePart.instruction ?: \"Folgen Sie der Route\""},{"type":"INSERT","lineNumber":179,"content":"                val instruction = routePart.instructionDe ?: routePart.instructionEn ?: routePart.instruction ?: \"Folgen Sie der Route\""},{"type":"INSERT","lineNumber":184,"content":"                // Extrahiere Landmark-IDs aus der neuen Struktur"},{"type":"INSERT","lineNumber":185,"content":"                val landmarkIds = mutableListOf<String>()"},{"type":"INSERT","lineNumber":186,"content":"                "},{"type":"INSERT","lineNumber":187,"content":"                // Hauptlandmark aus landmarkFromInstruction"},{"type":"INSERT","lineNumber":188,"content":"                routePart.landmarkFromInstruction?.let { landmarkId ->"},{"type":"INSERT","lineNumber":189,"content":"                    landmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":190,"content":"                    allLandmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":191,"content":"                }"},{"type":"INSERT","lineNumber":192,"content":"                "},{"type":"INSERT","lineNumber":193,"content":"                // Zusätzliche Landmarks aus landmarks-Array"},{"type":"INSERT","lineNumber":194,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":195,"content":"                    landmark.id?.let { landmarkId ->"},{"type":"INSERT","lineNumber":196,"content":"                        landmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":197,"content":"                        allLandmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":198,"content":"                    }"},{"type":"INSERT","lineNumber":199,"content":"                }"},{"type":"INSERT","lineNumber":200,"content":"                "},{"type":"INSERT","lineNumber":201,"content":"                // Berechne Distanz aus Nodes falls verfügbar"},{"type":"INSERT","lineNumber":202,"content":"                val distance = routePart.nodes?.sumOf { node ->"},{"type":"INSERT","lineNumber":203,"content":"                    node.edge?.lengthInMeters?.toDoubleOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":204,"content":"                } ?: 0.0"},{"type":"INSERT","lineNumber":205,"content":"                "},{"type":"DELETE","lineNumber":187,"oldContent":"                        landmarks = routePart.landmarks ?: emptyList(),"},{"type":"DELETE","lineNumber":188,"oldContent":"                        distance = routePart.distance ?: 0.0,"},{"type":"DELETE","lineNumber":189,"oldContent":"                        estimatedTime = routePart.duration ?: 60"},{"type":"INSERT","lineNumber":212,"content":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"INSERT","lineNumber":213,"content":"                        distance = distance,"},{"type":"INSERT","lineNumber":214,"content":"                        estimatedTime = (distance * 1.2).toInt().coerceAtLeast(10) // ~1.2m/s Gehgeschwindigkeit"},{"type":"INSERT","lineNumber":220,"content":"        // Erstelle ProcessedLandmarks für alle gefundenen IDs"},{"type":"INSERT","lineNumber":221,"content":"        processedLandmarks.clear()"},{"type":"INSERT","lineNumber":222,"content":"        allLandmarkIds.forEach { landmarkId ->"},{"type":"INSERT","lineNumber":223,"content":"            processedLandmarks.add(ProcessedLandmark(landmarkId, landmarkId))"},{"type":"INSERT","lineNumber":224,"content":"        }"},{"type":"INSERT","lineNumber":225,"content":"        "},{"type":"INSERT","lineNumber":226,"content":"        Log.i(TAG, \"Extrahiert ${allLandmarkIds.size} eindeutige Landmark-IDs: ${allLandmarkIds.take(5)}\")"},{"type":"INSERT","lineNumber":227,"content":"        "},{"type":"DELETE","lineNumber":198,"oldContent":"            description = \"Generated from route data\","},{"type":"INSERT","lineNumber":231,"content":"            description = \"Generated from final-route.json\","},{"type":"DELETE","lineNumber":254,"oldContent":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":256,"oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"DELETE","lineNumber":258,"oldContent":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":290,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":291,"content":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"INSERT","lineNumber":293,"content":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":311,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":345,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"DELETE","lineNumber":366,"oldContent":"     */"},{"type":"DELETE","lineNumber":367,"oldContent":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"DELETE","lineNumber":368,"oldContent":"    /**"},{"type":"DELETE","lineNumber":369,"oldContent":"    "},{"type":"DELETE","lineNumber":370,"oldContent":"            }"},{"type":"DELETE","lineNumber":371,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":372,"oldContent":"    /**"},{"type":"DELETE","lineNumber":373,"oldContent":"    }"},{"type":"DELETE","lineNumber":374,"oldContent":"                }"},{"type":"DELETE","lineNumber":375,"oldContent":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":399,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":400,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":401,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":402,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":403,"content":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":404,"content":"                    description = description,"},{"type":"INSERT","lineNumber":405,"content":"                    category = \"Training\""},{"type":"INSERT","lineNumber":406,"content":"                )"},{"type":"INSERT","lineNumber":407,"content":"                "},{"type":"INSERT","lineNumber":408,"content":"                when (saveResult) {"},{"type":"DELETE","lineNumber":391,"oldContent":"    /**"},{"type":"INSERT","lineNumber":427,"content":"    }"},{"type":"INSERT","lineNumber":430,"content":"    "},{"type":"DELETE","lineNumber":399,"oldContent":"    "},{"type":"DELETE","lineNumber":412,"oldContent":"    "},{"type":"INSERT","lineNumber":446,"content":"    "},{"type":"DELETE","lineNumber":445,"oldContent":"    }"},{"type":"INSERT","lineNumber":478,"content":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":447,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":448,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":449,"oldContent":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":480,"content":"    }"},{"type":"INSERT","lineNumber":481,"content":"    "},{"type":"INSERT","lineNumber":482,"content":"    /**"},{"type":"DELETE","lineNumber":483,"oldContent":"    /**"},{"type":"INSERT","lineNumber":517,"content":"    /**"},{"type":"DELETE","lineNumber":487,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":490,"oldContent":"    }"},{"type":"INSERT","lineNumber":522,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":492,"oldContent":"    "},{"type":"DELETE","lineNumber":494,"oldContent":"     */"},{"type":"INSERT","lineNumber":525,"content":"    }"},{"type":"INSERT","lineNumber":526,"content":"    "},{"type":"INSERT","lineNumber":528,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":529,"content":"     */"},{"type":"DELETE","lineNumber":498,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":500,"oldContent":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":534,"content":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":505,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":539,"content":"                val result = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":523,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":557,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":585,"oldContent":"}"},{"type":"INSERT","lineNumber":618,"content":"                "},{"type":"DELETE","lineNumber":599,"oldContent":"                "},{"type":"INSERT","lineNumber":633,"content":"                "},{"type":"DELETE","lineNumber":615,"oldContent":"    /**"},{"type":"DELETE","lineNumber":617,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":619,"oldContent":"     */"},{"type":"INSERT","lineNumber":651,"content":"    "},{"type":"INSERT","lineNumber":652,"content":"    /**"},{"type":"INSERT","lineNumber":653,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":654,"content":"     */"},{"type":"DELETE","lineNumber":623,"oldContent":"    "},{"type":"DELETE","lineNumber":647,"oldContent":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"DELETE","lineNumber":649,"oldContent":"                            screenPosition = android.graphics.PointF("},{"type":"INSERT","lineNumber":682,"content":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"INSERT","lineNumber":683,"content":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"INSERT","lineNumber":684,"content":"                            screenPosition = android.graphics.PointF("},{"type":"DELETE","lineNumber":653,"oldContent":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"INSERT","lineNumber":697,"content":"    }"},{"type":"DELETE","lineNumber":666,"oldContent":"    }"},{"type":"DELETE","lineNumber":668,"oldContent":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"INSERT","lineNumber":702,"content":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"DELETE","lineNumber":684,"oldContent":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"INSERT","lineNumber":718,"content":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"INSERT","lineNumber":719,"content":"        _isFeatureMappingEnabled.value = enabled"},{"type":"INSERT","lineNumber":720,"content":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"DELETE","lineNumber":688,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":691,"oldContent":"        _isFeatureMappingEnabled.value = enabled"},{"type":"DELETE","lineNumber":741,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":743,"oldContent":"     */"},{"type":"INSERT","lineNumber":776,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":777,"content":"     */"},{"type":"INSERT","lineNumber":781,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":750,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":774,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":808,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":853,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":821,"oldContent":"     */"},{"type":"INSERT","lineNumber":858,"content":"            "},{"type":"INSERT","lineNumber":859,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":860,"content":"            initialize(context)"},{"type":"DELETE","lineNumber":827,"oldContent":"            "},{"type":"DELETE","lineNumber":829,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":832,"oldContent":"            initialize(context)"},{"type":"INSERT","lineNumber":929,"content":"                            )"},{"type":"DELETE","lineNumber":898,"oldContent":"                            )"},{"type":"DELETE","lineNumber":900,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":902,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":935,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":936,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":911,"oldContent":"    /**"},{"type":"INSERT","lineNumber":945,"content":"    }"},{"type":"INSERT","lineNumber":946,"content":"    "},{"type":"INSERT","lineNumber":947,"content":"    /**"},{"type":"DELETE","lineNumber":915,"oldContent":"    }"},{"type":"DELETE","lineNumber":918,"oldContent":"    "},{"type":"DELETE","lineNumber":1000,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1034,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1006,"oldContent":"}"},{"type":"DELETE","lineNumber":1009,"oldContent":"                "},{"type":"DELETE","lineNumber":1011,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":1042,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1043,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1044,"content":"    }"}]},{"timestamp":1754562790098,"changes":[{"type":"MODIFY","lineNumber":26,"content":"    private val TAG = \"RouteViewModel\"","oldContent":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()"},{"type":"DELETE","lineNumber":173,"oldContent":"        // Durchlaufe alle PathItems und RouteParts"},{"type":"MODIFY","lineNumber":175,"content":"        // Durchlaufe alle PathItems und RouteParts","oldContent":"        routeData.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":176,"content":"        routeData.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":179,"content":"                val instruction = routePart.instructionDe ?: routePart.instructionEn ?: routePart.instruction ?: \"Folgen Sie der Route\""},{"type":"DELETE","lineNumber":181,"oldContent":"                val instruction = routePart.instructionDe ?: routePart.instructionEn ?: routePart.instruction ?: \"Folgen Sie der Route\""},{"type":"DELETE","lineNumber":184,"oldContent":"                steps.add("},{"type":"DELETE","lineNumber":185,"oldContent":"                    NavigationStep("},{"type":"DELETE","lineNumber":186,"oldContent":"                        stepNumber = stepNumber++,"},{"type":"DELETE","lineNumber":188,"oldContent":"                        instruction = instruction,"},{"type":"DELETE","lineNumber":190,"oldContent":"                        building = pathItem.xmlName,"},{"type":"DELETE","lineNumber":192,"oldContent":"                        floor = floor,"},{"type":"DELETE","lineNumber":197,"oldContent":"                    )"},{"type":"DELETE","lineNumber":199,"oldContent":"                )"},{"type":"DELETE","lineNumber":201,"oldContent":"            }"},{"type":"DELETE","lineNumber":203,"oldContent":"        }"},{"type":"DELETE","lineNumber":205,"oldContent":"        "},{"type":"DELETE","lineNumber":207,"oldContent":"        return NavigationRoute("},{"type":"DELETE","lineNumber":209,"oldContent":"            id = \"route_${System.currentTimeMillis()}\","},{"type":"DELETE","lineNumber":211,"oldContent":"            name = \"Navigation Route\","},{"type":"DELETE","lineNumber":214,"oldContent":"            totalLength = steps.sumOf { it.distance },"},{"type":"DELETE","lineNumber":216,"oldContent":"            steps = steps,"},{"type":"DELETE","lineNumber":218,"oldContent":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"DELETE","lineNumber":220,"oldContent":"        )"},{"type":"DELETE","lineNumber":222,"oldContent":"    }"},{"type":"DELETE","lineNumber":224,"oldContent":"    "},{"type":"INSERT","lineNumber":206,"content":"                steps.add("},{"type":"INSERT","lineNumber":207,"content":"                    NavigationStep("},{"type":"INSERT","lineNumber":208,"content":"                        stepNumber = stepNumber++,"},{"type":"INSERT","lineNumber":209,"content":"                        instruction = instruction,"},{"type":"INSERT","lineNumber":210,"content":"                        building = pathItem.xmlName,"},{"type":"INSERT","lineNumber":211,"content":"                        floor = floor,"},{"type":"INSERT","lineNumber":212,"content":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"INSERT","lineNumber":213,"content":"                        distance = distance,"},{"type":"INSERT","lineNumber":214,"content":"                        estimatedTime = (distance * 1.2).toInt().coerceAtLeast(10) // ~1.2m/s Gehgeschwindigkeit"},{"type":"INSERT","lineNumber":215,"content":"                    )"},{"type":"INSERT","lineNumber":216,"content":"                )"},{"type":"INSERT","lineNumber":217,"content":"            }"},{"type":"INSERT","lineNumber":218,"content":"        }"},{"type":"INSERT","lineNumber":219,"content":"        "},{"type":"INSERT","lineNumber":220,"content":"        // Erstelle ProcessedLandmarks für alle gefundenen IDs"},{"type":"INSERT","lineNumber":221,"content":"        processedLandmarks.clear()"},{"type":"INSERT","lineNumber":222,"content":"        allLandmarkIds.forEach { landmarkId ->"},{"type":"INSERT","lineNumber":223,"content":"            processedLandmarks.add(ProcessedLandmark(landmarkId, landmarkId))"},{"type":"INSERT","lineNumber":224,"content":"        }"},{"type":"INSERT","lineNumber":225,"content":"        "},{"type":"INSERT","lineNumber":226,"content":"        Log.i(TAG, \"Extrahiert ${allLandmarkIds.size} eindeutige Landmark-IDs: ${allLandmarkIds.take(5)}\")"},{"type":"INSERT","lineNumber":227,"content":"        "},{"type":"INSERT","lineNumber":228,"content":"        return NavigationRoute("},{"type":"INSERT","lineNumber":229,"content":"            id = \"route_${System.currentTimeMillis()}\","},{"type":"INSERT","lineNumber":230,"content":"            name = \"Navigation Route\","},{"type":"INSERT","lineNumber":231,"content":"            description = \"Generated from final-route.json\","},{"type":"INSERT","lineNumber":232,"content":"            totalLength = steps.sumOf { it.distance },"},{"type":"INSERT","lineNumber":233,"content":"            steps = steps,"},{"type":"INSERT","lineNumber":234,"content":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"INSERT","lineNumber":235,"content":"        )"},{"type":"INSERT","lineNumber":236,"content":"    }"},{"type":"INSERT","lineNumber":237,"content":"    "},{"type":"DELETE","lineNumber":233,"oldContent":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"DELETE","lineNumber":235,"oldContent":"                        distance = distance,"},{"type":"DELETE","lineNumber":237,"oldContent":"                        estimatedTime = (distance * 1.2).toInt().coerceAtLeast(10) // ~1.2m/s Gehgeschwindigkeit"},{"type":"DELETE","lineNumber":244,"oldContent":"        // Erstelle ProcessedLandmarks für alle gefundenen IDs"},{"type":"DELETE","lineNumber":246,"oldContent":"        processedLandmarks.clear()"},{"type":"DELETE","lineNumber":248,"oldContent":"        allLandmarkIds.forEach { landmarkId ->"},{"type":"DELETE","lineNumber":250,"oldContent":"            processedLandmarks.add(ProcessedLandmark(landmarkId, landmarkId))"},{"type":"DELETE","lineNumber":252,"oldContent":"        }"},{"type":"DELETE","lineNumber":254,"oldContent":"        "},{"type":"DELETE","lineNumber":256,"oldContent":"        Log.i(TAG, \"Extrahiert ${allLandmarkIds.size} eindeutige Landmark-IDs: ${allLandmarkIds.take(5)}\")"},{"type":"DELETE","lineNumber":258,"oldContent":"        "},{"type":"DELETE","lineNumber":263,"oldContent":"            description = \"Generated from final-route.json\","},{"type":"INSERT","lineNumber":290,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":291,"content":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"INSERT","lineNumber":293,"content":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":320,"oldContent":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":322,"oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"DELETE","lineNumber":325,"oldContent":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":345,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"DELETE","lineNumber":377,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":399,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":400,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":401,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":402,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":403,"content":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":404,"content":"                    description = description,"},{"type":"INSERT","lineNumber":405,"content":"                    category = \"Training\""},{"type":"INSERT","lineNumber":406,"content":"                )"},{"type":"INSERT","lineNumber":407,"content":"                "},{"type":"INSERT","lineNumber":408,"content":"                when (saveResult) {"},{"type":"DELETE","lineNumber":408,"oldContent":"}"},{"type":"INSERT","lineNumber":418,"content":"            } else {"},{"type":"INSERT","lineNumber":427,"content":"    }"},{"type":"INSERT","lineNumber":428,"content":"    "},{"type":"INSERT","lineNumber":430,"content":"    "},{"type":"DELETE","lineNumber":419,"oldContent":""},{"type":"DELETE","lineNumber":421,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":422,"oldContent":"                val saveResult = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":424,"oldContent":"                    bitmap = bitmap,"},{"type":"DELETE","lineNumber":426,"oldContent":"                    landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":428,"oldContent":"                    landmarkName = landmarkName,"},{"type":"DELETE","lineNumber":430,"oldContent":"                    description = description,"},{"type":"DELETE","lineNumber":432,"oldContent":"                    category = \"Training\""},{"type":"DELETE","lineNumber":434,"oldContent":"                )"},{"type":"DELETE","lineNumber":436,"oldContent":"                "},{"type":"DELETE","lineNumber":438,"oldContent":"                when (saveResult) {"},{"type":"INSERT","lineNumber":446,"content":"    "},{"type":"DELETE","lineNumber":456,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"INSERT","lineNumber":459,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":460,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":458,"oldContent":"    /**"},{"type":"DELETE","lineNumber":459,"oldContent":""},{"type":"DELETE","lineNumber":460,"oldContent":"    }"},{"type":"DELETE","lineNumber":477,"oldContent":"    "},{"type":"INSERT","lineNumber":478,"content":"            \"Storage-System nicht verfügbar\""},{"type":"INSERT","lineNumber":480,"content":"    }"},{"type":"INSERT","lineNumber":481,"content":"    "},{"type":"INSERT","lineNumber":482,"content":"    /**"},{"type":"DELETE","lineNumber":507,"oldContent":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":510,"oldContent":"    }"},{"type":"DELETE","lineNumber":513,"oldContent":"    "},{"type":"DELETE","lineNumber":514,"oldContent":"    /**"},{"type":"INSERT","lineNumber":517,"content":"    /**"},{"type":"INSERT","lineNumber":522,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":525,"content":"    }"},{"type":"INSERT","lineNumber":526,"content":"    "},{"type":"INSERT","lineNumber":528,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":529,"content":"     */"},{"type":"INSERT","lineNumber":534,"content":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":539,"content":"                val result = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":542,"oldContent":"    /**"},{"type":"DELETE","lineNumber":548,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":551,"oldContent":"    }"},{"type":"INSERT","lineNumber":557,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":553,"oldContent":"    "},{"type":"DELETE","lineNumber":556,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":558,"oldContent":"     */"},{"type":"DELETE","lineNumber":564,"oldContent":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":570,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":585,"oldContent":"    /**"},{"type":"INSERT","lineNumber":586,"content":"                        instruction = \"Folgen Sie dem Korridor bis zum Ziel\","},{"type":"DELETE","lineNumber":588,"oldContent":"    }"},{"type":"MODIFY","lineNumber":589,"content":"                )","oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"MODIFY","lineNumber":601,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")","oldContent":"    }"},{"type":"INSERT","lineNumber":606,"content":"    // Frame-Processing-Throttling"},{"type":"INSERT","lineNumber":607,"content":"    private var lastFrameProcessTime = 0L"},{"type":"INSERT","lineNumber":608,"content":"    private val frameProcessingInterval = 100L // Verarbeite nur alle 100ms (10 FPS)"},{"type":"INSERT","lineNumber":609,"content":"    "},{"type":"DELETE","lineNumber":607,"oldContent":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching"},{"type":"INSERT","lineNumber":611,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"DELETE","lineNumber":609,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":613,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":619,"content":"        // Throttle Frame-Processing für bessere Performance"},{"type":"INSERT","lineNumber":620,"content":"        val currentTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":621,"content":"        if (currentTime - lastFrameProcessTime < frameProcessingInterval) {"},{"type":"INSERT","lineNumber":622,"content":"            return"},{"type":"INSERT","lineNumber":623,"content":"        }"},{"type":"INSERT","lineNumber":624,"content":"        lastFrameProcessTime = currentTime"},{"type":"INSERT","lineNumber":625,"content":"        "},{"type":"DELETE","lineNumber":617,"oldContent":"                Log.v(TAG, \"processFrameForFeatureMatching called\")"},{"type":"INSERT","lineNumber":642,"content":"                "},{"type":"DELETE","lineNumber":636,"oldContent":"                    matches.take(3).forEach { match ->"},{"type":"DELETE","lineNumber":637,"oldContent":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}% confidence\")"},{"type":"INSERT","lineNumber":647,"content":"                    matches.take(2).forEach { match ->"},{"type":"INSERT","lineNumber":648,"content":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"DELETE","lineNumber":639,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":640,"oldContent":"                    Log.v(TAG, \"No landmark matches found\")"},{"type":"DELETE","lineNumber":647,"oldContent":"                "},{"type":"INSERT","lineNumber":658,"content":"    "},{"type":"INSERT","lineNumber":659,"content":"    /**"},{"type":"INSERT","lineNumber":660,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":661,"content":"     */"},{"type":"DELETE","lineNumber":661,"oldContent":"                "},{"type":"DELETE","lineNumber":678,"oldContent":"    "},{"type":"INSERT","lineNumber":689,"content":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"INSERT","lineNumber":690,"content":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"INSERT","lineNumber":691,"content":"                            screenPosition = android.graphics.PointF("},{"type":"DELETE","lineNumber":680,"oldContent":"    /**"},{"type":"DELETE","lineNumber":682,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":683,"oldContent":"     */"},{"type":"INSERT","lineNumber":704,"content":"    }"},{"type":"INSERT","lineNumber":709,"content":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"DELETE","lineNumber":710,"oldContent":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"DELETE","lineNumber":712,"oldContent":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"DELETE","lineNumber":714,"oldContent":"                            screenPosition = android.graphics.PointF("},{"type":"INSERT","lineNumber":725,"content":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"INSERT","lineNumber":726,"content":"        _isFeatureMappingEnabled.value = enabled"},{"type":"INSERT","lineNumber":727,"content":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"DELETE","lineNumber":725,"oldContent":"    }"},{"type":"DELETE","lineNumber":731,"oldContent":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"DELETE","lineNumber":748,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":750,"oldContent":"        _isFeatureMappingEnabled.value = enabled"},{"type":"DELETE","lineNumber":752,"oldContent":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"INSERT","lineNumber":783,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":784,"content":"     */"},{"type":"INSERT","lineNumber":788,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":805,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":815,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":807,"oldContent":"     */"},{"type":"DELETE","lineNumber":812,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":840,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":860,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":865,"content":"            "},{"type":"INSERT","lineNumber":866,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":867,"content":"            initialize(context)"},{"type":"DELETE","lineNumber":882,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":888,"oldContent":"            "},{"type":"DELETE","lineNumber":890,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":892,"oldContent":"            initialize(context)"},{"type":"INSERT","lineNumber":936,"content":"                            )"},{"type":"INSERT","lineNumber":942,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":943,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":952,"content":"    }"},{"type":"INSERT","lineNumber":953,"content":"    "},{"type":"INSERT","lineNumber":954,"content":"    /**"},{"type":"DELETE","lineNumber":956,"oldContent":"                            )"},{"type":"DELETE","lineNumber":963,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":965,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":975,"oldContent":"    }"},{"type":"DELETE","lineNumber":977,"oldContent":"    "},{"type":"DELETE","lineNumber":979,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1041,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1049,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1050,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1051,"content":"    }"},{"type":"DELETE","lineNumber":1044,"oldContent":"    }"},{"type":"DELETE","lineNumber":1045,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":1046,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1047,"oldContent":"    fun getCurrentEndPoint(): String {"}]},{"timestamp":1754563220319,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import kotlinx.coroutines.flow.MutableStateFlow","oldContent":"import android.content.Context"},{"type":"INSERT","lineNumber":174,"content":"        "},{"type":"DELETE","lineNumber":176,"oldContent":"        "},{"type":"DELETE","lineNumber":195,"oldContent":"                steps.add("},{"type":"INSERT","lineNumber":196,"content":"                        landmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":197,"content":"                        allLandmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":198,"content":"                    }"},{"type":"INSERT","lineNumber":199,"content":"                }"},{"type":"INSERT","lineNumber":200,"content":"                "},{"type":"INSERT","lineNumber":201,"content":"                // Berechne Distanz aus Nodes falls verfügbar"},{"type":"INSERT","lineNumber":202,"content":"                val distance = routePart.nodes?.sumOf { node ->"},{"type":"INSERT","lineNumber":203,"content":"                    node.edge?.lengthInMeters?.toDoubleOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":204,"content":"                } ?: 0.0"},{"type":"INSERT","lineNumber":205,"content":"                "},{"type":"INSERT","lineNumber":206,"content":"                steps.add("},{"type":"DELETE","lineNumber":199,"oldContent":"                        landmarkIds.add(landmarkId)"},{"type":"DELETE","lineNumber":202,"oldContent":"                        allLandmarkIds.add(landmarkId)"},{"type":"DELETE","lineNumber":205,"oldContent":"                    }"},{"type":"DELETE","lineNumber":207,"oldContent":"                }"},{"type":"DELETE","lineNumber":210,"oldContent":"                "},{"type":"DELETE","lineNumber":213,"oldContent":"                // Berechne Distanz aus Nodes falls verfügbar"},{"type":"DELETE","lineNumber":216,"oldContent":"                val distance = routePart.nodes?.sumOf { node ->"},{"type":"DELETE","lineNumber":219,"oldContent":"                    node.edge?.lengthInMeters?.toDoubleOrNull() ?: 0.0"},{"type":"DELETE","lineNumber":222,"oldContent":"                } ?: 0.0"},{"type":"DELETE","lineNumber":225,"oldContent":"                "},{"type":"DELETE","lineNumber":227,"oldContent":""},{"type":"DELETE","lineNumber":229,"oldContent":"    "},{"type":"DELETE","lineNumber":231,"oldContent":"    /**"},{"type":"DELETE","lineNumber":233,"oldContent":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"DELETE","lineNumber":235,"oldContent":"     */"},{"type":"DELETE","lineNumber":237,"oldContent":"    fun initializeStorage(context: Context) {"},{"type":"DELETE","lineNumber":239,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":242,"oldContent":"            try {"},{"type":"DELETE","lineNumber":245,"oldContent":"                Log.i(TAG, \"Initialisiere neues Storage-System und Feature-Matching...\")"},{"type":"INSERT","lineNumber":238,"content":""},{"type":"INSERT","lineNumber":239,"content":"    "},{"type":"INSERT","lineNumber":240,"content":"    /**"},{"type":"INSERT","lineNumber":241,"content":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"INSERT","lineNumber":242,"content":"     */"},{"type":"INSERT","lineNumber":243,"content":"    fun initializeStorage(context: Context) {"},{"type":"INSERT","lineNumber":244,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":245,"content":"            try {"},{"type":"INSERT","lineNumber":246,"content":"                Log.i(TAG, \"Initialisiere neues Storage-System und Feature-Matching...\")"},{"type":"DELETE","lineNumber":291,"oldContent":"                "},{"type":"MODIFY","lineNumber":294,"content":"                ","oldContent":"                // Logge Storage-Status"},{"type":"INSERT","lineNumber":295,"content":"                // Logge Storage-Status"},{"type":"MODIFY","lineNumber":395,"content":"    ): Boolean {","oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":400,"oldContent":"                    is SaveResult.Success -> {"},{"type":"DELETE","lineNumber":402,"oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"DELETE","lineNumber":404,"oldContent":"                        true"},{"type":"DELETE","lineNumber":406,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":408,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":410,"oldContent":"            // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":412,"oldContent":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"DELETE","lineNumber":414,"oldContent":"        try {"},{"type":"DELETE","lineNumber":416,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":409,"content":"                    is SaveResult.Success -> {"},{"type":"INSERT","lineNumber":410,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":411,"content":"                        true"},{"type":"INSERT","lineNumber":412,"content":"                    }"},{"type":"INSERT","lineNumber":413,"content":"                    is SaveResult.Error -> {"},{"type":"INSERT","lineNumber":414,"content":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"INSERT","lineNumber":415,"content":"                        false"},{"type":"INSERT","lineNumber":416,"content":"                    }"},{"type":"INSERT","lineNumber":417,"content":"                }"},{"type":"INSERT","lineNumber":418,"content":"            } else {"},{"type":"DELETE","lineNumber":426,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"MODIFY","lineNumber":427,"content":"    }","oldContent":"            } else {"},{"type":"INSERT","lineNumber":428,"content":"    "},{"type":"INSERT","lineNumber":431,"content":""},{"type":"INSERT","lineNumber":432,"content":"    "},{"type":"DELETE","lineNumber":432,"oldContent":"    }"},{"type":"DELETE","lineNumber":434,"oldContent":"    "},{"type":"DELETE","lineNumber":436,"oldContent":"    "},{"type":"INSERT","lineNumber":446,"content":"    "},{"type":"DELETE","lineNumber":448,"oldContent":"    "},{"type":"DELETE","lineNumber":458,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":459,"oldContent":"    }"},{"type":"INSERT","lineNumber":458,"content":"     */"},{"type":"INSERT","lineNumber":461,"content":"    }"},{"type":"DELETE","lineNumber":480,"oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":482,"oldContent":"     */"},{"type":"DELETE","lineNumber":484,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":483,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":484,"content":"     */"},{"type":"INSERT","lineNumber":485,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"MODIFY","lineNumber":523,"content":"        val byteArray = byteArrayOutputStream.toByteArray()","oldContent":"        val byteArray = byteArrayOutputStream.toByteArray()"},{"type":"INSERT","lineNumber":525,"content":"    }"},{"type":"INSERT","lineNumber":526,"content":"    "},{"type":"INSERT","lineNumber":528,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":529,"content":"     */"},{"type":"DELETE","lineNumber":527,"oldContent":"    }"},{"type":"DELETE","lineNumber":529,"oldContent":"    "},{"type":"DELETE","lineNumber":532,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":534,"content":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":534,"oldContent":"     */"},{"type":"INSERT","lineNumber":539,"content":"                val result = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":540,"oldContent":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":544,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":545,"content":"                )"},{"type":"DELETE","lineNumber":546,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"MODIFY","lineNumber":549,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":557,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":560,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":607,"oldContent":"    /**"},{"type":"DELETE","lineNumber":610,"oldContent":"     */"},{"type":"DELETE","lineNumber":612,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"INSERT","lineNumber":610,"content":"    /**"},{"type":"INSERT","lineNumber":612,"content":"     */"},{"type":"INSERT","lineNumber":613,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":614,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":616,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":619,"content":"        // Throttle Frame-Processing für bessere Performance"},{"type":"INSERT","lineNumber":620,"content":"        val currentTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":621,"content":"        if (currentTime - lastFrameProcessTime < frameProcessingInterval) {"},{"type":"INSERT","lineNumber":622,"content":"            return"},{"type":"INSERT","lineNumber":623,"content":"        }"},{"type":"INSERT","lineNumber":624,"content":"        lastFrameProcessTime = currentTime"},{"type":"INSERT","lineNumber":625,"content":"        "},{"type":"DELETE","lineNumber":622,"oldContent":"        // Throttle Frame-Processing für bessere Performance"},{"type":"DELETE","lineNumber":624,"oldContent":"        val currentTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":626,"oldContent":"        if (currentTime - lastFrameProcessTime < frameProcessingInterval) {"},{"type":"DELETE","lineNumber":628,"oldContent":"            return"},{"type":"DELETE","lineNumber":630,"oldContent":"        }"},{"type":"DELETE","lineNumber":632,"oldContent":"        lastFrameProcessTime = currentTime"},{"type":"DELETE","lineNumber":634,"oldContent":"        "},{"type":"INSERT","lineNumber":642,"content":"                "},{"type":"INSERT","lineNumber":647,"content":"                    matches.take(2).forEach { match ->"},{"type":"INSERT","lineNumber":648,"content":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"DELETE","lineNumber":649,"oldContent":"                "},{"type":"DELETE","lineNumber":654,"oldContent":"                    matches.take(2).forEach { match ->"},{"type":"DELETE","lineNumber":655,"oldContent":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":658,"content":"    "},{"type":"INSERT","lineNumber":659,"content":"    /**"},{"type":"INSERT","lineNumber":660,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":661,"content":"     */"},{"type":"DELETE","lineNumber":666,"oldContent":"    "},{"type":"DELETE","lineNumber":668,"oldContent":"    /**"},{"type":"DELETE","lineNumber":670,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":672,"oldContent":"     */"},{"type":"INSERT","lineNumber":689,"content":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"INSERT","lineNumber":690,"content":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"INSERT","lineNumber":691,"content":"                            screenPosition = android.graphics.PointF("},{"type":"DELETE","lineNumber":696,"oldContent":"                            distance = (5f + Math.random() * 20f).toFloat(),"},{"type":"DELETE","lineNumber":698,"oldContent":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"DELETE","lineNumber":700,"oldContent":"                            screenPosition = android.graphics.PointF("},{"type":"INSERT","lineNumber":704,"content":"    }"},{"type":"INSERT","lineNumber":709,"content":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"DELETE","lineNumber":714,"oldContent":"    }"},{"type":"DELETE","lineNumber":720,"oldContent":"    private fun getLandmarkDisplayName(landmarkId: String): String {"},{"type":"INSERT","lineNumber":725,"content":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"INSERT","lineNumber":726,"content":"        _isFeatureMappingEnabled.value = enabled"},{"type":"INSERT","lineNumber":727,"content":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"DELETE","lineNumber":734,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":735,"oldContent":"        _isFeatureMappingEnabled.value = enabled"},{"type":"DELETE","lineNumber":737,"oldContent":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"MODIFY","lineNumber":750,"content":"        }","oldContent":"}"},{"type":"MODIFY","lineNumber":752,"content":"    ","oldContent":"            }"},{"type":"INSERT","lineNumber":783,"content":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":784,"content":"     */"},{"type":"INSERT","lineNumber":788,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":790,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":792,"oldContent":"     */"},{"type":"DELETE","lineNumber":797,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":815,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":822,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":840,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":841,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":842,"content":"            "},{"type":"INSERT","lineNumber":863,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":868,"content":"            "},{"type":"INSERT","lineNumber":869,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":870,"content":"            initialize(context)"},{"type":"DELETE","lineNumber":867,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":873,"oldContent":"            "},{"type":"DELETE","lineNumber":875,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":877,"oldContent":"            initialize(context)"},{"type":"INSERT","lineNumber":939,"content":"                            )"},{"type":"INSERT","lineNumber":945,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":946,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":943,"oldContent":"                            )"},{"type":"DELETE","lineNumber":950,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":955,"content":"    }"},{"type":"INSERT","lineNumber":956,"content":"    "},{"type":"INSERT","lineNumber":957,"content":"    /**"},{"type":"DELETE","lineNumber":952,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":962,"oldContent":"    }"},{"type":"DELETE","lineNumber":964,"oldContent":"    "},{"type":"DELETE","lineNumber":966,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1044,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1048,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1049,"oldContent":"    "},{"type":"DELETE","lineNumber":1050,"oldContent":""},{"type":"DELETE","lineNumber":1051,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1052,"oldContent":"    }"},{"type":"INSERT","lineNumber":1054,"content":"    }"},{"type":"INSERT","lineNumber":1055,"content":"    "},{"type":"INSERT","lineNumber":1056,"content":""},{"type":"INSERT","lineNumber":1057,"content":"}"}]},{"timestamp":1754564055280,"changes":[{"type":"DELETE","lineNumber":11,"oldContent":"import kotlinx.coroutines.delay"},{"type":"MODIFY","lineNumber":11,"content":"import kotlinx.coroutines.runBlocking","oldContent":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"INSERT","lineNumber":14,"content":"import com.example.arwalking.storage.SaveResult"},{"type":"DELETE","lineNumber":34,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":35,"oldContent":"            Log.i(TAG, \"Route wird geladen...\")"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"            // JSON laden und parsen (wie vorher)"},{"type":"DELETE","lineNumber":38,"oldContent":"            val jsonString = loadJSONFromAsset(context, \"route.json\")"},{"type":"DELETE","lineNumber":39,"oldContent":"            val routeData = gson.fromJson(jsonString, RouteData::class.java)"},{"type":"INSERT","lineNumber":33,"content":"    // Feature Matching System"},{"type":"INSERT","lineNumber":34,"content":"    private var featureMatchingEngine: FeatureMatchingEngine? = null"},{"type":"INSERT","lineNumber":35,"content":"    private var landmarkFeatureStorage: LandmarkFeatureStorage? = null"},{"type":"INSERT","lineNumber":36,"content":"    private var arTrackingSystem: ARTrackingSystem? = null"},{"type":"INSERT","lineNumber":37,"content":"    "},{"type":"INSERT","lineNumber":38,"content":"    // Verarbeitete Landmarks für schnelles Matching"},{"type":"DELETE","lineNumber":152,"oldContent":"    }"},{"type":"DELETE","lineNumber":153,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":154,"oldContent":"    "},{"type":"DELETE","lineNumber":155,"oldContent":"    }"},{"type":"DELETE","lineNumber":156,"oldContent":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":152,"content":"        navigationRoute.steps.forEachIndexed { index, step ->"},{"type":"INSERT","lineNumber":153,"content":"            Log.d(TAG, \"Schritt ${index + 1}: ${step.instruction}\")"},{"type":"INSERT","lineNumber":154,"content":"            Log.d(TAG, \"  - Building: ${step.building}\")"},{"type":"INSERT","lineNumber":155,"content":"            Log.d(TAG, \"  - Floor: ${step.floor}\")"},{"type":"INSERT","lineNumber":156,"content":"            Log.d(TAG, \"  - Distance: ${step.distance}m\")"},{"type":"DELETE","lineNumber":168,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":169,"oldContent":"    /**"},{"type":"INSERT","lineNumber":167,"content":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"INSERT","lineNumber":168,"content":"        val steps = mutableListOf<NavigationStep>()"},{"type":"DELETE","lineNumber":177,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":178,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":176,"content":"            pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":177,"content":"                // Verwende die deutsche Anweisung als primäre Anweisung"},{"type":"DELETE","lineNumber":180,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":181,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":182,"oldContent":"                // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":183,"oldContent":"                Log.d(TAG, \"processFrameForFeatureMatching called (stub)\")"},{"type":"INSERT","lineNumber":179,"content":"                "},{"type":"INSERT","lineNumber":180,"content":"                // Extrahiere Stockwerk aus levelInfo falls verfügbar"},{"type":"INSERT","lineNumber":181,"content":"                val floor = pathItem.levelInfo?.storey?.toIntOrNull() ?: 0"},{"type":"INSERT","lineNumber":182,"content":"                "},{"type":"MODIFY","lineNumber":195,"content":"                        landmarkIds.add(landmarkId)","oldContent":"                        landmarkIds.add(landmarkId)"},{"type":"DELETE","lineNumber":198,"oldContent":"                    NavigationStep("},{"type":"DELETE","lineNumber":200,"oldContent":"                        stepNumber = stepNumber++,"},{"type":"DELETE","lineNumber":203,"oldContent":"                        instruction = instruction,"},{"type":"DELETE","lineNumber":205,"oldContent":"                        building = pathItem.xmlName,"},{"type":"DELETE","lineNumber":208,"oldContent":"                        floor = floor,"},{"type":"DELETE","lineNumber":210,"oldContent":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"INSERT","lineNumber":206,"content":"                    NavigationStep("},{"type":"INSERT","lineNumber":207,"content":"                        stepNumber = stepNumber++,"},{"type":"INSERT","lineNumber":208,"content":"                        instruction = instruction,"},{"type":"INSERT","lineNumber":209,"content":"                        building = pathItem.xmlName,"},{"type":"INSERT","lineNumber":210,"content":"                        floor = floor,"},{"type":"INSERT","lineNumber":211,"content":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"MODIFY","lineNumber":232,"content":"            steps = steps,","oldContent":""},{"type":"INSERT","lineNumber":233,"content":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"INSERT","lineNumber":234,"content":"        )"},{"type":"INSERT","lineNumber":235,"content":"    }"},{"type":"INSERT","lineNumber":237,"content":""},{"type":"INSERT","lineNumber":238,"content":"    "},{"type":"DELETE","lineNumber":236,"oldContent":"            steps = steps,"},{"type":"DELETE","lineNumber":238,"oldContent":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"DELETE","lineNumber":241,"oldContent":"        )"},{"type":"DELETE","lineNumber":243,"oldContent":"    }"},{"type":"DELETE","lineNumber":246,"oldContent":"    "},{"type":"DELETE","lineNumber":280,"oldContent":"}"},{"type":"DELETE","lineNumber":281,"oldContent":"    }"},{"type":"DELETE","lineNumber":282,"oldContent":"        }"},{"type":"DELETE","lineNumber":283,"oldContent":"            }"},{"type":"INSERT","lineNumber":279,"content":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"INSERT","lineNumber":280,"content":"                    Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")"},{"type":"INSERT","lineNumber":281,"content":"                }"},{"type":"INSERT","lineNumber":282,"content":"                "},{"type":"INSERT","lineNumber":292,"content":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":295,"oldContent":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"MODIFY","lineNumber":404,"content":"                    category = \"Training\"","oldContent":"                    is SaveResult.Success -> {"},{"type":"INSERT","lineNumber":405,"content":"                )"},{"type":"INSERT","lineNumber":406,"content":"                "},{"type":"INSERT","lineNumber":407,"content":"                when (saveResult) {"},{"type":"INSERT","lineNumber":408,"content":"                    is SaveResult.Success -> {"},{"type":"DELETE","lineNumber":408,"oldContent":"                    category = \"Training\""},{"type":"DELETE","lineNumber":411,"oldContent":"                )"},{"type":"DELETE","lineNumber":414,"oldContent":"                "},{"type":"DELETE","lineNumber":417,"oldContent":"                when (saveResult) {"},{"type":"DELETE","lineNumber":431,"oldContent":"    /**"},{"type":"DELETE","lineNumber":433,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":432,"content":"    /**"},{"type":"INSERT","lineNumber":433,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"MODIFY","lineNumber":460,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":479,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":478,"content":"        }"},{"type":"MODIFY","lineNumber":481,"content":"    /**","oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":482,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":485,"oldContent":"    /**"},{"type":"INSERT","lineNumber":521,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":523,"oldContent":"        val byteArray = byteArrayOutputStream.toByteArray()"},{"type":"DELETE","lineNumber":526,"oldContent":"    /**"},{"type":"DELETE","lineNumber":528,"oldContent":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":526,"content":"    /**"},{"type":"DELETE","lineNumber":530,"oldContent":"        landmarkId: String,"},{"type":"INSERT","lineNumber":529,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":530,"content":"        landmarkId: String,"},{"type":"MODIFY","lineNumber":534,"content":"    ): Boolean {","oldContent":"    ): Boolean {"},{"type":"MODIFY","lineNumber":539,"content":"                    bitmap = bitmap,","oldContent":"                    bitmap = bitmap,"},{"type":"MODIFY","lineNumber":609,"content":"    /**","oldContent":"    /**"},{"type":"INSERT","lineNumber":610,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"DELETE","lineNumber":613,"oldContent":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"DELETE","lineNumber":620,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":622,"oldContent":"            try {"},{"type":"DELETE","lineNumber":624,"oldContent":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":627,"oldContent":"                    // Echtes Feature-Matching mit OpenCV"},{"type":"INSERT","lineNumber":625,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":626,"content":"            try {"},{"type":"INSERT","lineNumber":627,"content":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":628,"content":"                    // Echtes Feature-Matching mit OpenCV"},{"type":"DELETE","lineNumber":647,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":648,"content":"                    }","oldContent":"                }"},{"type":"INSERT","lineNumber":649,"content":"                }"},{"type":"DELETE","lineNumber":659,"oldContent":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":661,"oldContent":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"DELETE","lineNumber":663,"oldContent":"        "},{"type":"INSERT","lineNumber":661,"content":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":662,"content":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":663,"content":"        "},{"type":"DELETE","lineNumber":690,"oldContent":"                                (200f + Math.random() * 400f).toFloat(),"},{"type":"MODIFY","lineNumber":691,"content":"                                (200f + Math.random() * 400f).toFloat(),","oldContent":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"INSERT","lineNumber":692,"content":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"MODIFY","lineNumber":709,"content":"        return when {","oldContent":"        return when {"},{"type":"DELETE","lineNumber":726,"oldContent":"        "},{"type":"DELETE","lineNumber":728,"oldContent":"        if (!enabled) {"},{"type":"INSERT","lineNumber":727,"content":"        "},{"type":"INSERT","lineNumber":728,"content":"        if (!enabled) {"},{"type":"DELETE","lineNumber":748,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":749,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":747,"content":"                _currentMatches.value = simulatedMatches"},{"type":"INSERT","lineNumber":748,"content":"            }"},{"type":"DELETE","lineNumber":751,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":750,"content":"    }"},{"type":"MODIFY","lineNumber":784,"content":"    fun startNavigation() {","oldContent":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":787,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":790,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":841,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":843,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":842,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":843,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":862,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":866,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":867,"content":"            "},{"type":"INSERT","lineNumber":868,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":869,"content":"            initialize(context)"},{"type":"DELETE","lineNumber":871,"oldContent":"            "},{"type":"DELETE","lineNumber":873,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":875,"oldContent":"            initialize(context)"},{"type":"INSERT","lineNumber":938,"content":"                            )"},{"type":"DELETE","lineNumber":942,"oldContent":"                            )"},{"type":"INSERT","lineNumber":944,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":945,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":948,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":950,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":954,"content":"    }"},{"type":"INSERT","lineNumber":955,"content":"    "},{"type":"INSERT","lineNumber":956,"content":"    /**"},{"type":"DELETE","lineNumber":958,"oldContent":"    }"},{"type":"DELETE","lineNumber":960,"oldContent":"    "},{"type":"DELETE","lineNumber":962,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":1035,"content":"        // Stub implementation - verhindert Crashes","oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":1043,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1047,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"MODIFY","lineNumber":1053,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":1056,"content":"}","oldContent":"}"}]},{"timestamp":1754564059867,"changes":[{"type":"INSERT","lineNumber":11,"content":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":13,"oldContent":"import com.example.arwalking.storage.SaveResult"},{"type":"INSERT","lineNumber":15,"content":"import com.example.arwalking.storage.SaveResult"},{"type":"DELETE","lineNumber":17,"oldContent":"    // Feature Map Manager"},{"type":"DELETE","lineNumber":18,"oldContent":"    private var featureMapManager: FeatureMapManager? = null"},{"type":"DELETE","lineNumber":19,"oldContent":"    "},{"type":"INSERT","lineNumber":18,"content":"import com.example.arwalking.data.RouteData"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"/**"},{"type":"INSERT","lineNumber":33,"content":"    "},{"type":"DELETE","lineNumber":33,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":48,"oldContent":"            null"},{"type":"DELETE","lineNumber":49,"oldContent":"        }"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"    // Konvertierung von RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":53,"oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":54,"oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"INSERT","lineNumber":49,"content":"    val currentRoute: StateFlow<RouteData?> = _currentRoute.asStateFlow()"},{"type":"INSERT","lineNumber":50,"content":"    "},{"type":"INSERT","lineNumber":51,"content":"    // State für Feature-Navigation"},{"type":"INSERT","lineNumber":52,"content":"    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)"},{"type":"INSERT","lineNumber":53,"content":"    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()"},{"type":"INSERT","lineNumber":54,"content":"    "},{"type":"INSERT","lineNumber":55,"content":"    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())"},{"type":"INSERT","lineNumber":152,"content":"        "},{"type":"DELETE","lineNumber":156,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":164,"oldContent":"        "},{"type":"INSERT","lineNumber":165,"content":"    /**"},{"type":"DELETE","lineNumber":166,"oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"INSERT","lineNumber":168,"content":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":170,"oldContent":"        }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"DELETE","lineNumber":175,"oldContent":"            pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":177,"content":"            pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":178,"oldContent":"                "},{"type":"INSERT","lineNumber":180,"content":"                "},{"type":"DELETE","lineNumber":194,"oldContent":"                        landmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":196,"content":"                        landmarkIds.add(landmarkId)"},{"type":"DELETE","lineNumber":201,"oldContent":"                    NavigationStep("},{"type":"DELETE","lineNumber":203,"oldContent":"                        stepNumber = stepNumber++,"},{"type":"INSERT","lineNumber":204,"content":"                } ?: 0.0"},{"type":"INSERT","lineNumber":205,"content":"                "},{"type":"INSERT","lineNumber":206,"content":"                steps.add("},{"type":"INSERT","lineNumber":207,"content":"                    NavigationStep("},{"type":"INSERT","lineNumber":208,"content":"                        stepNumber = stepNumber++,"},{"type":"DELETE","lineNumber":207,"oldContent":"                } ?: 0.0"},{"type":"DELETE","lineNumber":210,"oldContent":"                "},{"type":"DELETE","lineNumber":211,"oldContent":"                steps.add("},{"type":"INSERT","lineNumber":232,"content":"            totalLength = steps.sumOf { it.distance },"},{"type":"DELETE","lineNumber":233,"oldContent":"            totalLength = steps.sumOf { it.distance },"},{"type":"DELETE","lineNumber":235,"oldContent":"    "},{"type":"MODIFY","lineNumber":237,"content":"    ","oldContent":"    /**"},{"type":"DELETE","lineNumber":239,"oldContent":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"INSERT","lineNumber":240,"content":"    /**"},{"type":"INSERT","lineNumber":241,"content":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"DELETE","lineNumber":261,"oldContent":"        if (!enabled) {"},{"type":"MODIFY","lineNumber":262,"content":"                // Lade route-spezifische Landmarks falls Route verfügbar ist","oldContent":"        "},{"type":"INSERT","lineNumber":263,"content":"                processedLandmarks.clear()"},{"type":"DELETE","lineNumber":264,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":265,"oldContent":"     */"},{"type":"DELETE","lineNumber":266,"oldContent":"     * Aktiviert/Deaktiviert das Feature-Mapping"},{"type":"DELETE","lineNumber":267,"oldContent":"    /**"},{"type":"DELETE","lineNumber":268,"oldContent":"    }"},{"type":"DELETE","lineNumber":269,"oldContent":"        }"},{"type":"DELETE","lineNumber":270,"oldContent":"            else -> \"Landmark $landmarkId\""},{"type":"DELETE","lineNumber":271,"oldContent":"            landmarkId.contains(\"elevator\") -> \"Aufzug\""},{"type":"DELETE","lineNumber":272,"oldContent":"            landmarkId.contains(\"stairs\") -> \"Treppe\""},{"type":"INSERT","lineNumber":265,"content":"                val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":266,"content":"                if (currentRoute != null) {"},{"type":"INSERT","lineNumber":267,"content":"                    // Lade nur die Landmarks, die in der aktuellen Route verwendet werden"},{"type":"INSERT","lineNumber":268,"content":"                    processedLandmarks.addAll(landmarkFeatureStorage!!.loadRouteSpecificLandmarks(currentRoute.route))"},{"type":"INSERT","lineNumber":269,"content":"                    Log.i(TAG, \"${processedLandmarks.size} route-spezifische Landmarks für Feature-Matching geladen\")"},{"type":"INSERT","lineNumber":270,"content":"                } else {"},{"type":"INSERT","lineNumber":271,"content":"                    // Fallback: Lade alle verfügbaren Landmarks"},{"type":"INSERT","lineNumber":272,"content":"                    processedLandmarks.addAll(landmarkFeatureStorage!!.loadAllLandmarks())"},{"type":"INSERT","lineNumber":273,"content":"                    Log.i(TAG, \"${processedLandmarks.size} Landmarks für Feature-Matching geladen (alle verfügbaren)\")"},{"type":"DELETE","lineNumber":275,"oldContent":"            landmarkId.contains(\"PT-1-697\") -> \"Tür Raum 697\""},{"type":"DELETE","lineNumber":276,"oldContent":"            landmarkId.contains(\"PT-1-566\") -> \"Haupteingang PT\""},{"type":"DELETE","lineNumber":277,"oldContent":"            landmarkId.contains(\"PT-1-86\") -> \"Prof. Ludwig Büro\""},{"type":"DELETE","lineNumber":278,"oldContent":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"INSERT","lineNumber":276,"content":"                // Prüfe verfügbare Bilder im Projektverzeichnis"},{"type":"INSERT","lineNumber":277,"content":"                val availableLandmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":278,"content":"                Log.i(TAG, \"Verfügbare Landmark-Bilder: ${availableLandmarks.size}\")"},{"type":"INSERT","lineNumber":280,"content":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"INSERT","lineNumber":292,"content":"                "},{"type":"DELETE","lineNumber":293,"oldContent":"                "},{"type":"INSERT","lineNumber":404,"content":"                    description = description,"},{"type":"DELETE","lineNumber":405,"oldContent":"                    description = description,"},{"type":"DELETE","lineNumber":407,"oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"DELETE","lineNumber":409,"oldContent":"                        true"},{"type":"INSERT","lineNumber":410,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":411,"content":"                        true"},{"type":"DELETE","lineNumber":419,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"MODIFY","lineNumber":420,"content":"                false","oldContent":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":421,"content":"            }"},{"type":"DELETE","lineNumber":430,"oldContent":"    /**"},{"type":"DELETE","lineNumber":432,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":433,"content":"    /**"},{"type":"INSERT","lineNumber":434,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":454,"oldContent":"                emptyList()"},{"type":"INSERT","lineNumber":455,"content":"    "},{"type":"DELETE","lineNumber":459,"oldContent":"    }"},{"type":"INSERT","lineNumber":461,"content":"    }"},{"type":"DELETE","lineNumber":477,"oldContent":"        }"},{"type":"INSERT","lineNumber":479,"content":"        }"},{"type":"INSERT","lineNumber":481,"content":"    "},{"type":"DELETE","lineNumber":482,"oldContent":"    "},{"type":"DELETE","lineNumber":520,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":522,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":525,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":527,"content":"    /**","oldContent":"    suspend fun createLandmark("},{"type":"DELETE","lineNumber":529,"oldContent":"        landmarkId: String,"},{"type":"INSERT","lineNumber":530,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":531,"content":"        landmarkId: String,"},{"type":"DELETE","lineNumber":533,"oldContent":"    ): Boolean {"},{"type":"INSERT","lineNumber":535,"content":"    ): Boolean {"},{"type":"DELETE","lineNumber":538,"oldContent":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":540,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":609,"content":"    "},{"type":"DELETE","lineNumber":610,"oldContent":"    "},{"type":"DELETE","lineNumber":621,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":623,"oldContent":"            try {"},{"type":"DELETE","lineNumber":625,"oldContent":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"MODIFY","lineNumber":626,"content":"        viewModelScope.launch {","oldContent":"                    // Echtes Feature-Matching mit OpenCV"},{"type":"INSERT","lineNumber":627,"content":"            try {"},{"type":"INSERT","lineNumber":628,"content":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":629,"content":"                    // Echtes Feature-Matching mit OpenCV"},{"type":"INSERT","lineNumber":647,"content":"                    matches.take(2).forEach { match ->"},{"type":"INSERT","lineNumber":648,"content":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"DELETE","lineNumber":648,"oldContent":"                }"},{"type":"DELETE","lineNumber":649,"oldContent":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":660,"content":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"INSERT","lineNumber":661,"content":"     */"},{"type":"DELETE","lineNumber":661,"oldContent":"     * Generiert simulierte Feature-Matches basierend auf der aktuellen Route"},{"type":"DELETE","lineNumber":663,"oldContent":"     */"},{"type":"INSERT","lineNumber":690,"content":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"INSERT","lineNumber":691,"content":"                            screenPosition = android.graphics.PointF("},{"type":"DELETE","lineNumber":691,"oldContent":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"DELETE","lineNumber":692,"oldContent":"                            screenPosition = android.graphics.PointF("},{"type":"DELETE","lineNumber":708,"oldContent":"        return when {"},{"type":"INSERT","lineNumber":710,"content":"        return when {"},{"type":"DELETE","lineNumber":725,"oldContent":"        "},{"type":"DELETE","lineNumber":727,"oldContent":"        if (!enabled) {"},{"type":"INSERT","lineNumber":728,"content":"        "},{"type":"INSERT","lineNumber":729,"content":"        if (!enabled) {"},{"type":"DELETE","lineNumber":746,"oldContent":"                _currentMatches.value = simulatedMatches"},{"type":"INSERT","lineNumber":748,"content":"                _currentMatches.value = simulatedMatches"},{"type":"DELETE","lineNumber":749,"oldContent":"    }"},{"type":"INSERT","lineNumber":751,"content":"    }"},{"type":"DELETE","lineNumber":783,"oldContent":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":785,"content":"    fun startNavigation() {"},{"type":"DELETE","lineNumber":786,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":788,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":840,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":842,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":843,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":844,"content":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":861,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":863,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":866,"oldContent":"            "},{"type":"INSERT","lineNumber":868,"content":"            "},{"type":"DELETE","lineNumber":869,"oldContent":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"INSERT","lineNumber":871,"content":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"DELETE","lineNumber":937,"oldContent":"                            )"},{"type":"INSERT","lineNumber":939,"content":"                            )"},{"type":"DELETE","lineNumber":943,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":945,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":953,"oldContent":"    }"},{"type":"INSERT","lineNumber":955,"content":"    }"},{"type":"DELETE","lineNumber":956,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":958,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":1019,"oldContent":"                "},{"type":"DELETE","lineNumber":1020,"oldContent":"     */"},{"type":"DELETE","lineNumber":1021,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1022,"oldContent":""},{"type":"INSERT","lineNumber":1020,"content":"            }"},{"type":"INSERT","lineNumber":1021,"content":"        }"},{"type":"INSERT","lineNumber":1022,"content":"        "},{"type":"INSERT","lineNumber":1023,"content":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":1024,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":1025,"oldContent":"    "},{"type":"DELETE","lineNumber":1026,"oldContent":"                "},{"type":"DELETE","lineNumber":1027,"oldContent":"                "},{"type":"DELETE","lineNumber":1028,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":1026,"content":"    /**"},{"type":"INSERT","lineNumber":1027,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":1028,"content":"     */"},{"type":"INSERT","lineNumber":1029,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":1030,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":1033,"oldContent":"    "},{"type":"INSERT","lineNumber":1034,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1035,"content":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"DELETE","lineNumber":1035,"oldContent":"    "},{"type":"DELETE","lineNumber":1042,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1044,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1052,"oldContent":"    }"},{"type":"INSERT","lineNumber":1054,"content":"    }"},{"type":"DELETE","lineNumber":1055,"oldContent":"}"},{"type":"INSERT","lineNumber":1057,"content":"}"}]},{"timestamp":1754564482810,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import com.example.arwalking.data.RouteRepository","oldContent":"    "},{"type":"INSERT","lineNumber":20,"content":"// Missing imports for classes used in this file"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"    // Feature Matching System"},{"type":"INSERT","lineNumber":36,"content":"    // Feature Matching System"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":41,"oldContent":"            // In NavigationRoute umwandeln"},{"type":"INSERT","lineNumber":42,"content":"    private var processedLandmarks = mutableListOf<ProcessedLandmark>()"},{"type":"INSERT","lineNumber":43,"content":"    "},{"type":"DELETE","lineNumber":152,"oldContent":"        navigationRoute.steps.forEachIndexed { index, step ->"},{"type":"INSERT","lineNumber":155,"content":"        navigationRoute.steps.forEachIndexed { index, step ->"},{"type":"INSERT","lineNumber":162,"content":"        }"},{"type":"INSERT","lineNumber":163,"content":"        "},{"type":"INSERT","lineNumber":164,"content":"        Log.i(TAG, \"=== Ende Route Details ===\")"},{"type":"DELETE","lineNumber":161,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":162,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"DELETE","lineNumber":167,"oldContent":"    }"},{"type":"INSERT","lineNumber":169,"content":"     */"},{"type":"DELETE","lineNumber":203,"oldContent":"                } ?: 0.0"},{"type":"INSERT","lineNumber":206,"content":"                } ?: 0.0"},{"type":"DELETE","lineNumber":206,"oldContent":"                        instruction = instruction,"},{"type":"DELETE","lineNumber":208,"oldContent":"                        building = pathItem.xmlName,"},{"type":"INSERT","lineNumber":211,"content":"                        instruction = instruction,"},{"type":"INSERT","lineNumber":212,"content":"                        building = pathItem.xmlName,"},{"type":"DELETE","lineNumber":232,"oldContent":"            steps = steps,"},{"type":"INSERT","lineNumber":235,"content":"            steps = steps,"},{"type":"DELETE","lineNumber":239,"oldContent":"    /**"},{"type":"INSERT","lineNumber":242,"content":"    /**"},{"type":"DELETE","lineNumber":275,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":277,"content":"                "},{"type":"DELETE","lineNumber":279,"oldContent":"            }"},{"type":"INSERT","lineNumber":281,"content":"                "},{"type":"DELETE","lineNumber":289,"oldContent":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":291,"content":"                "},{"type":"INSERT","lineNumber":294,"content":"                "},{"type":"DELETE","lineNumber":294,"oldContent":"                "},{"type":"DELETE","lineNumber":296,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":297,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":298,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":299,"oldContent":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":298,"content":"                val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":299,"content":"                Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":300,"content":"                "},{"type":"INSERT","lineNumber":301,"content":"                val storageStats = landmarkFeatureStorage!!.getStorageStats()"},{"type":"DELETE","lineNumber":404,"oldContent":"                    category = \"Training\""},{"type":"INSERT","lineNumber":407,"content":"                    category = \"Training\""},{"type":"DELETE","lineNumber":409,"oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":412,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"DELETE","lineNumber":432,"oldContent":"    /**"},{"type":"INSERT","lineNumber":435,"content":"    /**"},{"type":"DELETE","lineNumber":481,"oldContent":"    /**"},{"type":"INSERT","lineNumber":484,"content":"    /**"},{"type":"DELETE","lineNumber":529,"oldContent":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":532,"content":"    suspend fun createLandmark("},{"type":"DELETE","lineNumber":600,"oldContent":"    }"},{"type":"INSERT","lineNumber":602,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":603,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":604,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":605,"content":"        }"},{"type":"INSERT","lineNumber":606,"content":"    }"},{"type":"DELETE","lineNumber":609,"oldContent":"    /**"},{"type":"INSERT","lineNumber":612,"content":"    /**"},{"type":"INSERT","lineNumber":626,"content":"        lastFrameProcessTime = currentTime"},{"type":"INSERT","lineNumber":627,"content":"        "},{"type":"DELETE","lineNumber":626,"oldContent":"        lastFrameProcessTime = currentTime"},{"type":"DELETE","lineNumber":628,"oldContent":"        "},{"type":"DELETE","lineNumber":647,"oldContent":"                    }"},{"type":"DELETE","lineNumber":649,"oldContent":"                }"},{"type":"INSERT","lineNumber":651,"content":"                    }"},{"type":"INSERT","lineNumber":652,"content":"                }"},{"type":"DELETE","lineNumber":660,"oldContent":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":662,"oldContent":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":664,"content":"    private fun generateSimulatedMatches(route: RouteData, currentStep: Int): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":665,"content":"        val matches = mutableListOf<FeatureMatchResult>()"},{"type":"DELETE","lineNumber":690,"oldContent":"                                (200f + Math.random() * 400f).toFloat(),"},{"type":"DELETE","lineNumber":692,"oldContent":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"INSERT","lineNumber":694,"content":"                                (200f + Math.random() * 400f).toFloat(),"},{"type":"INSERT","lineNumber":695,"content":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"DELETE","lineNumber":727,"oldContent":"        "},{"type":"INSERT","lineNumber":730,"content":"        "},{"type":"DELETE","lineNumber":738,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":739,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":740,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":741,"content":"        val validStep = step.coerceIn(1, maxOf(1, totalSteps))"},{"type":"DELETE","lineNumber":741,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":742,"oldContent":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":743,"content":"        _currentNavigationStep.value = validStep"},{"type":"INSERT","lineNumber":744,"content":"        Log.d(TAG, \"Navigationsschritt aktualisiert: $validStep von $totalSteps\")"},{"type":"DELETE","lineNumber":754,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":756,"content":"     * Geht zum nächsten Navigationsschritt"},{"type":"DELETE","lineNumber":756,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":757,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":758,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":759,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":760,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":761,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":762,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":763,"oldContent":"            }"},{"type":"DELETE","lineNumber":764,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":765,"oldContent":"            "},{"type":"DELETE","lineNumber":766,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":767,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":768,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":769,"oldContent":"            }"},{"type":"DELETE","lineNumber":770,"oldContent":"                    }"},{"type":"DELETE","lineNumber":771,"oldContent":"                            )"},{"type":"DELETE","lineNumber":772,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":773,"oldContent":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":774,"oldContent":"                                id = landmark, // String aus JSON"},{"type":"DELETE","lineNumber":775,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":776,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":777,"oldContent":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"DELETE","lineNumber":778,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":779,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":758,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":759,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":760,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":761,"content":"        "},{"type":"INSERT","lineNumber":762,"content":"        if (currentStep < totalSteps) {"},{"type":"INSERT","lineNumber":763,"content":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"INSERT","lineNumber":764,"content":"            Log.i(TAG, \"Nächster Schritt: ${currentStep + 1}\")"},{"type":"INSERT","lineNumber":765,"content":"        } else {"},{"type":"INSERT","lineNumber":766,"content":"            Log.i(TAG, \"Bereits am letzten Schritt\")"},{"type":"INSERT","lineNumber":767,"content":"        }"},{"type":"INSERT","lineNumber":771,"content":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":772,"content":"     */"},{"type":"INSERT","lineNumber":773,"content":"    fun previousNavigationStep() {"},{"type":"INSERT","lineNumber":774,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":775,"content":"        "},{"type":"INSERT","lineNumber":776,"content":"        if (currentStep > 1) {"},{"type":"INSERT","lineNumber":777,"content":"            setCurrentNavigationStep(currentStep - 1)"},{"type":"INSERT","lineNumber":778,"content":"            Log.i(TAG, \"Vorheriger Schritt: ${currentStep - 1}\")"},{"type":"INSERT","lineNumber":779,"content":"        } else {"},{"type":"INSERT","lineNumber":780,"content":"            Log.i(TAG, \"Bereits am ersten Schritt\")"},{"type":"INSERT","lineNumber":781,"content":"        }"},{"type":"INSERT","lineNumber":782,"content":"    }"},{"type":"INSERT","lineNumber":783,"content":"    "},{"type":"INSERT","lineNumber":784,"content":"    /**"},{"type":"DELETE","lineNumber":831,"oldContent":"}"},{"type":"DELETE","lineNumber":832,"oldContent":"        }"},{"type":"DELETE","lineNumber":833,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":834,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":835,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":836,"oldContent":"            try {"},{"type":"DELETE","lineNumber":837,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":838,"oldContent":"    "},{"type":"DELETE","lineNumber":839,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":833,"content":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"INSERT","lineNumber":834,"content":"            "},{"type":"INSERT","lineNumber":835,"content":"            // Stoppe Navigation"},{"type":"INSERT","lineNumber":836,"content":"            stopNavigation()"},{"type":"INSERT","lineNumber":837,"content":"            "},{"type":"INSERT","lineNumber":838,"content":"            // Bereinige Ressourcen"},{"type":"INSERT","lineNumber":839,"content":"            arTrackingSystem?.resetTracking()"},{"type":"INSERT","lineNumber":840,"content":"            processedLandmarks.clear()"},{"type":"INSERT","lineNumber":841,"content":"            "},{"type":"DELETE","lineNumber":842,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":845,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":885,"oldContent":"     */"},{"type":"INSERT","lineNumber":887,"content":"            "},{"type":"DELETE","lineNumber":987,"oldContent":"                "},{"type":"DELETE","lineNumber":988,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":989,"oldContent":"                "},{"type":"DELETE","lineNumber":990,"oldContent":"     */"},{"type":"DELETE","lineNumber":991,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":992,"oldContent":"    /**"},{"type":"DELETE","lineNumber":993,"oldContent":""},{"type":"DELETE","lineNumber":994,"oldContent":""},{"type":"DELETE","lineNumber":996,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":997,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":998,"oldContent":"    "},{"type":"INSERT","lineNumber":990,"content":"    /**"},{"type":"INSERT","lineNumber":991,"content":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":992,"content":"     */"},{"type":"INSERT","lineNumber":993,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":994,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":995,"content":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":996,"content":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":997,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":998,"content":"            }"},{"type":"INSERT","lineNumber":999,"content":"        }"},{"type":"DELETE","lineNumber":1000,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":1001,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":1002,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1004,"oldContent":"    }"},{"type":"DELETE","lineNumber":1005,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1006,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":1007,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":1008,"oldContent":"    }"},{"type":"DELETE","lineNumber":1009,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1011,"oldContent":"        }"},{"type":"DELETE","lineNumber":1012,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":1013,"oldContent":"                "},{"type":"INSERT","lineNumber":1003,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"DELETE","lineNumber":1015,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":1016,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1017,"oldContent":""},{"type":"DELETE","lineNumber":1018,"oldContent":""},{"type":"INSERT","lineNumber":1005,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1006,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1007,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":1008,"content":"    }"},{"type":"INSERT","lineNumber":1010,"content":"    /**"},{"type":"INSERT","lineNumber":1011,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":1012,"content":"     */"},{"type":"INSERT","lineNumber":1013,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1014,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":1015,"content":"        "},{"type":"INSERT","lineNumber":1016,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1017,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":1018,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":1019,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1020,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":1021,"content":"                }"},{"type":"INSERT","lineNumber":1027,"content":""},{"type":"DELETE","lineNumber":1029,"oldContent":"    }"},{"type":"DELETE","lineNumber":1035,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1038,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1038,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":1039,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"MODIFY","lineNumber":1041,"content":"    fun getCurrentStartPoint(): String {","oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1042,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":1043,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1045,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":1046,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"MODIFY","lineNumber":1047,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")","oldContent":"    "},{"type":"INSERT","lineNumber":1048,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":1050,"content":"    "},{"type":"DELETE","lineNumber":1050,"oldContent":"    }"},{"type":"INSERT","lineNumber":1052,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1053,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1052,"oldContent":""},{"type":"DELETE","lineNumber":1053,"oldContent":"    "},{"type":"INSERT","lineNumber":1055,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1057,"content":"    "},{"type":"INSERT","lineNumber":1058,"content":""}]},{"timestamp":1754564489489,"changes":[{"type":"MODIFY","lineNumber":21,"content":"// Note: These classes are defined in the same package, so imports are not strictly needed","oldContent":"/**"},{"type":"INSERT","lineNumber":22,"content":"// but adding them for clarity and to avoid potential issues"},{"type":"INSERT","lineNumber":24,"content":"/**"},{"type":"DELETE","lineNumber":36,"oldContent":"    private var featureMatchingEngine: FeatureMatchingEngine? = null"},{"type":"INSERT","lineNumber":39,"content":"    private var featureMatchingEngine: FeatureMatchingEngine? = null"},{"type":"DELETE","lineNumber":43,"oldContent":"    // Flag für echtes vs. simuliertes Feature-Matching"},{"type":"INSERT","lineNumber":46,"content":"    // Flag für echtes vs. simuliertes Feature-Matching"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"MODIFY","lineNumber":65,"content":"    // State für aktuellen Navigationsschritt","oldContent":"                val step = NavigationStep("},{"type":"INSERT","lineNumber":66,"content":"    private val _currentNavigationStep = MutableStateFlow(1)"},{"type":"DELETE","lineNumber":68,"oldContent":"                    landmarkIds = landmarkIds"},{"type":"DELETE","lineNumber":69,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"                stepNumber++"},{"type":"DELETE","lineNumber":71,"oldContent":"        }"},{"type":"DELETE","lineNumber":72,"oldContent":"        return NavigationRoute("},{"type":"DELETE","lineNumber":73,"oldContent":"            steps = steps"},{"type":"DELETE","lineNumber":74,"oldContent":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"    // Optional: Für Debugging - die alte Logging-Funktion angepasst"},{"type":"DELETE","lineNumber":76,"oldContent":"        Log.i(TAG, \"=== NAVIGATION ROUTE START ===\")"},{"type":"DELETE","lineNumber":77,"oldContent":"        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")"},{"type":"INSERT","lineNumber":70,"content":"     * Initialisiert die RouteViewModel mit dem gegebenen Context"},{"type":"INSERT","lineNumber":71,"content":"     */"},{"type":"INSERT","lineNumber":72,"content":"    fun initialize(context: Context) {"},{"type":"INSERT","lineNumber":73,"content":"        try {"},{"type":"INSERT","lineNumber":74,"content":"            Log.i(TAG, \"Initialisiere RouteViewModel...\")"},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"INSERT","lineNumber":76,"content":"            // Initialisiere RouteRepository"},{"type":"INSERT","lineNumber":77,"content":"            if (routeRepository == null) {"},{"type":"INSERT","lineNumber":78,"content":"                routeRepository = RouteRepository(context)"},{"type":"INSERT","lineNumber":79,"content":"                Log.d(TAG, \"RouteRepository initialisiert\")"},{"type":"DELETE","lineNumber":155,"oldContent":"            Log.d(TAG, \"Schritt ${index + 1}: ${step.instruction}\")"},{"type":"INSERT","lineNumber":158,"content":"            Log.d(TAG, \"Schritt ${index + 1}: ${step.instruction}\")"},{"type":"DELETE","lineNumber":162,"oldContent":"    /**"},{"type":"INSERT","lineNumber":167,"content":"    }"},{"type":"DELETE","lineNumber":169,"oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"INSERT","lineNumber":172,"content":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":206,"oldContent":"                "},{"type":"INSERT","lineNumber":209,"content":"                "},{"type":"DELETE","lineNumber":212,"oldContent":"                        floor = floor,"},{"type":"INSERT","lineNumber":215,"content":"                        floor = floor,"},{"type":"DELETE","lineNumber":235,"oldContent":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"INSERT","lineNumber":238,"content":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"DELETE","lineNumber":242,"oldContent":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"INSERT","lineNumber":245,"content":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"DELETE","lineNumber":276,"oldContent":"}"},{"type":"DELETE","lineNumber":277,"oldContent":"                // Prüfe verfügbare Bilder im Projektverzeichnis"},{"type":"INSERT","lineNumber":278,"content":"                }"},{"type":"INSERT","lineNumber":280,"content":"                // Prüfe verfügbare Bilder im Projektverzeichnis"},{"type":"DELETE","lineNumber":281,"oldContent":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"INSERT","lineNumber":284,"content":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"DELETE","lineNumber":291,"oldContent":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":294,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":296,"content":"                "},{"type":"DELETE","lineNumber":296,"oldContent":"                "},{"type":"DELETE","lineNumber":301,"oldContent":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"INSERT","lineNumber":304,"content":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"DELETE","lineNumber":407,"oldContent":"                )"},{"type":"INSERT","lineNumber":410,"content":"                )"},{"type":"DELETE","lineNumber":412,"oldContent":"                        true"},{"type":"INSERT","lineNumber":415,"content":"                        true"},{"type":"DELETE","lineNumber":435,"oldContent":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":438,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":484,"oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":487,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":500,"oldContent":"        }"},{"type":"DELETE","lineNumber":501,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":502,"oldContent":"            // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":503,"oldContent":"        try {"},{"type":"DELETE","lineNumber":504,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":505,"oldContent":""},{"type":"DELETE","lineNumber":506,"oldContent":""},{"type":"INSERT","lineNumber":502,"content":"                    val landmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":503,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"INSERT","lineNumber":504,"content":"                    "},{"type":"INSERT","lineNumber":505,"content":"                    val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":506,"content":"                    Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":507,"content":"                } else {"},{"type":"INSERT","lineNumber":508,"content":"                    Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":532,"oldContent":"        landmarkId: String,"},{"type":"INSERT","lineNumber":535,"content":"        landmarkId: String,"},{"type":"DELETE","lineNumber":601,"oldContent":"        }"},{"type":"DELETE","lineNumber":602,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"INSERT","lineNumber":603,"content":"                "},{"type":"INSERT","lineNumber":605,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":606,"oldContent":"    "},{"type":"INSERT","lineNumber":609,"content":"    "},{"type":"DELETE","lineNumber":612,"oldContent":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"INSERT","lineNumber":615,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"DELETE","lineNumber":617,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":618,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":619,"content":"        if (!_isFeatureMappingEnabled.value) {"},{"type":"INSERT","lineNumber":620,"content":"            return"},{"type":"DELETE","lineNumber":626,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":627,"oldContent":"            try {"},{"type":"INSERT","lineNumber":630,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":631,"content":"            try {"},{"type":"DELETE","lineNumber":652,"oldContent":"                "},{"type":"INSERT","lineNumber":655,"content":"                "},{"type":"DELETE","lineNumber":665,"oldContent":"        "},{"type":"INSERT","lineNumber":668,"content":"        "},{"type":"DELETE","lineNumber":695,"oldContent":"                            )"},{"type":"INSERT","lineNumber":698,"content":"                            )"},{"type":"DELETE","lineNumber":730,"oldContent":"        if (!enabled) {"},{"type":"INSERT","lineNumber":733,"content":"        if (!enabled) {"},{"type":"DELETE","lineNumber":741,"oldContent":"        "},{"type":"DELETE","lineNumber":743,"oldContent":"        _currentNavigationStep.value = validStep"},{"type":"INSERT","lineNumber":745,"content":"        _currentNavigationStep.value = validStep"},{"type":"INSERT","lineNumber":747,"content":"        "},{"type":"DELETE","lineNumber":756,"oldContent":"     */"},{"type":"INSERT","lineNumber":759,"content":"     */"},{"type":"INSERT","lineNumber":770,"content":"    }"},{"type":"INSERT","lineNumber":771,"content":"    "},{"type":"INSERT","lineNumber":772,"content":"    /**"},{"type":"DELETE","lineNumber":778,"oldContent":"    }"},{"type":"DELETE","lineNumber":780,"oldContent":"    "},{"type":"DELETE","lineNumber":782,"oldContent":"    /**"},{"type":"DELETE","lineNumber":784,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":787,"content":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":819,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":820,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"MODIFY","lineNumber":821,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")","oldContent":"    "},{"type":"INSERT","lineNumber":822,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":823,"content":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"INSERT","lineNumber":824,"content":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":825,"content":"            appendLine(\"=== Ende Status ===\")"},{"type":"INSERT","lineNumber":826,"content":"        }"},{"type":"DELETE","lineNumber":823,"oldContent":"            }"},{"type":"DELETE","lineNumber":824,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":825,"oldContent":"            val currentRoute = _currentRoute.value"},{"type":"DELETE","lineNumber":826,"oldContent":"    fun updateLandmarksForCurrentRoute() {"},{"type":"DELETE","lineNumber":827,"oldContent":"     */"},{"type":"INSERT","lineNumber":828,"content":"    "},{"type":"INSERT","lineNumber":830,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":830,"oldContent":"    }"},{"type":"DELETE","lineNumber":831,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":832,"content":"    override fun onCleared() {","oldContent":"    "},{"type":"INSERT","lineNumber":833,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":834,"content":"        try {"},{"type":"DELETE","lineNumber":841,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":844,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":845,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":848,"content":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":887,"oldContent":"            // Test 5: Status ausgeben"},{"type":"INSERT","lineNumber":890,"content":"            // Test 5: Status ausgeben"},{"type":"DELETE","lineNumber":979,"oldContent":"    "},{"type":"DELETE","lineNumber":980,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":981,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":982,"oldContent":"        }"},{"type":"DELETE","lineNumber":983,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":984,"oldContent":"                "},{"type":"INSERT","lineNumber":981,"content":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":986,"oldContent":""},{"type":"INSERT","lineNumber":983,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":984,"content":"        try {"},{"type":"INSERT","lineNumber":985,"content":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":986,"content":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":987,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":988,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":989,"content":"        }"},{"type":"INSERT","lineNumber":990,"content":"    }"},{"type":"DELETE","lineNumber":988,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":995,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":1000,"oldContent":""},{"type":"INSERT","lineNumber":1002,"content":"    }"},{"type":"INSERT","lineNumber":1003,"content":"    "},{"type":"INSERT","lineNumber":1004,"content":"    /**"},{"type":"DELETE","lineNumber":1002,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1006,"content":"     */"},{"type":"DELETE","lineNumber":1007,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1012,"content":"    /**"},{"type":"DELETE","lineNumber":1013,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1019,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1021,"oldContent":"            }"},{"type":"INSERT","lineNumber":1024,"content":"            }"},{"type":"DELETE","lineNumber":1026,"oldContent":"    "},{"type":"INSERT","lineNumber":1028,"content":"    }"},{"type":"INSERT","lineNumber":1029,"content":""},{"type":"DELETE","lineNumber":1029,"oldContent":""},{"type":"INSERT","lineNumber":1035,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1035,"oldContent":"    "},{"type":"DELETE","lineNumber":1038,"oldContent":"    "},{"type":"DELETE","lineNumber":1040,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1041,"content":"    }"},{"type":"INSERT","lineNumber":1042,"content":"    "},{"type":"DELETE","lineNumber":1043,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1047,"content":"    "},{"type":"DELETE","lineNumber":1049,"oldContent":"}"},{"type":"DELETE","lineNumber":1050,"oldContent":""},{"type":"MODIFY","lineNumber":1052,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":1053,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1055,"oldContent":"    "},{"type":"INSERT","lineNumber":1056,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1058,"content":"    }"},{"type":"INSERT","lineNumber":1059,"content":"    "},{"type":"INSERT","lineNumber":1060,"content":""},{"type":"INSERT","lineNumber":1061,"content":"}"}]},{"timestamp":1754564499222,"changes":[{"type":"MODIFY","lineNumber":25,"content":" * ViewModel für Route-Management und Feature-Mapping","oldContent":" * ViewModel für Route-Management und Feature-Mapping"},{"type":"MODIFY","lineNumber":40,"content":"    private var landmarkFeatureStorage: LandmarkFeatureStorage? = null","oldContent":"    private var landmarkFeatureStorage: LandmarkFeatureStorage? = null"},{"type":"MODIFY","lineNumber":47,"content":"    private var useRealFeatureMatching = true","oldContent":"    private var useRealFeatureMatching = true"},{"type":"DELETE","lineNumber":51,"oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":51,"content":"    // State für geladene Route aus JSON","oldContent":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"INSERT","lineNumber":52,"content":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)"},{"type":"DELETE","lineNumber":65,"oldContent":"                val step = NavigationStep("},{"type":"DELETE","lineNumber":68,"oldContent":"                    instruction = routePart.instructionDe,"},{"type":"DELETE","lineNumber":69,"oldContent":"                    building = pathItem.xmlName,"},{"type":"INSERT","lineNumber":67,"content":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"    /**"},{"type":"MODIFY","lineNumber":80,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":124,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":125,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"        }"},{"type":"DELETE","lineNumber":128,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":129,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":130,"oldContent":"    "},{"type":"DELETE","lineNumber":131,"oldContent":"        }"},{"type":"INSERT","lineNumber":124,"content":"                    } else {"},{"type":"INSERT","lineNumber":125,"content":"                        Log.w(TAG, \"Keine Route in JSON-Datei gefunden\")"},{"type":"INSERT","lineNumber":126,"content":"                    }"},{"type":"INSERT","lineNumber":127,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":128,"content":"                    Log.e(TAG, \"Fehler beim Laden der Route in Coroutine: ${e.message}\")"},{"type":"INSERT","lineNumber":130,"content":"            }"},{"type":"INSERT","lineNumber":131,"content":"            "},{"type":"INSERT","lineNumber":132,"content":"            // Erstelle eine Standard-Route für sofortige Rückgabe"},{"type":"MODIFY","lineNumber":159,"content":"            Log.d(TAG, \"  - Building: ${step.building}\")","oldContent":"            Log.d(TAG, \"  - Building: ${step.building}\")"},{"type":"MODIFY","lineNumber":168,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":173,"content":"        val steps = mutableListOf<NavigationStep>()","oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"MODIFY","lineNumber":210,"content":"                steps.add(","oldContent":"                steps.add("},{"type":"MODIFY","lineNumber":216,"content":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs","oldContent":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"MODIFY","lineNumber":239,"content":"        )","oldContent":"        )"},{"type":"MODIFY","lineNumber":246,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":281,"content":"                val availableLandmarks = storageManager!!.getAvailableProjectLandmarks()","oldContent":"                val availableLandmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"MODIFY","lineNumber":285,"content":"                    Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")","oldContent":"                    Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")"},{"type":"MODIFY","lineNumber":295,"content":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()","oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"INSERT","lineNumber":296,"content":"                "},{"type":"DELETE","lineNumber":298,"oldContent":"                "},{"type":"MODIFY","lineNumber":305,"content":"                ","oldContent":"                "},{"type":"MODIFY","lineNumber":336,"content":"                ","oldContent":"            }"},{"type":"DELETE","lineNumber":379,"oldContent":"}"},{"type":"DELETE","lineNumber":380,"oldContent":"    }"},{"type":"DELETE","lineNumber":381,"oldContent":"        }"},{"type":"INSERT","lineNumber":379,"content":"            } else {"},{"type":"INSERT","lineNumber":380,"content":"                Log.w(TAG, \"Landmark-Thumbnail nicht gefunden: $landmarkId\")"},{"type":"DELETE","lineNumber":383,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":382,"content":"            thumbnail"},{"type":"INSERT","lineNumber":383,"content":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":411,"content":"                ","oldContent":"                "},{"type":"MODIFY","lineNumber":416,"content":"                    }","oldContent":"                    }"},{"type":"MODIFY","lineNumber":439,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":456,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":457,"oldContent":"            Log.i(TAG, \"Vorheriger Schritt: ${currentStep - 1}\")"},{"type":"INSERT","lineNumber":456,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":457,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"MODIFY","lineNumber":488,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":509,"content":"                }","oldContent":"                }"},{"type":"MODIFY","lineNumber":536,"content":"        name: String,","oldContent":"        name: String,"},{"type":"MODIFY","lineNumber":592,"content":"                    )","oldContent":"    "},{"type":"DELETE","lineNumber":598,"oldContent":"        }"},{"type":"DELETE","lineNumber":599,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":600,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":601,"oldContent":"            Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":598,"content":"                    steps = demoSteps"},{"type":"INSERT","lineNumber":599,"content":"                )"},{"type":"INSERT","lineNumber":600,"content":"                "},{"type":"INSERT","lineNumber":601,"content":"                _featureNavigationRoute.value = featureRoute"},{"type":"MODIFY","lineNumber":606,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":610,"content":"    // Frame-Processing-Throttling","oldContent":"    // Frame-Processing-Throttling"},{"type":"MODIFY","lineNumber":616,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":621,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":632,"content":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {","oldContent":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"MODIFY","lineNumber":656,"content":"            } catch (e: Exception) {","oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":668,"oldContent":"            }"},{"type":"DELETE","lineNumber":670,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":671,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":669,"content":"        try {"},{"type":"INSERT","lineNumber":670,"content":"            val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":671,"content":"            if (currentStep > 0 && currentStep <= steps.size) {"},{"type":"MODIFY","lineNumber":699,"content":"                        )","oldContent":"                        )"},{"type":"MODIFY","lineNumber":734,"content":"            _currentMatches.value = emptyList()","oldContent":"            _currentMatches.value = emptyList()"},{"type":"MODIFY","lineNumber":748,"content":"        // Aktualisiere Matches für den neuen Schritt","oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"MODIFY","lineNumber":751,"content":"                val simulatedMatches = generateSimulatedMatches(_currentRoute.value!!, validStep)","oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"MODIFY","lineNumber":760,"content":"    fun nextNavigationStep() {","oldContent":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":770,"content":"    }"},{"type":"INSERT","lineNumber":771,"content":"    "},{"type":"INSERT","lineNumber":772,"content":"    /**"},{"type":"DELETE","lineNumber":772,"oldContent":"    }"},{"type":"DELETE","lineNumber":774,"oldContent":"    "},{"type":"DELETE","lineNumber":776,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":788,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":796,"content":"     * Stoppt die Navigation","oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":797,"content":"     */"},{"type":"INSERT","lineNumber":798,"content":"    fun stopNavigation() {"},{"type":"INSERT","lineNumber":799,"content":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"INSERT","lineNumber":800,"content":"        setFeatureMappingEnabled(false)"},{"type":"INSERT","lineNumber":801,"content":"        _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":798,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":800,"oldContent":"    }"},{"type":"DELETE","lineNumber":801,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":802,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":803,"oldContent":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"MODIFY","lineNumber":804,"content":"    /**","oldContent":"        try {"},{"type":"INSERT","lineNumber":805,"content":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"DELETE","lineNumber":806,"oldContent":""},{"type":"DELETE","lineNumber":807,"oldContent":""},{"type":"DELETE","lineNumber":808,"oldContent":"    }"},{"type":"DELETE","lineNumber":809,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":810,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":811,"oldContent":"                emptyList()"},{"type":"INSERT","lineNumber":807,"content":"    fun getStatus(): String {"},{"type":"INSERT","lineNumber":808,"content":"        val route = _currentRoute.value"},{"type":"INSERT","lineNumber":809,"content":"        val step = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":810,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":811,"content":"        val matchesCount = _currentMatches.value.size"},{"type":"DELETE","lineNumber":823,"oldContent":"    /**"},{"type":"INSERT","lineNumber":827,"content":"    }"},{"type":"DELETE","lineNumber":829,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":830,"oldContent":"            "},{"type":"INSERT","lineNumber":829,"content":"    /**"},{"type":"INSERT","lineNumber":831,"content":"     */"},{"type":"MODIFY","lineNumber":835,"content":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")","oldContent":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"MODIFY","lineNumber":845,"content":"            featureMatchingEngine?.cleanup()","oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"MODIFY","lineNumber":849,"content":"                try {","oldContent":"                try {"},{"type":"MODIFY","lineNumber":891,"content":"            Log.i(TAG, getStatus())","oldContent":"            Log.i(TAG, getStatus())"},{"type":"MODIFY","lineNumber":916,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String","oldContent":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"DELETE","lineNumber":919,"oldContent":"                                id = landmark, // String aus JSON"},{"type":"DELETE","lineNumber":920,"oldContent":"                                name = landmark,"},{"type":"INSERT","lineNumber":919,"content":"                                id = landmark.id, // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":920,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id,"},{"type":"INSERT","lineNumber":982,"content":"     */"},{"type":"DELETE","lineNumber":985,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":988,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"MODIFY","lineNumber":991,"content":"    ","oldContent":"    /**"},{"type":"INSERT","lineNumber":992,"content":"    /**"},{"type":"DELETE","lineNumber":1002,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"MODIFY","lineNumber":1005,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)","oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1006,"content":"     */"},{"type":"INSERT","lineNumber":1007,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1009,"oldContent":"     */"},{"type":"INSERT","lineNumber":1012,"content":"    /**"},{"type":"DELETE","lineNumber":1015,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":1025,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":1028,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":1030,"content":"    /**","oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":1031,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"MODIFY","lineNumber":1034,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")","oldContent":""},{"type":"INSERT","lineNumber":1035,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1036,"content":"    }"},{"type":"DELETE","lineNumber":1036,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1038,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1039,"content":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"DELETE","lineNumber":1038,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":1039,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":1040,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1042,"oldContent":""},{"type":"INSERT","lineNumber":1043,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1044,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":1045,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":1046,"content":"    }"},{"type":"DELETE","lineNumber":1045,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1048,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1049,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":1050,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":1051,"content":"    }"},{"type":"INSERT","lineNumber":1052,"content":"    "},{"type":"INSERT","lineNumber":1054,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1055,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1056,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1057,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1058,"content":"    }"},{"type":"INSERT","lineNumber":1060,"content":""},{"type":"INSERT","lineNumber":1061,"content":"}"}]},{"timestamp":1754564521341,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import com.example.arwalking.storage.CleanupSummary","oldContent":"    private val TAG = \"RouteViewModel\""},{"type":"INSERT","lineNumber":24,"content":"/**"},{"type":"DELETE","lineNumber":25,"oldContent":" * ViewModel für Route-Management und Feature-Mapping"},{"type":"INSERT","lineNumber":39,"content":"    private var featureMatchingEngine: FeatureMatchingEngine? = null"},{"type":"DELETE","lineNumber":40,"oldContent":"    private var landmarkFeatureStorage: LandmarkFeatureStorage? = null"},{"type":"INSERT","lineNumber":46,"content":"    // Flag für echtes vs. simuliertes Feature-Matching"},{"type":"DELETE","lineNumber":47,"oldContent":"    private var useRealFeatureMatching = true"},{"type":"MODIFY","lineNumber":52,"content":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)","oldContent":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"MODIFY","lineNumber":67,"content":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()","oldContent":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()"},{"type":"INSERT","lineNumber":79,"content":"                Log.d(TAG, \"RouteRepository initialisiert\")"},{"type":"DELETE","lineNumber":80,"oldContent":"            }"},{"type":"DELETE","lineNumber":84,"oldContent":"        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")"},{"type":"DELETE","lineNumber":85,"oldContent":"                Log.i(TAG, \"  Landmark IDs: ${step.landmarkIds.joinToString(\", \")}\")"},{"type":"DELETE","lineNumber":86,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":87,"oldContent":"            }"},{"type":"INSERT","lineNumber":84,"content":"            "},{"type":"INSERT","lineNumber":85,"content":"            Log.i(TAG, \"RouteViewModel erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":86,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":87,"content":"            Log.e(TAG, \"Fehler bei der Initialisierung: ${e.message}\")"},{"type":"MODIFY","lineNumber":90,"content":"    ","oldContent":""},{"type":"INSERT","lineNumber":129,"content":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"INSERT","lineNumber":158,"content":"            Log.d(TAG, \"Schritt ${index + 1}: ${step.instruction}\")"},{"type":"DELETE","lineNumber":159,"oldContent":"            Log.d(TAG, \"  - Building: ${step.building}\")"},{"type":"INSERT","lineNumber":167,"content":"    }"},{"type":"DELETE","lineNumber":168,"oldContent":"    "},{"type":"INSERT","lineNumber":172,"content":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":173,"oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"INSERT","lineNumber":209,"content":"                "},{"type":"DELETE","lineNumber":210,"oldContent":"                steps.add("},{"type":"INSERT","lineNumber":215,"content":"                        floor = floor,"},{"type":"DELETE","lineNumber":216,"oldContent":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs"},{"type":"INSERT","lineNumber":238,"content":"            estimatedTime = steps.sumOf { it.estimatedTime }"},{"type":"DELETE","lineNumber":239,"oldContent":"        )"},{"type":"INSERT","lineNumber":245,"content":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"DELETE","lineNumber":246,"oldContent":"     */"},{"type":"MODIFY","lineNumber":265,"content":"                ","oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":280,"content":"                // Prüfe verfügbare Bilder im Projektverzeichnis"},{"type":"DELETE","lineNumber":281,"oldContent":"                val availableLandmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":284,"content":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"DELETE","lineNumber":285,"oldContent":"                    Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")"},{"type":"INSERT","lineNumber":294,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":295,"oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"MODIFY","lineNumber":304,"content":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")","oldContent":"            }"},{"type":"DELETE","lineNumber":306,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":307,"oldContent":"            "},{"type":"DELETE","lineNumber":308,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":306,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":307,"content":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"INSERT","lineNumber":308,"content":"                _isFeatureMappingEnabled.value = false"},{"type":"MODIFY","lineNumber":378,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")","oldContent":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":381,"content":"            }"},{"type":"DELETE","lineNumber":382,"oldContent":"                        }"},{"type":"INSERT","lineNumber":410,"content":"                )"},{"type":"DELETE","lineNumber":411,"oldContent":"                "},{"type":"INSERT","lineNumber":415,"content":"                        true"},{"type":"DELETE","lineNumber":416,"oldContent":"                    }"},{"type":"INSERT","lineNumber":438,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"DELETE","lineNumber":439,"oldContent":"     */"},{"type":"DELETE","lineNumber":442,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":443,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":444,"oldContent":"    "},{"type":"INSERT","lineNumber":442,"content":"                android.os.Build.FINGERPRINT.startsWith(\"unknown\") ||"},{"type":"INSERT","lineNumber":443,"content":"                android.os.Build.MODEL.contains(\"google_sdk\") ||"},{"type":"INSERT","lineNumber":444,"content":"                android.os.Build.MODEL.contains(\"Emulator\") ||"},{"type":"DELETE","lineNumber":480,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":481,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":480,"content":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":481,"content":"        } else {"},{"type":"INSERT","lineNumber":487,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":488,"oldContent":"     */"},{"type":"DELETE","lineNumber":491,"oldContent":"            }"},{"type":"MODIFY","lineNumber":491,"content":"    }","oldContent":"                }"},{"type":"INSERT","lineNumber":492,"content":"    "},{"type":"DELETE","lineNumber":494,"oldContent":"                        )"},{"type":"DELETE","lineNumber":495,"oldContent":"                            )"},{"type":"DELETE","lineNumber":496,"oldContent":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":494,"content":"     * Lädt verfügbare Landmarks aus dem Storage-System"},{"type":"INSERT","lineNumber":495,"content":"     */"},{"type":"INSERT","lineNumber":496,"content":"    private fun loadAvailableStorageData() {"},{"type":"INSERT","lineNumber":508,"content":"                    Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":509,"oldContent":"                }"},{"type":"INSERT","lineNumber":535,"content":"        landmarkId: String,"},{"type":"DELETE","lineNumber":536,"oldContent":"        name: String,"},{"type":"DELETE","lineNumber":582,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":583,"oldContent":"            try {"},{"type":"DELETE","lineNumber":584,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":585,"oldContent":"        super.onCleared()"},{"type":"INSERT","lineNumber":582,"content":"                    ),"},{"type":"INSERT","lineNumber":583,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":584,"content":"                        stepNumber = 3,"},{"type":"INSERT","lineNumber":585,"content":"                        instruction = \"Gehen Sie die Treppe hoch zu Stockwerk $floor\","},{"type":"DELETE","lineNumber":588,"oldContent":"    }"},{"type":"DELETE","lineNumber":589,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":588,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":589,"content":"                        stepNumber = 4,"},{"type":"INSERT","lineNumber":605,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":606,"oldContent":"            }"},{"type":"INSERT","lineNumber":609,"content":"    "},{"type":"DELETE","lineNumber":610,"oldContent":"    // Frame-Processing-Throttling"},{"type":"INSERT","lineNumber":615,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"DELETE","lineNumber":616,"oldContent":"     */"},{"type":"INSERT","lineNumber":620,"content":"            return"},{"type":"DELETE","lineNumber":621,"oldContent":"        }"},{"type":"INSERT","lineNumber":631,"content":"            try {"},{"type":"DELETE","lineNumber":632,"oldContent":"                val matches = if (useRealFeatureMatching && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":655,"content":"                "},{"type":"DELETE","lineNumber":656,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":669,"content":"        try {","oldContent":"        try {"},{"type":"INSERT","lineNumber":698,"content":"                            )"},{"type":"DELETE","lineNumber":699,"oldContent":"                        )"},{"type":"INSERT","lineNumber":733,"content":"        if (!enabled) {"},{"type":"DELETE","lineNumber":734,"oldContent":"            _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":747,"content":"        "},{"type":"DELETE","lineNumber":748,"oldContent":"        // Aktualisiere Matches für den neuen Schritt"},{"type":"INSERT","lineNumber":759,"content":"     */"},{"type":"DELETE","lineNumber":760,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":771,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"MODIFY","lineNumber":773,"content":"     * Geht zum vorherigen Navigationsschritt","oldContent":"     */"},{"type":"INSERT","lineNumber":774,"content":"     */"},{"type":"INSERT","lineNumber":787,"content":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":788,"oldContent":"     */"},{"type":"DELETE","lineNumber":798,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"MODIFY","lineNumber":802,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":803,"content":"    "},{"type":"MODIFY","lineNumber":806,"content":"     */","oldContent":"    /**"},{"type":"MODIFY","lineNumber":827,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":831,"content":"     */","oldContent":"     */"},{"type":"INSERT","lineNumber":834,"content":"        try {"},{"type":"DELETE","lineNumber":835,"oldContent":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"INSERT","lineNumber":844,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":845,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":848,"content":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":849,"oldContent":"                try {"},{"type":"DELETE","lineNumber":882,"oldContent":"}"},{"type":"DELETE","lineNumber":883,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":884,"oldContent":"     */"},{"type":"DELETE","lineNumber":885,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":886,"oldContent":""},{"type":"DELETE","lineNumber":887,"oldContent":"    "},{"type":"DELETE","lineNumber":888,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":882,"content":"            // Test 3: Feature-Mapping aktivieren"},{"type":"INSERT","lineNumber":883,"content":"            setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":884,"content":"            Log.d(TAG, \"✓ Feature-Mapping aktiviert\")"},{"type":"DELETE","lineNumber":890,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":886,"content":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":887,"content":"            startNavigation()"},{"type":"INSERT","lineNumber":888,"content":"            Log.d(TAG, \"✓ Navigation gestartet\")"},{"type":"INSERT","lineNumber":889,"content":"            "},{"type":"INSERT","lineNumber":890,"content":"            // Test 5: Status ausgeben"},{"type":"DELETE","lineNumber":892,"oldContent":"    "},{"type":"DELETE","lineNumber":893,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":894,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":892,"content":"            "},{"type":"INSERT","lineNumber":893,"content":"            Log.i(TAG, \"=== Self-Test erfolgreich ===\")"},{"type":"INSERT","lineNumber":894,"content":"            true"},{"type":"INSERT","lineNumber":895,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":896,"content":"            Log.e(TAG, \"=== Self-Test fehlgeschlagen: ${e.message} ===\")"},{"type":"INSERT","lineNumber":897,"content":"            false"},{"type":"INSERT","lineNumber":898,"content":"        }"},{"type":"DELETE","lineNumber":896,"oldContent":"    /**"},{"type":"DELETE","lineNumber":897,"oldContent":""},{"type":"DELETE","lineNumber":898,"oldContent":""},{"type":"DELETE","lineNumber":899,"oldContent":"    }"},{"type":"MODIFY","lineNumber":969,"content":"            } else {","oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":970,"content":"                emptyList()"},{"type":"INSERT","lineNumber":971,"content":"            }"},{"type":"INSERT","lineNumber":972,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":973,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":974,"content":"            emptyList()"},{"type":"INSERT","lineNumber":975,"content":"        }"},{"type":"DELETE","lineNumber":971,"oldContent":"    }"},{"type":"DELETE","lineNumber":972,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":973,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":974,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":975,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":976,"oldContent":"    }"},{"type":"DELETE","lineNumber":977,"oldContent":"    "},{"type":"DELETE","lineNumber":978,"oldContent":"    }"},{"type":"DELETE","lineNumber":979,"oldContent":"    "},{"type":"DELETE","lineNumber":980,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":977,"content":""},{"type":"INSERT","lineNumber":978,"content":""},{"type":"INSERT","lineNumber":979,"content":""},{"type":"INSERT","lineNumber":980,"content":"    /**"},{"type":"INSERT","lineNumber":990,"content":"    }"},{"type":"DELETE","lineNumber":992,"oldContent":"    }"},{"type":"INSERT","lineNumber":1004,"content":"    /**"},{"type":"DELETE","lineNumber":1006,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":1011,"content":"    ","oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"MODIFY","lineNumber":1022,"content":"                    landmarkIds.add(landmark.id) // landmarks ist List<RouteLandmarkData>, verwende .id","oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"MODIFY","lineNumber":1024,"content":"            }","oldContent":"    "},{"type":"DELETE","lineNumber":1026,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":1027,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":1026,"content":"        "},{"type":"INSERT","lineNumber":1027,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":1029,"content":""},{"type":"DELETE","lineNumber":1031,"oldContent":""},{"type":"DELETE","lineNumber":1032,"oldContent":""},{"type":"DELETE","lineNumber":1033,"oldContent":"    "},{"type":"INSERT","lineNumber":1032,"content":"     */"},{"type":"INSERT","lineNumber":1033,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":1036,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1038,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1037,"content":"    "},{"type":"DELETE","lineNumber":1041,"oldContent":""},{"type":"INSERT","lineNumber":1040,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1041,"content":"    }"},{"type":"INSERT","lineNumber":1042,"content":"    "},{"type":"DELETE","lineNumber":1043,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":1045,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1048,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"MODIFY","lineNumber":1051,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":1052,"content":"    "},{"type":"INSERT","lineNumber":1053,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":1054,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1055,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1056,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1057,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1058,"content":"    }"},{"type":"INSERT","lineNumber":1059,"content":"    "},{"type":"INSERT","lineNumber":1060,"content":""},{"type":"INSERT","lineNumber":1061,"content":"}"}]},{"timestamp":1754564531879,"changes":[{"type":"MODIFY","lineNumber":1,"content":"","oldContent":"package com.example.arwalking"},{"type":"DELETE","lineNumber":20,"oldContent":"// Missing imports for classes used in this file"},{"type":"DELETE","lineNumber":21,"oldContent":"// Note: These classes are defined in the same package, so imports are not strictly needed"},{"type":"DELETE","lineNumber":22,"oldContent":"// but adding them for clarity and to avoid potential issues"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"INSERT","lineNumber":62,"content":"    private val _currentNavigationStep = MutableStateFlow(1)"},{"type":"DELETE","lineNumber":67,"oldContent":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()"},{"type":"DELETE","lineNumber":88,"oldContent":"                Log.i(TAG, \"  Landmark IDs: ${step.landmarkIds.joinToString(\", \")}\")"},{"type":"DELETE","lineNumber":89,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":84,"content":"        }"},{"type":"INSERT","lineNumber":85,"content":"    }"},{"type":"DELETE","lineNumber":107,"oldContent":"        try {"},{"type":"DELETE","lineNumber":108,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":109,"oldContent":"    /**"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":111,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":112,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"DELETE","lineNumber":113,"oldContent":"            }"},{"type":"DELETE","lineNumber":114,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":115,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":116,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":117,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":118,"oldContent":"     */"},{"type":"DELETE","lineNumber":119,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":120,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":121,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":122,"oldContent":"            }"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":103,"content":"                    _currentRoute.value = routeData"},{"type":"INSERT","lineNumber":104,"content":"                    "},{"type":"INSERT","lineNumber":105,"content":"                    if (routeData != null) {"},{"type":"INSERT","lineNumber":106,"content":"                        Log.i(TAG, \"Route erfolgreich aus JSON geladen\")"},{"type":"INSERT","lineNumber":107,"content":"                        // Konvertiere RouteData zu NavigationRoute für Feature-Mapping"},{"type":"INSERT","lineNumber":108,"content":"                        val navigationRoute = convertToNavigationRoute(routeData)"},{"type":"INSERT","lineNumber":109,"content":"                        Log.i(TAG, \"Route konvertiert: ${navigationRoute.steps.size} Schritte\")"},{"type":"INSERT","lineNumber":110,"content":"                        "},{"type":"INSERT","lineNumber":111,"content":"                        // Logge Route-Details"},{"type":"INSERT","lineNumber":112,"content":"                        logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":113,"content":"                        "},{"type":"INSERT","lineNumber":114,"content":"                        // Setze ersten Schritt als aktiv"},{"type":"INSERT","lineNumber":115,"content":"                        _currentNavigationStep.value = 1"},{"type":"INSERT","lineNumber":116,"content":"                        "},{"type":"INSERT","lineNumber":117,"content":"                        // Aktiviere Feature-Mapping automatisch wenn Route geladen"},{"type":"INSERT","lineNumber":118,"content":"                        _isFeatureMappingEnabled.value = true"},{"type":"INSERT","lineNumber":119,"content":"                        "},{"type":"DELETE","lineNumber":133,"oldContent":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"DELETE","lineNumber":134,"oldContent":"     */"},{"type":"DELETE","lineNumber":135,"oldContent":"    /**"},{"type":"DELETE","lineNumber":136,"oldContent":"    }"},{"type":"DELETE","lineNumber":137,"oldContent":"        setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":138,"oldContent":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":129,"content":"            NavigationRoute("},{"type":"INSERT","lineNumber":130,"content":"                id = \"default_route\","},{"type":"INSERT","lineNumber":131,"content":"                name = \"Standard Route\","},{"type":"INSERT","lineNumber":132,"content":"                description = \"Lade Route...\","},{"type":"INSERT","lineNumber":133,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":134,"content":"                steps = emptyList()"},{"type":"DELETE","lineNumber":319,"oldContent":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":315,"content":"                Log.i(TAG, \"Lade verfügbare Landmarks aus Projektverzeichnis...\")"},{"type":"DELETE","lineNumber":321,"oldContent":"        }"},{"type":"DELETE","lineNumber":322,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":323,"oldContent":"            // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":324,"oldContent":"        try {"},{"type":"INSERT","lineNumber":317,"content":"                if (storageManager == null) {"},{"type":"INSERT","lineNumber":318,"content":"                    initializeStorage(context)"},{"type":"INSERT","lineNumber":319,"content":"                }"},{"type":"INSERT","lineNumber":320,"content":"                "},{"type":"DELETE","lineNumber":335,"oldContent":"                emptyList()"},{"type":"INSERT","lineNumber":331,"content":"                }"},{"type":"DELETE","lineNumber":376,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":377,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":372,"content":"            val thumbnail = storageManager!!.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":373,"content":"            if (thumbnail != null) {"},{"type":"DELETE","lineNumber":492,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":493,"oldContent":"    }"},{"type":"INSERT","lineNumber":488,"content":"    "},{"type":"INSERT","lineNumber":489,"content":"    /**"},{"type":"DELETE","lineNumber":501,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":497,"content":"                if (storageManager != null) {"},{"type":"DELETE","lineNumber":510,"oldContent":"        "},{"type":"INSERT","lineNumber":506,"content":"                "},{"type":"INSERT","lineNumber":507,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":508,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"INSERT","lineNumber":509,"content":"            }"},{"type":"DELETE","lineNumber":512,"oldContent":"                }"},{"type":"DELETE","lineNumber":513,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":514,"oldContent":"        for (pathItem in currentRoute.route.path) {"},{"type":"DELETE","lineNumber":515,"oldContent":"        "},{"type":"INSERT","lineNumber":511,"content":"    }"},{"type":"INSERT","lineNumber":664,"content":"        "},{"type":"DELETE","lineNumber":669,"oldContent":"        try {"},{"type":"DELETE","lineNumber":757,"oldContent":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":753,"content":"    /**"},{"type":"INSERT","lineNumber":768,"content":"    /**"},{"type":"DELETE","lineNumber":774,"oldContent":"    /**"},{"type":"DELETE","lineNumber":800,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":796,"content":"        setFeatureMappingEnabled(false)"},{"type":"INSERT","lineNumber":797,"content":"        _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":803,"oldContent":"        _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":822,"content":"        }"},{"type":"DELETE","lineNumber":827,"oldContent":"    }"},{"type":"INSERT","lineNumber":826,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":831,"oldContent":"     */"},{"type":"DELETE","lineNumber":880,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":881,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":876,"content":"            Log.d(TAG, \"✓ Route-Loading gestartet\")"},{"type":"INSERT","lineNumber":877,"content":"            "},{"type":"INSERT","lineNumber":881,"content":"            "},{"type":"DELETE","lineNumber":889,"oldContent":"            "},{"type":"DELETE","lineNumber":896,"oldContent":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":895,"content":"    }"},{"type":"DELETE","lineNumber":903,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":904,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":905,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":906,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":907,"oldContent":"    }"},{"type":"DELETE","lineNumber":908,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":909,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":910,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":911,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":912,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":899,"content":""},{"type":"DELETE","lineNumber":914,"oldContent":"    }"},{"type":"DELETE","lineNumber":915,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":901,"content":"    /**"},{"type":"INSERT","lineNumber":902,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":903,"content":"     */"},{"type":"INSERT","lineNumber":904,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":905,"content":"        return try {"},{"type":"INSERT","lineNumber":906,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":907,"content":"            "},{"type":"INSERT","lineNumber":908,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":909,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":910,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":911,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":917,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":918,"oldContent":"            }"},{"type":"INSERT","lineNumber":913,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":914,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":921,"oldContent":"            }"},{"type":"DELETE","lineNumber":922,"oldContent":"                }"},{"type":"INSERT","lineNumber":917,"content":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":918,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":926,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":927,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":928,"oldContent":"    "},{"type":"DELETE","lineNumber":929,"oldContent":"    "},{"type":"INSERT","lineNumber":922,"content":"                    }"},{"type":"INSERT","lineNumber":923,"content":"                }"},{"type":"INSERT","lineNumber":924,"content":"            }"},{"type":"INSERT","lineNumber":925,"content":"            "},{"type":"DELETE","lineNumber":938,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":939,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":940,"oldContent":"    "},{"type":"DELETE","lineNumber":941,"oldContent":"    "},{"type":"DELETE","lineNumber":942,"oldContent":"    }"},{"type":"INSERT","lineNumber":934,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":935,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":936,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":937,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":938,"content":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":954,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":955,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":950,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":951,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":952,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":953,"content":"            emptyList()"},{"type":"INSERT","lineNumber":954,"content":"        }"},{"type":"DELETE","lineNumber":957,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":958,"oldContent":"     */"},{"type":"DELETE","lineNumber":959,"oldContent":"    }"},{"type":"DELETE","lineNumber":963,"oldContent":"    }"},{"type":"DELETE","lineNumber":964,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":965,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":966,"oldContent":"    "},{"type":"DELETE","lineNumber":967,"oldContent":"    }"},{"type":"DELETE","lineNumber":968,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":959,"content":"     */"},{"type":"INSERT","lineNumber":960,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":961,"content":"        return try {"},{"type":"INSERT","lineNumber":962,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":963,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":964,"content":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":971,"oldContent":"                            )"},{"type":"INSERT","lineNumber":972,"content":"    }"},{"type":"DELETE","lineNumber":1014,"oldContent":"}"},{"type":"DELETE","lineNumber":1015,"oldContent":""},{"type":"DELETE","lineNumber":1016,"oldContent":"    "},{"type":"DELETE","lineNumber":1017,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1018,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1019,"oldContent":"    "},{"type":"DELETE","lineNumber":1020,"oldContent":"    "},{"type":"DELETE","lineNumber":1021,"oldContent":"    }"},{"type":"INSERT","lineNumber":1010,"content":"     */"},{"type":"INSERT","lineNumber":1011,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1012,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":1013,"content":"        "},{"type":"INSERT","lineNumber":1014,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1015,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":1016,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":1017,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1019,"content":"                }"},{"type":"DELETE","lineNumber":1024,"oldContent":"            }"},{"type":"DELETE","lineNumber":1028,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1024,"content":"    }"},{"type":"DELETE","lineNumber":1036,"oldContent":"    "},{"type":"INSERT","lineNumber":1033,"content":"    "},{"type":"DELETE","lineNumber":1039,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1036,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1043,"oldContent":""},{"type":"INSERT","lineNumber":1039,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1040,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":1041,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1045,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1046,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1043,"content":"    "},{"type":"INSERT","lineNumber":1044,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1045,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":1046,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":1047,"content":"    }"},{"type":"INSERT","lineNumber":1048,"content":"    "},{"type":"INSERT","lineNumber":1050,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":1051,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1052,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1053,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1054,"content":"    }"},{"type":"INSERT","lineNumber":1056,"content":""},{"type":"INSERT","lineNumber":1057,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/AndroidManifest.xml":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/AndroidManifest.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <!-- Camera Permissions -->\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n    \n    <!-- Network Permissions für Feature-Mapping Server -->\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n    \n    <!-- Storage Permissions für lokale Feature-Maps -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.ArWalking\"\n        android:usesCleartextTraffic=\"true\"\n        tools:targetApi=\"31\">\n\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.ArWalking\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <activity android:name=\".OpenCvCameraActivity\"\n                    android:theme=\"@style/Theme.ArWalking\"/>\n\n    </application>\n</manifest>\n","baseTimestamp":1754346742687},"/Users/florian/Documents/GitHub/ar-walking/README.md":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/README.md","baseContent":"# ArWalking - Augmented Reality Navigation App\n\nArWalking is an Android application that provides augmented reality (AR) walking navigation using computer vision and feature matching. The app uses the device's camera to overlay navigation information on the real world, helping users navigate indoor environments.\n\n## 🚀 Features\n\n- **AR Navigation**: Real-time augmented reality overlays showing navigation directions\n- **Feature Matching**: Computer vision-based landmark recognition using OpenCV\n- **Indoor Navigation**: Specialized for indoor environments like university buildings\n- **Route Planning**: JSON-based route configuration with step-by-step instructions\n- **Modern UI**: Built with Jetpack Compose for a smooth, modern user experience\n- **Camera Integration**: Real-time camera preview with AR overlays\n\n## 📱 Screenshots\n\nThe app provides:\n- Home screen with route selection\n- AR camera view with navigation overlays\n- Feature matching indicators\n- Step-by-step navigation guidance\n\n## 🏗️ Architecture\n\n### Project Structure\n```\nar-walking/\n├── app/                          # Main Android application module\n│   ├── src/main/java/           # Kotlin source code\n│   │   └── com/example/arwalking/\n│   │       ├── components/      # Reusable UI components\n│   │       ├── data/           # Data models and repositories\n│   │       ├── screens/        # Screen composables\n│   │       ├── storage/        # Local storage management\n│   │       ├── ui/theme/       # UI theme and styling\n│   │       └── utils/          # Utility classes\n│   ├── src/main/res/           # Android resources\n│   │   ├── drawable/           # Vector drawables and images\n│   │   ├── layout/            # XML layouts (for OpenCV activities)\n│   │   └── values/            # Colors, strings, themes\n│   └── src/main/assets/        # Asset files\n│       ├── routes/            # Route JSON files\n│       ├── landmark_images/   # Reference landmark images\n│       └── landmark_features/ # Processed feature data\n├── opencv/                      # OpenCV Android module\n└── gradle/                     # Gradle configuration\n```\n\n### Key Components\n\n#### 1. Navigation System\n- **MainActivity.kt**: Main entry point with Compose navigation\n- **HomeScreen.kt**: Route selection interface\n- **Navigation.kt**: Camera-based AR navigation screen\n\n#### 2. AR & Computer Vision\n- **OpenCvCameraActivity.kt**: OpenCV-based camera processing\n- **FeatureMatchingEngine.kt**: Computer vision feature matching\n- **ARTrackingSystem.kt**: AR coordinate system management\n- **LandmarkFeatureStorage.kt**: Landmark data management\n\n#### 3. UI Components\n- **ARInfoIsland.kt**: AR status and information display\n- **SnapchatStyleAR3DArrow.kt**: 3D arrow navigation overlay\n- **LocationDropdown.kt**: Location selection component\n- **FeatureMatchOverlay.kt**: Feature matching visualization\n\n#### 4. Data Management\n- **RouteViewModel.kt**: Central state management\n- **RouteRepository.kt**: JSON route data handling\n- **ArWalkingStorageManager.kt**: Local storage system\n\n## 🛠️ Technical Stack\n\n### Core Technologies\n- **Language**: Kotlin 2.0.0\n- **Build System**: Gradle with Kotlin DSL\n- **UI Framework**: Jetpack Compose\n- **Computer Vision**: OpenCV for Android\n- **Architecture**: MVVM with ViewModels\n- **Navigation**: Jetpack Navigation Compose\n\n### Key Dependencies\n```kotlin\n// Core Android\nandroidx-core-ktx = \"1.16.0\"\nandroidx-lifecycle-runtime-ktx = \"2.9.1\"\n\n// Jetpack Compose\nandroidx-compose-bom = \"2024.04.01\"\nandroidx-activity-compose = \"1.10.1\"\nandroidx-navigation-compose = \"2.9.2\"\n\n// Camera\nandroidx-camera-core = \"1.4.2\"\nandroidx-camera-lifecycle = \"1.4.2\"\n\n// Coroutines\nkotlinx-coroutines-core = \"1.7.3\"\nkotlinx-coroutines-android = \"1.7.3\"\n\n// JSON Processing\ngson = \"2.10.1\"\n```\n\n### Android Configuration\n- **Minimum SDK**: 24 (Android 7.0)\n- **Target SDK**: 35 (Android 14)\n- **Compile SDK**: 36\n- **Java Compatibility**: Java 17\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Android Studio Narwhal (2025.1.2) or later\n- Java 17 or later\n- Android SDK with API level 24+\n- Physical Android device (recommended for AR features)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/your-username/ar-walking.git\n   cd ar-walking\n   ```\n\n2. **Open in Android Studio**\n   - Launch Android Studio\n   - Select \"Open an existing project\"\n   - Navigate to the cloned directory\n\n3. **Sync project**\n   - Android Studio will automatically sync Gradle dependencies\n   - Wait for the sync to complete\n\n4. **Build the project**\n   ```bash\n   ./gradlew build\n   ```\n\n5. **Install on device**\n   ```bash\n   ./gradlew installDebug\n   ```\n\n### Required Permissions\nThe app requires the following permissions:\n- **Camera**: For AR navigation and feature matching\n- **Internet**: For potential future server-based features\n- **Storage**: For local landmark data storage\n\n## 📋 Usage\n\n### Basic Navigation Flow\n\n1. **Launch the app**\n   - The home screen displays available routes\n   - Select start and destination locations\n\n2. **Start AR Navigation**\n   - Grant camera permission when prompted\n   - Point camera at the environment\n   - Follow AR overlays and navigation instructions\n\n3. **Feature Matching**\n   - The app automatically recognizes landmarks\n   - AR indicators show recognition confidence\n   - Navigation arrows guide you to the destination\n\n### Route Configuration\n\nRoutes are defined in JSON format in `app/src/main/assets/route.json`:\n\n```json\n{\n  \"route\": {\n    \"path\": [\n      {\n        \"xmlName\": \"Building Name\",\n        \"levelInfo\": {\n          \"storey\": \"0\",\n          \"storeyName\": \"Ground Floor\"\n        },\n        \"routeParts\": [\n          {\n            \"instruction\": \"Walk straight ahead\",\n            \"instructionDe\": \"Gehen Sie geradeaus\",\n            \"distance\": 50.0,\n            \"duration\": 30,\n            \"landmarks\": [\"landmark_1\", \"landmark_2\"]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Adding New Landmarks\n\n1. **Add landmark images** to `app/src/main/assets/landmark_images/`\n2. **Update route JSON** to reference new landmarks\n3. **Feature extraction** happens automatically on first run\n\n## 🔧 Development\n\n### Key Classes Overview\n\n#### RouteViewModel\nCentral state management for:\n- Route data loading from JSON\n- Feature matching coordination\n- AR state management\n- Navigation step tracking\n\n#### FeatureMatchingEngine\nComputer vision processing:\n- OpenCV-based feature detection\n- Landmark recognition\n- Confidence scoring\n- Real-time frame processing\n\n#### ARTrackingSystem\nAR coordinate management:\n- Camera pose estimation\n- 3D coordinate transformations\n- Overlay positioning\n- Tracking stability\n\n### Adding New Features\n\n1. **New UI Components**: Add to `components/` package\n2. **New Screens**: Add to `screens/` package with navigation setup\n3. **Data Models**: Add to `data/` package\n4. **Storage**: Extend `ArWalkingStorageManager` for new data types\n\n### Testing\n\n```bash\n# Run unit tests\n./gradlew test\n\n# Run instrumented tests\n./gradlew connectedAndroidTest\n\n# Run specific test class\n./gradlew test --tests \"com.example.arwalking.RouteViewModelTest\"\n```\n\n## 📊 Performance Considerations\n\n### Optimization Features\n- **Efficient feature matching**: Optimized OpenCV processing\n- **Memory management**: Proper bitmap recycling\n- **Background processing**: Coroutines for heavy operations\n- **Storage optimization**: Compressed landmark data\n\n### Recommended Device Specs\n- **RAM**: 4GB+ recommended\n- **Camera**: Autofocus capability\n- **Sensors**: Gyroscope and accelerometer for better AR\n- **Storage**: 100MB+ free space for landmark data\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Camera permission denied**\n   - Check app permissions in device settings\n   - Restart the app after granting permission\n\n2. **Feature matching not working**\n   - Ensure good lighting conditions\n   - Check if landmark images are properly loaded\n   - Verify OpenCV initialization\n\n3. **AR overlays misaligned**\n   - Calibrate device sensors\n   - Ensure stable camera positioning\n   - Check device orientation handling\n\n4. **Build errors**\n   - Clean and rebuild: `./gradlew clean build`\n   - Check Java version compatibility\n   - Verify all dependencies are resolved\n\n### Debug Features\n\nEnable debug mode in `BuildConfig.DEBUG` for:\n- Detailed logging\n- Feature matching visualization\n- Performance metrics\n- Storage system diagnostics\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Code Style\n- Follow Kotlin coding conventions\n- Use meaningful variable and function names\n- Add documentation for public APIs\n- Write unit tests for new features\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- OpenCV community for computer vision capabilities\n- Android Jetpack team for modern Android development tools\n- Contributors and testers who helped improve the app\n\n## 📞 Support\n\nFor support and questions:\n- Create an issue on GitHub\n- Check the troubleshooting section\n- Review existing documentation\n\n---\n\n**Note**: This app is designed for indoor navigation and works best in well-lit environments with distinctive visual landmarks.","baseTimestamp":1754346904962,"deltas":[{"timestamp":1754346916238,"changes":[{"type":"MODIFY","lineNumber":47,"content":"### Komponenten-Übersicht","oldContent":"### Key Components"},{"type":"INSERT","lineNumber":49,"content":"Die ArWalking-App ist modular aufgebaut und besteht aus verschiedenen spezialisierten Komponenten:"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":51,"content":"#### 1. Navigation & Routing System"},{"type":"INSERT","lineNumber":52,"content":"- **MainActivity.kt**: Haupteinstiegspunkt der App mit Jetpack Compose Navigation"},{"type":"INSERT","lineNumber":53,"content":"- **HomeScreen.kt**: Startbildschirm für Routenauswahl und Zielkonfiguration"},{"type":"INSERT","lineNumber":54,"content":"- **Navigation.kt**: Hauptnavigationsbildschirm mit AR-Kamera-Integration"},{"type":"INSERT","lineNumber":55,"content":"- **RouteViewModel.kt**: Zentrale Zustandsverwaltung für Routen, Feature-Matching und Navigation"},{"type":"INSERT","lineNumber":56,"content":"- **RouteRepository.kt**: Lädt und verwaltet Routendaten aus JSON-Assets"},{"type":"INSERT","lineNumber":57,"content":"- **NavigationRoute.kt**: Datenmodelle für Navigationsrouten und -schritte"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"#### 2. AR & Computer Vision"},{"type":"INSERT","lineNumber":60,"content":"- **OpenCvCameraActivity.kt**: OpenCV-basierte Kameraverarbeitung und Bildanalyse"},{"type":"INSERT","lineNumber":61,"content":"- **FeatureMatchingEngine.kt**: Computer-Vision-Engine für Landmark-Erkennung und Feature-Matching"},{"type":"INSERT","lineNumber":62,"content":"- **LandmarkFeatureStorage.kt**: Verwaltung und Speicherung von Landmark-Features und Bilddaten"},{"type":"INSERT","lineNumber":63,"content":"- **ARTrackingSystem.kt**: AR-Koordinatensystem-Management und Pose-Schätzung (Stub-Implementation)"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"#### 3. UI Components & Overlays"},{"type":"INSERT","lineNumber":66,"content":"- **ARInfoIsland.kt**: AR-Status-Anzeige mit Scan-Status und Navigationsinformationen"},{"type":"INSERT","lineNumber":67,"content":"- **AR3DArrowOverlay.kt**: 3D-Pfeil-Overlay für Richtungsanweisungen"},{"type":"INSERT","lineNumber":68,"content":"- **Animated3DArrowOverlay.kt**: Animierte Version des 3D-Pfeils mit Bewegungseffekten"},{"type":"INSERT","lineNumber":69,"content":"- **FeatureMatchOverlay.kt**: Visualisierung von Feature-Matches und Erkennungsvertrauen"},{"type":"INSERT","lineNumber":70,"content":"- **LocationDropdown.kt**: Dropdown-Komponente für Standort- und Zielauswahl"},{"type":"INSERT","lineNumber":71,"content":"- **NavigationDrawer.kt**: Seitliches Navigationsmenü"},{"type":"INSERT","lineNumber":72,"content":"- **MenuOverlay.kt**: Overlay-Menü für zusätzliche Optionen"},{"type":"INSERT","lineNumber":73,"content":"- **ARScanStatus.kt**: Status-Komponente für AR-Scanning-Feedback"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"#### 4. Storage & Data Management"},{"type":"INSERT","lineNumber":76,"content":"- **ArWalkingStorageManager.kt**: Zentrales Storage-System für Bilder und Metadaten"},{"type":"INSERT","lineNumber":77,"content":"- **LocalImageStorage.kt**: Lokale Bildspeicherung und -verwaltung"},{"type":"INSERT","lineNumber":78,"content":"- **OptimizedImageManager.kt**: Optimierte Bildverarbeitung und Komprimierung"},{"type":"INSERT","lineNumber":79,"content":"- **ProjectDirectoryImageManager.kt**: Verwaltung von Bildern im Projektverzeichnis"},{"type":"INSERT","lineNumber":80,"content":"- **FavoritesRepository.kt**: Speicherung und Verwaltung von Lieblingsrouten"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"#### 5. Data Models & Structures"},{"type":"INSERT","lineNumber":83,"content":"- **RouteData.kt**: Datenmodelle für JSON-basierte Routendefinitionen"},{"type":"INSERT","lineNumber":84,"content":"- **BuildingStructure.kt**: Gebäudestruktur-Definitionen und Stockwerk-Informationen"},{"type":"INSERT","lineNumber":85,"content":"- **FavoriteRoute.kt**: Datenmodell für gespeicherte Lieblingsrouten"},{"type":"INSERT","lineNumber":86,"content":"- **FeatureLandmark.kt**: Landmark-Definitionen mit Feature-Daten"},{"type":"INSERT","lineNumber":87,"content":"- **FeatureNavigationRoute.kt**: Spezielle Routen für Feature-basierte Navigation"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"#### 6. Utility & Configuration"},{"type":"INSERT","lineNumber":90,"content":"- **FeatureMappingConfig.kt**: Konfiguration für Feature-Mapping-Parameter"},{"type":"INSERT","lineNumber":91,"content":"- **JsonUtils.kt**: Hilfsfunktionen für JSON-Verarbeitung"},{"type":"INSERT","lineNumber":92,"content":"- **GradientUtils.kt**: UI-Hilfsfunktionen für Farbverläufe"},{"type":"INSERT","lineNumber":93,"content":"- **Color.kt**: App-weite Farbdefinitionen und Themes"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"#### 7. Debug & Development"},{"type":"INSERT","lineNumber":96,"content":"- **LandmarkDebugOverlay.kt**: Debug-Overlay für Landmark-Entwicklung"},{"type":"INSERT","lineNumber":97,"content":"- **FeatureMappingStatusIndicator.kt**: Status-Indikator für Feature-Mapping-Prozesse"},{"type":"INSERT","lineNumber":98,"content":"- **ExpandedARInfoIsland.kt**: Erweiterte AR-Info-Anzeige für detaillierte Informationen"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"INSERT","lineNumber":100,"content":"### Key Components (Hauptkomponenten)"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"DELETE","lineNumber":57,"oldContent":"- **ARTrackingSystem.kt**: AR coordinate system management"},{"type":"DELETE","lineNumber":62,"oldContent":"- **SnapchatStyleAR3DArrow.kt**: 3D arrow navigation overlay"},{"type":"INSERT","lineNumber":114,"content":"- **AR3DArrowOverlay.kt**: 3D arrow navigation overlay"}]}]},"/Dummy.txt":{"filePath":"/Dummy.txt","baseContent":"keyboard bug gelöst, zoom kamera hinzugefügt. erster locate button","baseTimestamp":1754346971880,"deltas":[{"timestamp":1754346979418,"changes":[{"type":"MODIFY","lineNumber":0,"content":"bug fixinf","oldContent":"keyboard bug gelöst, zoom kamera hinzugefügt. erster locate button"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/OpenCvCameraActivity.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/OpenCvCameraActivity.kt","baseContent":"package com.example.arwalking\n\nimport android.graphics.Bitmap\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.SurfaceView\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.lifecycleScope\nimport kotlinx.coroutines.launch\nimport org.opencv.android.*\nimport org.opencv.core.*\nimport org.opencv.android.Utils\nimport androidx.compose.ui.platform.ComposeView\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.example.arwalking.FeatureMatchResult\nimport com.example.arwalking.RouteViewModel\nimport com.example.arwalking.components.ARInfoIsland\nimport com.example.arwalking.components.ARScanStatus\nimport com.example.arwalking.components.ExpandedARInfoIsland\nimport com.example.arwalking.components.AR3DArrowOverlay\nimport com.example.arwalking.components.LandmarkDebugOverlay\nimport com.example.arwalking.components.CompactLandmarkDebugInfo\nimport com.example.arwalking.components.rememberARScanStatus\nimport com.example.arwalking.ui.theme.ARWalkingTheme\n\n\nclass OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {\n\n    private lateinit var openCvCameraView: JavaCameraView\n    \n    // Feature-Mapping Integration\n    private lateinit var routeViewModel: RouteViewModel\n    private lateinit var matchInfoText: TextView\n    private lateinit var captureButton: Button\n    private lateinit var navInfoButton: Button\n    private lateinit var arInfoComposeView: ComposeView\n    private var currentFrame: Mat? = null\n    \n    // AR Status State\n    private var isARInitialized by mutableStateOf(false)\n    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())\n    \n    // Kamera-Parameter für AR-Tracking\n    private var screenWidth = 0f\n    private var screenHeight = 0f\n    private var cameraRotation = 0f\n    private var deviceOrientation = 0f\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        OpenCVLoader.initDebug()\n\n        setContentView(R.layout.activity_opencv_camera)\n\n        // Views initialisieren\n        openCvCameraView = findViewById(R.id.camera_view)\n        matchInfoText = findViewById(R.id.match_info_text)\n        captureButton = findViewById(R.id.capture_button)\n        navInfoButton = findViewById(R.id.nav_info_button)\n        \n        // AR Info Island ComposeView erstellen und hinzufügen\n        arInfoComposeView = ComposeView(this).apply {\n            setContent {\n                ARWalkingTheme {\n                    AROverlayContent()\n                }\n            }\n        }\n        \n        // ComposeView zum Layout hinzufügen\n        val rootLayout = findViewById<android.widget.RelativeLayout>(android.R.id.content)\n        val layoutParams = android.widget.RelativeLayout.LayoutParams(\n            android.widget.RelativeLayout.LayoutParams.MATCH_PARENT,\n            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT\n        ).apply {\n            addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP)\n            topMargin = 60 // Platz für Status Bar\n        }\n        rootLayout.addView(arInfoComposeView, layoutParams)\n        \n        openCvCameraView.visibility = SurfaceView.VISIBLE\n        openCvCameraView.setCvCameraViewListener(this)\n        openCvCameraView.enableView()\n\n        // ViewModel initialisieren\n        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]\n        \n        // Feature-Mapping initialisieren\n        routeViewModel.initializeStorage(this)\n        \n        // AR als initialisiert markieren nach kurzer Verzögerung\n        lifecycleScope.launch {\n            kotlinx.coroutines.delay(2000)\n            isARInitialized = true\n        }\n        \n        // Feature-Navigation für aktuelles Gebäude laden\n        val building = intent.getStringExtra(\"building\") ?: \"default_building\"\n        val floor = intent.getIntExtra(\"floor\", 0)\n        routeViewModel.loadFeatureNavigationRoute(this, building, floor)\n        \n        // UI Setup\n        setupUI()\n        observeFeatureMatches()\n    }\n\n    override fun onCameraViewStarted(width: Int, height: Int) {\n        screenWidth = width.toFloat()\n        screenHeight = height.toFloat()\n        Log.d(\"OpenCvCamera\", \"Kamera gestartet: ${width}x${height}\")\n    }\n\n    override fun onCameraViewStopped() {}\n\n    override fun onCameraFrame(inputFrame: CameraBridgeViewBase.CvCameraViewFrame?): Mat {\n        val frame = inputFrame!!.gray()\n        currentFrame = frame.clone() // Für Feature-Mapping speichern\n        \n        // Feature-Mapping verarbeiten\n        routeViewModel.processFrameForFeatureMatching(frame)\n        \n        // Nur Kamera-Frame zurückgeben\n        return frame\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        openCvCameraView.disableView()\n    }\n    \n    /**\n     * UI Setup für Feature-Mapping\n     */\n    private fun setupUI() {\n        // Training functionality removed\n        \n        navInfoButton.setOnClickListener {\n            showNavigationInfo()\n        }\n    }\n    \n    /**\n     * Beobachtet Feature-Matches vom ViewModel\n     */\n    private fun observeFeatureMatches() {\n        lifecycleScope.launch {\n            routeViewModel.currentMatches.collect { matches ->\n                runOnUiThread {\n                    updateMatchInfo(matches)\n                }\n            }\n        }\n    }\n    \n    /**\n     * Vollständiges AR Overlay mit Info Island, 3D-Pfeil und Debug-Info\n     */\n    @Composable\n    private fun AROverlayContent() {\n        val matches by routeViewModel.currentMatches.collectAsState()\n        val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()\n        val currentStep by routeViewModel.currentNavigationStep.collectAsState()\n        \n        // Debug-Informationen für Landmark-Loading\n        var requiredLandmarkIds by remember { mutableStateOf<List<String>>(emptyList()) }\n        var loadedLandmarkIds by remember { mutableStateOf<List<String>>(emptyList()) }\n        var showDebugOverlay by remember { mutableStateOf(false) }\n        \n        // Update current matches state\n        LaunchedEffect(matches) {\n            currentMatches = matches\n        }\n        \n        // Update debug info\n        LaunchedEffect(Unit) {\n            requiredLandmarkIds = routeViewModel.getRequiredLandmarkIds()\n            loadedLandmarkIds = routeViewModel.getCurrentlyLoadedLandmarkIds()\n        }\n        \n        val landmarkCount = matches.size\n        val bestConfidence = matches.maxOfOrNull { match -> match.confidence } ?: 0f\n        val isTracking = matches.isNotEmpty()\n        \n        // Automatischer AR-Status basierend auf aktuellen Bedingungen\n        val arStatus = rememberARScanStatus(\n            isInitialized = isARInitialized,\n            landmarkCount = landmarkCount,\n            bestConfidence = bestConfidence,\n            isTracking = isTracking\n        )\n        \n        // Vollbild-Container für AR-Overlays\n        Box(modifier = Modifier.fillMaxSize()) {\n            \n            // 3D-Pfeil Overlay (Hintergrund)\n            if (screenWidth > 0 && screenHeight > 0) {\n                AR3DArrowOverlay(\n                    matches = matches,\n                    isFeatureMappingEnabled = isFeatureMappingEnabled,\n                    screenWidth = screenWidth,\n                    screenHeight = screenHeight,\n                    currentStep = routeViewModel.currentStepIndex.collectAsState().value + 1,\n                    totalSteps = routeViewModel.routeSteps.collectAsState().value.size,\n                    currentInstruction = routeViewModel.currentInstruction.collectAsState().value,\n                    modifier = Modifier.fillMaxSize()\n                )\n            }\n            \n            // Info Island (Vordergrund, oben)\n            ExpandedARInfoIsland(\n                scanStatus = arStatus,\n                landmarkCount = landmarkCount,\n                confidence = bestConfidence,\n                isVisible = true,\n                modifier = Modifier.align(Alignment.TopCenter)\n            )\n            \n            // Kompakte Debug-Info (oben rechts)\n            val matchingCount = requiredLandmarkIds.intersect(loadedLandmarkIds.toSet()).size\n            CompactLandmarkDebugInfo(\n                requiredCount = requiredLandmarkIds.size,\n                loadedCount = loadedLandmarkIds.size,\n                matchingCount = matchingCount,\n                modifier = Modifier\n                    .align(Alignment.TopEnd)\n                    .padding(16.dp)\n            )\n            \n            // Vollständige Debug-Info (unten, nur bei Bedarf)\n            if (showDebugOverlay) {\n                LandmarkDebugOverlay(\n                    requiredLandmarkIds = requiredLandmarkIds,\n                    loadedLandmarkIds = loadedLandmarkIds,\n                    isVisible = showDebugOverlay,\n                    modifier = Modifier.align(Alignment.BottomCenter)\n                )\n            }\n        }\n    }\n\n    /**\n     * Aktualisiert Match-Informationen in der UI\n     */\n    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {\n        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden\n        matchInfoText.visibility = View.GONE\n        \n        if (matches.isEmpty()) {\n            Log.d(\"OpenCvCamera\", \"Keine Landmarks erkannt\")\n        } else {\n            val bestMatch = matches.first()\n            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark?.name ?: \"Unknown\"} (${(bestMatch.confidence * 100).toInt()}%)\")\n        }\n    }\n    \n\n    \n    /**\n     * Konvertiert OpenCV Mat zu Android Bitmap\n     */\n    private fun matToBitmap(mat: Mat): Bitmap {\n        val bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888)\n        Utils.matToBitmap(mat, bitmap)\n        return bitmap\n    }\n    \n    /**\n     * Zeigt Navigation-Informationen an\n     */\n    private fun showNavigationInfo() {\n        lifecycleScope.launch {\n            routeViewModel.featureNavigationRoute.value?.let { route ->\n                val info = buildString {\n                    append(\"Navigation Route: ${route.name}\\n\")\n                    append(\"Schritte: ${route.steps.size}\\n\\n\")\n                    \n                    route.steps.take(3).forEach { step ->\n                        append(\"${step.stepNumber}. ${step.instruction}\\n\")\n                    }\n                    \n                    if (route.steps.size > 3) {\n                        append(\"... und ${route.steps.size - 3} weitere Schritte\")\n                    }\n                }\n                \n                runOnUiThread {\n                    matchInfoText.text = info\n                }\n            } ?: run {\n                runOnUiThread {\n                    matchInfoText.text = \"Keine Navigation verfügbar\"\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1754557157499,"deltas":[{"timestamp":1754557358545,"changes":[{"type":"DELETE","lineNumber":212,"oldContent":"                    currentStep = routeViewModel.currentStepIndex.collectAsState().value + 1,"},{"type":"DELETE","lineNumber":213,"oldContent":"                    totalSteps = routeViewModel.routeSteps.collectAsState().value.size,"},{"type":"DELETE","lineNumber":214,"oldContent":"                    currentInstruction = routeViewModel.currentInstruction.collectAsState().value,"},{"type":"INSERT","lineNumber":212,"content":"                    currentStep = routeViewModel.currentNavigationStep.collectAsState().value,"},{"type":"INSERT","lineNumber":213,"content":"                    totalSteps = 3, // Standard-Wert, da routeSteps nicht verfügbar ist"},{"type":"INSERT","lineNumber":214,"content":"                    currentInstruction = null, // Wird später implementiert"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt","baseContent":"package com.example.arwalking\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.PointF\nimport android.util.Log\nimport org.opencv.android.Utils\nimport org.opencv.core.*\nimport org.opencv.features2d.ORB\nimport org.opencv.features2d.DescriptorMatcher\nimport org.opencv.imgproc.Imgproc\nimport kotlin.math.sqrt\n\n/**\n * Echte Feature-Matching Engine mit OpenCV ORB Features\n */\nclass FeatureMatchingEngine(private val context: Context) {\n    \n    private val TAG = \"FeatureMatchingEngine\"\n    private val orb = ORB.create(500) // Maximal 500 Features pro Bild\n    private val matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING)\n    \n    // Cache für Landmark-Features\n    private val landmarkFeatures = mutableMapOf<String, LandmarkFeatures>()\n    \n    data class LandmarkFeatures(\n        val keypoints: MatOfKeyPoint,\n        val descriptors: Mat,\n        val landmark: ProcessedLandmark\n    )\n    \n    init {\n        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")\n    }\n    \n    /**\n     * Verarbeitet einen Kamera-Frame und findet Matches\n     */\n    fun processFrame(frame: Mat): List<FeatureMatchResult> {\n        return try {\n            if (landmarkFeatures.isEmpty()) {\n                Log.d(TAG, \"Keine Landmark-Features geladen\")\n                return emptyList()\n            }\n            \n            // Extrahiere Features aus dem aktuellen Frame\n            val frameKeypoints = MatOfKeyPoint()\n            val frameDescriptors = Mat()\n            \n            orb.detectAndCompute(frame, Mat(), frameKeypoints, frameDescriptors)\n            \n            if (frameDescriptors.rows() == 0) {\n                Log.d(TAG, \"Keine Features im Frame gefunden\")\n                return emptyList()\n            }\n            \n            val matches = mutableListOf<FeatureMatchResult>()\n            \n            // Vergleiche mit allen geladenen Landmarks\n            for ((landmarkId, landmarkFeature) in landmarkFeatures) {\n                val confidence = matchWithLandmark(frameDescriptors, landmarkFeature, frame.size())\n                \n                if (confidence > 0.3f) { // Mindest-Confidence\n                    val screenPosition = calculateScreenPosition(frameKeypoints, landmarkFeature.keypoints, frame.size())\n                    \n                    matches.add(FeatureMatchResult(\n                        landmarkId = landmarkId,\n                        confidence = confidence,\n                        landmark = landmarkFeature.landmark,\n                        matchCount = frameKeypoints.toArray().size,\n                        screenPosition = screenPosition\n                    ))\n                }\n            }\n            \n            // Sortiere nach Confidence (beste zuerst)\n            matches.sortedByDescending { it.confidence }\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Frame-Processing: ${e.message}\")\n            emptyList()\n        }\n    }\n    \n    /**\n     * Matcht Frame-Descriptors mit einem Landmark\n     */\n    private fun matchWithLandmark(frameDescriptors: Mat, landmarkFeature: LandmarkFeatures, frameSize: Size): Float {\n        return try {\n            val matches = mutableListOf<DMatch>()\n            matcher.match(frameDescriptors, landmarkFeature.descriptors, MatOfDMatch(*matches.toTypedArray()))\n            \n            if (matches.isEmpty()) return 0f\n            \n            // Filtere gute Matches (Lowe's ratio test adaptiert)\n            val goodMatches = matches.filter { it.distance < 50f } // Hamming distance threshold\n            \n            val confidence = goodMatches.size.toFloat() / frameDescriptors.rows().toFloat()\n            \n            Log.v(TAG, \"Landmark ${landmarkFeature.landmark.id}: ${goodMatches.size}/${matches.size} gute Matches, Confidence: $confidence\")\n            \n            confidence.coerceIn(0f, 1f)\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Landmark-Matching: ${e.message}\")\n            0f\n        }\n    }\n    \n    /**\n     * Berechnet die Bildschirmposition eines erkannten Landmarks\n     */\n    private fun calculateScreenPosition(frameKeypoints: MatOfKeyPoint, landmarkKeypoints: MatOfKeyPoint, frameSize: Size): PointF? {\n        return try {\n            val frameKpts = frameKeypoints.toArray()\n            if (frameKpts.isEmpty()) return null\n            \n            // Verwende den Schwerpunkt der erkannten Keypoints\n            var sumX = 0f\n            var sumY = 0f\n            \n            frameKpts.forEach { kpt ->\n                sumX += kpt.pt.x.toFloat()\n                sumY += kpt.pt.y.toFloat()\n            }\n            \n            PointF(\n                sumX / frameKpts.size,\n                sumY / frameKpts.size\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei Bildschirmposition-Berechnung: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Lädt Landmark-Features aus Assets\n     */\n    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {\n        Log.i(TAG, \"Lade Features für ${landmarks.size} Landmarks...\")\n        \n        landmarks.forEach { landmark ->\n            try {\n                val bitmap = loadLandmarkImage(landmark.id)\n                if (bitmap != null) {\n                    val features = extractFeaturesFromBitmap(bitmap, landmark)\n                    if (features != null) {\n                        landmarkFeatures[landmark.id] = features\n                        Log.d(TAG, \"Features geladen für Landmark: ${landmark.id}\")\n                    }\n                }\n            } catch (e: Exception) {\n                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")\n            }\n        }\n        \n        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")\n    }\n    \n    /**\n     * Lädt ein Landmark-Bild aus den Assets\n     */\n    private fun loadLandmarkImage(landmarkId: String): Bitmap? {\n        return try {\n            // Versuche verschiedene Bildformate\n            val possiblePaths = listOf(\n                \"landmarks/$landmarkId.jpg\",\n                \"landmarks/$landmarkId.png\",\n                \"images/$landmarkId.jpg\",\n                \"images/$landmarkId.png\"\n            )\n            \n            for (path in possiblePaths) {\n                try {\n                    val inputStream = context.assets.open(path)\n                    val bitmap = BitmapFactory.decodeStream(inputStream)\n                    inputStream.close()\n                    if (bitmap != null) {\n                        Log.d(TAG, \"Landmark-Bild geladen: $path\")\n                        return bitmap\n                    }\n                } catch (e: Exception) {\n                    // Nächsten Pfad versuchen\n                }\n            }\n            \n            Log.w(TAG, \"Kein Bild gefunden für Landmark: $landmarkId\")\n            null\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Extrahiert Features aus einem Bitmap\n     */\n    private fun extractFeaturesFromBitmap(bitmap: Bitmap, landmark: ProcessedLandmark): LandmarkFeatures? {\n        return try {\n            // Konvertiere Bitmap zu OpenCV Mat\n            val mat = Mat()\n            Utils.bitmapToMat(bitmap, mat)\n            \n            // Konvertiere zu Graustufen falls nötig\n            val grayMat = Mat()\n            if (mat.channels() > 1) {\n                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)\n            } else {\n                grayMat = mat.clone()\n            }\n            \n            // Extrahiere ORB Features\n            val keypoints = MatOfKeyPoint()\n            val descriptors = Mat()\n            \n            orb.detectAndCompute(grayMat, Mat(), keypoints, descriptors)\n            \n            if (descriptors.rows() > 0) {\n                Log.d(TAG, \"Extrahiert ${keypoints.toArray().size} Features für ${landmark.id}\")\n                LandmarkFeatures(keypoints, descriptors, landmark)\n            } else {\n                Log.w(TAG, \"Keine Features extrahiert für ${landmark.id}\")\n                null\n            }\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei Feature-Extraktion für ${landmark.id}: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Legacy-Methoden für Kompatibilität\n     */\n    fun extractFeatures(bitmap: Bitmap): LandmarkFeatures? {\n        val dummyLandmark = ProcessedLandmark(\"temp\", \"temp\")\n        return extractFeaturesFromBitmap(bitmap, dummyLandmark)\n    }\n    \n    fun matchFeatures(frame: Mat, landmarks: List<ProcessedLandmark>): List<FeatureMatchResult> {\n        return processFrame(frame)\n    }\n    \n    fun processLandmarkFeatures(landmark: Any, features: Any, bitmap: Bitmap): ProcessedLandmark? {\n        Log.d(TAG, \"processLandmarkFeatures called (legacy)\")\n        return null\n    }\n}\n\nclass LandmarkFeatureStorage(private val context: android.content.Context) {\n    \n    private val TAG = \"LandmarkFeatureStorage\"\n    \n    init {\n        Log.i(TAG, \"LandmarkFeatureStorage initialized (stub)\")\n    }\n    \n    fun importLandmarksFromAssets(): Int {\n        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")\n        return 0\n    }\n    \n    fun loadRouteSpecificLandmarks(route: com.example.arwalking.data.Route): List<ProcessedLandmark> {\n        Log.d(TAG, \"loadRouteSpecificLandmarks called (stub)\")\n        return emptyList()\n    }\n    \n    fun loadAllLandmarks(): List<ProcessedLandmark> {\n        Log.d(TAG, \"loadAllLandmarks called (stub)\")\n        return emptyList()\n    }\n    \n    fun getStorageStats(): StorageStats {\n        Log.d(TAG, \"getStorageStats called (stub)\")\n        return StorageStats()\n    }\n    \n    fun cleanup() {\n        Log.d(TAG, \"cleanup called (stub)\")\n    }\n    \n    fun saveLandmarkFeatures(landmarkId: String, landmark: Any, features: Any, bitmap: android.graphics.Bitmap): Boolean {\n        Log.d(TAG, \"saveLandmarkFeatures called (stub): $landmarkId\")\n        return true\n    }\n}\n\nclass ARTrackingSystem {\n    \n    private val TAG = \"ARTrackingSystem\"\n    \n    init {\n        Log.i(TAG, \"ARTrackingSystem initialized (stub)\")\n    }\n    \n    fun resetTracking() {\n        Log.d(TAG, \"resetTracking called (stub)\")\n    }\n    \n    fun updateTracking(matches: List<FeatureMatchResult>): List<Any> {\n        Log.d(TAG, \"updateTracking called (stub)\")\n        return emptyList()\n    }\n}\n\ndata class ProcessedLandmark(\n    val id: String,\n    val name: String\n)\n\ndata class FeatureMatchResult(\n    val landmarkId: String,\n    val confidence: Float,\n    val landmark: ProcessedLandmark? = null,\n    val matchCount: Int = 0,\n    val distance: Float? = null,\n    val angle: Float? = null,\n    val screenPosition: android.graphics.PointF? = null\n)\n\nclass StorageStats {\n    val landmarkCount: Int = 0\n    \n    fun getTotalSizeMB(): Double = 0.0\n}","baseTimestamp":1754560053369,"deltas":[{"timestamp":1754560144354,"changes":[{"type":"INSERT","lineNumber":169,"content":"                \"landmark_images/$landmarkId.jpg\","},{"type":"INSERT","lineNumber":170,"content":"                \"landmark_images/$landmarkId.png\","}]},{"timestamp":1754560267885,"changes":[{"type":"DELETE","lineNumber":90,"oldContent":"            val matches = mutableListOf<DMatch>()"},{"type":"DELETE","lineNumber":91,"oldContent":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, MatOfDMatch(*matches.toTypedArray()))"},{"type":"INSERT","lineNumber":90,"content":"            val matchesMatOfDMatch = MatOfDMatch()"},{"type":"INSERT","lineNumber":91,"content":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, matchesMatOfDMatch)"},{"type":"INSERT","lineNumber":93,"content":"            val matches = matchesMatOfDMatch.toArray().toList()"},{"type":"DELETE","lineNumber":170,"oldContent":"                \"landmarks/$landmarkId.jpg\","},{"type":"INSERT","lineNumber":172,"content":"                \"landmarks/$landmarkId.jpg\","}]},{"timestamp":1754560407541,"changes":[{"type":"DELETE","lineNumber":211,"oldContent":"            val grayMat = Mat()"},{"type":"DELETE","lineNumber":212,"oldContent":"            if (mat.channels() > 1) {"},{"type":"DELETE","lineNumber":213,"oldContent":"                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":211,"content":"            val grayMat = if (mat.channels() > 1) {"},{"type":"INSERT","lineNumber":212,"content":"                val gray = Mat()"},{"type":"INSERT","lineNumber":213,"content":"                Imgproc.cvtColor(mat, gray, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":214,"content":"                gray"},{"type":"MODIFY","lineNumber":216,"content":"                mat.clone()","oldContent":"                grayMat = mat.clone()"}]},{"timestamp":1754561546377,"changes":[{"type":"INSERT","lineNumber":12,"content":"import org.opencv.calib3d.Calib3d"},{"type":"DELETE","lineNumber":216,"oldContent":"                grayMat = mat.clone()"},{"type":"INSERT","lineNumber":218,"content":"            }"}]},{"timestamp":1754561551596,"changes":[{"type":"INSERT","lineNumber":33,"content":"    data class MatchedKeypoints("},{"type":"INSERT","lineNumber":34,"content":"        val frameKeypoints: List<KeyPoint>,"},{"type":"INSERT","lineNumber":35,"content":"        val landmarkKeypoints: List<KeyPoint>,"},{"type":"INSERT","lineNumber":36,"content":"        val matches: List<DMatch>"},{"type":"INSERT","lineNumber":37,"content":"    )"},{"type":"INSERT","lineNumber":38,"content":"    "}]},{"timestamp":1754561559760,"changes":[{"type":"DELETE","lineNumber":34,"oldContent":"    init {"},{"type":"DELETE","lineNumber":36,"oldContent":"        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")"},{"type":"DELETE","lineNumber":38,"oldContent":"    }"},{"type":"DELETE","lineNumber":40,"oldContent":"    "},{"type":"DELETE","lineNumber":42,"oldContent":"    /**"},{"type":"INSERT","lineNumber":39,"content":"    init {"},{"type":"INSERT","lineNumber":40,"content":"        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")"},{"type":"INSERT","lineNumber":41,"content":"    }"},{"type":"INSERT","lineNumber":42,"content":"    "},{"type":"INSERT","lineNumber":43,"content":"    /**"},{"type":"MODIFY","lineNumber":68,"content":"                val matchResult = matchWithLandmarkImproved(frameKeypoints, frameDescriptors, landmarkFeature, frame.size())","oldContent":"                val confidence = matchWithLandmark(frameDescriptors, landmarkFeature, frame.size())"},{"type":"DELETE","lineNumber":70,"oldContent":"                if (confidence > 0.3f) { // Mindest-Confidence"},{"type":"DELETE","lineNumber":71,"oldContent":"                    val screenPosition = calculateScreenPosition(frameKeypoints, landmarkFeature.keypoints, frame.size())"},{"type":"DELETE","lineNumber":72,"oldContent":"                    "},{"type":"DELETE","lineNumber":73,"oldContent":"                    matches.add(FeatureMatchResult("},{"type":"DELETE","lineNumber":74,"oldContent":"                        landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":75,"oldContent":"                        confidence = confidence,"},{"type":"DELETE","lineNumber":76,"oldContent":"                        landmark = landmarkFeature.landmark,"},{"type":"DELETE","lineNumber":77,"oldContent":"                        matchCount = frameKeypoints.toArray().size,"},{"type":"DELETE","lineNumber":78,"oldContent":"                        screenPosition = screenPosition"},{"type":"DELETE","lineNumber":79,"oldContent":"                    ))"},{"type":"INSERT","lineNumber":70,"content":"                if (matchResult != null && matchResult.confidence > 0.2f) { // Reduzierte Mindest-Confidence"},{"type":"INSERT","lineNumber":71,"content":"                    matches.add(matchResult)"}]},{"timestamp":1754562063775,"changes":[{"type":"DELETE","lineNumber":36,"oldContent":"    init {"},{"type":"INSERT","lineNumber":37,"content":"    )"},{"type":"INSERT","lineNumber":38,"content":"    "},{"type":"INSERT","lineNumber":39,"content":"    init {"},{"type":"DELETE","lineNumber":40,"oldContent":"    )"},{"type":"DELETE","lineNumber":43,"oldContent":"    "},{"type":"MODIFY","lineNumber":85,"content":"     * Verbessertes Feature-Matching mit geometrischer Validierung","oldContent":"     * Matcht Frame-Descriptors mit einem Landmark"},{"type":"MODIFY","lineNumber":87,"content":"    private fun matchWithLandmarkImproved(frameKeypoints: MatOfKeyPoint, frameDescriptors: Mat, landmarkFeature: LandmarkFeatures, frameSize: Size): FeatureMatchResult? {","oldContent":"    private fun matchWithLandmark(frameDescriptors: Mat, landmarkFeature: LandmarkFeatures, frameSize: Size): Float {"},{"type":"INSERT","lineNumber":89,"content":"            if (frameDescriptors.rows() == 0 || landmarkFeature.descriptors.rows() == 0) {"},{"type":"INSERT","lineNumber":90,"content":"                return null"},{"type":"INSERT","lineNumber":91,"content":"            }"},{"type":"INSERT","lineNumber":92,"content":"            "},{"type":"INSERT","lineNumber":93,"content":"            // 1. Brute-Force Matching"},{"type":"DELETE","lineNumber":92,"oldContent":"            val matches = matchesMatOfDMatch.toArray().toList()"},{"type":"DELETE","lineNumber":93,"oldContent":"            if (matches.isEmpty()) return 0f"},{"type":"INSERT","lineNumber":97,"content":"            val allMatches = matchesMatOfDMatch.toArray().toList()"},{"type":"INSERT","lineNumber":98,"content":"            if (allMatches.isEmpty()) return null"},{"type":"DELETE","lineNumber":95,"oldContent":"            // Filtere gute Matches (Lowe's ratio test adaptiert)"},{"type":"DELETE","lineNumber":96,"oldContent":"            val goodMatches = matches.filter { it.distance < 50f } // Hamming distance threshold"},{"type":"INSERT","lineNumber":100,"content":"            // 2. Filtere gute Matches mit adaptivem Threshold"},{"type":"INSERT","lineNumber":101,"content":"            val sortedMatches = allMatches.sortedBy { it.distance }"},{"type":"INSERT","lineNumber":102,"content":"            val medianDistance = if (sortedMatches.isNotEmpty()) sortedMatches[sortedMatches.size / 2].distance else 100f"},{"type":"INSERT","lineNumber":103,"content":"            val threshold = (medianDistance * 0.7f).coerceAtMost(50f) // Adaptiver Threshold"},{"type":"DELETE","lineNumber":98,"oldContent":"            val confidence = goodMatches.size.toFloat() / frameDescriptors.rows().toFloat()"},{"type":"INSERT","lineNumber":105,"content":"            val goodMatches = sortedMatches.filter { it.distance < threshold }"},{"type":"DELETE","lineNumber":100,"oldContent":"            Log.v(TAG, \"Landmark ${landmarkFeature.landmark.id}: ${goodMatches.size}/${matches.size} gute Matches, Confidence: $confidence\")"},{"type":"INSERT","lineNumber":107,"content":"            if (goodMatches.size < 4) { // Mindestens 4 Matches für Homographie"},{"type":"INSERT","lineNumber":108,"content":"                Log.v(TAG, \"Landmark ${landmarkFeature.landmark.id}: Zu wenige gute Matches (${goodMatches.size})\")"},{"type":"INSERT","lineNumber":109,"content":"                return null"},{"type":"INSERT","lineNumber":110,"content":"            }"},{"type":"DELETE","lineNumber":102,"oldContent":"            confidence.coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":112,"content":"            // 3. Geometrische Validierung mit Homographie"},{"type":"INSERT","lineNumber":113,"content":"            val matchedKeypoints = extractMatchedKeypoints(frameKeypoints, landmarkFeature.keypoints, goodMatches)"},{"type":"INSERT","lineNumber":114,"content":"            val (confidence, screenPosition) = validateGeometry(matchedKeypoints, frameSize)"},{"type":"INSERT","lineNumber":116,"content":"            if (confidence > 0.1f) {"},{"type":"INSERT","lineNumber":117,"content":"                Log.v(TAG, \"Landmark ${landmarkFeature.landmark.id}: ${goodMatches.size} gute Matches, Confidence: $confidence\")"},{"type":"INSERT","lineNumber":118,"content":"                "},{"type":"INSERT","lineNumber":119,"content":"                FeatureMatchResult("},{"type":"INSERT","lineNumber":120,"content":"                    landmarkId = landmarkFeature.landmark.id,"},{"type":"INSERT","lineNumber":121,"content":"                    confidence = confidence,"},{"type":"INSERT","lineNumber":122,"content":"                    landmark = landmarkFeature.landmark,"},{"type":"INSERT","lineNumber":123,"content":"                    matchCount = goodMatches.size,"},{"type":"INSERT","lineNumber":124,"content":"                    screenPosition = screenPosition"},{"type":"INSERT","lineNumber":125,"content":"                )"},{"type":"INSERT","lineNumber":126,"content":"            } else {"},{"type":"INSERT","lineNumber":127,"content":"                null"},{"type":"INSERT","lineNumber":128,"content":"            }"},{"type":"INSERT","lineNumber":129,"content":"            "},{"type":"DELETE","lineNumber":105,"oldContent":"            Log.e(TAG, \"Fehler beim Landmark-Matching: ${e.message}\")"},{"type":"DELETE","lineNumber":106,"oldContent":"            0f"},{"type":"INSERT","lineNumber":131,"content":"            Log.e(TAG, \"Fehler beim verbesserten Landmark-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":132,"content":"            null"},{"type":"INSERT","lineNumber":137,"content":"     * Extrahiert gematchte Keypoint-Paare"},{"type":"INSERT","lineNumber":138,"content":"     */"},{"type":"INSERT","lineNumber":139,"content":"    private fun extractMatchedKeypoints(frameKeypoints: MatOfKeyPoint, landmarkKeypoints: MatOfKeyPoint, matches: List<DMatch>): MatchedKeypoints {"},{"type":"INSERT","lineNumber":140,"content":"        val frameKpts = frameKeypoints.toArray()"},{"type":"INSERT","lineNumber":141,"content":"        val landmarkKpts = landmarkKeypoints.toArray()"},{"type":"INSERT","lineNumber":142,"content":"        "},{"type":"INSERT","lineNumber":143,"content":"        val matchedFrameKpts = mutableListOf<KeyPoint>()"},{"type":"INSERT","lineNumber":144,"content":"        val matchedLandmarkKpts = mutableListOf<KeyPoint>()"},{"type":"INSERT","lineNumber":145,"content":"        val validMatches = mutableListOf<DMatch>()"},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"INSERT","lineNumber":147,"content":"        matches.forEach { match ->"},{"type":"INSERT","lineNumber":148,"content":"            if (match.queryIdx < frameKpts.size && match.trainIdx < landmarkKpts.size) {"},{"type":"INSERT","lineNumber":149,"content":"                matchedFrameKpts.add(frameKpts[match.queryIdx])"},{"type":"INSERT","lineNumber":150,"content":"                matchedLandmarkKpts.add(landmarkKpts[match.trainIdx])"},{"type":"INSERT","lineNumber":151,"content":"                validMatches.add(match)"},{"type":"INSERT","lineNumber":152,"content":"            }"},{"type":"INSERT","lineNumber":153,"content":"        }"},{"type":"INSERT","lineNumber":154,"content":"        "},{"type":"INSERT","lineNumber":155,"content":"        return MatchedKeypoints(matchedFrameKpts, matchedLandmarkKpts, validMatches)"},{"type":"INSERT","lineNumber":156,"content":"    }"},{"type":"INSERT","lineNumber":157,"content":"    "},{"type":"INSERT","lineNumber":158,"content":"    /**"},{"type":"INSERT","lineNumber":159,"content":"     * Validiert Matches geometrisch mit Homographie"},{"type":"INSERT","lineNumber":160,"content":"     */"},{"type":"INSERT","lineNumber":161,"content":"    private fun validateGeometry(matchedKeypoints: MatchedKeypoints, frameSize: Size): Pair<Float, PointF?> {"},{"type":"INSERT","lineNumber":162,"content":"        return try {"},{"type":"INSERT","lineNumber":163,"content":"            if (matchedKeypoints.frameKeypoints.size < 4) {"},{"type":"INSERT","lineNumber":164,"content":"                return Pair(0f, null)"},{"type":"INSERT","lineNumber":165,"content":"            }"},{"type":"INSERT","lineNumber":166,"content":"            "},{"type":"INSERT","lineNumber":167,"content":"            // Konvertiere Keypoints zu OpenCV Points"},{"type":"INSERT","lineNumber":168,"content":"            val framePoints = MatOfPoint2f()"},{"type":"INSERT","lineNumber":169,"content":"            val landmarkPoints = MatOfPoint2f()"},{"type":"INSERT","lineNumber":170,"content":"            "},{"type":"INSERT","lineNumber":171,"content":"            val framePointsArray = matchedKeypoints.frameKeypoints.map { Point(it.pt.x, it.pt.y) }.toTypedArray()"},{"type":"INSERT","lineNumber":172,"content":"            val landmarkPointsArray = matchedKeypoints.landmarkKeypoints.map { Point(it.pt.x, it.pt.y) }.toTypedArray()"},{"type":"INSERT","lineNumber":173,"content":"            "},{"type":"INSERT","lineNumber":174,"content":"            framePoints.fromArray(*framePointsArray)"},{"type":"INSERT","lineNumber":175,"content":"            landmarkPoints.fromArray(*landmarkPointsArray)"},{"type":"INSERT","lineNumber":176,"content":"            "},{"type":"INSERT","lineNumber":177,"content":"            // Berechne Homographie mit RANSAC"},{"type":"INSERT","lineNumber":178,"content":"            val mask = Mat()"},{"type":"INSERT","lineNumber":179,"content":"            val homography = Calib3d.findHomography(landmarkPoints, framePoints, Calib3d.RANSAC, 3.0, mask)"},{"type":"INSERT","lineNumber":180,"content":"            "},{"type":"INSERT","lineNumber":181,"content":"            if (homography.empty()) {"},{"type":"INSERT","lineNumber":182,"content":"                return Pair(0f, null)"},{"type":"INSERT","lineNumber":183,"content":"            }"},{"type":"INSERT","lineNumber":184,"content":"            "},{"type":"INSERT","lineNumber":185,"content":"            // Zähle Inliers"},{"type":"INSERT","lineNumber":186,"content":"            val maskArray = mask.toArray()"},{"type":"INSERT","lineNumber":187,"content":"            val inlierCount = maskArray.count { it[0] > 0 }"},{"type":"INSERT","lineNumber":188,"content":"            val inlierRatio = inlierCount.toFloat() / matchedKeypoints.frameKeypoints.size"},{"type":"INSERT","lineNumber":189,"content":"            "},{"type":"INSERT","lineNumber":190,"content":"            // Berechne Confidence basierend auf Inlier-Ratio und Match-Qualität"},{"type":"INSERT","lineNumber":191,"content":"            val matchQuality = 1f - (matchedKeypoints.matches.map { it.distance }.average().toFloat() / 100f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":192,"content":"            val confidence = (inlierRatio * 0.7f + matchQuality * 0.3f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":193,"content":"            "},{"type":"INSERT","lineNumber":194,"content":"            // Berechne Schwerpunkt der Inlier-Keypoints"},{"type":"INSERT","lineNumber":195,"content":"            val inlierFramePoints = matchedKeypoints.frameKeypoints.filterIndexed { index, _ -> "},{"type":"INSERT","lineNumber":196,"content":"                index < maskArray.size && maskArray[index][0] > 0 "},{"type":"INSERT","lineNumber":197,"content":"            }"},{"type":"INSERT","lineNumber":198,"content":"            "},{"type":"INSERT","lineNumber":199,"content":"            val screenPosition = if (inlierFramePoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":200,"content":"                val avgX = inlierFramePoints.map { it.pt.x }.average().toFloat()"},{"type":"INSERT","lineNumber":201,"content":"                val avgY = inlierFramePoints.map { it.pt.y }.average().toFloat()"},{"type":"INSERT","lineNumber":202,"content":"                PointF(avgX, avgY)"},{"type":"INSERT","lineNumber":203,"content":"            } else {"},{"type":"INSERT","lineNumber":204,"content":"                null"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"            "},{"type":"INSERT","lineNumber":207,"content":"            Pair(confidence, screenPosition)"},{"type":"INSERT","lineNumber":208,"content":"            "},{"type":"INSERT","lineNumber":209,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":210,"content":"            Log.e(TAG, \"Fehler bei geometrischer Validierung: ${e.message}\")"},{"type":"INSERT","lineNumber":211,"content":"            Pair(0f, null)"},{"type":"INSERT","lineNumber":212,"content":"        }"},{"type":"INSERT","lineNumber":213,"content":"    }"},{"type":"INSERT","lineNumber":214,"content":"    "},{"type":"INSERT","lineNumber":215,"content":"    /**"}]},{"timestamp":1754562072077,"changes":[{"type":"MODIFY","lineNumber":37,"content":"    )","oldContent":"    )"},{"type":"MODIFY","lineNumber":40,"content":"        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")","oldContent":"        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")"},{"type":"DELETE","lineNumber":90,"oldContent":"            val matchesMatOfDMatch = MatOfDMatch()"},{"type":"DELETE","lineNumber":92,"oldContent":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, matchesMatOfDMatch)"},{"type":"DELETE","lineNumber":95,"oldContent":"            "},{"type":"INSERT","lineNumber":94,"content":"            val matchesMatOfDMatch = MatOfDMatch()"},{"type":"INSERT","lineNumber":95,"content":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, matchesMatOfDMatch)"},{"type":"DELETE","lineNumber":99,"oldContent":"            "},{"type":"DELETE","lineNumber":104,"oldContent":"            "},{"type":"DELETE","lineNumber":108,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":106,"content":"            "},{"type":"DELETE","lineNumber":111,"oldContent":"        }"},{"type":"DELETE","lineNumber":113,"oldContent":"    }"},{"type":"DELETE","lineNumber":115,"oldContent":"    "},{"type":"DELETE","lineNumber":117,"oldContent":"    /**"},{"type":"DELETE","lineNumber":118,"oldContent":"     * Berechnet die Bildschirmposition eines erkannten Landmarks"},{"type":"INSERT","lineNumber":111,"content":"            "},{"type":"DELETE","lineNumber":120,"oldContent":"     */"},{"type":"DELETE","lineNumber":122,"oldContent":"    private fun calculateScreenPosition(frameKeypoints: MatOfKeyPoint, landmarkKeypoints: MatOfKeyPoint, frameSize: Size): PointF? {"},{"type":"DELETE","lineNumber":124,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":125,"oldContent":"            val frameKpts = frameKeypoints.toArray()"},{"type":"INSERT","lineNumber":115,"content":"            "},{"type":"DELETE","lineNumber":127,"oldContent":"            if (frameKpts.isEmpty()) return null"},{"type":"DELETE","lineNumber":129,"oldContent":"            "},{"type":"DELETE","lineNumber":131,"oldContent":"            // Verwende den Schwerpunkt der erkannten Keypoints"},{"type":"DELETE","lineNumber":133,"oldContent":"            var sumX = 0f"},{"type":"DELETE","lineNumber":135,"oldContent":"            var sumY = 0f"},{"type":"DELETE","lineNumber":137,"oldContent":"            "},{"type":"DELETE","lineNumber":139,"oldContent":"            frameKpts.forEach { kpt ->"},{"type":"DELETE","lineNumber":141,"oldContent":"                sumX += kpt.pt.x.toFloat()"},{"type":"DELETE","lineNumber":143,"oldContent":"                sumY += kpt.pt.y.toFloat()"},{"type":"DELETE","lineNumber":145,"oldContent":"            }"},{"type":"DELETE","lineNumber":147,"oldContent":"            "},{"type":"DELETE","lineNumber":149,"oldContent":"            PointF("},{"type":"DELETE","lineNumber":151,"oldContent":"                sumX / frameKpts.size,"},{"type":"DELETE","lineNumber":153,"oldContent":"                sumY / frameKpts.size"},{"type":"DELETE","lineNumber":154,"oldContent":"            )"},{"type":"INSERT","lineNumber":130,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":156,"oldContent":"            "},{"type":"DELETE","lineNumber":158,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":159,"oldContent":"            Log.e(TAG, \"Fehler bei Bildschirmposition-Berechnung: ${e.message}\")"},{"type":"DELETE","lineNumber":160,"oldContent":"            null"},{"type":"DELETE","lineNumber":163,"oldContent":"     * Extrahiert gematchte Keypoint-Paare"},{"type":"DELETE","lineNumber":165,"oldContent":"     */"},{"type":"INSERT","lineNumber":137,"content":"     * Extrahiert gematchte Keypoint-Paare"},{"type":"INSERT","lineNumber":138,"content":"     */"},{"type":"DELETE","lineNumber":168,"oldContent":"     * Lädt Landmark-Features aus Assets"},{"type":"DELETE","lineNumber":170,"oldContent":"     */"},{"type":"DELETE","lineNumber":172,"oldContent":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"DELETE","lineNumber":174,"oldContent":"        Log.i(TAG, \"Lade Features für ${landmarks.size} Landmarks...\")"},{"type":"DELETE","lineNumber":176,"oldContent":"        "},{"type":"DELETE","lineNumber":178,"oldContent":"        landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":180,"oldContent":"            try {"},{"type":"DELETE","lineNumber":182,"oldContent":"                val bitmap = loadLandmarkImage(landmark.id)"},{"type":"DELETE","lineNumber":184,"oldContent":"                if (bitmap != null) {"},{"type":"DELETE","lineNumber":186,"oldContent":"                    val features = extractFeaturesFromBitmap(bitmap, landmark)"},{"type":"DELETE","lineNumber":188,"oldContent":"                    if (features != null) {"},{"type":"DELETE","lineNumber":190,"oldContent":"                        landmarkFeatures[landmark.id] = features"},{"type":"DELETE","lineNumber":192,"oldContent":"                        Log.d(TAG, \"Features geladen für Landmark: ${landmark.id}\")"},{"type":"DELETE","lineNumber":194,"oldContent":"                    }"},{"type":"DELETE","lineNumber":196,"oldContent":"                }"},{"type":"DELETE","lineNumber":198,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":200,"oldContent":"                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")"},{"type":"DELETE","lineNumber":202,"oldContent":"            }"},{"type":"DELETE","lineNumber":204,"oldContent":"        }"},{"type":"DELETE","lineNumber":206,"oldContent":"        "},{"type":"DELETE","lineNumber":208,"oldContent":"        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")"},{"type":"DELETE","lineNumber":210,"oldContent":"    }"},{"type":"DELETE","lineNumber":212,"oldContent":"    "},{"type":"DELETE","lineNumber":214,"oldContent":"    /**"},{"type":"DELETE","lineNumber":216,"oldContent":"     * Lädt ein Landmark-Bild aus den Assets"},{"type":"DELETE","lineNumber":218,"oldContent":"     */"},{"type":"DELETE","lineNumber":220,"oldContent":"    private fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":222,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":224,"oldContent":"            // Versuche verschiedene Bildformate"},{"type":"DELETE","lineNumber":226,"oldContent":"            val possiblePaths = listOf("},{"type":"DELETE","lineNumber":228,"oldContent":"                \"landmark_images/$landmarkId.jpg\","},{"type":"DELETE","lineNumber":230,"oldContent":"                \"landmark_images/$landmarkId.png\","},{"type":"DELETE","lineNumber":232,"oldContent":"                \"landmarks/$landmarkId.jpg\","},{"type":"DELETE","lineNumber":234,"oldContent":"                \"landmarks/$landmarkId.png\","},{"type":"DELETE","lineNumber":236,"oldContent":"                \"images/$landmarkId.jpg\","},{"type":"DELETE","lineNumber":238,"oldContent":"                \"images/$landmarkId.png\""},{"type":"DELETE","lineNumber":240,"oldContent":"            )"},{"type":"DELETE","lineNumber":242,"oldContent":"            "},{"type":"DELETE","lineNumber":244,"oldContent":"            for (path in possiblePaths) {"},{"type":"DELETE","lineNumber":246,"oldContent":"                try {"},{"type":"DELETE","lineNumber":248,"oldContent":"                    val inputStream = context.assets.open(path)"},{"type":"DELETE","lineNumber":250,"oldContent":"                    val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"DELETE","lineNumber":252,"oldContent":"                    inputStream.close()"},{"type":"DELETE","lineNumber":254,"oldContent":"                    if (bitmap != null) {"},{"type":"DELETE","lineNumber":256,"oldContent":"                        Log.d(TAG, \"Landmark-Bild geladen: $path\")"},{"type":"DELETE","lineNumber":258,"oldContent":"                        return bitmap"},{"type":"DELETE","lineNumber":260,"oldContent":"                    }"},{"type":"DELETE","lineNumber":262,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":264,"oldContent":"                    // Nächsten Pfad versuchen"},{"type":"DELETE","lineNumber":266,"oldContent":"                }"},{"type":"DELETE","lineNumber":268,"oldContent":"            }"},{"type":"DELETE","lineNumber":270,"oldContent":"            "},{"type":"DELETE","lineNumber":272,"oldContent":"            Log.w(TAG, \"Kein Bild gefunden für Landmark: $landmarkId\")"},{"type":"DELETE","lineNumber":274,"oldContent":"            null"},{"type":"DELETE","lineNumber":276,"oldContent":"            "},{"type":"DELETE","lineNumber":278,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":280,"oldContent":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":282,"oldContent":"            null"},{"type":"DELETE","lineNumber":284,"oldContent":"        }"},{"type":"DELETE","lineNumber":286,"oldContent":"    }"},{"type":"DELETE","lineNumber":288,"oldContent":"    "},{"type":"DELETE","lineNumber":290,"oldContent":"    /**"},{"type":"DELETE","lineNumber":292,"oldContent":"     * Extrahiert Features aus einem Bitmap"},{"type":"DELETE","lineNumber":294,"oldContent":"     */"},{"type":"DELETE","lineNumber":296,"oldContent":"    private fun extractFeaturesFromBitmap(bitmap: Bitmap, landmark: ProcessedLandmark): LandmarkFeatures? {"},{"type":"DELETE","lineNumber":298,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":300,"oldContent":"            // Konvertiere Bitmap zu OpenCV Mat"},{"type":"DELETE","lineNumber":302,"oldContent":"            val mat = Mat()"},{"type":"DELETE","lineNumber":304,"oldContent":"            Utils.bitmapToMat(bitmap, mat)"},{"type":"INSERT","lineNumber":209,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":210,"content":"            Log.e(TAG, \"Fehler bei geometrischer Validierung: ${e.message}\")"},{"type":"INSERT","lineNumber":211,"content":"            Pair(0f, null)"},{"type":"INSERT","lineNumber":212,"content":"        }"},{"type":"INSERT","lineNumber":213,"content":"    }"},{"type":"INSERT","lineNumber":214,"content":"    "},{"type":"INSERT","lineNumber":215,"content":""},{"type":"INSERT","lineNumber":216,"content":"    "},{"type":"INSERT","lineNumber":217,"content":"    /**"},{"type":"INSERT","lineNumber":218,"content":"     * Lädt Landmark-Features aus Assets"},{"type":"INSERT","lineNumber":219,"content":"     */"},{"type":"INSERT","lineNumber":220,"content":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"INSERT","lineNumber":221,"content":"        Log.i(TAG, \"Lade Features für ${landmarks.size} Landmarks...\")"},{"type":"INSERT","lineNumber":222,"content":"        "},{"type":"INSERT","lineNumber":223,"content":"        landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":224,"content":"            try {"},{"type":"INSERT","lineNumber":225,"content":"                val bitmap = loadLandmarkImage(landmark.id)"},{"type":"INSERT","lineNumber":226,"content":"                if (bitmap != null) {"},{"type":"INSERT","lineNumber":227,"content":"                    val features = extractFeaturesFromBitmap(bitmap, landmark)"},{"type":"INSERT","lineNumber":228,"content":"                    if (features != null) {"},{"type":"INSERT","lineNumber":229,"content":"                        landmarkFeatures[landmark.id] = features"},{"type":"INSERT","lineNumber":230,"content":"                        Log.d(TAG, \"Features geladen für Landmark: ${landmark.id}\")"},{"type":"INSERT","lineNumber":231,"content":"                    }"},{"type":"INSERT","lineNumber":232,"content":"                }"},{"type":"INSERT","lineNumber":233,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":234,"content":"                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")"},{"type":"INSERT","lineNumber":235,"content":"            }"},{"type":"INSERT","lineNumber":236,"content":"        }"},{"type":"INSERT","lineNumber":237,"content":"        "},{"type":"INSERT","lineNumber":238,"content":"        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")"},{"type":"INSERT","lineNumber":239,"content":"    }"},{"type":"INSERT","lineNumber":240,"content":"    "},{"type":"INSERT","lineNumber":241,"content":"    /**"},{"type":"INSERT","lineNumber":242,"content":"     * Lädt ein Landmark-Bild aus den Assets"},{"type":"INSERT","lineNumber":243,"content":"     */"},{"type":"INSERT","lineNumber":244,"content":"    private fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":245,"content":"        return try {"},{"type":"INSERT","lineNumber":246,"content":"            // Versuche verschiedene Bildformate"},{"type":"INSERT","lineNumber":247,"content":"            val possiblePaths = listOf("},{"type":"INSERT","lineNumber":248,"content":"                \"landmark_images/$landmarkId.jpg\","},{"type":"INSERT","lineNumber":249,"content":"                \"landmark_images/$landmarkId.png\","},{"type":"INSERT","lineNumber":250,"content":"                \"landmarks/$landmarkId.jpg\","},{"type":"INSERT","lineNumber":251,"content":"                \"landmarks/$landmarkId.png\","},{"type":"INSERT","lineNumber":252,"content":"                \"images/$landmarkId.jpg\","},{"type":"INSERT","lineNumber":253,"content":"                \"images/$landmarkId.png\""},{"type":"INSERT","lineNumber":254,"content":"            )"},{"type":"INSERT","lineNumber":256,"content":"            for (path in possiblePaths) {"},{"type":"INSERT","lineNumber":257,"content":"                try {"},{"type":"INSERT","lineNumber":258,"content":"                    val inputStream = context.assets.open(path)"},{"type":"INSERT","lineNumber":259,"content":"                    val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"INSERT","lineNumber":260,"content":"                    inputStream.close()"},{"type":"INSERT","lineNumber":261,"content":"                    if (bitmap != null) {"},{"type":"INSERT","lineNumber":262,"content":"                        Log.d(TAG, \"Landmark-Bild geladen: $path\")"},{"type":"INSERT","lineNumber":263,"content":"                        return bitmap"},{"type":"INSERT","lineNumber":264,"content":"                    }"},{"type":"INSERT","lineNumber":265,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":266,"content":"                    // Nächsten Pfad versuchen"},{"type":"INSERT","lineNumber":267,"content":"                }"},{"type":"INSERT","lineNumber":268,"content":"            }"},{"type":"INSERT","lineNumber":269,"content":"            "},{"type":"INSERT","lineNumber":270,"content":"            Log.w(TAG, \"Kein Bild gefunden für Landmark: $landmarkId\")"},{"type":"INSERT","lineNumber":271,"content":"            null"},{"type":"INSERT","lineNumber":272,"content":"            "},{"type":"INSERT","lineNumber":274,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"INSERT","lineNumber":275,"content":"            null"},{"type":"INSERT","lineNumber":276,"content":"        }"},{"type":"INSERT","lineNumber":277,"content":"    }"},{"type":"INSERT","lineNumber":278,"content":"    "},{"type":"INSERT","lineNumber":279,"content":"    /**"},{"type":"INSERT","lineNumber":280,"content":"     * Extrahiert Features aus einem Bitmap"},{"type":"INSERT","lineNumber":281,"content":"     */"},{"type":"INSERT","lineNumber":282,"content":"    private fun extractFeaturesFromBitmap(bitmap: Bitmap, landmark: ProcessedLandmark): LandmarkFeatures? {"},{"type":"INSERT","lineNumber":283,"content":"        return try {"},{"type":"INSERT","lineNumber":284,"content":"            // Konvertiere Bitmap zu OpenCV Mat"},{"type":"INSERT","lineNumber":285,"content":"            val mat = Mat()"},{"type":"INSERT","lineNumber":286,"content":"            Utils.bitmapToMat(bitmap, mat)"},{"type":"INSERT","lineNumber":287,"content":"            "},{"type":"DELETE","lineNumber":309,"oldContent":"            Log.e(TAG, \"Fehler bei geometrischer Validierung: ${e.message}\")"},{"type":"DELETE","lineNumber":311,"oldContent":"            Pair(0f, null)"},{"type":"DELETE","lineNumber":313,"oldContent":"        }"},{"type":"DELETE","lineNumber":315,"oldContent":"    }"},{"type":"DELETE","lineNumber":317,"oldContent":"    "},{"type":"DELETE","lineNumber":319,"oldContent":"    /**"}]},{"timestamp":1754562080773,"changes":[{"type":"INSERT","lineNumber":36,"content":"        val matches: List<DMatch>"},{"type":"DELETE","lineNumber":37,"oldContent":"    )"},{"type":"INSERT","lineNumber":39,"content":"    init {"},{"type":"DELETE","lineNumber":40,"oldContent":"        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")"},{"type":"DELETE","lineNumber":92,"oldContent":"            val matchesMatOfDMatch = MatOfDMatch()"},{"type":"MODIFY","lineNumber":94,"content":"            val matchesMatOfDMatch = MatOfDMatch()","oldContent":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, matchesMatOfDMatch)"},{"type":"INSERT","lineNumber":95,"content":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, matchesMatOfDMatch)"},{"type":"DELETE","lineNumber":103,"oldContent":"            "},{"type":"MODIFY","lineNumber":107,"content":"            if (goodMatches.size < 4) { // Mindestens 4 Matches für Homographie","oldContent":"            if (goodMatches.size < 4) { // Mindestens 4 Matches für Homographie"},{"type":"MODIFY","lineNumber":111,"content":"            ","oldContent":"            "},{"type":"INSERT","lineNumber":115,"content":"            "},{"type":"DELETE","lineNumber":118,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":123,"oldContent":"     * Extrahiert gematchte Keypoint-Paare"},{"type":"DELETE","lineNumber":124,"oldContent":"     */"},{"type":"INSERT","lineNumber":130,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":137,"content":"     * Extrahiert gematchte Keypoint-Paare"},{"type":"INSERT","lineNumber":138,"content":"     */"},{"type":"DELETE","lineNumber":160,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":161,"content":"    private fun validateGeometry(matchedKeypoints: MatchedKeypoints, frameSize: Size): Pair<Float, PointF?> {"},{"type":"INSERT","lineNumber":162,"content":"        return try {"},{"type":"INSERT","lineNumber":163,"content":"            if (matchedKeypoints.frameKeypoints.size < 4) {"},{"type":"INSERT","lineNumber":164,"content":"                return Pair(0f, null)"},{"type":"INSERT","lineNumber":165,"content":"            }"},{"type":"INSERT","lineNumber":166,"content":"            "},{"type":"INSERT","lineNumber":167,"content":"            // Konvertiere Keypoints zu OpenCV Points"},{"type":"INSERT","lineNumber":168,"content":"            val framePoints = MatOfPoint2f()"},{"type":"INSERT","lineNumber":169,"content":"            val landmarkPoints = MatOfPoint2f()"},{"type":"INSERT","lineNumber":170,"content":"            "},{"type":"INSERT","lineNumber":171,"content":"            val framePointsArray = matchedKeypoints.frameKeypoints.map { Point(it.pt.x, it.pt.y) }.toTypedArray()"},{"type":"INSERT","lineNumber":172,"content":"            val landmarkPointsArray = matchedKeypoints.landmarkKeypoints.map { Point(it.pt.x, it.pt.y) }.toTypedArray()"},{"type":"INSERT","lineNumber":173,"content":"            "},{"type":"INSERT","lineNumber":174,"content":"            framePoints.fromArray(*framePointsArray)"},{"type":"INSERT","lineNumber":175,"content":"            landmarkPoints.fromArray(*landmarkPointsArray)"},{"type":"INSERT","lineNumber":176,"content":"            "},{"type":"INSERT","lineNumber":177,"content":"            // Berechne Homographie mit RANSAC"},{"type":"INSERT","lineNumber":178,"content":"            val mask = Mat()"},{"type":"INSERT","lineNumber":179,"content":"            val homography = Calib3d.findHomography(landmarkPoints, framePoints, Calib3d.RANSAC, 3.0, mask)"},{"type":"INSERT","lineNumber":180,"content":"            "},{"type":"INSERT","lineNumber":181,"content":"            if (homography.empty()) {"},{"type":"INSERT","lineNumber":182,"content":"                return Pair(0f, null)"},{"type":"INSERT","lineNumber":183,"content":"            }"},{"type":"INSERT","lineNumber":184,"content":"            "},{"type":"INSERT","lineNumber":185,"content":"            // Zähle Inliers"},{"type":"INSERT","lineNumber":186,"content":"            val maskArray = mask.toArray()"},{"type":"INSERT","lineNumber":187,"content":"            val inlierCount = maskArray.count { it[0] > 0 }"},{"type":"INSERT","lineNumber":188,"content":"            val inlierRatio = inlierCount.toFloat() / matchedKeypoints.frameKeypoints.size"},{"type":"INSERT","lineNumber":189,"content":"            "},{"type":"INSERT","lineNumber":190,"content":"            // Berechne Confidence basierend auf Inlier-Ratio und Match-Qualität"},{"type":"INSERT","lineNumber":191,"content":"            val matchQuality = 1f - (matchedKeypoints.matches.map { it.distance }.average().toFloat() / 100f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":192,"content":"            val confidence = (inlierRatio * 0.7f + matchQuality * 0.3f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":193,"content":"            "},{"type":"INSERT","lineNumber":194,"content":"            // Berechne Schwerpunkt der Inlier-Keypoints"},{"type":"INSERT","lineNumber":195,"content":"            val inlierFramePoints = matchedKeypoints.frameKeypoints.filterIndexed { index, _ -> "},{"type":"INSERT","lineNumber":196,"content":"                index < maskArray.size && maskArray[index][0] > 0 "},{"type":"INSERT","lineNumber":197,"content":"            }"},{"type":"INSERT","lineNumber":198,"content":"            "},{"type":"INSERT","lineNumber":199,"content":"            val screenPosition = if (inlierFramePoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":200,"content":"                val avgX = inlierFramePoints.map { it.pt.x }.average().toFloat()"},{"type":"INSERT","lineNumber":201,"content":"                val avgY = inlierFramePoints.map { it.pt.y }.average().toFloat()"},{"type":"INSERT","lineNumber":202,"content":"                PointF(avgX, avgY)"},{"type":"INSERT","lineNumber":203,"content":"            } else {"},{"type":"INSERT","lineNumber":204,"content":"                null"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"            "},{"type":"INSERT","lineNumber":207,"content":"            Pair(confidence, screenPosition)"},{"type":"INSERT","lineNumber":208,"content":"            "},{"type":"INSERT","lineNumber":209,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":164,"oldContent":"    private fun validateGeometry(matchedKeypoints: MatchedKeypoints, frameSize: Size): Pair<Float, PointF?> {"},{"type":"DELETE","lineNumber":167,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":170,"oldContent":"            if (matchedKeypoints.frameKeypoints.size < 4) {"},{"type":"DELETE","lineNumber":173,"oldContent":"                return Pair(0f, null)"},{"type":"DELETE","lineNumber":176,"oldContent":"            }"},{"type":"DELETE","lineNumber":179,"oldContent":"            "},{"type":"DELETE","lineNumber":182,"oldContent":"            // Konvertiere Keypoints zu OpenCV Points"},{"type":"DELETE","lineNumber":185,"oldContent":"            val framePoints = MatOfPoint2f()"},{"type":"DELETE","lineNumber":188,"oldContent":"            val landmarkPoints = MatOfPoint2f()"},{"type":"DELETE","lineNumber":191,"oldContent":"            "},{"type":"DELETE","lineNumber":194,"oldContent":"            val framePointsArray = matchedKeypoints.frameKeypoints.map { Point(it.pt.x, it.pt.y) }.toTypedArray()"},{"type":"DELETE","lineNumber":197,"oldContent":"            val landmarkPointsArray = matchedKeypoints.landmarkKeypoints.map { Point(it.pt.x, it.pt.y) }.toTypedArray()"},{"type":"DELETE","lineNumber":200,"oldContent":"            "},{"type":"DELETE","lineNumber":203,"oldContent":"            framePoints.fromArray(*framePointsArray)"},{"type":"DELETE","lineNumber":206,"oldContent":"            landmarkPoints.fromArray(*landmarkPointsArray)"},{"type":"DELETE","lineNumber":209,"oldContent":"            "},{"type":"DELETE","lineNumber":210,"oldContent":"     * Lädt ein Landmark-Bild aus den Assets"},{"type":"INSERT","lineNumber":242,"content":"     * Lädt ein Landmark-Bild aus den Assets basierend auf der Landmark-ID"},{"type":"DELETE","lineNumber":212,"oldContent":"            // Berechne Homographie mit RANSAC"},{"type":"DELETE","lineNumber":215,"oldContent":"            val mask = Mat()"},{"type":"DELETE","lineNumber":216,"oldContent":"            // Versuche verschiedene Bildformate"},{"type":"INSERT","lineNumber":246,"content":"            // Versuche verschiedene Bildformate für die neue ID-Struktur (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":218,"oldContent":"            val homography = Calib3d.findHomography(landmarkPoints, framePoints, Calib3d.RANSAC, 3.0, mask)"},{"type":"DELETE","lineNumber":221,"oldContent":"            "},{"type":"INSERT","lineNumber":250,"content":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.jpg\", // PT_1_566.jpg"},{"type":"INSERT","lineNumber":251,"content":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.png\","},{"type":"DELETE","lineNumber":224,"oldContent":"            if (homography.empty()) {"},{"type":"DELETE","lineNumber":227,"oldContent":"                return Pair(0f, null)"},{"type":"DELETE","lineNumber":229,"oldContent":"            }"},{"type":"INSERT","lineNumber":257,"content":"            "},{"type":"DELETE","lineNumber":232,"oldContent":"            "},{"type":"DELETE","lineNumber":235,"oldContent":"            // Zähle Inliers"},{"type":"DELETE","lineNumber":238,"oldContent":"            val maskArray = mask.toArray()"},{"type":"DELETE","lineNumber":241,"oldContent":"            val inlierCount = maskArray.count { it[0] > 0 }"},{"type":"DELETE","lineNumber":244,"oldContent":"            val inlierRatio = inlierCount.toFloat() / matchedKeypoints.frameKeypoints.size"},{"type":"DELETE","lineNumber":247,"oldContent":"            "},{"type":"DELETE","lineNumber":250,"oldContent":"            // Berechne Confidence basierend auf Inlier-Ratio und Match-Qualität"},{"type":"DELETE","lineNumber":253,"oldContent":"            val matchQuality = 1f - (matchedKeypoints.matches.map { it.distance }.average().toFloat() / 100f).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":255,"oldContent":"            val confidence = (inlierRatio * 0.7f + matchQuality * 0.3f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":275,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":258,"oldContent":"            "},{"type":"DELETE","lineNumber":261,"oldContent":"            // Berechne Schwerpunkt der Inlier-Keypoints"},{"type":"DELETE","lineNumber":264,"oldContent":"            val inlierFramePoints = matchedKeypoints.frameKeypoints.filterIndexed { index, _ -> "},{"type":"DELETE","lineNumber":267,"oldContent":"                index < maskArray.size && maskArray[index][0] > 0 "},{"type":"DELETE","lineNumber":270,"oldContent":"            }"},{"type":"DELETE","lineNumber":273,"oldContent":"            "},{"type":"DELETE","lineNumber":276,"oldContent":"            val screenPosition = if (inlierFramePoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":277,"oldContent":"                val avgX = inlierFramePoints.map { it.pt.x }.average().toFloat()"},{"type":"DELETE","lineNumber":278,"oldContent":"                val avgY = inlierFramePoints.map { it.pt.y }.average().toFloat()"},{"type":"DELETE","lineNumber":279,"oldContent":"                PointF(avgX, avgY)"},{"type":"DELETE","lineNumber":280,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":281,"oldContent":"                null"},{"type":"DELETE","lineNumber":282,"oldContent":"            }"},{"type":"DELETE","lineNumber":283,"oldContent":"            "},{"type":"DELETE","lineNumber":284,"oldContent":"            Pair(confidence, screenPosition)"},{"type":"DELETE","lineNumber":285,"oldContent":"            "},{"type":"DELETE","lineNumber":286,"oldContent":"            "},{"type":"DELETE","lineNumber":287,"oldContent":"        } catch (e: Exception) {"}]},{"timestamp":1754562096461,"changes":[{"type":"INSERT","lineNumber":93,"content":"            // 1. Brute-Force Matching"},{"type":"DELETE","lineNumber":95,"oldContent":"            // 1. Brute-Force Matching"},{"type":"MODIFY","lineNumber":107,"content":"            if (goodMatches.size < 4) { // Mindestens 4 Matches für Homographie","oldContent":"            if (goodMatches.size < 4) { // Mindestens 4 Matches für Homographie"},{"type":"MODIFY","lineNumber":111,"content":"            ","oldContent":"            "},{"type":"MODIFY","lineNumber":115,"content":"            ","oldContent":"            "},{"type":"DELETE","lineNumber":127,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":130,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":135,"oldContent":"     * Extrahiert gematchte Keypoint-Paare"},{"type":"MODIFY","lineNumber":137,"content":"     * Extrahiert gematchte Keypoint-Paare","oldContent":"     */"},{"type":"INSERT","lineNumber":138,"content":"     */"},{"type":"MODIFY","lineNumber":161,"content":"    private fun validateGeometry(matchedKeypoints: MatchedKeypoints, frameSize: Size): Pair<Float, PointF?> {","oldContent":"    private fun validateGeometry(matchedKeypoints: MatchedKeypoints, frameSize: Size): Pair<Float, PointF?> {"},{"type":"DELETE","lineNumber":163,"oldContent":"            Log.e(TAG, \"Fehler bei geometrischer Validierung: ${e.message}\")"},{"type":"DELETE","lineNumber":165,"oldContent":"            Pair(0f, null)"},{"type":"DELETE","lineNumber":168,"oldContent":"        }"},{"type":"DELETE","lineNumber":170,"oldContent":"    }"},{"type":"DELETE","lineNumber":173,"oldContent":"    "},{"type":"DELETE","lineNumber":175,"oldContent":""},{"type":"DELETE","lineNumber":178,"oldContent":"    "},{"type":"DELETE","lineNumber":180,"oldContent":"    /**"},{"type":"DELETE","lineNumber":183,"oldContent":"     * Lädt Landmark-Features aus Assets"},{"type":"DELETE","lineNumber":185,"oldContent":"     */"},{"type":"DELETE","lineNumber":188,"oldContent":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"DELETE","lineNumber":190,"oldContent":"        Log.i(TAG, \"Lade Features für ${landmarks.size} Landmarks...\")"},{"type":"DELETE","lineNumber":193,"oldContent":"        "},{"type":"DELETE","lineNumber":195,"oldContent":"        landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":198,"oldContent":"            try {"},{"type":"DELETE","lineNumber":200,"oldContent":"                val bitmap = loadLandmarkImage(landmark.id)"},{"type":"DELETE","lineNumber":203,"oldContent":"                if (bitmap != null) {"},{"type":"DELETE","lineNumber":205,"oldContent":"                    val features = extractFeaturesFromBitmap(bitmap, landmark)"},{"type":"DELETE","lineNumber":208,"oldContent":"                    if (features != null) {"},{"type":"DELETE","lineNumber":210,"oldContent":"                        landmarkFeatures[landmark.id] = features"},{"type":"DELETE","lineNumber":213,"oldContent":"                        Log.d(TAG, \"Features geladen für Landmark: ${landmark.id}\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                    }"},{"type":"DELETE","lineNumber":218,"oldContent":"                }"},{"type":"DELETE","lineNumber":220,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":223,"oldContent":"                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")"},{"type":"DELETE","lineNumber":225,"oldContent":"            }"},{"type":"DELETE","lineNumber":228,"oldContent":"        }"},{"type":"DELETE","lineNumber":230,"oldContent":"        "},{"type":"DELETE","lineNumber":233,"oldContent":"        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")"},{"type":"DELETE","lineNumber":235,"oldContent":"    }"},{"type":"DELETE","lineNumber":238,"oldContent":"    "},{"type":"DELETE","lineNumber":240,"oldContent":"    /**"},{"type":"INSERT","lineNumber":210,"content":"            Log.e(TAG, \"Fehler bei geometrischer Validierung: ${e.message}\")"},{"type":"INSERT","lineNumber":211,"content":"            Pair(0f, null)"},{"type":"INSERT","lineNumber":212,"content":"        }"},{"type":"INSERT","lineNumber":213,"content":"    }"},{"type":"INSERT","lineNumber":214,"content":"    "},{"type":"INSERT","lineNumber":215,"content":""},{"type":"INSERT","lineNumber":216,"content":"    "},{"type":"INSERT","lineNumber":217,"content":"    /**"},{"type":"INSERT","lineNumber":218,"content":"     * Lädt Landmark-Features aus Assets"},{"type":"INSERT","lineNumber":220,"content":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"INSERT","lineNumber":221,"content":"        Log.i(TAG, \"Lade Features für ${landmarks.size} Landmarks...\")"},{"type":"INSERT","lineNumber":222,"content":"        "},{"type":"INSERT","lineNumber":223,"content":"        landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":224,"content":"            try {"},{"type":"INSERT","lineNumber":225,"content":"                val bitmap = loadLandmarkImage(landmark.id)"},{"type":"INSERT","lineNumber":226,"content":"                if (bitmap != null) {"},{"type":"INSERT","lineNumber":227,"content":"                    val features = extractFeaturesFromBitmap(bitmap, landmark)"},{"type":"INSERT","lineNumber":228,"content":"                    if (features != null) {"},{"type":"INSERT","lineNumber":229,"content":"                        landmarkFeatures[landmark.id] = features"},{"type":"INSERT","lineNumber":230,"content":"                        Log.d(TAG, \"Features geladen für Landmark: ${landmark.id}\")"},{"type":"INSERT","lineNumber":231,"content":"                    }"},{"type":"INSERT","lineNumber":232,"content":"                }"},{"type":"INSERT","lineNumber":233,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":234,"content":"                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")"},{"type":"INSERT","lineNumber":235,"content":"            }"},{"type":"INSERT","lineNumber":236,"content":"        }"},{"type":"INSERT","lineNumber":237,"content":"        "},{"type":"INSERT","lineNumber":238,"content":"        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")"},{"type":"INSERT","lineNumber":239,"content":"    }"},{"type":"INSERT","lineNumber":240,"content":"    "},{"type":"INSERT","lineNumber":241,"content":"    /**"},{"type":"INSERT","lineNumber":242,"content":"     * Lädt ein Landmark-Bild aus den Assets basierend auf der Landmark-ID"},{"type":"INSERT","lineNumber":243,"content":"     */"},{"type":"INSERT","lineNumber":246,"content":"            // Versuche verschiedene Bildformate für die neue ID-Struktur (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":250,"content":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.jpg\", // PT_1_566.jpg"},{"type":"INSERT","lineNumber":251,"content":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.png\","},{"type":"INSERT","lineNumber":257,"content":"            "},{"type":"DELETE","lineNumber":261,"oldContent":"     * Lädt ein Landmark-Bild aus den Assets basierend auf der Landmark-ID"},{"type":"DELETE","lineNumber":265,"oldContent":"            // Versuche verschiedene Bildformate für die neue ID-Struktur (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":269,"oldContent":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.jpg\", // PT_1_566.jpg"},{"type":"DELETE","lineNumber":270,"oldContent":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.png\","},{"type":"INSERT","lineNumber":275,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":275,"oldContent":"            "},{"type":"DELETE","lineNumber":288,"oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":342,"content":"        Log.i(TAG, \"LandmarkFeatureStorage initialized\")","oldContent":"        Log.i(TAG, \"LandmarkFeatureStorage initialized (stub)\")"},{"type":"MODIFY","lineNumber":346,"content":"        Log.d(TAG, \"importLandmarksFromAssets called\")","oldContent":"        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")"},{"type":"INSERT","lineNumber":347,"content":"        // Hier könnten wir Assets scannen, aber das macht die FeatureMatchingEngine bereits"},{"type":"INSERT","lineNumber":351,"content":"    /**"},{"type":"INSERT","lineNumber":352,"content":"     * Lädt route-spezifische Landmarks basierend auf den IDs in der Route"},{"type":"INSERT","lineNumber":353,"content":"     */"},{"type":"DELETE","lineNumber":351,"oldContent":"        Log.d(TAG, \"loadRouteSpecificLandmarks called (stub)\")"},{"type":"DELETE","lineNumber":352,"oldContent":"        return emptyList()"},{"type":"INSERT","lineNumber":355,"content":"        Log.d(TAG, \"loadRouteSpecificLandmarks called\")"},{"type":"INSERT","lineNumber":356,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":357,"content":"        "},{"type":"INSERT","lineNumber":358,"content":"        // Extrahiere alle Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":359,"content":"        route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":360,"content":"            pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":361,"content":"                // Hauptlandmark aus landmarkFromInstruction"},{"type":"INSERT","lineNumber":362,"content":"                routePart.landmarkFromInstruction?.let { landmarkIds.add(it) }"},{"type":"INSERT","lineNumber":363,"content":"                "},{"type":"INSERT","lineNumber":364,"content":"                // Zusätzliche Landmarks aus landmarks-Array"},{"type":"INSERT","lineNumber":365,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":366,"content":"                    landmark.id?.let { landmarkIds.add(it) }"},{"type":"INSERT","lineNumber":367,"content":"                }"},{"type":"INSERT","lineNumber":368,"content":"            }"},{"type":"INSERT","lineNumber":369,"content":"        }"},{"type":"INSERT","lineNumber":370,"content":"        "},{"type":"INSERT","lineNumber":371,"content":"        Log.i(TAG, \"Gefunden ${landmarkIds.size} Landmark-IDs in Route: ${landmarkIds.take(3)}\")"},{"type":"INSERT","lineNumber":372,"content":"        "},{"type":"INSERT","lineNumber":373,"content":"        return landmarkIds.map { ProcessedLandmark(it, it) }"},{"type":"DELETE","lineNumber":356,"oldContent":"        Log.d(TAG, \"loadAllLandmarks called (stub)\")"},{"type":"INSERT","lineNumber":377,"content":"        Log.d(TAG, \"loadAllLandmarks called - returning empty list (use route-specific loading)\")"},{"type":"DELETE","lineNumber":361,"oldContent":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"DELETE","lineNumber":366,"oldContent":"        Log.d(TAG, \"cleanup called (stub)\")"},{"type":"INSERT","lineNumber":386,"content":"        Log.d(TAG, \"cleanup called\")"},{"type":"DELETE","lineNumber":370,"oldContent":"        Log.d(TAG, \"saveLandmarkFeatures called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":390,"content":"        Log.d(TAG, \"saveLandmarkFeatures called: $landmarkId\")"}]},{"timestamp":1754562163171,"changes":[{"type":"INSERT","lineNumber":106,"content":"            "},{"type":"DELETE","lineNumber":107,"oldContent":"            if (goodMatches.size < 4) { // Mindestens 4 Matches für Homographie"},{"type":"INSERT","lineNumber":110,"content":"            }"},{"type":"DELETE","lineNumber":111,"oldContent":"            "},{"type":"INSERT","lineNumber":114,"content":"            val (confidence, screenPosition) = validateGeometry(matchedKeypoints, frameSize)"},{"type":"DELETE","lineNumber":115,"oldContent":"            "},{"type":"MODIFY","lineNumber":130,"content":"        } catch (e: Exception) {","oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":136,"content":"    /**"},{"type":"DELETE","lineNumber":138,"oldContent":"    /**"},{"type":"INSERT","lineNumber":160,"content":"     */"},{"type":"DELETE","lineNumber":161,"oldContent":"    private fun validateGeometry(matchedKeypoints: MatchedKeypoints, frameSize: Size): Pair<Float, PointF?> {"},{"type":"INSERT","lineNumber":191,"content":"            val matchQuality = 1f - (matchedKeypoints.matches.map { it.distance }.average().toFloat() / 100f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":192,"content":"            val confidence = (inlierRatio * 0.7f + matchQuality * 0.3f).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":193,"content":"            "},{"type":"INSERT","lineNumber":194,"content":"            // Berechne Schwerpunkt der Inlier-Keypoints"},{"type":"INSERT","lineNumber":195,"content":"            val inlierFramePoints = matchedKeypoints.frameKeypoints.filterIndexed { index, _ -> "},{"type":"INSERT","lineNumber":196,"content":"                index < maskArray.size && maskArray[index][0] > 0 "},{"type":"INSERT","lineNumber":197,"content":"            }"},{"type":"INSERT","lineNumber":198,"content":"            "},{"type":"INSERT","lineNumber":199,"content":"            val screenPosition = if (inlierFramePoints.isNotEmpty()) {"},{"type":"INSERT","lineNumber":200,"content":"                val avgX = inlierFramePoints.map { it.pt.x }.average().toFloat()"},{"type":"INSERT","lineNumber":201,"content":"                val avgY = inlierFramePoints.map { it.pt.y }.average().toFloat()"},{"type":"INSERT","lineNumber":202,"content":"                PointF(avgX, avgY)"},{"type":"INSERT","lineNumber":203,"content":"            } else {"},{"type":"INSERT","lineNumber":204,"content":"                null"},{"type":"INSERT","lineNumber":205,"content":"            }"},{"type":"INSERT","lineNumber":206,"content":"            "},{"type":"INSERT","lineNumber":207,"content":"            Pair(confidence, screenPosition)"},{"type":"INSERT","lineNumber":208,"content":"            "},{"type":"INSERT","lineNumber":209,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":193,"oldContent":"            val matchQuality = 1f - (matchedKeypoints.matches.map { it.distance }.average().toFloat() / 100f).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":195,"oldContent":"            val confidence = (inlierRatio * 0.7f + matchQuality * 0.3f).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":198,"oldContent":"            "},{"type":"DELETE","lineNumber":201,"oldContent":"            // Berechne Schwerpunkt der Inlier-Keypoints"},{"type":"DELETE","lineNumber":203,"oldContent":"            val inlierFramePoints = matchedKeypoints.frameKeypoints.filterIndexed { index, _ -> "},{"type":"DELETE","lineNumber":205,"oldContent":"                index < maskArray.size && maskArray[index][0] > 0 "},{"type":"INSERT","lineNumber":219,"content":"     */"},{"type":"DELETE","lineNumber":208,"oldContent":"            }"},{"type":"DELETE","lineNumber":210,"oldContent":"            "},{"type":"DELETE","lineNumber":213,"oldContent":"            val screenPosition = if (inlierFramePoints.isNotEmpty()) {"},{"type":"DELETE","lineNumber":216,"oldContent":"                val avgX = inlierFramePoints.map { it.pt.x }.average().toFloat()"},{"type":"DELETE","lineNumber":218,"oldContent":"                val avgY = inlierFramePoints.map { it.pt.y }.average().toFloat()"},{"type":"DELETE","lineNumber":221,"oldContent":"                PointF(avgX, avgY)"},{"type":"DELETE","lineNumber":224,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":226,"oldContent":"                null"},{"type":"DELETE","lineNumber":230,"oldContent":"            }"},{"type":"DELETE","lineNumber":232,"oldContent":"            "},{"type":"DELETE","lineNumber":234,"oldContent":"            Pair(confidence, screenPosition)"},{"type":"DELETE","lineNumber":237,"oldContent":"            "},{"type":"DELETE","lineNumber":240,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":243,"oldContent":"     */"},{"type":"MODIFY","lineNumber":247,"content":"            val possiblePaths = listOf(","oldContent":"            val possiblePaths = listOf("},{"type":"INSERT","lineNumber":250,"content":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.jpg\", // PT_1_566.jpg"},{"type":"INSERT","lineNumber":251,"content":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.png\","},{"type":"DELETE","lineNumber":252,"oldContent":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.jpg\", // PT_1_566.jpg"},{"type":"DELETE","lineNumber":254,"oldContent":"                \"landmark_images/${landmarkId.replace(\"-\", \"_\")}.png\","},{"type":"INSERT","lineNumber":257,"content":"            "},{"type":"DELETE","lineNumber":261,"oldContent":"            "},{"type":"MODIFY","lineNumber":276,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")","oldContent":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":351,"oldContent":"    fun loadRouteSpecificLandmarks(route: com.example.arwalking.data.Route): List<ProcessedLandmark> {"},{"type":"DELETE","lineNumber":355,"oldContent":"    }"},{"type":"DELETE","lineNumber":356,"oldContent":"    "},{"type":"INSERT","lineNumber":354,"content":"    fun loadRouteSpecificLandmarks(route: com.example.arwalking.data.Route): List<ProcessedLandmark> {"},{"type":"DELETE","lineNumber":358,"oldContent":"    fun loadAllLandmarks(): List<ProcessedLandmark> {"},{"type":"DELETE","lineNumber":361,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":363,"oldContent":"    }"},{"type":"DELETE","lineNumber":365,"oldContent":"    "},{"type":"DELETE","lineNumber":367,"oldContent":"    fun getStorageStats(): StorageStats {"},{"type":"DELETE","lineNumber":370,"oldContent":"        return StorageStats()"},{"type":"DELETE","lineNumber":372,"oldContent":"    }"},{"type":"DELETE","lineNumber":374,"oldContent":"    "},{"type":"DELETE","lineNumber":376,"oldContent":"    fun cleanup() {"},{"type":"DELETE","lineNumber":379,"oldContent":"    }"},{"type":"DELETE","lineNumber":381,"oldContent":"    "},{"type":"DELETE","lineNumber":383,"oldContent":"    fun saveLandmarkFeatures(landmarkId: String, landmark: Any, features: Any, bitmap: android.graphics.Bitmap): Boolean {"},{"type":"DELETE","lineNumber":386,"oldContent":"        return true"},{"type":"DELETE","lineNumber":388,"oldContent":"    }"},{"type":"INSERT","lineNumber":374,"content":"    }"},{"type":"INSERT","lineNumber":375,"content":"    "},{"type":"INSERT","lineNumber":376,"content":"    fun loadAllLandmarks(): List<ProcessedLandmark> {"},{"type":"INSERT","lineNumber":377,"content":"        Log.d(TAG, \"loadAllLandmarks called - returning empty list (use route-specific loading)\")"},{"type":"INSERT","lineNumber":378,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":379,"content":"    }"},{"type":"INSERT","lineNumber":380,"content":"    "},{"type":"INSERT","lineNumber":381,"content":"    fun getStorageStats(): StorageStats {"},{"type":"INSERT","lineNumber":382,"content":"        return StorageStats()"},{"type":"INSERT","lineNumber":383,"content":"    }"},{"type":"INSERT","lineNumber":384,"content":"    "},{"type":"INSERT","lineNumber":385,"content":"    fun cleanup() {"},{"type":"INSERT","lineNumber":386,"content":"        Log.d(TAG, \"cleanup called\")"},{"type":"INSERT","lineNumber":387,"content":"    }"},{"type":"INSERT","lineNumber":388,"content":"    "},{"type":"INSERT","lineNumber":389,"content":"    fun saveLandmarkFeatures(landmarkId: String, landmark: Any, features: Any, bitmap: android.graphics.Bitmap): Boolean {"},{"type":"INSERT","lineNumber":390,"content":"        Log.d(TAG, \"saveLandmarkFeatures called: $landmarkId\")"},{"type":"INSERT","lineNumber":391,"content":"        return true"},{"type":"INSERT","lineNumber":392,"content":"    }"},{"type":"DELETE","lineNumber":394,"oldContent":"        Log.d(TAG, \"loadAllLandmarks called - returning empty list (use route-specific loading)\")"},{"type":"DELETE","lineNumber":404,"oldContent":"        Log.d(TAG, \"cleanup called\")"},{"type":"DELETE","lineNumber":409,"oldContent":"        Log.d(TAG, \"saveLandmarkFeatures called: $landmarkId\")"}]}]},"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-dda4d886-ce19-4342-a1cd-db5a657037d55257233241357909548.log":{"filePath":"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-dda4d886-ce19-4342-a1cd-db5a657037d55257233241357909548.log","baseContent":"<-------------> 0% CONFIGURING [63ms]\n<====---------> 33% CONFIGURING [161ms]> :app<========-----> 66% CONFIGURING [263ms]> :opencv<=============> 100% CONFIGURING [359ms]> IDLE<=------------> 14% EXECUTING [459ms]> :app:mapDebugSourceSetPaths\n<=======------> 56% EXECUTING [563ms]> :app:compileDebugKotlin> :app:checkDebugDuplicateClasses<===========--> 88% EXECUTING [663ms]> IDLE<===========--> 88% EXECUTING [763ms]<===========--> 88% EXECUTING [863ms]<===========--> 88% EXECUTING [963ms]<===========--> 88% EXECUTING [1s]\n> Task :app:compileDebugKotlin FAILED\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:11:30 Unresolved reference 'DescriptorMatcher'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:22:27 Unresolved reference 'DescriptorMatcher'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:22:52 Unresolved reference 'DescriptorMatcher'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:62:93 Unresolved reference 'size'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:65:115 Unresolved reference 'size'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:212:35 Expression 'channels' of type 'kotlin.Int' cannot be invoked as a function. Function 'invoke()' is not found.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:212:46 'operator' modifier is required on 'FirNamedFunctionSymbol kotlin/compareTo' in 'compareTo'.\n\n[Incubating] Problems report is available at: file:///Users/florian/Documents/GitHub/ar-walking/build/reports/problems/problems-report.html\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':app:compileDebugKotlin'.\n> A failure occurred while executing org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction\n   > Compilation error. See log for more details\n\n* Try:\n> Run with --stacktrace option to get the stack trace.\n> Run with --info or --debug option to get more log output.\n> Run with --scan to get full insights.\n> Get more help at https://help.gradle.org.\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nFor more on this, please refer to https://docs.gradle.org/8.13/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\n\nBUILD FAILED in 1s\n58 actionable tasks: 1 executed, 57 up-to-date\n\n\n\n<===========--> 89% EXECUTING [1s]> IDLE> IDLE<-------------> 0% WAITING","baseTimestamp":1754560965316},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/RouteRepository.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/RouteRepository.kt","baseContent":"package com.example.arwalking.data\n\nimport android.content.Context\nimport android.util.Log\nimport com.google.gson.Gson\nimport java.io.IOException\n\n/**\n * Repository für Route-Daten aus JSON-Assets\n */\nclass RouteRepository(private val context: Context) {\n    \n    private val TAG = \"RouteRepository\"\n    private val gson = Gson()\n    \n    suspend fun getRouteFromAssets(filename: String): RouteData? {\n        return try {\n            Log.i(TAG, \"Loading route from assets: $filename\")\n            \n            val jsonString = context.assets.open(filename).bufferedReader().use { it.readText() }\n            val routeData = gson.fromJson(jsonString, RouteData::class.java)\n            \n            Log.i(TAG, \"Route loaded successfully from $filename\")\n            routeData\n            \n        } catch (e: IOException) {\n            Log.e(TAG, \"Error reading route file $filename: ${e.message}\")\n            null\n        } catch (e: Exception) {\n            Log.e(TAG, \"Error parsing route data: ${e.message}\")\n            null\n        }\n    }\n    \n    suspend fun loadRoute(building: String, floor: String, additionalParam: String): RouteData? {\n        Log.d(TAG, \"loadRoute called (stub): $building, $floor\")\n        return getRouteFromAssets(\"models/final-route.json\")\n    }\n}\n\n// Datenklassen für Route-JSON\ndata class RouteData(\n    val route: Route\n)\n\ndata class Route(\n    val path: List<PathItem>\n)\n\ndata class PathItem(\n    val xmlName: String,\n    val xmlNameEn: String?,\n    val xmlNameDe: String?,\n    val xmlFile: String?,\n    val levelInfo: LevelInfo?,\n    val routeParts: List<RoutePart>\n)\n\ndata class LevelInfo(\n    val storeyNameEn: String?,\n    val storeyName: String?,\n    val storeyNameDe: String?,\n    val storey: String?,\n    val id: String?,\n    val width: String?,\n    val height: String?,\n    val mapfile: String?\n)\n\ndata class RoutePart(\n    val iconID: String?,\n    val instruction: String?,\n    val instructionEn: String?,\n    val instructionDe: String?,\n    val nodes: List<RouteNode>?,\n    val landmarks: List<RouteLandmark>?,\n    val landmarkFromInstruction: String? // Die wichtige Landmark-ID!\n)\n\ndata class RouteNode(\n    val node: NodeInfo?,\n    val edge: EdgeInfo?\n)\n\ndata class NodeInfo(\n    val x: String?,\n    val y: String?,\n    val id: String?,\n    val label: String?,\n    val type: String?,\n    val name: String?,\n    val roomid: String?,\n    val isdestination: String?,\n    val lsf: String?,\n    val oldroomid: String?\n)\n\ndata class EdgeInfo(\n    val dx: String?,\n    val dy: String?,\n    val cx: String?,\n    val cy: String?,\n    val ax: String?,\n    val ay: String?,\n    val bx: String?,\n    val by: String?,\n    val lengthInMeters: String?,\n    val id: String?,\n    val type: String?\n)\n\ndata class RouteLandmark(\n    val nameDe: String?,\n    val nameEn: String?,\n    val x: String?,\n    val y: String?,\n    val id: String?, // Die Landmark-ID für Feature-Matching\n    val type: String?,\n    val lsf: String?\n)","baseTimestamp":1754562005951},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/screens/Navigation.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/screens/Navigation.kt","baseContent":"package com.example.arwalking.screens\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.pm.PackageManager\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.ImageFormat\nimport android.graphics.Matrix\nimport android.graphics.Rect\nimport android.graphics.YuvImage\nimport android.os.Build\nimport android.util.Log\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.camera.core.AspectRatio\nimport androidx.camera.core.Camera\nimport androidx.camera.core.CameraInfo\nimport androidx.camera.core.CameraSelector\nimport androidx.camera.core.ImageAnalysis\nimport androidx.camera.core.ImageProxy\nimport androidx.camera.core.Preview\nimport androidx.camera.lifecycle.ProcessCameraProvider\nimport androidx.camera.view.PreviewView\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.foundation.layout.requiredWidth\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.staticCompositionLocalOf\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.drawBehind\nimport androidx.compose.ui.graphics.Brush\nimport com.example.arwalking.ui.theme.GradientUtils\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Paint\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport kotlinx.coroutines.launch\nimport com.example.arwalking.R\nimport com.example.arwalking.RouteViewModel\nimport com.example.arwalking.FeatureLandmark\nimport com.example.arwalking.components.AR3DArrowOverlay\nimport com.example.arwalking.components.ARInfoIsland\nimport com.example.arwalking.components.ARScanStatus\nimport com.example.arwalking.components.Animated3DArrowOverlay\nimport com.example.arwalking.components.ExpandedARInfoIsland\nimport com.example.arwalking.components.FeatureMappingStatusIndicator\nimport com.example.arwalking.components.FeatureMatchOverlay\nimport com.example.arwalking.components.rememberARScanStatus\n\n\nimport com.example.arwalking.data.FavoritesRepository\nimport com.example.arwalking.components.NavigationDrawer\nimport com.example.arwalking.components.NavigationDrawerList\nimport com.example.arwalking.components.NavigationStepData\nimport kotlinx.coroutines.delay\nimport org.opencv.android.Utils\nimport org.opencv.core.Mat\nimport java.io.ByteArrayOutputStream\nimport java.nio.ByteBuffer\nimport java.util.UUID\n\n\nval LocalNavController = staticCompositionLocalOf<NavController> {\n    error(\"No NavController provided\")\n}\n\n\n\n// Define navigation routes\nsealed class Screen(val route: String) {\n    object Camera : Screen(\"camera\")\n}\n\n@Composable\nfun CameraNavigation(\n    destination: String = \"Unbekanntes Ziel\",\n    startLocation: String = \"Unbekannter Start\"\n) {\n    val navController = rememberNavController()\n    val mainNavController = LocalNavController.current\n\n    NavHost(\n        navController = navController,\n        startDestination = Screen.Camera.route\n    ) {\n        composable(Screen.Camera.route) {\n            CameraScreen(\n                mainNavController = mainNavController,\n                destination = destination,\n                startLocation = startLocation\n            )\n        }\n    }\n}\n\n@Composable\nfun CameraScreen(\n    mainNavController: NavController,\n    destination: String = \"Unbekanntes Ziel\",\n    startLocation: String = \"Unbekannter Start\"\n) {\n    val context = LocalContext.current\n    val activity = context as Activity\n    val lifecycleOwner = androidx.lifecycle.compose.LocalLifecycleOwner.current\n    val routeViewModel: RouteViewModel = viewModel()\n    \n    // Lade Route aus JSON-Datei und aktiviere Feature Mapping sofort\n    LaunchedEffect(Unit) {\n        routeViewModel.loadNavigationRoute(context)\n        // Stelle sicher, dass Feature Mapping sofort aktiv ist\n        routeViewModel.enableStorageSystemImmediately(context)\n        // Starte Frame-Processing für Feature Matching\n        routeViewModel.startFrameProcessing()\n    }\n    \n    // Verwende Route-Informationen aus JSON oder Fallback-Werte\n    val currentRoute by routeViewModel.currentRoute.collectAsState()\n    val actualStartLocation = currentRoute?.let { \n        routeViewModel.getCurrentStartPoint() \n    } ?: startLocation\n    val actualDestination = currentRoute?.let { \n        routeViewModel.getCurrentEndPoint() \n    } ?: destination\n\n    var hasPermission by remember {\n        mutableStateOf(\n            ContextCompat.checkSelfPermission(\n                context,\n                Manifest.permission.CAMERA\n            ) == PackageManager.PERMISSION_GRANTED\n        )\n    }\n    var showRationaleDialog by remember { mutableStateOf(false) }\n\n    // Zoom state management\n    var currentZoomRatio by remember { mutableStateOf(1.0f) }\n    var availableZoomRatios by remember { mutableStateOf(listOf(0.7f, 1.0f, 2.0f)) }\n\n    val launcher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission()\n    ) { granted ->\n        hasPermission = granted\n    }\n\n    LaunchedEffect(hasPermission) {\n        if (!hasPermission) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&\n                ActivityCompat.shouldShowRequestPermissionRationale(\n                    activity,\n                    Manifest.permission.CAMERA\n                )\n            ) {\n                showRationaleDialog = true\n            } else {\n                launcher.launch(Manifest.permission.CAMERA)\n            }\n        }\n    }\n\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n        if (hasPermission) {\n            // Live-Kameravorschau\n            CameraPreviewView(\n                modifier = Modifier.fillMaxSize(),\n                lifecycleOwner = lifecycleOwner,\n                zoomRatio = currentZoomRatio,\n                onAvailableZoomRatiosChanged = { ratios ->\n                    availableZoomRatios = ratios\n                },\n                onFrameProcessed = { bitmap ->\n                    // Frame für Feature Mapping verarbeiten\n                    try {\n                        val mat = Mat()\n                        Utils.bitmapToMat(bitmap, mat)\n                        routeViewModel.processFrameForFeatureMatching(mat)\n                    } catch (e: Exception) {\n                        Log.e(\"CameraScreen\", \"Error processing frame for feature matching\", e)\n                    }\n                }\n            )\n\n            // AR Walking UI Overlay\n            ARWalkingUIOverlay(\n                mainNavController = mainNavController,\n                destination = actualDestination,\n                startLocation = actualStartLocation,\n                availableZoomRatios = availableZoomRatios,\n                currentZoomRatio = currentZoomRatio,\n                onZoomChange = { newZoomRatio ->\n                    currentZoomRatio = newZoomRatio\n                },\n                routeViewModel = routeViewModel\n            )\n\n        } else {\n            // Klick-Box zum Anfordern der Berechtigung\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color.Black)\n                    .clickable { launcher.launch(Manifest.permission.CAMERA) },\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\n                    text = \"Kamera erlauben\",\n                    color = Color.White\n                )\n            }\n        }\n    }\n\n    if (showRationaleDialog) {\n        AlertDialog(\n            onDismissRequest = {},\n            title = { Text(\"Kamera-Berechtigung\") },\n            text = { Text(\"Wir benötigen Zugriff auf die Kamera, um eine Vorschau anzuzeigen.\") },\n            confirmButton = {\n                TextButton(onClick = {\n                    showRationaleDialog = false\n                    launcher.launch(Manifest.permission.CAMERA)\n                }) { Text(\"OK\") }\n            },\n            dismissButton = {\n                TextButton(onClick = {\n                    showRationaleDialog = false\n                }) { Text(\"Abbrechen\") }\n            }\n        )\n    }\n}\n\n@Composable\nfun ARWalkingUIOverlay(\n    mainNavController: NavController,\n    destination: String = \"Unbekanntes Ziel\",\n    startLocation: String = \"Unbekannter Start\",\n    availableZoomRatios: List<Float> = listOf(0.7f, 1.0f, 2.0f),\n    currentZoomRatio: Float = 1.0f,\n    onZoomChange: (Float) -> Unit = {},\n    routeViewModel: RouteViewModel\n) {\n    val context = LocalContext.current\n    val coroutineScope = rememberCoroutineScope()\n    // Get current route from ViewModel\n    val currentRoute by routeViewModel.currentRoute.collectAsState()\n    \n    // Compute actual destination from route or use fallback\n    val actualDestination = currentRoute?.let { \n        routeViewModel.getCurrentEndPoint() \n    } ?: destination\n    \n    // Check if current route is a favorite (reactive)\n    val favorites by FavoritesRepository.favorites.collectAsState()\n    val isFavorite = favorites.any {\n        it.startLocation == startLocation && it.destination == destination\n    }\n\n    // Feature Mapping State\n    val featureMatches by routeViewModel.currentMatches.collectAsState()\n    val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()\n    val availableLandmarks = routeViewModel.getAvailableLandmarks()\n\n\n\n\n    // Frame Processing wird direkt in der CameraPreviewView gehandhabt\n    // (Doppelte LaunchedEffect entfernt - bereits in CameraScreen initialisiert)\n\n    Box(\n        modifier = Modifier.fillMaxSize()\n    ) {\n        // Semi-transparent black gradient at the top\n        Box(\n            modifier = Modifier\n                .fillMaxWidth()\n                .requiredHeight(300.dp)\n                .background(\n                    brush = GradientUtils.safeVerticalGradient(\n                        colors = listOf(\n                            Color.Black.copy(alpha = 0.6f),\n                            Color.Black.copy(alpha = 0.25f),\n                            Color.Transparent\n                        ),\n                        startY = 0f,\n                        endY = 800f\n                    )\n                )\n        )\n\n        // Top bar with back button and destination text\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .fillMaxWidth()\n                .offset(y = 70.dp)\n                .padding(horizontal = 20.dp)\n        ) {\n            // Back button\n            Icon(\n                painter = painterResource(id = R.drawable.chevron_left_1),\n                contentDescription = \"Back\",\n                tint = Color.White,\n                modifier = Modifier\n                    .align(Alignment.CenterStart)\n                    .size(35.dp)\n                    .clickable {\n                        mainNavController.navigate(\"home\") {\n                            popUpTo(\"home\") { inclusive = true }\n                        }\n                    }\n                    .padding(4.dp)\n            )\n\n            // Destination text\n            Text(\n                text = destination,\n                color = Color.White,\n                fontSize = 16.sp,\n                fontWeight = FontWeight.SemiBold,\n                textAlign = TextAlign.Center,\n                maxLines = 3,\n                overflow = TextOverflow.Ellipsis,\n                lineHeight = 20.sp,\n                modifier = Modifier\n                    .align(Alignment.Center)\n                    .fillMaxWidth(0.7f)\n                    .drawBehind {\n                        drawIntoCanvas { canvas ->\n                            val shadowPaint = Paint().apply {\n                                color = Color.Black.copy(alpha = 0.5f)\n                                isAntiAlias = true\n                            }\n                        }\n                    }\n            )\n\n            // Right side buttons\n            Row(\n                modifier = Modifier.align(Alignment.CenterEnd),\n                horizontalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n\n\n                // Favorite button\n                Icon(\n                    painter = painterResource(\n                        id = if (isFavorite) R.drawable.star_filled else R.drawable.star_outline\n                    ),\n                    contentDescription = if (isFavorite) \"Remove from favorites\" else \"Add to favorites\",\n                    tint = Color.Unspecified,\n                    modifier = Modifier\n                        .size(35.dp)\n                        .clickable {\n                            if (isFavorite) {\n                                val favorites = FavoritesRepository.favorites.value\n                                val favoriteToRemove = favorites.find {\n                                    it.startLocation == startLocation && it.destination == destination\n                                }\n                                favoriteToRemove?.let {\n                                    FavoritesRepository.removeFavorite(it)\n                                }\n                            } else {\n                                FavoritesRepository.addFavorite(startLocation, destination)\n                            }\n                        }\n                        .padding(4.dp)\n                )\n            }\n        }\n\n        // Load navigation steps from JSON route\n        val navigationSteps: List<NavigationStepData> = if (currentRoute != null) {\n            routeViewModel.getCurrentNavigationSteps().mapIndexed { index, step ->\n                NavigationStepData(\n                    stepNumber = index + 1,\n                    instruction = step.instruction.replace(\"<b>\", \"\").replace(\"</b>\", \"\").replace(\"<\\\\/b>\", \"\"),\n                    distance = step.distance,\n                    isCompleted = false\n                )\n            }\n        } else {\n            listOf(\n                NavigationStepData(\n                    stepNumber = 1,\n                    instruction = \"Route wird aus JSON geladen...\",\n                    distance = 0.0,\n                    isCompleted = false\n                )\n            )\n        }\n\n        // 3D Arrow Overlay (main AR feature)\n        val configuration = androidx.compose.ui.platform.LocalConfiguration.current\n        val density = androidx.compose.ui.platform.LocalDensity.current\n        \n        val screenWidth = with(density) { configuration.screenWidthDp.dp.toPx() }\n        val screenHeight = with(density) { configuration.screenHeightDp.dp.toPx() }\n        \n        // Berechne aktuellen Schritt und Gesamtschritte aus der Route\n        val currentStepNumber by routeViewModel.currentNavigationStep.collectAsState()\n        val totalStepsCount = navigationSteps.size\n        \n        // Hole die aktuelle Navigationsanweisung für den Pfeil\n        val currentRoute by routeViewModel.currentRoute.collectAsState()\n        val currentArrowInstruction = currentRoute?.let { route ->\n            val steps = routeViewModel.getCurrentNavigationSteps()\n            if (currentStepNumber > 0 && currentStepNumber <= steps.size) {\n                steps[currentStepNumber - 1].instruction\n            } else null\n        }\n        \n        Animated3DArrowOverlay(\n            matches = featureMatches,\n            isFeatureMappingEnabled = isFeatureMappingEnabled,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight,\n            currentStep = currentStepNumber,\n            totalSteps = totalStepsCount,\n            modifier = Modifier.fillMaxSize(),\n            currentInstruction = currentArrowInstruction\n        )\n\n        // Feature Mapping Overlays\n        FeatureMatchOverlay(\n            matches = featureMatches,\n            isFeatureMappingEnabled = isFeatureMappingEnabled,\n            modifier = Modifier\n                .align(Alignment.TopStart)\n                .padding(top = 80.dp)\n        )\n\n        // Feature Mapping Status Indicator\n        FeatureMappingStatusIndicator(\n            isEnabled = isFeatureMappingEnabled,\n            isProcessing = featureMatches.isNotEmpty(), // Verwende aktuelle Matches als Processing-Indikator\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .padding(top = 110.dp, end = 16.dp)\n        )\n\n        // AR Info Island - zeigt AR-Status und Landmark-Informationen\n        ARInfoIslandOverlay(\n            routeViewModel = routeViewModel,\n            modifier = Modifier\n                .align(Alignment.Center)\n                .padding(horizontal = 32.dp)\n                .offset(y = (-150).dp)\n        )\n\n\n\n\n\n\n\n        // Navigation Drawer with enhanced UI\n        NavigationDrawerList(\n            steps = navigationSteps,\n            currentStep = currentStepNumber,\n            destinationLabel = actualDestination,\n            onClose = { /* Handle close if needed */ },\n            availableZoomRatios = availableZoomRatios,\n            currentZoomRatio = currentZoomRatio,\n            onZoomChange = onZoomChange,\n            modifier = Modifier\n                .align(alignment = Alignment.BottomCenter)\n        )\n    }\n}\n\n@Composable\nfun Property1Variant2(modifier: Modifier = Modifier) {\n    Box(\n        modifier = modifier\n            .requiredWidth(width = 290.dp)\n            .requiredHeight(height = 248.dp)\n    ) {\n        Property1Default()\n    }\n}\n\n@Composable\nfun Property1Default(modifier: Modifier = Modifier) {\n    Box(\n        modifier = modifier\n            .fillMaxSize()\n            .padding(\n                start = 12.dp,\n                end = 244.dp,\n                top = 18.dp,\n                bottom = 196.dp\n            )\n    )\n}\n\n@Composable\nfun CameraPreviewView(\n    modifier: Modifier = Modifier,\n    lifecycleOwner: LifecycleOwner,\n    zoomRatio: Float = 1.0f,\n    onAvailableZoomRatiosChanged: (List<Float>) -> Unit = {},\n    onFrameProcessed: ((Bitmap) -> Unit)? = null\n) {\n    val context = LocalContext.current\n    var cameraError by remember { mutableStateOf<String?>(null) }\n    var camera by remember { mutableStateOf<Camera?>(null) }\n\n    LaunchedEffect(zoomRatio) {\n        camera?.let { cam ->\n            try {\n                cam.cameraControl.setZoomRatio(zoomRatio)\n                Log.d(\"CameraZoom\", \"Zoom applied: ${zoomRatio}x\")\n            } catch (e: Exception) {\n                Log.e(\"CameraZoom\", \"Failed to apply zoom: ${zoomRatio}x\", e)\n            }\n        }\n    }\n\n    if (cameraError != null) {\n        Box(\n            modifier = modifier\n                .fillMaxSize()\n                .background(Color.Black),\n            contentAlignment = Alignment.Center\n        ) {\n            Text(\n                text = \"Kamera-Fehler: $cameraError\",\n                color = Color.White,\n                fontSize = 16.sp,\n                textAlign = TextAlign.Center,\n                modifier = Modifier.padding(24.dp)\n            )\n        }\n        return\n    }\n\n    AndroidView(\n        modifier = modifier,\n        factory = { ctx ->\n            PreviewView(ctx).apply {\n                try {\n                    val cameraProviderFuture = ProcessCameraProvider.getInstance(ctx)\n                    cameraProviderFuture.addListener({\n                        try {\n                            val cameraProvider = cameraProviderFuture.get()\n\n                            if (!cameraProvider.hasCamera(CameraSelector.DEFAULT_BACK_CAMERA)) {\n                                Log.e(\"CameraPreview\", \"Keine Rückkamera verfügbar\")\n                                cameraError = \"Keine Rückkamera verfügbar\"\n                                return@addListener\n                            }\n\n                            val preview = Preview.Builder()\n                                .build()\n                                .also { p ->\n                                    p.setSurfaceProvider(surfaceProvider)\n                                }\n\n                            val imageAnalysis = if (onFrameProcessed != null) {\n                                ImageAnalysis.Builder()\n                                    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)\n                                    .build()\n                                    .also { analysis ->\n                                        analysis.setAnalyzer(ContextCompat.getMainExecutor(ctx)) { imageProxy ->\n                                            try {\n                                                val bitmap = imageProxyToBitmap(imageProxy)\n                                                if (bitmap != null) {\n                                                    onFrameProcessed(bitmap)\n                                                }\n                                            } catch (e: Exception) {\n                                                Log.e(\"CameraPreview\", \"Frame processing error: ${e.message}\")\n                                            } finally {\n                                                imageProxy.close()\n                                            }\n                                        }\n                                    }\n                            } else null\n\n                            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA\n                            cameraProvider.unbindAll()\n\n                            val useCases = if (imageAnalysis != null) {\n                                arrayOf(preview, imageAnalysis)\n                            } else {\n                                arrayOf(preview)\n                            }\n\n                            val boundCamera = cameraProvider.bindToLifecycle(\n                                lifecycleOwner,\n                                cameraSelector,\n                                *useCases\n                            )\n\n                            camera = boundCamera\n                            setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)\n                            boundCamera.cameraControl.setZoomRatio(zoomRatio)\n\n                            Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")\n\n                        } catch (exc: Exception) {\n                            Log.e(\"CameraPreview\", \"Kamera-Bindung fehlgeschlagen\", exc)\n                            cameraError = \"Kamera konnte nicht gestartet werden\"\n                        }\n                    }, ContextCompat.getMainExecutor(ctx))\n\n                } catch (exc: Exception) {\n                    Log.e(\"CameraPreview\", \"Fehler beim Kamera-Setup\", exc)\n                    cameraError = \"Kamera-Initialisierung fehlgeschlagen\"\n                }\n            }\n        }\n    )\n}\n\n// Improved bitmap conversion function\nprivate fun imageProxyToBitmap(imageProxy: ImageProxy): Bitmap? {\n    return try {\n        when (imageProxy.format) {\n            ImageFormat.YUV_420_888 -> {\n                // Handle YUV format (most common)\n                val yBuffer = imageProxy.planes[0].buffer\n                val uBuffer = imageProxy.planes[1].buffer\n                val vBuffer = imageProxy.planes[2].buffer\n\n                val ySize = yBuffer.remaining()\n                val uSize = uBuffer.remaining()\n                val vSize = vBuffer.remaining()\n\n                val nv21 = ByteArray(ySize + uSize + vSize)\n\n                yBuffer.get(nv21, 0, ySize)\n                vBuffer.get(nv21, ySize, vSize)\n                uBuffer.get(nv21, ySize + vSize, uSize)\n\n                val yuvImage = YuvImage(nv21, ImageFormat.NV21, imageProxy.width, imageProxy.height, null)\n                val out = ByteArrayOutputStream()\n                yuvImage.compressToJpeg(Rect(0, 0, yuvImage.width, yuvImage.height), 75, out)\n                val imageBytes = out.toByteArray()\n\n                val bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)\n\n                // Rotate bitmap if needed\n                val rotationDegrees = imageProxy.imageInfo.rotationDegrees\n                if (rotationDegrees != 0) {\n                    val matrix = Matrix().apply { postRotate(rotationDegrees.toFloat()) }\n                    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, true)\n                }\n\n                bitmap\n            }\n            ImageFormat.JPEG -> {\n                // Handle JPEG format\n                val buffer: ByteBuffer = imageProxy.planes[0].buffer\n                val bytes = ByteArray(buffer.remaining())\n                buffer.get(bytes)\n                BitmapFactory.decodeByteArray(bytes, 0, bytes.size)\n            }\n            else -> {\n                Log.w(\"CameraPreview\", \"Unsupported image format: ${imageProxy.format}\")\n                null\n            }\n        }\n    } catch (e: Exception) {\n        Log.e(\"CameraPreview\", \"Error converting ImageProxy to Bitmap: ${e.message}\", e)\n        null\n    }\n}\n\n// Helper function to setup zoom capabilities\nprivate fun setupZoomCapabilities(camera: Camera, onAvailableZoomRatiosChanged: (List<Float>) -> Unit) {\n    val cameraInfo: CameraInfo = camera.cameraInfo\n    val zoomState = cameraInfo.zoomState.value\n\n    if (zoomState != null) {\n        val minZoom = zoomState.minZoomRatio\n        val maxZoom = zoomState.maxZoomRatio\n\n        Log.d(\"CameraZoom\", \"Zoom range: $minZoom - $maxZoom\")\n\n        val availableZoomRatios = mutableListOf<Float>()\n\n        if (minZoom < 1.0f) {\n            val ultraWideZoom = maxOf(minZoom, 0.5f)\n            availableZoomRatios.add(ultraWideZoom)\n        }\n\n        availableZoomRatios.add(1.0f)\n\n        if (maxZoom >= 2.0f) {\n            availableZoomRatios.add(2.0f)\n        }\n\n        if (minZoom >= 1.0f && availableZoomRatios.size < 3) {\n            availableZoomRatios.add(0, 0.7f)\n        }\n\n        Log.d(\"CameraZoom\", \"Available zoom ratios: $availableZoomRatios\")\n        onAvailableZoomRatiosChanged(availableZoomRatios)\n    } else {\n        Log.w(\"CameraZoom\", \"Zoom state not available, using default ratios\")\n        onAvailableZoomRatiosChanged(listOf(0.7f, 1.0f, 2.0f))\n    }\n}\n\n\n\n/**\n * AR Info Island Overlay für den NavigationsScreen\n */\n@Composable\nprivate fun ARInfoIslandOverlay(\n    routeViewModel: RouteViewModel,\n    modifier: Modifier = Modifier\n) {\n    val matches by routeViewModel.currentMatches.collectAsState()\n    val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()\n    \n    val landmarkCount = matches.size\n    val bestConfidence = matches.maxOfOrNull { match -> match.confidence } ?: 0f\n    val isTracking = matches.isNotEmpty()\n    \n    // Automatischer AR-Status basierend auf aktuellen Bedingungen\n    val arStatus = rememberARScanStatus(\n        isInitialized = isFeatureMappingEnabled,\n        landmarkCount = landmarkCount,\n        bestConfidence = bestConfidence,\n        isTracking = isTracking\n    )\n    \n    // Hole die aktuelle Navigationsanweisung\n    val currentRoute by routeViewModel.currentRoute.collectAsState()\n    val currentStepNumber by routeViewModel.currentNavigationStep.collectAsState()\n    val currentInstruction = currentRoute?.let { route ->\n        val steps = routeViewModel.getCurrentNavigationSteps()\n        if (currentStepNumber > 0 && currentStepNumber <= steps.size) {\n            steps[currentStepNumber - 1].instruction\n        } else null\n    }\n    \n    // Verwende die erweiterte ARInfoIsland mit mehr Informationen\n    ExpandedARInfoIsland(\n        scanStatus = arStatus,\n        landmarkCount = landmarkCount,\n        confidence = bestConfidence,\n        modifier = modifier,\n        isVisible = isFeatureMappingEnabled,\n        currentInstruction = currentInstruction\n    )\n}","baseTimestamp":1754562694786,"deltas":[{"timestamp":1754562801513,"changes":[{"type":"DELETE","lineNumber":79,"oldContent":"import com.example.arwalking.FeatureLandmark"},{"type":"DELETE","lineNumber":80,"oldContent":"import com.example.arwalking.components.AR3DArrowOverlay"},{"type":"DELETE","lineNumber":81,"oldContent":"import com.example.arwalking.components.ARInfoIsland"},{"type":"DELETE","lineNumber":82,"oldContent":"import com.example.arwalking.components.ARScanStatus"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"import com.example.arwalking.components.NavigationDrawer"},{"type":"DELETE","lineNumber":94,"oldContent":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":99,"oldContent":"import java.util.UUID"}]},{"timestamp":1754565410365,"changes":[{"type":"MODIFY","lineNumber":486,"content":"        // Get route summary for enhanced drawer information","oldContent":"        // Navigation Drawer with enhanced UI"},{"type":"INSERT","lineNumber":487,"content":"        val routeSummary = routeViewModel.getRouteSummary()"},{"type":"INSERT","lineNumber":488,"content":"        "},{"type":"INSERT","lineNumber":489,"content":"        // Navigation Drawer with enhanced UI and route information from JSON"},{"type":"DELETE","lineNumber":490,"oldContent":"            destinationLabel = actualDestination,"},{"type":"INSERT","lineNumber":493,"content":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"}]},{"timestamp":1754565421415,"changes":[{"type":"DELETE","lineNumber":277,"oldContent":"    // Compute actual destination from route or use fallback"},{"type":"DELETE","lineNumber":278,"oldContent":"    val actualDestination = currentRoute?.let { "},{"type":"DELETE","lineNumber":279,"oldContent":"        routeViewModel.getCurrentEndPoint() "},{"type":"DELETE","lineNumber":280,"oldContent":"    } ?: destination"},{"type":"INSERT","lineNumber":277,"content":"    // Get route summary with all information from JSON"},{"type":"INSERT","lineNumber":278,"content":"    val routeSummary = routeViewModel.getRouteSummary()"},{"type":"DELETE","lineNumber":282,"oldContent":"    // Check if current route is a favorite (reactive)"},{"type":"INSERT","lineNumber":280,"content":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":281,"content":"    val actualDestination = routeSummary.endPoint.takeIf { it.isNotBlank() } ?: destination"},{"type":"INSERT","lineNumber":282,"content":"    val actualStartLocation = routeSummary.startPoint.takeIf { it.isNotBlank() } ?: startLocation"},{"type":"INSERT","lineNumber":283,"content":"    "},{"type":"INSERT","lineNumber":284,"content":"    // Check if current route is a favorite (reactive) - use actual route data"},{"type":"DELETE","lineNumber":285,"oldContent":"        it.startLocation == startLocation && it.destination == destination"},{"type":"INSERT","lineNumber":287,"content":"        it.startLocation == actualStartLocation && it.destination == actualDestination"},{"type":"DELETE","lineNumber":488,"oldContent":"        NavigationDrawerList("},{"type":"DELETE","lineNumber":490,"oldContent":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":492,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":493,"content":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":495,"content":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"},{"type":"DELETE","lineNumber":495,"oldContent":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"}]},{"timestamp":1754565428685,"changes":[{"type":"DELETE","lineNumber":148,"oldContent":"    val actualStartLocation = currentRoute?.let { "},{"type":"DELETE","lineNumber":149,"oldContent":"        routeViewModel.getCurrentStartPoint() "},{"type":"DELETE","lineNumber":150,"oldContent":"    } ?: startLocation"},{"type":"DELETE","lineNumber":151,"oldContent":"    val actualDestination = currentRoute?.let { "},{"type":"DELETE","lineNumber":152,"oldContent":"        routeViewModel.getCurrentEndPoint() "},{"type":"DELETE","lineNumber":153,"oldContent":"    } ?: destination"},{"type":"INSERT","lineNumber":148,"content":"    val routeSummary = routeViewModel.getRouteSummary()"},{"type":"INSERT","lineNumber":149,"content":"    "},{"type":"INSERT","lineNumber":150,"content":"    val actualStartLocation = routeSummary.startPoint.takeIf { it.isNotBlank() } ?: startLocation"},{"type":"INSERT","lineNumber":151,"content":"    val actualDestination = routeSummary.endPoint.takeIf { it.isNotBlank() } ?: destination"},{"type":"INSERT","lineNumber":277,"content":"    "},{"type":"DELETE","lineNumber":281,"oldContent":"    "},{"type":"MODIFY","lineNumber":283,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()","oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"MODIFY","lineNumber":286,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":492,"content":"            currentStep = currentStepNumber,","oldContent":"            currentStep = currentStepNumber,"},{"type":"INSERT","lineNumber":493,"content":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"},{"type":"DELETE","lineNumber":497,"oldContent":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"}]}]},"/a.dummy":{"filePath":"/a.dummy","baseContent":"arrow.glb","baseTimestamp":1754563545949},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureLandmark.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureLandmark.kt","baseContent":"package com.example.arwalking\n\nimport com.example.arwalking.data.RouteLandmark\n\n/**\n * Datenklasse für Feature-Landmarks\n */\ndata class FeatureLandmark(\n    val id: RouteLandmark,\n    val name: String,\n    val description: String = \"\",\n    val building: String = \"\",\n    val floor: Int = 0,\n    val position: LandmarkPosition? = null,\n    val imageUrl: String? = null,\n    val features: List<String> = emptyList()\n)\n\n// Position ist in NavigationRoute.kt definiert\ntypealias LandmarkPosition = Position","baseTimestamp":1754564054757,"deltas":[{"timestamp":1754564059871,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import com.example.arwalking.data.RouteLandmark"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"    val id: RouteLandmark,"},{"type":"INSERT","lineNumber":6,"content":"    val id: String,"}]}]}}}