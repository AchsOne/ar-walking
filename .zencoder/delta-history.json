{"snapshots":{"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/MainActivity.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/MainActivity.kt","baseContent":"package com.example.arwalking\n\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.core.content.ContextCompat\nimport androidx.activity.result.contract.ActivityResultContracts\nimport android.provider.MediaStore\nimport android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport com.example.arwalking.screens.CameraNavigation\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.example.arwalking.screens.HomeScreen\nimport com.example.arwalking.screens.LocalNavController\nimport com.example.arwalking.ui.theme.ARWalkingTheme\nimport java.net.URLDecoder\nimport java.nio.charset.StandardCharsets\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.lifecycle.ViewModelProvider\n// OpenCV imports entfernt für Stub-Implementation\n\nclass MainActivity : ComponentActivity() {\n\n    private lateinit var routeViewModel: RouteViewModel\n\n\n    private val cameraPermissionLauncher: ActivityResultLauncher<String> =\n        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->\n            if (granted) {\n                openCamera()\n            }\n        }\n\n    private fun openCamera() {\n        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n        if (intent.resolveActivity(packageManager) != null) {\n            startActivity(intent)\n        }\n    }\n\n    private fun checkCameraAndLaunch() {\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) ==\n            PackageManager.PERMISSION_GRANTED\n        ) {\n            openCamera()\n        } else {\n            cameraPermissionLauncher.launch(Manifest.permission.CAMERA)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // OpenCV initialisieren (Stub für lokale Entwicklung)\n        try {\n            // Simuliere OpenCV Initialisierung\n            Log.i(\"MainActivity\", \"OpenCV Stub loaded successfully\")\n        } catch (e: Exception) {\n            Log.e(\"MainActivity\", \"OpenCV Stub initialization failed: ${e.message}\")\n            Toast.makeText(this, \"OpenCV initialization failed!\", Toast.LENGTH_LONG).show()\n            return\n        }\n\n\n\n\n        // ViewModel erstellen\n        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]\n\n        enableEdgeToEdge()\n        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt\n        setContent {\n            ARWalkingTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    ARWalkingApp()\n                }\n            }\n        }\n        val navigationRoute = routeViewModel.loadNavigationRoute(this)\n        if (navigationRoute != null) {\n            // Objekt ist bereit für weitere Verwendung\n            routeViewModel.logNavigationRoute(navigationRoute)\n            // weitere verwendung von navigationRoute....\n\n\n        } else {\n            Log.e(\"MainActivity\", \"Fehler beim Laden der Route\")\n        }\n    }\n}\n\n@Composable\nfun ARWalkingApp() {\n    val navController = rememberNavController()\n\n    CompositionLocalProvider(LocalNavController provides navController) {\n        NavHost(\n            navController = navController,\n            startDestination = \"home\"\n        ) {\n            composable(\"home\") {\n                HomeScreen(navController = navController)\n            }\n            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->\n                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\"\n                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\"\n                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())\n                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())\n                CameraNavigation(\n                    destination = destination,\n                    startLocation = startLocation\n                )\n            }\n            composable(\"open_cv_camera_activity\") {\n                OpenCvCameraActivity();\n            }\n\n            // Hier können später weitere Screens hinzugefügt werden:\n            // composable(\"ar_view\") { ARScreen(navController = navController) }\n            // composable(\"settings\") { SettingsScreen(navController = navController) }\n        }\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nprivate fun ARWalkingAppPreview() {\n    ARWalkingTheme {\n        ARWalkingApp()\n    }\n}","baseTimestamp":1754049441966,"deltas":[{"timestamp":1754228206074,"changes":[{"type":"INSERT","lineNumber":127,"content":""},{"type":"DELETE","lineNumber":128,"oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":151,"oldContent":"            composable(\"image_import\") {"},{"type":"DELETE","lineNumber":153,"oldContent":"                com.example.arwalking.screens.ImageImportScreen(navController = navController)"},{"type":"DELETE","lineNumber":155,"oldContent":"            }"},{"type":"DELETE","lineNumber":156,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"DELETE","lineNumber":157,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"INSERT","lineNumber":155,"content":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"INSERT","lineNumber":156,"content":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"}]},{"timestamp":1754230334501,"changes":[{"type":"MODIFY","lineNumber":26,"content":"import com.example.arwalking.screens.LandmarkManagementScreen","oldContent":"import com.example.arwalking.screens.TrainingModeScreen"},{"type":"DELETE","lineNumber":153,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"MODIFY","lineNumber":155,"content":"            // composable(\"ar_view\") { ARScreen(navController = navController) }","oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"INSERT","lineNumber":156,"content":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"}]},{"timestamp":1754230338809,"changes":[{"type":"MODIFY","lineNumber":147,"content":"                LandmarkManagementScreen(navController = navController)","oldContent":"                TrainingModeScreen(navController = navController)"},{"type":"MODIFY","lineNumber":153,"content":"","oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"INSERT","lineNumber":154,"content":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"DELETE","lineNumber":156,"oldContent":"            // Hier können später weitere Screens hinzugefügt werden:"}]},{"timestamp":1754230400348,"changes":[{"type":"MODIFY","lineNumber":86,"content":"        routeViewModel.initializeStorage(this)","oldContent":"        routeViewModel.initializeFeatureMapping(this)"}]},{"timestamp":1754230687560,"changes":[{"type":"MODIFY","lineNumber":107,"content":"            routeViewModel.enableStorageSystemImmediately(this)","oldContent":"            routeViewModel.enableFeatureMappingImmediately()"}]},{"timestamp":1754232021482,"changes":[{"type":"DELETE","lineNumber":84,"oldContent":"        // Sofort Feature Mapping und Upload-Komponenten initialisieren"},{"type":"DELETE","lineNumber":85,"oldContent":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping und Upload-Komponenten beim App-Start...\")"},{"type":"INSERT","lineNumber":84,"content":"        // Sofort Feature Mapping initialisieren"},{"type":"INSERT","lineNumber":85,"content":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping beim App-Start...\")"},{"type":"DELETE","lineNumber":87,"oldContent":"        routeViewModel.startUploadComponents(this)"}]},{"timestamp":1754250695407,"changes":[{"type":"MODIFY","lineNumber":26,"content":"","oldContent":"import com.example.arwalking.screens.LandmarkManagementScreen"}]},{"timestamp":1754250700368,"changes":[{"type":"MODIFY","lineNumber":104,"content":"            ","oldContent":"            // weitere verwendung von navigationRoute...."},{"type":"MODIFY","lineNumber":122,"content":"","oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":131,"content":"        ) {"},{"type":"DELETE","lineNumber":133,"oldContent":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":143,"content":"                )"},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"open_cv_camera_activity\") {"},{"type":"DELETE","lineNumber":145,"oldContent":"            composable(\"training_mode\") {"},{"type":"DELETE","lineNumber":146,"oldContent":"                LandmarkManagementScreen(navController = navController)"},{"type":"DELETE","lineNumber":147,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"            composable(\"image_management\") {"},{"type":"DELETE","lineNumber":149,"oldContent":"                com.example.arwalking.screens.ImageManagementScreen(navController = navController)"},{"type":"DELETE","lineNumber":150,"oldContent":"            }"},{"type":"INSERT","lineNumber":147,"content":""},{"type":"INSERT","lineNumber":151,"content":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"INSERT","lineNumber":155,"content":"@Preview(showBackground = true)"}]},{"timestamp":1754313796183,"changes":[{"type":"DELETE","lineNumber":68,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"DELETE","lineNumber":70,"oldContent":"            // Simuliere OpenCV Initialisierung"},{"type":"DELETE","lineNumber":71,"oldContent":"            Log.i(\"MainActivity\", \"OpenCV Stub loaded successfully\")"},{"type":"DELETE","lineNumber":72,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":73,"oldContent":"            Log.e(\"MainActivity\", \"OpenCV Stub initialization failed: ${e.message}\")"},{"type":"DELETE","lineNumber":74,"oldContent":"            Toast.makeText(this, \"OpenCV initialization failed!\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":75,"oldContent":"            return"},{"type":"DELETE","lineNumber":76,"oldContent":"        }"},{"type":"INSERT","lineNumber":69,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":"            // ViewModel erstellen"},{"type":"INSERT","lineNumber":72,"content":"            routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":74,"content":"            enableEdgeToEdge()"},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"INSERT","lineNumber":76,"content":"            // UI zuerst setzen"},{"type":"INSERT","lineNumber":77,"content":"            setContent {"},{"type":"INSERT","lineNumber":78,"content":"                ARWalkingTheme {"},{"type":"INSERT","lineNumber":79,"content":"                    Surface("},{"type":"INSERT","lineNumber":80,"content":"                        modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":81,"content":"                        color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":82,"content":"                    ) {"},{"type":"INSERT","lineNumber":83,"content":"                        ARWalkingApp()"},{"type":"INSERT","lineNumber":84,"content":"                    }"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"            // Initialisierung asynchron durchführen"},{"type":"INSERT","lineNumber":89,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":81,"oldContent":"        // ViewModel erstellen"},{"type":"DELETE","lineNumber":82,"oldContent":"        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":91,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":92,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":93,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":94,"content":"        }"},{"type":"INSERT","lineNumber":95,"content":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"        // Sofort Feature Mapping initialisieren"},{"type":"DELETE","lineNumber":85,"oldContent":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping beim App-Start...\")"},{"type":"DELETE","lineNumber":86,"oldContent":"        routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":97,"content":"    private fun initializeAppAsync() {"},{"type":"INSERT","lineNumber":98,"content":"        try {"},{"type":"INSERT","lineNumber":99,"content":"            Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"INSERT","lineNumber":100,"content":"            "},{"type":"INSERT","lineNumber":101,"content":"            // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":102,"content":"            routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":88,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":89,"oldContent":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"DELETE","lineNumber":90,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":91,"oldContent":"            ARWalkingTheme {"},{"type":"DELETE","lineNumber":92,"oldContent":"                Surface("},{"type":"DELETE","lineNumber":93,"oldContent":"                    modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":94,"oldContent":"                    color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":95,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":96,"oldContent":"                    ARWalkingApp()"},{"type":"INSERT","lineNumber":104,"content":"            // Route laden (asynchron)"},{"type":"INSERT","lineNumber":105,"content":"            val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"INSERT","lineNumber":106,"content":"            if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":107,"content":"                routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":108,"content":"                routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":109,"content":"                "},{"type":"INSERT","lineNumber":110,"content":"                // System-Validierung nur im Debug-Modus"},{"type":"INSERT","lineNumber":111,"content":"                if (BuildConfig.DEBUG) {"},{"type":"INSERT","lineNumber":112,"content":"                    try {"},{"type":"INSERT","lineNumber":113,"content":"                        val systemValidator = SystemValidator(this)"},{"type":"INSERT","lineNumber":114,"content":"                        systemValidator.validateSystem(routeViewModel)"},{"type":"INSERT","lineNumber":115,"content":"                        systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"INSERT","lineNumber":116,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":117,"content":"                        Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":118,"content":"                    }"},{"type":"INSERT","lineNumber":120,"content":"            } else {"},{"type":"INSERT","lineNumber":121,"content":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":100,"oldContent":"        val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":101,"oldContent":"        if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":102,"oldContent":"            // Objekt ist bereit für weitere Verwendung"},{"type":"DELETE","lineNumber":103,"oldContent":"            routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":105,"oldContent":"            // Feature Mapping ist bereits initialisiert, aktiviere es sofort"},{"type":"DELETE","lineNumber":106,"oldContent":"            routeViewModel.enableStorageSystemImmediately(this)"},{"type":"DELETE","lineNumber":107,"oldContent":"            "},{"type":"DELETE","lineNumber":108,"oldContent":"            // System-Validierung durchführen (nur im Debug-Modus)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":111,"oldContent":"                systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                // Simuliere Feature-Matching für Testzwecke"},{"type":"DELETE","lineNumber":114,"oldContent":"                systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":115,"oldContent":"            }"},{"type":"DELETE","lineNumber":116,"oldContent":"            "},{"type":"DELETE","lineNumber":117,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":118,"oldContent":"            Log.e(\"MainActivity\", \"Fehler beim Laden der Route\")"},{"type":"INSERT","lineNumber":124,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":125,"content":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":127,"oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":128,"oldContent":"        NavHost("},{"type":"DELETE","lineNumber":129,"oldContent":"            navController = navController,"},{"type":"DELETE","lineNumber":130,"oldContent":"            startDestination = \"home\""},{"type":"DELETE","lineNumber":131,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":132,"oldContent":"            composable(\"home\") {"},{"type":"DELETE","lineNumber":133,"oldContent":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":134,"content":"    try {"},{"type":"INSERT","lineNumber":135,"content":"        CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":136,"content":"            NavHost("},{"type":"INSERT","lineNumber":137,"content":"                navController = navController,"},{"type":"INSERT","lineNumber":138,"content":"                startDestination = \"home\""},{"type":"INSERT","lineNumber":139,"content":"            ) {"},{"type":"INSERT","lineNumber":140,"content":"                composable(\"home\") {"},{"type":"INSERT","lineNumber":141,"content":"                    try {"},{"type":"INSERT","lineNumber":142,"content":"                        HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":143,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":144,"content":"                        Log.e(\"ARWalkingApp\", \"Error in HomeScreen: ${e.message}\", e)"},{"type":"INSERT","lineNumber":145,"content":"                        // Fallback UI"},{"type":"INSERT","lineNumber":146,"content":"                        Box("},{"type":"INSERT","lineNumber":147,"content":"                            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":148,"content":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":149,"content":"                        ) {"},{"type":"INSERT","lineNumber":150,"content":"                            Text("},{"type":"INSERT","lineNumber":151,"content":"                                text = \"ArWalking\\nLoading...\","},{"type":"INSERT","lineNumber":152,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":153,"content":"                                style = MaterialTheme.typography.headlineMedium"},{"type":"INSERT","lineNumber":154,"content":"                            )"},{"type":"INSERT","lineNumber":155,"content":"                        }"},{"type":"INSERT","lineNumber":156,"content":"                    }"},{"type":"INSERT","lineNumber":157,"content":"                }"},{"type":"INSERT","lineNumber":158,"content":"                composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":159,"content":"                    try {"},{"type":"INSERT","lineNumber":160,"content":"                        val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":161,"content":"                        val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":162,"content":"                        val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":163,"content":"                        val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":164,"content":"                        CameraNavigation("},{"type":"INSERT","lineNumber":165,"content":"                            destination = destination,"},{"type":"INSERT","lineNumber":166,"content":"                            startLocation = startLocation"},{"type":"INSERT","lineNumber":167,"content":"                        )"},{"type":"INSERT","lineNumber":168,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":169,"content":"                        Log.e(\"ARWalkingApp\", \"Error in CameraNavigation: ${e.message}\", e)"},{"type":"INSERT","lineNumber":170,"content":"                        // Fallback UI"},{"type":"INSERT","lineNumber":171,"content":"                        Box("},{"type":"INSERT","lineNumber":172,"content":"                            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":173,"content":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":174,"content":"                        ) {"},{"type":"INSERT","lineNumber":175,"content":"                            Text("},{"type":"INSERT","lineNumber":176,"content":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":177,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":178,"content":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"INSERT","lineNumber":179,"content":"                            )"},{"type":"INSERT","lineNumber":180,"content":"                        }"},{"type":"INSERT","lineNumber":181,"content":"                    }"},{"type":"INSERT","lineNumber":182,"content":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":136,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":137,"oldContent":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":138,"oldContent":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":139,"oldContent":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":140,"oldContent":"                CameraNavigation("},{"type":"DELETE","lineNumber":141,"oldContent":"                    destination = destination,"},{"type":"DELETE","lineNumber":142,"oldContent":"                    startLocation = startLocation"},{"type":"DELETE","lineNumber":143,"oldContent":"                )"},{"type":"DELETE","lineNumber":144,"oldContent":"            }"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"DELETE","lineNumber":150,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"DELETE","lineNumber":151,"oldContent":"@Preview(showBackground = true)"},{"type":"DELETE","lineNumber":152,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":153,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"INSERT","lineNumber":185,"content":"    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":186,"content":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"INSERT","lineNumber":187,"content":"        // Minimal fallback UI"},{"type":"INSERT","lineNumber":188,"content":"        Box("},{"type":"INSERT","lineNumber":189,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":190,"content":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":191,"content":"        ) {"},{"type":"INSERT","lineNumber":192,"content":"            Text("},{"type":"INSERT","lineNumber":193,"content":"                text = \"ArWalking\\nStarting...\","},{"type":"INSERT","lineNumber":194,"content":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"INSERT","lineNumber":195,"content":"            )"},{"type":"INSERT","lineNumber":198,"content":"}"}]},{"timestamp":1754313804477,"changes":[{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":68,"oldContent":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":75,"content":""},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":98,"content":""},{"type":"DELETE","lineNumber":99,"oldContent":"                }"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":107,"oldContent":"            "},{"type":"MODIFY","lineNumber":121,"content":"                }","oldContent":"        }"},{"type":"MODIFY","lineNumber":124,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":125,"content":"            "},{"type":"INSERT","lineNumber":126,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":127,"content":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"INSERT","lineNumber":128,"content":"        }"},{"type":"INSERT","lineNumber":129,"content":"    }"},{"type":"DELETE","lineNumber":129,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":131,"oldContent":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":135,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":"}"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":161,"oldContent":"}"},{"type":"DELETE","lineNumber":163,"oldContent":"            )"},{"type":"DELETE","lineNumber":165,"oldContent":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"DELETE","lineNumber":167,"oldContent":"                text = \"ArWalking\\nStarting...\","},{"type":"DELETE","lineNumber":169,"oldContent":"            Text("},{"type":"DELETE","lineNumber":171,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":173,"oldContent":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":175,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":177,"oldContent":"        Box("},{"type":"DELETE","lineNumber":179,"oldContent":"        // Minimal fallback UI"},{"type":"DELETE","lineNumber":181,"oldContent":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"DELETE","lineNumber":183,"oldContent":"    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":185,"oldContent":"                }"},{"type":"DELETE","lineNumber":187,"oldContent":"                    }"},{"type":"DELETE","lineNumber":189,"oldContent":"                        }"},{"type":"DELETE","lineNumber":191,"oldContent":"                            )"},{"type":"DELETE","lineNumber":193,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":195,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":197,"oldContent":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":178,"content":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":179,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":180,"content":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"INSERT","lineNumber":181,"content":"                            )"},{"type":"INSERT","lineNumber":182,"content":"                        }"},{"type":"INSERT","lineNumber":183,"content":"                    }"},{"type":"INSERT","lineNumber":184,"content":"                }"},{"type":"INSERT","lineNumber":185,"content":"            }"},{"type":"INSERT","lineNumber":186,"content":"        }"},{"type":"INSERT","lineNumber":187,"content":"    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":188,"content":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"INSERT","lineNumber":189,"content":"        // Minimal fallback UI"},{"type":"INSERT","lineNumber":190,"content":"        Box("},{"type":"INSERT","lineNumber":191,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":192,"content":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":193,"content":"        ) {"},{"type":"INSERT","lineNumber":194,"content":"            Text("},{"type":"INSERT","lineNumber":195,"content":"                text = \"ArWalking\\nStarting...\","},{"type":"INSERT","lineNumber":196,"content":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"INSERT","lineNumber":197,"content":"            )"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"INSERT","lineNumber":199,"content":"    }"},{"type":"INSERT","lineNumber":200,"content":"}"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"@Preview(showBackground = true)"},{"type":"INSERT","lineNumber":203,"content":"@Composable"},{"type":"INSERT","lineNumber":204,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":205,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":206,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":207,"content":"    }"},{"type":"INSERT","lineNumber":208,"content":"}"}]},{"timestamp":1754313833862,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import com.example.arwalking.screens.CameraNavigation","oldContent":"import com.example.arwalking.screens.CameraNavigation"},{"type":"DELETE","lineNumber":71,"oldContent":"            // ViewModel erstellen"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"            // ViewModel erstellen"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"MODIFY","lineNumber":92,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":105,"content":"","oldContent":""},{"type":"INSERT","lineNumber":120,"content":"                    }"},{"type":"DELETE","lineNumber":121,"oldContent":"        }"},{"type":"INSERT","lineNumber":123,"content":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":125,"oldContent":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":127,"oldContent":"}"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":130,"content":"}"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"@Composable"},{"type":"DELETE","lineNumber":136,"oldContent":"    try {"},{"type":"DELETE","lineNumber":137,"oldContent":"        CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":138,"oldContent":"            NavHost("},{"type":"DELETE","lineNumber":139,"oldContent":"                navController = navController,"},{"type":"DELETE","lineNumber":140,"oldContent":"                startDestination = \"home\""},{"type":"DELETE","lineNumber":141,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":142,"oldContent":"                composable(\"home\") {"},{"type":"DELETE","lineNumber":143,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":144,"oldContent":"                        HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":145,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":146,"oldContent":"                        Log.e(\"ARWalkingApp\", \"Error in HomeScreen: ${e.message}\", e)"},{"type":"DELETE","lineNumber":147,"oldContent":"                        // Fallback UI"},{"type":"DELETE","lineNumber":148,"oldContent":"                        Box("},{"type":"DELETE","lineNumber":149,"oldContent":"                            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":150,"oldContent":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":151,"oldContent":"                        ) {"},{"type":"DELETE","lineNumber":152,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":153,"oldContent":"                                text = \"ArWalking\\nLoading...\","},{"type":"DELETE","lineNumber":154,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":155,"oldContent":"                                style = MaterialTheme.typography.headlineMedium"},{"type":"DELETE","lineNumber":156,"oldContent":"                            )"},{"type":"DELETE","lineNumber":157,"oldContent":"                        }"},{"type":"DELETE","lineNumber":158,"oldContent":"                    }"},{"type":"DELETE","lineNumber":159,"oldContent":"                }"},{"type":"DELETE","lineNumber":160,"oldContent":"                composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":161,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":162,"oldContent":"                        val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":163,"oldContent":"                        val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":164,"oldContent":"                        val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":165,"oldContent":"                        val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":166,"oldContent":"                        CameraNavigation("},{"type":"DELETE","lineNumber":167,"oldContent":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"DELETE","lineNumber":168,"oldContent":"                            destination = destination,"},{"type":"DELETE","lineNumber":169,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":170,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":171,"oldContent":"                            startLocation = startLocation"},{"type":"DELETE","lineNumber":172,"oldContent":"                            )"},{"type":"DELETE","lineNumber":173,"oldContent":"                        }"},{"type":"DELETE","lineNumber":174,"oldContent":"                        )"},{"type":"DELETE","lineNumber":175,"oldContent":"                    }"},{"type":"DELETE","lineNumber":176,"oldContent":"                }"},{"type":"DELETE","lineNumber":177,"oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":136,"content":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":137,"content":"        NavHost("},{"type":"INSERT","lineNumber":138,"content":"            navController = navController,"},{"type":"INSERT","lineNumber":139,"content":"            startDestination = \"home\""},{"type":"INSERT","lineNumber":140,"content":"        ) {"},{"type":"INSERT","lineNumber":141,"content":"            composable(\"home\") {"},{"type":"INSERT","lineNumber":142,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":144,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":145,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":146,"content":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":147,"content":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":148,"content":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":149,"content":"                CameraNavigation("},{"type":"INSERT","lineNumber":150,"content":"                    destination = destination,"},{"type":"INSERT","lineNumber":151,"content":"                    startLocation = startLocation"},{"type":"INSERT","lineNumber":152,"content":"                )"},{"type":"INSERT","lineNumber":153,"content":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"                        Log.e(\"ARWalkingApp\", \"Error in CameraNavigation: ${e.message}\", e)"},{"type":"DELETE","lineNumber":181,"oldContent":"    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":182,"oldContent":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"DELETE","lineNumber":183,"oldContent":"                        // Fallback UI"},{"type":"DELETE","lineNumber":184,"oldContent":"        // Minimal fallback UI"},{"type":"DELETE","lineNumber":185,"oldContent":"        Box("},{"type":"DELETE","lineNumber":186,"oldContent":"                        Box("},{"type":"DELETE","lineNumber":187,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":188,"oldContent":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":189,"oldContent":"                            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":190,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":191,"oldContent":"            Text("},{"type":"DELETE","lineNumber":192,"oldContent":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":193,"oldContent":"                text = \"ArWalking\\nStarting...\","},{"type":"DELETE","lineNumber":194,"oldContent":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"DELETE","lineNumber":195,"oldContent":"                        ) {"},{"type":"DELETE","lineNumber":196,"oldContent":"            )"},{"type":"DELETE","lineNumber":197,"oldContent":"        }"},{"type":"DELETE","lineNumber":198,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":201,"oldContent":"}"},{"type":"DELETE","lineNumber":202,"oldContent":"    }"},{"type":"DELETE","lineNumber":204,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":206,"oldContent":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":161,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":162,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"INSERT","lineNumber":164,"content":"}"}]},{"timestamp":1754313847320,"changes":[{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":17,"oldContent":"import com.example.arwalking.screens.CameraNavigation"},{"type":"INSERT","lineNumber":27,"content":"import com.example.arwalking.screens.SimpleHomeScreen"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":92,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"INSERT","lineNumber":105,"content":"            routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"}"},{"type":"INSERT","lineNumber":130,"content":"    }"},{"type":"INSERT","lineNumber":131,"content":"}"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"INSERT","lineNumber":144,"content":"            }"},{"type":"INSERT","lineNumber":155,"content":"        }"},{"type":"INSERT","lineNumber":156,"content":"    }"},{"type":"INSERT","lineNumber":157,"content":"}"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"INSERT","lineNumber":159,"content":"@Preview(showBackground = true)"},{"type":"INSERT","lineNumber":160,"content":"@Composable"},{"type":"INSERT","lineNumber":161,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":157,"oldContent":"            }"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"DELETE","lineNumber":160,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":161,"oldContent":""}]},{"timestamp":1754313851782,"changes":[{"type":"MODIFY","lineNumber":93,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":106,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":132,"content":"","oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":143,"content":"                SimpleHomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":145,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":155,"oldContent":"    ARWalkingTheme {"},{"type":"DELETE","lineNumber":156,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"DELETE","lineNumber":161,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"@Preview(showBackground = true)"},{"type":"DELETE","lineNumber":167,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":168,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":162,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":163,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":164,"content":"    }"},{"type":"INSERT","lineNumber":165,"content":"}"}]},{"timestamp":1754313907922,"changes":[{"type":"INSERT","lineNumber":92,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":93,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"        try {"},{"type":"DELETE","lineNumber":102,"oldContent":"            Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":103,"oldContent":"            "},{"type":"DELETE","lineNumber":104,"oldContent":"            // Feature Mapping initialisieren (asynchron)"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"            // Route laden (asynchron)"},{"type":"DELETE","lineNumber":108,"oldContent":"            val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":111,"oldContent":"                routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":101,"content":"        // Führe Initialisierung in einem separaten Thread aus"},{"type":"INSERT","lineNumber":102,"content":"        Thread {"},{"type":"INSERT","lineNumber":103,"content":"            try {"},{"type":"INSERT","lineNumber":104,"content":"                Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":113,"oldContent":"                // System-Validierung nur im Debug-Modus"},{"type":"DELETE","lineNumber":114,"oldContent":"                if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":115,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":116,"oldContent":"                        val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":117,"oldContent":"                        systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":118,"oldContent":"                        systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":119,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":120,"oldContent":"                        Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":106,"content":"                // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":107,"content":"                routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"                // Route laden (asynchron)"},{"type":"INSERT","lineNumber":110,"content":"                val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"INSERT","lineNumber":111,"content":"                if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":112,"content":"                    routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":113,"content":"                    routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":114,"content":"                    "},{"type":"INSERT","lineNumber":115,"content":"                    // System-Validierung nur im Debug-Modus"},{"type":"INSERT","lineNumber":116,"content":"                    if (BuildConfig.DEBUG) {"},{"type":"INSERT","lineNumber":117,"content":"                        try {"},{"type":"INSERT","lineNumber":118,"content":"                            val systemValidator = SystemValidator(this)"},{"type":"INSERT","lineNumber":119,"content":"                            systemValidator.validateSystem(routeViewModel)"},{"type":"INSERT","lineNumber":120,"content":"                            systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"INSERT","lineNumber":121,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":122,"content":"                            Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":123,"content":"                        }"},{"type":"INSERT","lineNumber":125,"content":"                } else {"},{"type":"INSERT","lineNumber":126,"content":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":123,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":124,"oldContent":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":128,"content":"                "},{"type":"INSERT","lineNumber":129,"content":"                Log.i(\"MainActivity\", \"Async initialization completed successfully\")"},{"type":"INSERT","lineNumber":130,"content":"                "},{"type":"INSERT","lineNumber":131,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":132,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":126,"oldContent":"            "},{"type":"DELETE","lineNumber":127,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":128,"oldContent":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":129,"oldContent":"        }"},{"type":"INSERT","lineNumber":134,"content":"        }.start()"},{"type":"INSERT","lineNumber":136,"content":"}"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":150,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":158,"oldContent":"    ARWalkingTheme {"},{"type":"DELETE","lineNumber":160,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":162,"oldContent":"    }"},{"type":"DELETE","lineNumber":164,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":167,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":169,"oldContent":"                        }"},{"type":"DELETE","lineNumber":171,"oldContent":"                            )"}]},{"timestamp":1754313942558,"changes":[{"type":"INSERT","lineNumber":30,"content":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"DELETE","lineNumber":35,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":37,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":70,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"MODIFY","lineNumber":71,"content":"        try {","oldContent":"            // Simuliere OpenCV Initialisierung"},{"type":"MODIFY","lineNumber":101,"content":"        // Führe nur minimale Initialisierung durch, um Crashes zu vermeiden","oldContent":"        // Führe Initialisierung in einem separaten Thread aus"},{"type":"DELETE","lineNumber":104,"oldContent":"                Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":105,"oldContent":"                // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":104,"content":"                Log.i(\"MainActivity\", \"Starting minimal async initialization...\")"},{"type":"INSERT","lineNumber":105,"content":"                "},{"type":"INSERT","lineNumber":106,"content":"                // Nur grundlegende Initialisierung"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"MODIFY","lineNumber":108,"content":"                ","oldContent":"                // Route laden (asynchron)"},{"type":"INSERT","lineNumber":109,"content":"                // Route laden ohne komplexe Validierung"},{"type":"DELETE","lineNumber":111,"oldContent":"                    routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                    routeViewModel.enableStorageSystemImmediately(this)"},{"type":"DELETE","lineNumber":114,"oldContent":"                    "},{"type":"DELETE","lineNumber":115,"oldContent":"                    // System-Validierung nur im Debug-Modus"},{"type":"DELETE","lineNumber":116,"oldContent":"                    if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":117,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":118,"oldContent":"                            val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":119,"oldContent":"                            systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":120,"oldContent":"                            systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    }"},{"type":"DELETE","lineNumber":123,"oldContent":"                            Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                }"},{"type":"DELETE","lineNumber":125,"oldContent":"                        }"},{"type":"INSERT","lineNumber":112,"content":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":127,"oldContent":"            }"},{"type":"INSERT","lineNumber":115,"content":"                }"},{"type":"DELETE","lineNumber":130,"oldContent":"                Log.i(\"MainActivity\", \"Async initialization completed successfully\")"},{"type":"INSERT","lineNumber":117,"content":"                Log.i(\"MainActivity\", \"Minimal initialization completed\")"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":121,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":122,"content":"            }"},{"type":"INSERT","lineNumber":124,"content":"    }"},{"type":"INSERT","lineNumber":125,"content":"}"},{"type":"INSERT","lineNumber":126,"content":""},{"type":"INSERT","lineNumber":127,"content":"@Composable"},{"type":"DELETE","lineNumber":140,"oldContent":"}"},{"type":"INSERT","lineNumber":139,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":154,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":159,"content":"}"}]},{"timestamp":1754314349840,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":"import com.example.arwalking.screens.SimpleHomeScreen"},{"type":"INSERT","lineNumber":112,"content":"                } else {"},{"type":"INSERT","lineNumber":113,"content":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":117,"content":"                "},{"type":"INSERT","lineNumber":118,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":119,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"INSERT","lineNumber":122,"content":"        }.start()"},{"type":"DELETE","lineNumber":120,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":123,"oldContent":"                "},{"type":"DELETE","lineNumber":124,"oldContent":"                "},{"type":"DELETE","lineNumber":125,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":126,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":127,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":129,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":138,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":148,"oldContent":"}"},{"type":"INSERT","lineNumber":156,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":157,"content":"    }"},{"type":"INSERT","lineNumber":158,"content":"}"}]},{"timestamp":1754314354775,"changes":[{"type":"MODIFY","lineNumber":35,"content":"import com.example.arwalking.BuildConfig","oldContent":""},{"type":"INSERT","lineNumber":37,"content":""},{"type":"DELETE","lineNumber":69,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"MODIFY","lineNumber":112,"content":"                } else {","oldContent":"                } else {"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":118,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":119,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":119,"oldContent":"                "},{"type":"INSERT","lineNumber":122,"content":"        }.start()"},{"type":"DELETE","lineNumber":121,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":126,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":136,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"MODIFY","lineNumber":136,"content":"                HomeScreen(navController = navController)","oldContent":"                SimpleHomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":138,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"MODIFY","lineNumber":155,"content":"    ARWalkingTheme {","oldContent":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":156,"content":"        ARWalkingApp()"}]},{"timestamp":1754315896736,"changes":[{"type":"DELETE","lineNumber":73,"oldContent":"            // ViewModel erstellen"},{"type":"DELETE","lineNumber":74,"oldContent":"            routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"            // UI zuerst setzen"},{"type":"INSERT","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":90,"oldContent":"            // Initialisierung asynchron durchführen"},{"type":"INSERT","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":109,"content":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":112,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":118,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":120,"oldContent":"            }"},{"type":"DELETE","lineNumber":122,"oldContent":"    }"},{"type":"INSERT","lineNumber":118,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":119,"content":"            }"},{"type":"INSERT","lineNumber":121,"content":"    }"},{"type":"DELETE","lineNumber":127,"oldContent":"                )"},{"type":"INSERT","lineNumber":125,"content":"fun ARWalkingApp() {"},{"type":"MODIFY","lineNumber":136,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->","oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":154,"oldContent":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":152,"content":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754315910963,"changes":[{"type":"DELETE","lineNumber":73,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":84,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":90,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":103,"oldContent":"                // Nur grundlegende Initialisierung"},{"type":"MODIFY","lineNumber":103,"content":"                // ViewModel sicher erstellen","oldContent":"                routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":104,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":105,"content":"                    try {"},{"type":"INSERT","lineNumber":106,"content":"                        routeViewModel = ViewModelProvider(this@MainActivity)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":107,"content":"                        Log.i(\"MainActivity\", \"RouteViewModel created successfully\")"},{"type":"INSERT","lineNumber":108,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":109,"content":"                        Log.e(\"MainActivity\", \"Error creating RouteViewModel: ${e.message}\", e)"},{"type":"INSERT","lineNumber":110,"content":"                    }"},{"type":"INSERT","lineNumber":111,"content":"                }"},{"type":"DELETE","lineNumber":106,"oldContent":"                // Route laden ohne komplexe Validierung"},{"type":"DELETE","lineNumber":107,"oldContent":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":108,"oldContent":"                val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":109,"oldContent":"                if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":111,"oldContent":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":113,"content":"                // Kurz warten, dann weitere Initialisierung"},{"type":"INSERT","lineNumber":114,"content":"                Thread.sleep(500)"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":116,"content":"                // Nur wenn ViewModel erfolgreich erstellt wurde"},{"type":"INSERT","lineNumber":117,"content":"                if (::routeViewModel.isInitialized) {"},{"type":"INSERT","lineNumber":118,"content":"                    try {"},{"type":"INSERT","lineNumber":119,"content":"                        routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":120,"content":"                        Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"INSERT","lineNumber":121,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":122,"content":"                        Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":123,"content":"                    }"},{"type":"INSERT","lineNumber":124,"content":"                    "},{"type":"INSERT","lineNumber":125,"content":"                    try {"},{"type":"INSERT","lineNumber":126,"content":"                        val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":127,"content":"                        if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":128,"content":"                            Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"INSERT","lineNumber":129,"content":"                        } else {"},{"type":"INSERT","lineNumber":130,"content":"                            Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":131,"content":"                        }"},{"type":"INSERT","lineNumber":132,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":133,"content":"                        Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":134,"content":"                    }"},{"type":"DELETE","lineNumber":116,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":117,"oldContent":"            }"},{"type":"DELETE","lineNumber":119,"oldContent":"    }"},{"type":"INSERT","lineNumber":141,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":142,"content":"            }"},{"type":"INSERT","lineNumber":144,"content":"    }"},{"type":"DELETE","lineNumber":123,"oldContent":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":148,"content":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":134,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":135,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":157,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":159,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":150,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":175,"content":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754321611460,"changes":[{"type":"MODIFY","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung","oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"MODIFY","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher","oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"MODIFY","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen","oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"MODIFY","lineNumber":104,"content":"                runOnUiThread {","oldContent":"                routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":106,"oldContent":"                "},{"type":"INSERT","lineNumber":108,"content":"                        "},{"type":"INSERT","lineNumber":109,"content":"                        // Initialisierung direkt nach ViewModel-Erstellung"},{"type":"INSERT","lineNumber":110,"content":"                        try {"},{"type":"INSERT","lineNumber":111,"content":"                            routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":112,"content":"                            Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"INSERT","lineNumber":113,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":114,"content":"                            Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":115,"content":"                        }"},{"type":"INSERT","lineNumber":116,"content":"                        "},{"type":"INSERT","lineNumber":117,"content":"                        try {"},{"type":"INSERT","lineNumber":118,"content":"                            val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":119,"content":"                            if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":120,"content":"                                Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"INSERT","lineNumber":121,"content":"                            } else {"},{"type":"INSERT","lineNumber":122,"content":"                                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":123,"content":"                            }"},{"type":"INSERT","lineNumber":124,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":125,"content":"                            Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":126,"content":"                        }"},{"type":"INSERT","lineNumber":127,"content":"                        "},{"type":"DELETE","lineNumber":113,"oldContent":"                }"},{"type":"DELETE","lineNumber":114,"oldContent":"                // Kurz warten, dann weitere Initialisierung"},{"type":"DELETE","lineNumber":116,"oldContent":"                Thread.sleep(500)"},{"type":"DELETE","lineNumber":119,"oldContent":"                "},{"type":"DELETE","lineNumber":120,"oldContent":"                // Nur wenn ViewModel erfolgreich erstellt wurde"},{"type":"DELETE","lineNumber":121,"oldContent":"                if (::routeViewModel.isInitialized) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":124,"oldContent":"                        routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":125,"oldContent":"                        Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":137,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":138,"content":"            }"},{"type":"DELETE","lineNumber":129,"oldContent":"                        Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":140,"content":"    }"},{"type":"DELETE","lineNumber":131,"oldContent":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    "},{"type":"DELETE","lineNumber":134,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":136,"oldContent":"                        val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":137,"oldContent":"                    startLocation = startLocation"},{"type":"DELETE","lineNumber":138,"oldContent":"                        if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":144,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":145,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":140,"oldContent":"                            Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":142,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":144,"oldContent":"                            Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":146,"oldContent":"                        }"},{"type":"DELETE","lineNumber":148,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":150,"oldContent":"                        Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":152,"oldContent":"                    }"},{"type":"INSERT","lineNumber":153,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":155,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":158,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":160,"oldContent":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"DELETE","lineNumber":168,"oldContent":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":171,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":177,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":178,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":179,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/storage/ArWalkingStorageManager.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/storage/ArWalkingStorageManager.kt","baseContent":"package com.example.arwalking.storage\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.util.Log\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.withContext\n\n/**\n * Haupt-Storage-Manager für ArWalking\n * Vereint alle Storage-Komponenten und lädt Bilder direkt aus dem Projektverzeichnis\n * \n * Features:\n * - Lädt Bilder direkt aus /Users/florian/Documents/GitHub/ar-walking/landmark_images/\n * - Kein Trainingsmodus erforderlich - einfach Bilder hinzufügen!\n * - LRU-Cache für 50 Vollbilder und 100 Thumbnails\n * - Automatische Thumbnail-Generierung (256x256px)\n * - Performance-Monitoring (Ziel: 5-15ms Ladezeit)\n * - Offline-First Design\n */\nclass ArWalkingStorageManager(private val context: Context) {\n    \n    private val TAG = \"ArWalkingStorageManager\"\n    \n    // Komponenten\n    private val directoryManager = StorageDirectoryManager(context)\n    private val projectImageManager = ProjectDirectoryImageManager(context)  // NEU: Lädt aus Projektverzeichnis\n    private val optimizedImageManager = OptimizedImageManager(context)       // Fallback für interne Speicherung\n    private val performanceMonitor = StoragePerformanceMonitor()\n    private val localImageStorage = LocalImageStorage(context)\n    \n    // Performance-Statistiken\n    val performanceStats: StateFlow<PerformanceStats> = performanceMonitor.performanceStats\n    val loadingStates: StateFlow<Map<String, Boolean>> = optimizedImageManager.loadingStates\n    \n    init {\n        // Initialisiere Verzeichnisstruktur\n        val initialized = directoryManager.initializeDirectories()\n        if (initialized) {\n            Log.i(TAG, \"ArWalking Storage erfolgreich initialisiert\")\n            Log.i(TAG, \"Speicher-Pfad: ${directoryManager.appFilesDir.absolutePath}\")\n        } else {\n            Log.e(TAG, \"Fehler bei der Storage-Initialisierung\")\n        }\n    }\n    \n    // === BILD-SPEICHERUNG ===\n    \n    /**\n     * Speichert ein Bild mit optimaler Performance\n     * Ziel: <200ms für komplette Speicherung\n     */\n    suspend fun saveImage(\n        bitmap: Bitmap,\n        landmarkId: String,\n        landmarkName: String,\n        description: String,\n        category: String = \"Training\",\n        onProgress: (String) -> Unit = {}\n    ): SaveResult = withContext(Dispatchers.IO) {\n        \n        performanceMonitor.measureOperation(\n            StoragePerformanceMonitor.OP_SAVE_IMAGE,\n            landmarkId\n        ) {\n            optimizedImageManager.saveImageOptimized(\n                bitmap = bitmap,\n                landmarkId = landmarkId,\n                landmarkName = landmarkName,\n                description = description,\n                category = category,\n                onProgress = onProgress\n            )\n        }\n    }\n    \n    /**\n     * Speichert Bild als Fallback lokal (für Upload-Warteschlange)\n     */\n    suspend fun saveImageForUpload(\n        bitmap: Bitmap,\n        landmarkId: String,\n        landmarkName: String,\n        description: String\n    ): Boolean = withContext(Dispatchers.IO) {\n        \n        localImageStorage.saveImageLocally(\n            bitmap = bitmap,\n            landmarkId = landmarkId,\n            landmarkName = landmarkName,\n            description = description\n        )\n    }\n    \n    // === BILD-LADEN ===\n    \n    /**\n     * Lädt ein Thumbnail (Ziel: 1-3ms aus Cache, 5-15ms von Datei)\n     */\n    suspend fun loadThumbnail(landmarkId: String): Bitmap? = withContext(Dispatchers.IO) {\n        \n        performanceMonitor.measureOperation(\n            StoragePerformanceMonitor.OP_LOAD_THUMBNAIL,\n            landmarkId\n        ) {\n            optimizedImageManager.loadThumbnail(landmarkId)\n        }\n    }\n    \n    /**\n     * Lädt ein Vollbild (Ziel: 5-15ms)\n     */\n    suspend fun loadFullImage(landmarkId: String): Bitmap? = withContext(Dispatchers.IO) {\n        \n        performanceMonitor.measureOperation(\n            StoragePerformanceMonitor.OP_LOAD_FULL_IMAGE,\n            landmarkId\n        ) {\n            optimizedImageManager.loadFullImage(landmarkId)\n        }\n    }\n    \n    // === DATEN-ABFRAGE ===\n    \n    /**\n     * Gibt Landmarks paginiert zurück (Ziel: <1ms für Suche)\n     */\n    suspend fun getLandmarksPaged(\n        page: Int = 0,\n        pageSize: Int = StorageConfig.PAGE_SIZE,\n        searchQuery: String = \"\",\n        category: String = \"\"\n    ): OptimizedImageManager.PagedResult<OptimizedImageManager.LandmarkMetadata> = withContext(Dispatchers.IO) {\n        \n        performanceMonitor.measureOperation(\n            StoragePerformanceMonitor.OP_SEARCH_INDEX,\n            \"page_${page}_query_${searchQuery}\"\n        ) {\n            optimizedImageManager.getLandmarksPaged(\n                page = page,\n                pageSize = pageSize,\n                searchQuery = searchQuery,\n                category = category\n            )\n        }\n    }\n    \n    /**\n     * Gibt alle Kategorien zurück\n     */\n    suspend fun getCategories(): List<String> = withContext(Dispatchers.IO) {\n        val allLandmarks = optimizedImageManager.getLandmarksPaged(page = 0, pageSize = Int.MAX_VALUE)\n        allLandmarks.items.map { it.category }.distinct().sorted()\n    }\n    \n    /**\n     * Sucht Landmarks nach Text\n     */\n    suspend fun searchLandmarks(query: String): List<OptimizedImageManager.LandmarkMetadata> = withContext(Dispatchers.IO) {\n        val result = optimizedImageManager.getLandmarksPaged(\n            page = 0,\n            pageSize = Int.MAX_VALUE,\n            searchQuery = query\n        )\n        result.items\n    }\n    \n    // === VERWALTUNG ===\n    \n    /**\n     * Löscht ein Landmark komplett\n     */\n    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {\n        optimizedImageManager.deleteLandmark(landmarkId)\n    }\n    \n    /**\n     * Bereinigt Cache und defekte Dateien\n     */\n    suspend fun cleanup(): CleanupSummary = withContext(Dispatchers.IO) {\n        val imageCleanup = optimizedImageManager.cleanup()\n        val directoryCleanup = directoryManager.cleanupDirectories()\n        \n        CleanupSummary(\n            imageManagerCleanup = imageCleanup,\n            directoryCleanup = directoryCleanup,\n            totalFilesRemoved = imageCleanup.removedFiles + directoryCleanup.getTotalCleaned(),\n            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.freedSpaceBytes)\n        )\n    }\n    \n    // === STATUS & MONITORING ===\n    \n    /**\n     * Gibt aktuellen Storage-Status zurück\n     */\n    suspend fun getStorageStatus(): StorageStatus = withContext(Dispatchers.IO) {\n        val directoryStatus = directoryManager.checkDirectoryIntegrity()\n        val performanceStats = performanceMonitor.performanceStats.value\n        \n        StorageStatus(\n            directoryStatus = directoryStatus,\n            performanceStats = performanceStats,\n            isHealthy = directoryStatus.isHealthy && performanceStats.isHealthy,\n            totalImages = directoryStatus.imageCount,\n            totalSizeMB = directoryStatus.getTotalSizeMB(),\n            cacheHitRate = performanceStats.cacheHitRate,\n            averageLoadTimeMs = performanceStats.loadFullImageStats?.averageDurationMs ?: 0.0\n        )\n    }\n    \n    /**\n     * Schätzt Speicherverbrauch für gegebene Anzahl Bilder\n     */\n    fun estimateStorageUsage(imageCount: Int): StorageEstimate {\n        return StorageConfig.estimateStorageUsage(imageCount)\n    }\n    \n    /**\n     * Berechnet optimale Cache-Konfiguration\n     */\n    fun calculateOptimalCacheConfig(availableMemoryMB: Int): CacheConfig {\n        return StorageConfig.calculateOptimalCacheSize(availableMemoryMB)\n    }\n    \n    /**\n     * Loggt Performance-Zusammenfassung\n     */\n    fun logPerformanceSummary() {\n        performanceMonitor.logPerformanceSummary()\n    }\n    \n    /**\n     * Setzt Performance-Metriken zurück\n     */\n    fun resetPerformanceMetrics() {\n        performanceMonitor.resetMetrics()\n    }\n    \n    // === UPLOAD-WARTESCHLANGE ===\n    \n    /**\n     * Gibt wartende Uploads zurück\n     */\n    suspend fun getPendingUploads(): List<PendingUpload> = withContext(Dispatchers.IO) {\n        localImageStorage.getPendingUploads()\n    }\n    \n    /**\n     * Markiert Upload als erfolgreich\n     */\n    suspend fun markUploadAsCompleted(pendingUpload: PendingUpload): Boolean = withContext(Dispatchers.IO) {\n        localImageStorage.markAsUploaded(pendingUpload)\n    }\n    \n    /**\n     * Bereinigt nach erfolgreichem Upload\n     */\n    suspend fun cleanupAfterUpload(pendingUpload: PendingUpload): Boolean = withContext(Dispatchers.IO) {\n        localImageStorage.cleanupAfterUpload(pendingUpload)\n    }\n    \n    /**\n     * Gibt Anzahl wartender Uploads zurück\n     */\n    suspend fun getPendingUploadCount(): Int = withContext(Dispatchers.IO) {\n        localImageStorage.getPendingUploadCount()\n    }\n    \n    // === FEATURE MAPS ===\n    \n    /**\n     * Speichert Feature Map für ein Gebäude/Stockwerk\n     */\n    suspend fun saveFeatureMap(buildingId: String, floor: Int, featureMapData: String): Boolean = withContext(Dispatchers.IO) {\n        try {\n            val featureMapFile = directoryManager.getFeatureMapFile(buildingId, floor)\n            featureMapFile.writeText(featureMapData)\n            Log.i(TAG, \"Feature Map gespeichert: ${featureMapFile.name}\")\n            true\n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Speichern der Feature Map: ${e.message}\")\n            false\n        }\n    }\n    \n    /**\n     * Lädt Feature Map für ein Gebäude/Stockwerk\n     */\n    suspend fun loadFeatureMap(buildingId: String, floor: Int): String? = withContext(Dispatchers.IO) {\n        try {\n            val featureMapFile = directoryManager.getFeatureMapFile(buildingId, floor)\n            if (featureMapFile.exists()) {\n                featureMapFile.readText()\n            } else {\n                null\n            }\n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der Feature Map: ${e.message}\")\n            null\n        }\n    }\n}\n\n/**\n * Zusammenfassung der Bereinigung\n */\ndata class CleanupSummary(\n    val imageManagerCleanup: OptimizedImageManager.CleanupResult,\n    val directoryCleanup: CleanupResult,\n    val totalFilesRemoved: Int,\n    val totalSpaceFreedMB: Double\n)\n\n/**\n * Gesamt-Status des Storage-Systems\n */\ndata class StorageStatus(\n    val directoryStatus: DirectoryStatus,\n    val performanceStats: PerformanceStats,\n    val isHealthy: Boolean,\n    val totalImages: Int,\n    val totalSizeMB: Double,\n    val cacheHitRate: Double,\n    val averageLoadTimeMs: Double\n) {\n    fun getHealthStatus(): String = when {\n        isHealthy && cacheHitRate > 80 && averageLoadTimeMs < 15 -> \"Excellent\"\n        isHealthy && cacheHitRate > 60 && averageLoadTimeMs < 25 -> \"Good\"\n        isHealthy -> \"Fair\"\n        else -> \"Poor\"\n    }\n}","baseTimestamp":1754229382672,"deltas":[{"timestamp":1754229394167,"changes":[{"type":"INSERT","lineNumber":99,"content":"     * Lädt zuerst aus dem Projektverzeichnis, dann aus interner Speicherung"},{"type":"DELETE","lineNumber":106,"oldContent":"            optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":107,"content":"            // 1. Versuche aus Projektverzeichnis zu laden"},{"type":"INSERT","lineNumber":108,"content":"            projectImageManager.loadThumbnail(landmarkId) "},{"type":"INSERT","lineNumber":109,"content":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"INSERT","lineNumber":110,"content":"                optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":116,"content":"     * Lädt zuerst aus dem Projektverzeichnis, dann aus interner Speicherung"},{"type":"DELETE","lineNumber":119,"oldContent":"            optimizedImageManager.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":124,"content":"            // 1. Versuche aus Projektverzeichnis zu laden"},{"type":"INSERT","lineNumber":125,"content":"            projectImageManager.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":126,"content":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"INSERT","lineNumber":127,"content":"                optimizedImageManager.loadFullImage(landmarkId)"}]},{"timestamp":1754229404300,"changes":[{"type":"DELETE","lineNumber":108,"oldContent":"        }"},{"type":"DELETE","lineNumber":110,"oldContent":"    }"},{"type":"DELETE","lineNumber":112,"oldContent":"    "},{"type":"INSERT","lineNumber":111,"content":"        }"},{"type":"INSERT","lineNumber":112,"content":"    }"},{"type":"INSERT","lineNumber":113,"content":"    "},{"type":"INSERT","lineNumber":116,"content":"     * Lädt zuerst aus dem Projektverzeichnis, dann aus interner Speicherung"},{"type":"DELETE","lineNumber":120,"oldContent":"     * Lädt zuerst aus dem Projektverzeichnis, dann aus interner Speicherung"},{"type":"INSERT","lineNumber":124,"content":"            // 1. Versuche aus Projektverzeichnis zu laden"},{"type":"INSERT","lineNumber":125,"content":"            projectImageManager.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":126,"content":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"INSERT","lineNumber":127,"content":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":128,"oldContent":"            // 1. Versuche aus Projektverzeichnis zu laden"},{"type":"DELETE","lineNumber":130,"oldContent":"            projectImageManager.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":132,"oldContent":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"DELETE","lineNumber":134,"oldContent":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":176,"content":"    // === PROJEKTVERZEICHNIS-SPEZIFISCHE METHODEN ==="},{"type":"INSERT","lineNumber":177,"content":"    "},{"type":"INSERT","lineNumber":178,"content":"    /**"},{"type":"INSERT","lineNumber":179,"content":"     * Gibt alle verfügbaren Landmarks aus dem Projektverzeichnis zurück"},{"type":"INSERT","lineNumber":180,"content":"     */"},{"type":"INSERT","lineNumber":181,"content":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":182,"content":"        projectImageManager.getAvailableLandmarks()"},{"type":"INSERT","lineNumber":183,"content":"    }"},{"type":"INSERT","lineNumber":184,"content":"    "},{"type":"INSERT","lineNumber":185,"content":"    /**"},{"type":"INSERT","lineNumber":186,"content":"     * Prüft ob ein Landmark-Bild im Projektverzeichnis existiert"},{"type":"INSERT","lineNumber":187,"content":"     */"},{"type":"INSERT","lineNumber":188,"content":"    fun hasProjectLandmarkImage(landmarkId: String): Boolean {"},{"type":"INSERT","lineNumber":189,"content":"        return projectImageManager.hasLandmarkImage(landmarkId)"},{"type":"INSERT","lineNumber":190,"content":"    }"},{"type":"INSERT","lineNumber":191,"content":"    "},{"type":"INSERT","lineNumber":192,"content":"    /**"},{"type":"INSERT","lineNumber":193,"content":"     * Gibt Informationen über ein Projekt-Landmark zurück"},{"type":"INSERT","lineNumber":194,"content":"     */"},{"type":"INSERT","lineNumber":195,"content":"    suspend fun getProjectLandmarkInfo(landmarkId: String): LandmarkInfo? = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":196,"content":"        projectImageManager.getLandmarkInfo(landmarkId)"},{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    /**"},{"type":"INSERT","lineNumber":200,"content":"     * Gibt Cache-Statistiken für das Projektverzeichnis zurück"},{"type":"INSERT","lineNumber":201,"content":"     */"},{"type":"INSERT","lineNumber":202,"content":"    fun getProjectCacheStats(): CacheStats {"},{"type":"INSERT","lineNumber":203,"content":"        return projectImageManager.getCacheStats()"},{"type":"INSERT","lineNumber":204,"content":"    }"},{"type":"INSERT","lineNumber":205,"content":"    "}]},{"timestamp":1754229411226,"changes":[{"type":"DELETE","lineNumber":109,"oldContent":"        }"},{"type":"INSERT","lineNumber":110,"content":"                optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":111,"content":"        }"},{"type":"DELETE","lineNumber":113,"oldContent":"                optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":125,"oldContent":"        }"},{"type":"DELETE","lineNumber":127,"oldContent":"    }"},{"type":"DELETE","lineNumber":129,"oldContent":"    "},{"type":"INSERT","lineNumber":128,"content":"        }"},{"type":"INSERT","lineNumber":129,"content":"    }"},{"type":"INSERT","lineNumber":130,"content":"    "},{"type":"DELETE","lineNumber":177,"oldContent":"    // === VERWALTUNG ==="},{"type":"DELETE","lineNumber":179,"oldContent":"    "},{"type":"DELETE","lineNumber":181,"oldContent":"    /**"},{"type":"DELETE","lineNumber":183,"oldContent":"     * Löscht ein Landmark komplett"},{"type":"DELETE","lineNumber":185,"oldContent":"     */"},{"type":"DELETE","lineNumber":187,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":189,"oldContent":"        optimizedImageManager.deleteLandmark(landmarkId)"},{"type":"INSERT","lineNumber":184,"content":"    "},{"type":"INSERT","lineNumber":185,"content":"    /**"},{"type":"INSERT","lineNumber":186,"content":"     * Prüft ob ein Landmark-Bild im Projektverzeichnis existiert"},{"type":"INSERT","lineNumber":187,"content":"     */"},{"type":"INSERT","lineNumber":188,"content":"    fun hasProjectLandmarkImage(landmarkId: String): Boolean {"},{"type":"INSERT","lineNumber":189,"content":"        return projectImageManager.hasLandmarkImage(landmarkId)"},{"type":"INSERT","lineNumber":192,"content":"    /**"},{"type":"INSERT","lineNumber":193,"content":"     * Gibt Informationen über ein Projekt-Landmark zurück"},{"type":"INSERT","lineNumber":194,"content":"     */"},{"type":"INSERT","lineNumber":195,"content":"    suspend fun getProjectLandmarkInfo(landmarkId: String): LandmarkInfo? = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":196,"content":"        projectImageManager.getLandmarkInfo(landmarkId)"},{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"INSERT","lineNumber":200,"content":"     * Gibt Cache-Statistiken für das Projektverzeichnis zurück"},{"type":"INSERT","lineNumber":201,"content":"     */"},{"type":"INSERT","lineNumber":202,"content":"    fun getProjectCacheStats(): CacheStats {"},{"type":"INSERT","lineNumber":203,"content":"        return projectImageManager.getCacheStats()"},{"type":"INSERT","lineNumber":204,"content":"    }"},{"type":"INSERT","lineNumber":205,"content":"    "},{"type":"INSERT","lineNumber":206,"content":"    // === VERWALTUNG ==="},{"type":"INSERT","lineNumber":207,"content":"    "},{"type":"DELETE","lineNumber":196,"oldContent":"     * Prüft ob ein Landmark-Bild im Projektverzeichnis existiert"},{"type":"INSERT","lineNumber":209,"content":"     * Löscht ein Landmark komplett"},{"type":"INSERT","lineNumber":210,"content":"     */"},{"type":"INSERT","lineNumber":211,"content":"    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":212,"content":"        optimizedImageManager.deleteLandmark(landmarkId)"},{"type":"INSERT","lineNumber":213,"content":"    }"},{"type":"INSERT","lineNumber":214,"content":"    "},{"type":"INSERT","lineNumber":215,"content":"    /**"},{"type":"DELETE","lineNumber":199,"oldContent":"     */"},{"type":"DELETE","lineNumber":200,"oldContent":"    fun hasProjectLandmarkImage(landmarkId: String): Boolean {"},{"type":"DELETE","lineNumber":202,"oldContent":"        return projectImageManager.hasLandmarkImage(landmarkId)"},{"type":"DELETE","lineNumber":204,"oldContent":"    }"},{"type":"DELETE","lineNumber":206,"oldContent":"    "},{"type":"DELETE","lineNumber":208,"oldContent":"    /**"},{"type":"DELETE","lineNumber":210,"oldContent":"     * Gibt Informationen über ein Projekt-Landmark zurück"},{"type":"DELETE","lineNumber":212,"oldContent":"     */"},{"type":"DELETE","lineNumber":214,"oldContent":"    suspend fun getProjectLandmarkInfo(landmarkId: String): LandmarkInfo? = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":216,"oldContent":"        projectImageManager.getLandmarkInfo(landmarkId)"},{"type":"DELETE","lineNumber":218,"oldContent":"    }"},{"type":"DELETE","lineNumber":220,"oldContent":"    "},{"type":"DELETE","lineNumber":222,"oldContent":"    /**"},{"type":"DELETE","lineNumber":224,"oldContent":"     * Gibt Cache-Statistiken für das Projektverzeichnis zurück"},{"type":"DELETE","lineNumber":226,"oldContent":"     */"},{"type":"DELETE","lineNumber":228,"oldContent":"    fun getProjectCacheStats(): CacheStats {"},{"type":"DELETE","lineNumber":230,"oldContent":"        return projectImageManager.getCacheStats()"},{"type":"DELETE","lineNumber":232,"oldContent":"    }"},{"type":"DELETE","lineNumber":234,"oldContent":"    "},{"type":"INSERT","lineNumber":269,"content":"        projectImageManager.logPerformanceSummary()"}]},{"timestamp":1754245979065,"changes":[{"type":"MODIFY","lineNumber":110,"content":"                optimizedImageManager.loadThumbnail(landmarkId)","oldContent":"                optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":126,"oldContent":"        }"},{"type":"INSERT","lineNumber":127,"content":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":128,"content":"        }"},{"type":"DELETE","lineNumber":130,"oldContent":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":180,"oldContent":"    "},{"type":"INSERT","lineNumber":181,"content":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":182,"content":"        projectImageManager.getAvailableLandmarks()"},{"type":"INSERT","lineNumber":183,"content":"    }"},{"type":"INSERT","lineNumber":184,"content":"    "},{"type":"DELETE","lineNumber":184,"oldContent":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":187,"oldContent":"        projectImageManager.getAvailableLandmarks()"},{"type":"DELETE","lineNumber":190,"oldContent":"    }"},{"type":"MODIFY","lineNumber":192,"content":"    /**","oldContent":"    /**"},{"type":"DELETE","lineNumber":194,"oldContent":"    "},{"type":"DELETE","lineNumber":196,"oldContent":"    /**"},{"type":"DELETE","lineNumber":198,"oldContent":"    /**"},{"type":"DELETE","lineNumber":201,"oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":202,"oldContent":"     */"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    /**"},{"type":"DELETE","lineNumber":205,"oldContent":"    suspend fun cleanup(): CleanupSummary = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":208,"oldContent":"        val imageCleanup = optimizedImageManager.cleanup()"},{"type":"DELETE","lineNumber":211,"oldContent":"        val directoryCleanup = directoryManager.cleanupDirectories()"},{"type":"DELETE","lineNumber":214,"oldContent":"        "},{"type":"INSERT","lineNumber":208,"content":"    /**"},{"type":"DELETE","lineNumber":216,"oldContent":"        CleanupSummary("},{"type":"DELETE","lineNumber":219,"oldContent":"            imageManagerCleanup = imageCleanup,"},{"type":"DELETE","lineNumber":222,"oldContent":"            directoryCleanup = directoryCleanup,"},{"type":"DELETE","lineNumber":225,"oldContent":"            totalFilesRemoved = imageCleanup.removedFiles + directoryCleanup.getTotalCleaned(),"},{"type":"DELETE","lineNumber":226,"oldContent":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.freedSpaceBytes)"},{"type":"INSERT","lineNumber":216,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":217,"content":"     */"},{"type":"INSERT","lineNumber":218,"content":"    suspend fun cleanup(): CleanupSummary = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":219,"content":"        val imageCleanup = optimizedImageManager.cleanup()"},{"type":"INSERT","lineNumber":220,"content":"        val directoryCleanup = directoryManager.cleanupDirectories()"},{"type":"INSERT","lineNumber":221,"content":"        CleanupSummary("},{"type":"INSERT","lineNumber":222,"content":"            imageManagerCleanup = imageCleanup,"},{"type":"INSERT","lineNumber":223,"content":"            directoryCleanup = directoryCleanup,"},{"type":"INSERT","lineNumber":224,"content":"            totalFilesRemoved = imageCleanup.removedFiles.toInt() + directoryCleanup.cleanedFiles.toInt(),"},{"type":"INSERT","lineNumber":225,"content":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.freedSpaceBytes.toLong())"}]},{"timestamp":1754246006375,"changes":[{"type":"INSERT","lineNumber":109,"content":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"DELETE","lineNumber":110,"oldContent":"                optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"MODIFY","lineNumber":127,"content":"                optimizedImageManager.loadFullImage(landmarkId)","oldContent":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"MODIFY","lineNumber":181,"content":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {","oldContent":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":183,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":185,"content":"    /**","oldContent":"     * Prüft ob ein Landmark-Bild im Projektverzeichnis existiert"},{"type":"INSERT","lineNumber":186,"content":"     * Prüft ob ein Landmark-Bild im Projektverzeichnis existiert"},{"type":"INSERT","lineNumber":191,"content":"    "},{"type":"DELETE","lineNumber":192,"oldContent":"    /**"},{"type":"DELETE","lineNumber":196,"oldContent":"    "},{"type":"DELETE","lineNumber":197,"oldContent":"    /**"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    /**"},{"type":"DELETE","lineNumber":204,"oldContent":"    /**"},{"type":"INSERT","lineNumber":208,"content":"    /**"},{"type":"INSERT","lineNumber":210,"content":"     */"},{"type":"INSERT","lineNumber":211,"content":"    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":212,"content":"        optimizedImageManager.deleteLandmark(landmarkId)"},{"type":"INSERT","lineNumber":213,"content":"    }"},{"type":"INSERT","lineNumber":214,"content":"    "},{"type":"INSERT","lineNumber":215,"content":"    /**"},{"type":"DELETE","lineNumber":212,"oldContent":"     */"},{"type":"DELETE","lineNumber":214,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":217,"oldContent":"        optimizedImageManager.deleteLandmark(landmarkId)"},{"type":"DELETE","lineNumber":219,"oldContent":"    }"},{"type":"DELETE","lineNumber":222,"oldContent":"    "},{"type":"DELETE","lineNumber":223,"oldContent":"            totalFilesRemoved = imageCleanup.removedFiles.toInt() + directoryCleanup.cleanedFiles.toInt(),"},{"type":"DELETE","lineNumber":224,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":224,"content":"            totalFilesRemoved = imageCleanup.removedFiles.toInt() + directoryCleanup.removedFiles.toInt(),","oldContent":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.freedSpaceBytes.toLong())"},{"type":"INSERT","lineNumber":225,"content":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.totalFreedSpaceBytes.toLong())"}]},{"timestamp":1754246079872,"changes":[{"type":"INSERT","lineNumber":126,"content":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"DELETE","lineNumber":127,"oldContent":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":180,"content":"     */"},{"type":"DELETE","lineNumber":181,"oldContent":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":184,"content":"    "},{"type":"DELETE","lineNumber":186,"oldContent":"    "},{"type":"DELETE","lineNumber":196,"oldContent":"    "},{"type":"MODIFY","lineNumber":198,"content":"    ","oldContent":"    /**"},{"type":"INSERT","lineNumber":199,"content":"    /**"},{"type":"MODIFY","lineNumber":208,"content":"    /**","oldContent":"    /**"},{"type":"DELETE","lineNumber":211,"oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":213,"oldContent":"     */"},{"type":"MODIFY","lineNumber":216,"content":"     * Bereinigt Cache und defekte Dateien","oldContent":"    suspend fun cleanup(): CleanupSummary = withContext(Dispatchers.IO) {"},{"type":"INSERT","lineNumber":217,"content":"     */"},{"type":"INSERT","lineNumber":218,"content":"    suspend fun cleanup(): CleanupSummary = withContext(Dispatchers.IO) {"},{"type":"MODIFY","lineNumber":224,"content":"            totalFilesRemoved = imageCleanup.removedFiles.toLong().plus(directoryCleanup.removedFiles.toLong()).toInt(),","oldContent":"            totalFilesRemoved = imageCleanup.removedFiles.toInt() + directoryCleanup.removedFiles.toInt(),"}]},{"timestamp":1754246124619,"changes":[{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"DELETE","lineNumber":199,"oldContent":"    }"},{"type":"INSERT","lineNumber":207,"content":"    "},{"type":"DELETE","lineNumber":208,"oldContent":"    /**"},{"type":"INSERT","lineNumber":214,"content":"    "},{"type":"INSERT","lineNumber":215,"content":"    /**"},{"type":"DELETE","lineNumber":216,"oldContent":"    "},{"type":"DELETE","lineNumber":218,"oldContent":"    /**"},{"type":"DELETE","lineNumber":224,"oldContent":"            totalFilesRemoved = imageCleanup.removedFiles.toLong().plus(directoryCleanup.removedFiles.toLong()).toInt(),"},{"type":"MODIFY","lineNumber":224,"content":"            totalFilesRemoved = imageCleanup.removedFiles.toInt() + directoryCleanup.removedFiles.toInt(),","oldContent":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.freedSpaceBytes.toLong())"},{"type":"INSERT","lineNumber":225,"content":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.totalFreedSpaceBytes.toLong())"}]},{"timestamp":1754246134684,"changes":[{"type":"MODIFY","lineNumber":216,"content":"     * Bereinigt Cache und defekte Dateien","oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"MODIFY","lineNumber":225,"content":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.totalFreedSpaceBytes.toLong())","oldContent":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.freedSpaceBytes.toLong())"}]},{"timestamp":1754249547642,"changes":[{"type":"INSERT","lineNumber":215,"content":"    /**"},{"type":"DELETE","lineNumber":216,"oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"MODIFY","lineNumber":348,"content":"    val directoryCleanup: StorageDirectoryManager.CleanupResult,","oldContent":"    val directoryCleanup: CleanupResult,"}]},{"timestamp":1754249555434,"changes":[{"type":"DELETE","lineNumber":224,"oldContent":"            totalFilesRemoved = imageCleanup.removedFiles.toInt() + directoryCleanup.removedFiles.toInt(),"},{"type":"DELETE","lineNumber":225,"oldContent":"            totalSpaceFreedMB = StorageConfig.bytesToMB(imageCleanup.totalFreedSpaceBytes.toLong())"},{"type":"INSERT","lineNumber":224,"content":"            totalFilesRemoved = imageCleanup.removedFiles + directoryCleanup.getTotalCleaned(),"},{"type":"INSERT","lineNumber":225,"content":"            totalSpaceFreedMB = 0.0 // Placeholder - could be calculated if needed"}]},{"timestamp":1754315980763,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import kotlinx.coroutines.Dispatchers"},{"type":"DELETE","lineNumber":6,"oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"DELETE","lineNumber":7,"oldContent":"import kotlinx.coroutines.withContext"},{"type":"DELETE","lineNumber":10,"oldContent":" * Haupt-Storage-Manager für ArWalking"},{"type":"DELETE","lineNumber":11,"oldContent":" * Vereint alle Storage-Komponenten und lädt Bilder direkt aus dem Projektverzeichnis"},{"type":"DELETE","lineNumber":12,"oldContent":" * "},{"type":"DELETE","lineNumber":13,"oldContent":" * Features:"},{"type":"DELETE","lineNumber":14,"oldContent":" * - Lädt Bilder direkt aus /Users/florian/Documents/GitHub/ar-walking/landmark_images/"},{"type":"DELETE","lineNumber":15,"oldContent":" * - Kein Trainingsmodus erforderlich - einfach Bilder hinzufügen!"},{"type":"DELETE","lineNumber":16,"oldContent":" * - LRU-Cache für 50 Vollbilder und 100 Thumbnails"},{"type":"DELETE","lineNumber":17,"oldContent":" * - Automatische Thumbnail-Generierung (256x256px)"},{"type":"DELETE","lineNumber":18,"oldContent":" * - Performance-Monitoring (Ziel: 5-15ms Ladezeit)"},{"type":"DELETE","lineNumber":19,"oldContent":" * - Offline-First Design"},{"type":"INSERT","lineNumber":7,"content":" * Stub-Implementation des Storage-Managers"},{"type":"INSERT","lineNumber":8,"content":" * Verhindert Crashes durch fehlende Klasse"},{"type":"DELETE","lineNumber":25,"oldContent":"    // Komponenten"},{"type":"DELETE","lineNumber":26,"oldContent":"    private val directoryManager = StorageDirectoryManager(context)"},{"type":"DELETE","lineNumber":27,"oldContent":"    private val projectImageManager = ProjectDirectoryImageManager(context)  // NEU: Lädt aus Projektverzeichnis"},{"type":"DELETE","lineNumber":28,"oldContent":"    private val optimizedImageManager = OptimizedImageManager(context)       // Fallback für interne Speicherung"},{"type":"DELETE","lineNumber":29,"oldContent":"    private val performanceMonitor = StoragePerformanceMonitor()"},{"type":"DELETE","lineNumber":30,"oldContent":"    private val localImageStorage = LocalImageStorage(context)"},{"type":"DELETE","lineNumber":31,"oldContent":"    "},{"type":"DELETE","lineNumber":32,"oldContent":"    // Performance-Statistiken"},{"type":"DELETE","lineNumber":33,"oldContent":"    val performanceStats: StateFlow<PerformanceStats> = performanceMonitor.performanceStats"},{"type":"DELETE","lineNumber":34,"oldContent":"    val loadingStates: StateFlow<Map<String, Boolean>> = optimizedImageManager.loadingStates"},{"type":"DELETE","lineNumber":35,"oldContent":"    "},{"type":"DELETE","lineNumber":37,"oldContent":"        // Initialisiere Verzeichnisstruktur"},{"type":"DELETE","lineNumber":38,"oldContent":"        val initialized = directoryManager.initializeDirectories()"},{"type":"DELETE","lineNumber":39,"oldContent":"        if (initialized) {"},{"type":"DELETE","lineNumber":40,"oldContent":"            Log.i(TAG, \"ArWalking Storage erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":41,"oldContent":"            Log.i(TAG, \"Speicher-Pfad: ${directoryManager.appFilesDir.absolutePath}\")"},{"type":"DELETE","lineNumber":42,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":43,"oldContent":"            Log.e(TAG, \"Fehler bei der Storage-Initialisierung\")"},{"type":"DELETE","lineNumber":44,"oldContent":"        }"},{"type":"INSERT","lineNumber":15,"content":"        Log.i(TAG, \"ArWalkingStorageManager initialized (stub)\")"},{"type":"DELETE","lineNumber":47,"oldContent":"    // === BILD-SPEICHERUNG ==="},{"type":"DELETE","lineNumber":48,"oldContent":"    "},{"type":"DELETE","lineNumber":49,"oldContent":"    /**"},{"type":"DELETE","lineNumber":50,"oldContent":"     * Speichert ein Bild mit optimaler Performance"},{"type":"DELETE","lineNumber":51,"oldContent":"     * Ziel: <200ms für komplette Speicherung"},{"type":"DELETE","lineNumber":52,"oldContent":"     */"},{"type":"DELETE","lineNumber":53,"oldContent":"    suspend fun saveImage("},{"type":"INSERT","lineNumber":18,"content":"    fun saveImage("},{"type":"DELETE","lineNumber":58,"oldContent":"        category: String = \"Training\","},{"type":"DELETE","lineNumber":59,"oldContent":"        onProgress: (String) -> Unit = {}"},{"type":"DELETE","lineNumber":60,"oldContent":"    ): SaveResult = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":61,"oldContent":"        "},{"type":"DELETE","lineNumber":62,"oldContent":"        performanceMonitor.measureOperation("},{"type":"DELETE","lineNumber":63,"oldContent":"            StoragePerformanceMonitor.OP_SAVE_IMAGE,"},{"type":"DELETE","lineNumber":64,"oldContent":"            landmarkId"},{"type":"DELETE","lineNumber":65,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":66,"oldContent":"            optimizedImageManager.saveImageOptimized("},{"type":"DELETE","lineNumber":67,"oldContent":"                bitmap = bitmap,"},{"type":"DELETE","lineNumber":68,"oldContent":"                landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":69,"oldContent":"                landmarkName = landmarkName,"},{"type":"DELETE","lineNumber":70,"oldContent":"                description = description,"},{"type":"DELETE","lineNumber":71,"oldContent":"                category = category,"},{"type":"DELETE","lineNumber":72,"oldContent":"                onProgress = onProgress"},{"type":"DELETE","lineNumber":73,"oldContent":"            )"},{"type":"DELETE","lineNumber":74,"oldContent":"        }"},{"type":"INSERT","lineNumber":23,"content":"        category: String"},{"type":"INSERT","lineNumber":24,"content":"    ): SaveResult {"},{"type":"INSERT","lineNumber":25,"content":"        Log.d(TAG, \"saveImage called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":26,"content":"        return SaveResult.Success(\"Stub implementation\")"},{"type":"DELETE","lineNumber":77,"oldContent":"    /**"},{"type":"DELETE","lineNumber":78,"oldContent":"     * Speichert Bild als Fallback lokal (für Upload-Warteschlange)"},{"type":"DELETE","lineNumber":79,"oldContent":"     */"},{"type":"DELETE","lineNumber":80,"oldContent":"    suspend fun saveImageForUpload("},{"type":"DELETE","lineNumber":81,"oldContent":"        bitmap: Bitmap,"},{"type":"DELETE","lineNumber":82,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":83,"oldContent":"        landmarkName: String,"},{"type":"DELETE","lineNumber":84,"oldContent":"        description: String"},{"type":"DELETE","lineNumber":85,"oldContent":"    ): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":86,"oldContent":"        "},{"type":"DELETE","lineNumber":87,"oldContent":"        localImageStorage.saveImageLocally("},{"type":"DELETE","lineNumber":88,"oldContent":"            bitmap = bitmap,"},{"type":"DELETE","lineNumber":89,"oldContent":"            landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":90,"oldContent":"            landmarkName = landmarkName,"},{"type":"DELETE","lineNumber":91,"oldContent":"            description = description"},{"type":"DELETE","lineNumber":92,"oldContent":"        )"},{"type":"INSERT","lineNumber":29,"content":"    fun loadFullImage(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":30,"content":"        Log.d(TAG, \"loadFullImage called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":31,"content":"        return null"},{"type":"DELETE","lineNumber":95,"oldContent":"    // === BILD-LADEN ==="},{"type":"DELETE","lineNumber":96,"oldContent":"    "},{"type":"DELETE","lineNumber":97,"oldContent":"    /**"},{"type":"DELETE","lineNumber":98,"oldContent":"     * Lädt ein Thumbnail (Ziel: 1-3ms aus Cache, 5-15ms von Datei)"},{"type":"DELETE","lineNumber":99,"oldContent":"     * Lädt zuerst aus dem Projektverzeichnis, dann aus interner Speicherung"},{"type":"DELETE","lineNumber":100,"oldContent":"     */"},{"type":"DELETE","lineNumber":101,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): Bitmap? = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":102,"oldContent":"        "},{"type":"DELETE","lineNumber":103,"oldContent":"        performanceMonitor.measureOperation("},{"type":"DELETE","lineNumber":104,"oldContent":"            StoragePerformanceMonitor.OP_LOAD_THUMBNAIL,"},{"type":"DELETE","lineNumber":105,"oldContent":"            landmarkId"},{"type":"DELETE","lineNumber":106,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":107,"oldContent":"            // 1. Versuche aus Projektverzeichnis zu laden"},{"type":"DELETE","lineNumber":108,"oldContent":"            projectImageManager.loadThumbnail(landmarkId) "},{"type":"DELETE","lineNumber":109,"oldContent":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"DELETE","lineNumber":110,"oldContent":"                optimizedImageManager.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":111,"oldContent":"        }"},{"type":"INSERT","lineNumber":34,"content":"    fun loadThumbnail(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":35,"content":"        Log.d(TAG, \"loadThumbnail called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":36,"content":"        return null"},{"type":"DELETE","lineNumber":114,"oldContent":"    /**"},{"type":"DELETE","lineNumber":115,"oldContent":"     * Lädt ein Vollbild (Ziel: 5-15ms)"},{"type":"DELETE","lineNumber":116,"oldContent":"     * Lädt zuerst aus dem Projektverzeichnis, dann aus interner Speicherung"},{"type":"DELETE","lineNumber":117,"oldContent":"     */"},{"type":"DELETE","lineNumber":118,"oldContent":"    suspend fun loadFullImage(landmarkId: String): Bitmap? = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":119,"oldContent":"        "},{"type":"DELETE","lineNumber":120,"oldContent":"        performanceMonitor.measureOperation("},{"type":"DELETE","lineNumber":121,"oldContent":"            StoragePerformanceMonitor.OP_LOAD_FULL_IMAGE,"},{"type":"DELETE","lineNumber":122,"oldContent":"            landmarkId"},{"type":"DELETE","lineNumber":123,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":124,"oldContent":"            // 1. Versuche aus Projektverzeichnis zu laden"},{"type":"DELETE","lineNumber":125,"oldContent":"            projectImageManager.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":126,"oldContent":"                ?: // 2. Fallback: Aus interner Speicherung"},{"type":"DELETE","lineNumber":127,"oldContent":"                optimizedImageManager.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":128,"oldContent":"        }"},{"type":"INSERT","lineNumber":39,"content":"    fun getAvailableProjectLandmarks(): List<ProjectLandmark> {"},{"type":"INSERT","lineNumber":40,"content":"        Log.d(TAG, \"getAvailableProjectLandmarks called (stub)\")"},{"type":"INSERT","lineNumber":41,"content":"        return emptyList()"},{"type":"DELETE","lineNumber":131,"oldContent":"    // === DATEN-ABFRAGE ==="},{"type":"DELETE","lineNumber":132,"oldContent":"    "},{"type":"DELETE","lineNumber":133,"oldContent":"    /**"},{"type":"DELETE","lineNumber":134,"oldContent":"     * Gibt Landmarks paginiert zurück (Ziel: <1ms für Suche)"},{"type":"DELETE","lineNumber":135,"oldContent":"     */"},{"type":"DELETE","lineNumber":136,"oldContent":"    suspend fun getLandmarksPaged("},{"type":"DELETE","lineNumber":137,"oldContent":"        page: Int = 0,"},{"type":"DELETE","lineNumber":138,"oldContent":"        pageSize: Int = StorageConfig.PAGE_SIZE,"},{"type":"DELETE","lineNumber":139,"oldContent":"        searchQuery: String = \"\","},{"type":"DELETE","lineNumber":140,"oldContent":"        category: String = \"\""},{"type":"DELETE","lineNumber":141,"oldContent":"    ): OptimizedImageManager.PagedResult<OptimizedImageManager.LandmarkMetadata> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":142,"oldContent":"        "},{"type":"DELETE","lineNumber":143,"oldContent":"        performanceMonitor.measureOperation("},{"type":"DELETE","lineNumber":144,"oldContent":"            StoragePerformanceMonitor.OP_SEARCH_INDEX,"},{"type":"DELETE","lineNumber":145,"oldContent":"            \"page_${page}_query_${searchQuery}\""},{"type":"DELETE","lineNumber":146,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":147,"oldContent":"            optimizedImageManager.getLandmarksPaged("},{"type":"DELETE","lineNumber":148,"oldContent":"                page = page,"},{"type":"DELETE","lineNumber":149,"oldContent":"                pageSize = pageSize,"},{"type":"DELETE","lineNumber":150,"oldContent":"                searchQuery = searchQuery,"},{"type":"DELETE","lineNumber":151,"oldContent":"                category = category"},{"type":"DELETE","lineNumber":152,"oldContent":"            )"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"},{"type":"INSERT","lineNumber":44,"content":"    fun getStorageStatus(): StorageStatus {"},{"type":"INSERT","lineNumber":45,"content":"        Log.d(TAG, \"getStorageStatus called (stub)\")"},{"type":"INSERT","lineNumber":46,"content":"        return StorageStatus()"},{"type":"DELETE","lineNumber":156,"oldContent":"    /**"},{"type":"DELETE","lineNumber":157,"oldContent":"     * Gibt alle Kategorien zurück"},{"type":"DELETE","lineNumber":158,"oldContent":"     */"},{"type":"DELETE","lineNumber":159,"oldContent":"    suspend fun getCategories(): List<String> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":160,"oldContent":"        val allLandmarks = optimizedImageManager.getLandmarksPaged(page = 0, pageSize = Int.MAX_VALUE)"},{"type":"DELETE","lineNumber":161,"oldContent":"        allLandmarks.items.map { it.category }.distinct().sorted()"},{"type":"DELETE","lineNumber":162,"oldContent":"    }"},{"type":"DELETE","lineNumber":163,"oldContent":"    "},{"type":"DELETE","lineNumber":164,"oldContent":"    /**"},{"type":"DELETE","lineNumber":165,"oldContent":"     * Sucht Landmarks nach Text"},{"type":"DELETE","lineNumber":166,"oldContent":"     */"},{"type":"DELETE","lineNumber":167,"oldContent":"    suspend fun searchLandmarks(query: String): List<OptimizedImageManager.LandmarkMetadata> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":168,"oldContent":"        val result = optimizedImageManager.getLandmarksPaged("},{"type":"DELETE","lineNumber":169,"oldContent":"            page = 0,"},{"type":"DELETE","lineNumber":170,"oldContent":"            pageSize = Int.MAX_VALUE,"},{"type":"DELETE","lineNumber":171,"oldContent":"            searchQuery = query"},{"type":"DELETE","lineNumber":172,"oldContent":"        )"},{"type":"DELETE","lineNumber":173,"oldContent":"        result.items"},{"type":"DELETE","lineNumber":174,"oldContent":"    }"},{"type":"DELETE","lineNumber":175,"oldContent":"    "},{"type":"DELETE","lineNumber":176,"oldContent":"    // === PROJEKTVERZEICHNIS-SPEZIFISCHE METHODEN ==="},{"type":"DELETE","lineNumber":177,"oldContent":"    "},{"type":"DELETE","lineNumber":178,"oldContent":"    /**"},{"type":"DELETE","lineNumber":179,"oldContent":"     * Gibt alle verfügbaren Landmarks aus dem Projektverzeichnis zurück"},{"type":"DELETE","lineNumber":180,"oldContent":"     */"},{"type":"DELETE","lineNumber":181,"oldContent":"    suspend fun getAvailableProjectLandmarks(): List<LandmarkInfo> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":182,"oldContent":"        projectImageManager.getAvailableLandmarks()"},{"type":"DELETE","lineNumber":183,"oldContent":"    }"},{"type":"DELETE","lineNumber":184,"oldContent":"    "},{"type":"DELETE","lineNumber":185,"oldContent":"    /**"},{"type":"DELETE","lineNumber":186,"oldContent":"     * Prüft ob ein Landmark-Bild im Projektverzeichnis existiert"},{"type":"DELETE","lineNumber":187,"oldContent":"     */"},{"type":"DELETE","lineNumber":188,"oldContent":"    fun hasProjectLandmarkImage(landmarkId: String): Boolean {"},{"type":"DELETE","lineNumber":189,"oldContent":"        return projectImageManager.hasLandmarkImage(landmarkId)"},{"type":"DELETE","lineNumber":190,"oldContent":"    }"},{"type":"DELETE","lineNumber":191,"oldContent":"    "},{"type":"DELETE","lineNumber":192,"oldContent":"    /**"},{"type":"DELETE","lineNumber":193,"oldContent":"     * Gibt Informationen über ein Projekt-Landmark zurück"},{"type":"DELETE","lineNumber":194,"oldContent":"     */"},{"type":"DELETE","lineNumber":195,"oldContent":"    suspend fun getProjectLandmarkInfo(landmarkId: String): LandmarkInfo? = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":196,"oldContent":"        projectImageManager.getLandmarkInfo(landmarkId)"},{"type":"DELETE","lineNumber":197,"oldContent":"    }"},{"type":"DELETE","lineNumber":198,"oldContent":"    "},{"type":"DELETE","lineNumber":199,"oldContent":"    /**"},{"type":"DELETE","lineNumber":200,"oldContent":"     * Gibt Cache-Statistiken für das Projektverzeichnis zurück"},{"type":"DELETE","lineNumber":201,"oldContent":"     */"},{"type":"DELETE","lineNumber":202,"oldContent":"    fun getProjectCacheStats(): CacheStats {"},{"type":"DELETE","lineNumber":203,"oldContent":"        return projectImageManager.getCacheStats()"},{"type":"DELETE","lineNumber":204,"oldContent":"    }"},{"type":"DELETE","lineNumber":205,"oldContent":"    "},{"type":"DELETE","lineNumber":206,"oldContent":"    // === VERWALTUNG ==="},{"type":"DELETE","lineNumber":207,"oldContent":"    "},{"type":"DELETE","lineNumber":208,"oldContent":"    /**"},{"type":"DELETE","lineNumber":209,"oldContent":"     * Löscht ein Landmark komplett"},{"type":"DELETE","lineNumber":210,"oldContent":"     */"},{"type":"DELETE","lineNumber":211,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":212,"oldContent":"        optimizedImageManager.deleteLandmark(landmarkId)"},{"type":"DELETE","lineNumber":213,"oldContent":"    }"},{"type":"DELETE","lineNumber":214,"oldContent":"    "},{"type":"DELETE","lineNumber":215,"oldContent":"    /**"},{"type":"DELETE","lineNumber":216,"oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"DELETE","lineNumber":217,"oldContent":"     */"},{"type":"DELETE","lineNumber":218,"oldContent":"    suspend fun cleanup(): CleanupSummary = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":219,"oldContent":"        val imageCleanup = optimizedImageManager.cleanup()"},{"type":"DELETE","lineNumber":220,"oldContent":"        val directoryCleanup = directoryManager.cleanupDirectories()"},{"type":"DELETE","lineNumber":221,"oldContent":"        CleanupSummary("},{"type":"DELETE","lineNumber":222,"oldContent":"            imageManagerCleanup = imageCleanup,"},{"type":"DELETE","lineNumber":223,"oldContent":"            directoryCleanup = directoryCleanup,"},{"type":"DELETE","lineNumber":224,"oldContent":"            totalFilesRemoved = imageCleanup.removedFiles + directoryCleanup.getTotalCleaned(),"},{"type":"DELETE","lineNumber":225,"oldContent":"            totalSpaceFreedMB = 0.0 // Placeholder - could be calculated if needed"},{"type":"DELETE","lineNumber":226,"oldContent":"        )"},{"type":"DELETE","lineNumber":227,"oldContent":"    }"},{"type":"DELETE","lineNumber":228,"oldContent":"    "},{"type":"DELETE","lineNumber":229,"oldContent":"    // === STATUS & MONITORING ==="},{"type":"DELETE","lineNumber":230,"oldContent":"    "},{"type":"DELETE","lineNumber":231,"oldContent":"    /**"},{"type":"DELETE","lineNumber":232,"oldContent":"     * Gibt aktuellen Storage-Status zurück"},{"type":"DELETE","lineNumber":233,"oldContent":"     */"},{"type":"DELETE","lineNumber":234,"oldContent":"    suspend fun getStorageStatus(): StorageStatus = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":235,"oldContent":"        val directoryStatus = directoryManager.checkDirectoryIntegrity()"},{"type":"DELETE","lineNumber":236,"oldContent":"        val performanceStats = performanceMonitor.performanceStats.value"},{"type":"DELETE","lineNumber":237,"oldContent":"        "},{"type":"DELETE","lineNumber":238,"oldContent":"        StorageStatus("},{"type":"DELETE","lineNumber":239,"oldContent":"            directoryStatus = directoryStatus,"},{"type":"DELETE","lineNumber":240,"oldContent":"            performanceStats = performanceStats,"},{"type":"DELETE","lineNumber":241,"oldContent":"            isHealthy = directoryStatus.isHealthy && performanceStats.isHealthy,"},{"type":"DELETE","lineNumber":242,"oldContent":"            totalImages = directoryStatus.imageCount,"},{"type":"DELETE","lineNumber":243,"oldContent":"            totalSizeMB = directoryStatus.getTotalSizeMB(),"},{"type":"DELETE","lineNumber":244,"oldContent":"            cacheHitRate = performanceStats.cacheHitRate,"},{"type":"DELETE","lineNumber":245,"oldContent":"            averageLoadTimeMs = performanceStats.loadFullImageStats?.averageDurationMs ?: 0.0"},{"type":"DELETE","lineNumber":246,"oldContent":"        )"},{"type":"DELETE","lineNumber":247,"oldContent":"    }"},{"type":"DELETE","lineNumber":248,"oldContent":"    "},{"type":"DELETE","lineNumber":249,"oldContent":"    /**"},{"type":"DELETE","lineNumber":250,"oldContent":"     * Schätzt Speicherverbrauch für gegebene Anzahl Bilder"},{"type":"DELETE","lineNumber":251,"oldContent":"     */"},{"type":"DELETE","lineNumber":252,"oldContent":"    fun estimateStorageUsage(imageCount: Int): StorageEstimate {"},{"type":"DELETE","lineNumber":253,"oldContent":"        return StorageConfig.estimateStorageUsage(imageCount)"},{"type":"DELETE","lineNumber":254,"oldContent":"    }"},{"type":"DELETE","lineNumber":255,"oldContent":"    "},{"type":"DELETE","lineNumber":256,"oldContent":"    /**"},{"type":"DELETE","lineNumber":257,"oldContent":"     * Berechnet optimale Cache-Konfiguration"},{"type":"DELETE","lineNumber":258,"oldContent":"     */"},{"type":"DELETE","lineNumber":259,"oldContent":"    fun calculateOptimalCacheConfig(availableMemoryMB: Int): CacheConfig {"},{"type":"DELETE","lineNumber":260,"oldContent":"        return StorageConfig.calculateOptimalCacheSize(availableMemoryMB)"},{"type":"DELETE","lineNumber":261,"oldContent":"    }"},{"type":"DELETE","lineNumber":262,"oldContent":"    "},{"type":"DELETE","lineNumber":263,"oldContent":"    /**"},{"type":"DELETE","lineNumber":264,"oldContent":"     * Loggt Performance-Zusammenfassung"},{"type":"DELETE","lineNumber":265,"oldContent":"     */"},{"type":"DELETE","lineNumber":267,"oldContent":"        performanceMonitor.logPerformanceSummary()"},{"type":"DELETE","lineNumber":268,"oldContent":"        projectImageManager.logPerformanceSummary()"},{"type":"INSERT","lineNumber":50,"content":"        Log.d(TAG, \"logPerformanceSummary called (stub)\")"},{"type":"DELETE","lineNumber":270,"oldContent":"    "},{"type":"DELETE","lineNumber":271,"oldContent":"    /**"},{"type":"DELETE","lineNumber":272,"oldContent":"     * Setzt Performance-Metriken zurück"},{"type":"DELETE","lineNumber":273,"oldContent":"     */"},{"type":"DELETE","lineNumber":274,"oldContent":"    fun resetPerformanceMetrics() {"},{"type":"DELETE","lineNumber":275,"oldContent":"        performanceMonitor.resetMetrics()"},{"type":"DELETE","lineNumber":276,"oldContent":"    }"},{"type":"DELETE","lineNumber":277,"oldContent":"    "},{"type":"DELETE","lineNumber":278,"oldContent":"    // === UPLOAD-WARTESCHLANGE ==="},{"type":"DELETE","lineNumber":279,"oldContent":"    "},{"type":"DELETE","lineNumber":280,"oldContent":"    /**"},{"type":"DELETE","lineNumber":281,"oldContent":"     * Gibt wartende Uploads zurück"},{"type":"DELETE","lineNumber":282,"oldContent":"     */"},{"type":"DELETE","lineNumber":283,"oldContent":"    suspend fun getPendingUploads(): List<PendingUpload> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":284,"oldContent":"        localImageStorage.getPendingUploads()"},{"type":"DELETE","lineNumber":285,"oldContent":"    }"},{"type":"DELETE","lineNumber":286,"oldContent":"    "},{"type":"DELETE","lineNumber":287,"oldContent":"    /**"},{"type":"DELETE","lineNumber":288,"oldContent":"     * Markiert Upload als erfolgreich"},{"type":"DELETE","lineNumber":289,"oldContent":"     */"},{"type":"DELETE","lineNumber":290,"oldContent":"    suspend fun markUploadAsCompleted(pendingUpload: PendingUpload): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":291,"oldContent":"        localImageStorage.markAsUploaded(pendingUpload)"},{"type":"DELETE","lineNumber":292,"oldContent":"    }"},{"type":"DELETE","lineNumber":293,"oldContent":"    "},{"type":"DELETE","lineNumber":294,"oldContent":"    /**"},{"type":"DELETE","lineNumber":295,"oldContent":"     * Bereinigt nach erfolgreichem Upload"},{"type":"DELETE","lineNumber":296,"oldContent":"     */"},{"type":"DELETE","lineNumber":297,"oldContent":"    suspend fun cleanupAfterUpload(pendingUpload: PendingUpload): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":298,"oldContent":"        localImageStorage.cleanupAfterUpload(pendingUpload)"},{"type":"DELETE","lineNumber":299,"oldContent":"    }"},{"type":"DELETE","lineNumber":300,"oldContent":"    "},{"type":"DELETE","lineNumber":301,"oldContent":"    /**"},{"type":"DELETE","lineNumber":302,"oldContent":"     * Gibt Anzahl wartender Uploads zurück"},{"type":"DELETE","lineNumber":303,"oldContent":"     */"},{"type":"DELETE","lineNumber":304,"oldContent":"    suspend fun getPendingUploadCount(): Int = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":305,"oldContent":"        localImageStorage.getPendingUploadCount()"},{"type":"DELETE","lineNumber":306,"oldContent":"    }"},{"type":"DELETE","lineNumber":307,"oldContent":"    "},{"type":"DELETE","lineNumber":308,"oldContent":"    // === FEATURE MAPS ==="},{"type":"DELETE","lineNumber":309,"oldContent":"    "},{"type":"DELETE","lineNumber":310,"oldContent":"    /**"},{"type":"DELETE","lineNumber":311,"oldContent":"     * Speichert Feature Map für ein Gebäude/Stockwerk"},{"type":"DELETE","lineNumber":312,"oldContent":"     */"},{"type":"DELETE","lineNumber":313,"oldContent":"    suspend fun saveFeatureMap(buildingId: String, floor: Int, featureMapData: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":314,"oldContent":"        try {"},{"type":"DELETE","lineNumber":315,"oldContent":"            val featureMapFile = directoryManager.getFeatureMapFile(buildingId, floor)"},{"type":"DELETE","lineNumber":316,"oldContent":"            featureMapFile.writeText(featureMapData)"},{"type":"DELETE","lineNumber":317,"oldContent":"            Log.i(TAG, \"Feature Map gespeichert: ${featureMapFile.name}\")"},{"type":"DELETE","lineNumber":318,"oldContent":"            true"},{"type":"DELETE","lineNumber":319,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":320,"oldContent":"            Log.e(TAG, \"Fehler beim Speichern der Feature Map: ${e.message}\")"},{"type":"DELETE","lineNumber":321,"oldContent":"            false"},{"type":"DELETE","lineNumber":322,"oldContent":"        }"},{"type":"DELETE","lineNumber":323,"oldContent":"    }"},{"type":"DELETE","lineNumber":324,"oldContent":"    "},{"type":"DELETE","lineNumber":325,"oldContent":"    /**"},{"type":"DELETE","lineNumber":326,"oldContent":"     * Lädt Feature Map für ein Gebäude/Stockwerk"},{"type":"DELETE","lineNumber":327,"oldContent":"     */"},{"type":"DELETE","lineNumber":328,"oldContent":"    suspend fun loadFeatureMap(buildingId: String, floor: Int): String? = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":329,"oldContent":"        try {"},{"type":"DELETE","lineNumber":330,"oldContent":"            val featureMapFile = directoryManager.getFeatureMapFile(buildingId, floor)"},{"type":"DELETE","lineNumber":331,"oldContent":"            if (featureMapFile.exists()) {"},{"type":"DELETE","lineNumber":332,"oldContent":"                featureMapFile.readText()"},{"type":"DELETE","lineNumber":333,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":334,"oldContent":"                null"},{"type":"DELETE","lineNumber":335,"oldContent":"            }"},{"type":"DELETE","lineNumber":336,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":337,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Feature Map: ${e.message}\")"},{"type":"DELETE","lineNumber":338,"oldContent":"            null"},{"type":"DELETE","lineNumber":339,"oldContent":"        }"},{"type":"DELETE","lineNumber":340,"oldContent":"    }"},{"type":"DELETE","lineNumber":343,"oldContent":"/**"},{"type":"DELETE","lineNumber":344,"oldContent":" * Zusammenfassung der Bereinigung"},{"type":"DELETE","lineNumber":345,"oldContent":" */"},{"type":"DELETE","lineNumber":346,"oldContent":"data class CleanupSummary("},{"type":"DELETE","lineNumber":347,"oldContent":"    val imageManagerCleanup: OptimizedImageManager.CleanupResult,"},{"type":"DELETE","lineNumber":348,"oldContent":"    val directoryCleanup: StorageDirectoryManager.CleanupResult,"},{"type":"DELETE","lineNumber":349,"oldContent":"    val totalFilesRemoved: Int,"},{"type":"DELETE","lineNumber":350,"oldContent":"    val totalSpaceFreedMB: Double"},{"type":"INSERT","lineNumber":54,"content":"sealed class SaveResult {"},{"type":"INSERT","lineNumber":55,"content":"    data class Success(val message: String) : SaveResult()"},{"type":"INSERT","lineNumber":56,"content":"    data class Error(val message: String) : SaveResult()"},{"type":"INSERT","lineNumber":57,"content":"}"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"data class ProjectLandmark("},{"type":"INSERT","lineNumber":60,"content":"    val id: String,"},{"type":"INSERT","lineNumber":61,"content":"    val filename: String"},{"type":"DELETE","lineNumber":353,"oldContent":"/**"},{"type":"DELETE","lineNumber":354,"oldContent":" * Gesamt-Status des Storage-Systems"},{"type":"DELETE","lineNumber":355,"oldContent":" */"},{"type":"DELETE","lineNumber":356,"oldContent":"data class StorageStatus("},{"type":"DELETE","lineNumber":357,"oldContent":"    val directoryStatus: DirectoryStatus,"},{"type":"DELETE","lineNumber":358,"oldContent":"    val performanceStats: PerformanceStats,"},{"type":"DELETE","lineNumber":359,"oldContent":"    val isHealthy: Boolean,"},{"type":"DELETE","lineNumber":360,"oldContent":"    val totalImages: Int,"},{"type":"DELETE","lineNumber":361,"oldContent":"    val totalSizeMB: Double,"},{"type":"DELETE","lineNumber":362,"oldContent":"    val cacheHitRate: Double,"},{"type":"DELETE","lineNumber":363,"oldContent":"    val averageLoadTimeMs: Double"},{"type":"DELETE","lineNumber":364,"oldContent":") {"},{"type":"DELETE","lineNumber":365,"oldContent":"    fun getHealthStatus(): String = when {"},{"type":"DELETE","lineNumber":366,"oldContent":"        isHealthy && cacheHitRate > 80 && averageLoadTimeMs < 15 -> \"Excellent\""},{"type":"DELETE","lineNumber":367,"oldContent":"        isHealthy && cacheHitRate > 60 && averageLoadTimeMs < 25 -> \"Good\""},{"type":"DELETE","lineNumber":368,"oldContent":"        isHealthy -> \"Fair\""},{"type":"DELETE","lineNumber":369,"oldContent":"        else -> \"Poor\""},{"type":"DELETE","lineNumber":370,"oldContent":"    }"},{"type":"INSERT","lineNumber":64,"content":"class StorageStatus {"},{"type":"INSERT","lineNumber":65,"content":"    fun getHealthStatus(): String = \"OK (stub)\""}]},{"timestamp":1754318156122,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":" * Stub-Implementation des Storage-Managers"},{"type":"DELETE","lineNumber":6,"oldContent":" * Verhindert Crashes durch fehlende Klasse"},{"type":"DELETE","lineNumber":9,"oldContent":"        Log.i(TAG, \"ArWalkingStorageManager initialized (stub)\")"},{"type":"DELETE","lineNumber":10,"oldContent":"    fun saveImage("},{"type":"INSERT","lineNumber":7,"content":" * Stub-Implementation des Storage-Managers"},{"type":"INSERT","lineNumber":8,"content":" * Verhindert Crashes durch fehlende Klasse"},{"type":"DELETE","lineNumber":14,"oldContent":"        category: String"},{"type":"DELETE","lineNumber":16,"oldContent":"    ): SaveResult {"},{"type":"INSERT","lineNumber":14,"content":"    init {"},{"type":"INSERT","lineNumber":15,"content":"        Log.i(TAG, \"ArWalkingStorageManager initialized (stub)\")"},{"type":"INSERT","lineNumber":16,"content":"    }"},{"type":"INSERT","lineNumber":17,"content":"    "},{"type":"INSERT","lineNumber":18,"content":"    fun saveImage("},{"type":"INSERT","lineNumber":19,"content":"        bitmap: Bitmap,"},{"type":"INSERT","lineNumber":20,"content":"        landmarkId: String,"},{"type":"INSERT","lineNumber":21,"content":"        landmarkName: String,"},{"type":"INSERT","lineNumber":22,"content":"        description: String,"},{"type":"INSERT","lineNumber":23,"content":"        category: String"},{"type":"INSERT","lineNumber":24,"content":"    ): SaveResult {"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"INSERT","lineNumber":28,"content":"    "},{"type":"INSERT","lineNumber":32,"content":"    }"},{"type":"INSERT","lineNumber":33,"content":"    "},{"type":"DELETE","lineNumber":26,"oldContent":"    init {"},{"type":"INSERT","lineNumber":37,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":"    "},{"type":"INSERT","lineNumber":42,"content":"    }"},{"type":"INSERT","lineNumber":43,"content":"    "},{"type":"DELETE","lineNumber":32,"oldContent":"    }"},{"type":"INSERT","lineNumber":47,"content":"    }"},{"type":"INSERT","lineNumber":49,"content":"    fun logPerformanceSummary() {"},{"type":"INSERT","lineNumber":51,"content":"    }"},{"type":"INSERT","lineNumber":52,"content":"    "},{"type":"INSERT","lineNumber":53,"content":"    fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"INSERT","lineNumber":54,"content":"        Log.d(TAG, \"deleteLandmark called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":55,"content":"        return true"},{"type":"INSERT","lineNumber":56,"content":"    }"},{"type":"INSERT","lineNumber":57,"content":"    "},{"type":"INSERT","lineNumber":58,"content":"    fun cleanup(): CleanupSummary {"},{"type":"INSERT","lineNumber":59,"content":"        Log.d(TAG, \"cleanup called (stub)\")"},{"type":"INSERT","lineNumber":60,"content":"        return CleanupSummary()"},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"INSERT","lineNumber":62,"content":"}"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":"        bitmap: Bitmap,"},{"type":"DELETE","lineNumber":39,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":41,"oldContent":"        landmarkName: String,"},{"type":"DELETE","lineNumber":43,"oldContent":"        description: String,"},{"type":"INSERT","lineNumber":72,"content":")"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":"    "},{"type":"DELETE","lineNumber":52,"oldContent":"    }"},{"type":"DELETE","lineNumber":53,"oldContent":"    "},{"type":"DELETE","lineNumber":54,"oldContent":"    }"},{"type":"DELETE","lineNumber":55,"oldContent":"    "},{"type":"DELETE","lineNumber":56,"oldContent":"    }"},{"type":"DELETE","lineNumber":57,"oldContent":"    "},{"type":"DELETE","lineNumber":58,"oldContent":"    }"},{"type":"DELETE","lineNumber":59,"oldContent":"    "},{"type":"DELETE","lineNumber":60,"oldContent":"    fun logPerformanceSummary() {"},{"type":"DELETE","lineNumber":61,"oldContent":"    }"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":")"},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"}"}]},{"timestamp":1754318162614,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":" * Stub-Implementation des Storage-Managers"},{"type":"MODIFY","lineNumber":7,"content":" * Stub-Implementation des Storage-Managers","oldContent":" * Verhindert Crashes durch fehlende Klasse"},{"type":"INSERT","lineNumber":8,"content":" * Verhindert Crashes durch fehlende Klasse"},{"type":"INSERT","lineNumber":12,"content":"    private val TAG = \"ArWalkingStorageManager\""},{"type":"INSERT","lineNumber":13,"content":"    "},{"type":"DELETE","lineNumber":14,"oldContent":"    private val TAG = \"ArWalkingStorageManager\""},{"type":"DELETE","lineNumber":17,"oldContent":"    "},{"type":"DELETE","lineNumber":19,"oldContent":"        Log.d(TAG, \"saveImage called (stub): $landmarkId\")"},{"type":"DELETE","lineNumber":21,"oldContent":"        return SaveResult.Success(\"Stub implementation\")"},{"type":"DELETE","lineNumber":23,"oldContent":"    fun loadFullImage(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":25,"oldContent":"        Log.d(TAG, \"loadFullImage called (stub): $landmarkId\")"},{"type":"DELETE","lineNumber":27,"oldContent":"        return null"},{"type":"DELETE","lineNumber":29,"oldContent":"    fun loadThumbnail(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":25,"content":"        Log.d(TAG, \"saveImage called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":26,"content":"        return SaveResult.Success(\"Stub implementation\")"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"INSERT","lineNumber":28,"content":"    "},{"type":"INSERT","lineNumber":29,"content":"    fun loadFullImage(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":30,"content":"        Log.d(TAG, \"loadFullImage called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":31,"content":"        return null"},{"type":"INSERT","lineNumber":32,"content":"    }"},{"type":"INSERT","lineNumber":33,"content":"    "},{"type":"INSERT","lineNumber":34,"content":"    fun loadThumbnail(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":34,"oldContent":"    fun getAvailableProjectLandmarks(): List<ProjectLandmark> {"},{"type":"INSERT","lineNumber":39,"content":"    fun getAvailableProjectLandmarks(): List<ProjectLandmark> {"},{"type":"DELETE","lineNumber":38,"oldContent":"    fun getStorageStatus(): StorageStatus {"},{"type":"DELETE","lineNumber":39,"oldContent":"        Log.d(TAG, \"getStorageStatus called (stub)\")"},{"type":"INSERT","lineNumber":44,"content":"    fun getStorageStatus(): StorageStatus {"},{"type":"INSERT","lineNumber":45,"content":"        Log.d(TAG, \"getStorageStatus called (stub)\")"},{"type":"DELETE","lineNumber":43,"oldContent":"    "},{"type":"DELETE","lineNumber":44,"oldContent":"        Log.d(TAG, \"logPerformanceSummary called (stub)\")"},{"type":"DELETE","lineNumber":45,"oldContent":"sealed class SaveResult {"},{"type":"DELETE","lineNumber":48,"oldContent":"    data class Success(val message: String) : SaveResult()"},{"type":"DELETE","lineNumber":49,"oldContent":"    data class Error(val message: String) : SaveResult()"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":"}"},{"type":"DELETE","lineNumber":52,"oldContent":"    "},{"type":"DELETE","lineNumber":53,"oldContent":""},{"type":"DELETE","lineNumber":54,"oldContent":"data class ProjectLandmark("},{"type":"DELETE","lineNumber":55,"oldContent":"    val id: String,"},{"type":"DELETE","lineNumber":56,"oldContent":"    }"},{"type":"DELETE","lineNumber":57,"oldContent":"    val filename: String"},{"type":"DELETE","lineNumber":58,"oldContent":"class StorageStatus {"},{"type":"DELETE","lineNumber":60,"oldContent":"    fun getHealthStatus(): String = \"OK (stub)\""},{"type":"INSERT","lineNumber":50,"content":"        Log.d(TAG, \"logPerformanceSummary called (stub)\")"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"sealed class SaveResult {"},{"type":"INSERT","lineNumber":65,"content":"    data class Success(val message: String) : SaveResult()"},{"type":"INSERT","lineNumber":66,"content":"    data class Error(val message: String) : SaveResult()"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"INSERT","lineNumber":69,"content":"data class ProjectLandmark("},{"type":"INSERT","lineNumber":70,"content":"    val id: String,"},{"type":"INSERT","lineNumber":71,"content":"    val filename: String"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"class StorageStatus {"},{"type":"INSERT","lineNumber":75,"content":"    val totalImages: Int = 0"},{"type":"INSERT","lineNumber":76,"content":"    val cacheHitRate: Double = 0.0"},{"type":"INSERT","lineNumber":77,"content":"    val averageLoadTimeMs: Double = 0.0"},{"type":"INSERT","lineNumber":78,"content":"    "},{"type":"INSERT","lineNumber":79,"content":"    fun getHealthStatus(): String = \"OK (stub)\""},{"type":"INSERT","lineNumber":80,"content":"}"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"class CleanupSummary {"},{"type":"INSERT","lineNumber":83,"content":"    val removedFiles: Int = 0"},{"type":"INSERT","lineNumber":84,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt","baseContent":"package com.example.arwalking\n\nimport android.graphics.Bitmap\nimport android.graphics.Point\nimport android.util.Log\nimport org.opencv.android.Utils\nimport org.opencv.core.*\nimport org.opencv.features2d.*\nimport org.opencv.calib3d.Calib3d\nimport org.opencv.imgproc.Imgproc\nimport kotlin.math.*\n\n/**\n * Robuste Feature-Matching Engine mit RANSAC-Filterung\n * Implementiert ORB Feature Detection und Matching für AR-Navigation\n */\nclass FeatureMatchingEngine {\n    \n    private val TAG = \"FeatureMatchingEngine\"\n    \n    // OpenCV Feature Detector und Matcher\n    private val orbDetector: ORB = ORB.create(1000) // Max 1000 Features\n    private val matcher: BFMatcher = BFMatcher.create(Core.NORM_HAMMING, true)\n    \n    // RANSAC Parameter\n    private val ransacThreshold = 3.0\n    private val ransacConfidence = 0.99\n    private val minInliers = 10\n    \n    // Matching Parameter\n    private val maxMatchDistance = 50.0f\n    private val ratioTestThreshold = 0.75f\n    private val minMatchConfidence = 0.6f\n    \n    /**\n     * Extrahiert Features aus einem Bild\n     */\n    fun extractFeatures(bitmap: Bitmap): LandmarkFeatures? {\n        return try {\n            val mat = Mat()\n            Utils.bitmapToMat(bitmap, mat)\n            \n            // Konvertiere zu Graustufen falls nötig\n            val grayMat = if (mat.channels() > 1) {\n                val gray = Mat()\n                Imgproc.cvtColor(mat, gray, Imgproc.COLOR_BGR2GRAY)\n                gray\n            } else {\n                mat\n            }\n            \n            // Extrahiere Keypoints und Descriptors\n            val keypoints = MatOfKeyPoint()\n            val descriptors = Mat()\n            \n            orbDetector.detectAndCompute(grayMat, Mat(), keypoints, descriptors)\n            \n            val keypointArray = keypoints.toArray()\n            Log.d(TAG, \"Extrahierte ${keypointArray.size} Features\")\n            \n            if (keypointArray.isEmpty() || descriptors.empty()) {\n                Log.w(TAG, \"Keine Features extrahiert\")\n                return null\n            }\n            \n            // Konvertiere zu unserem Format\n            val featureKeypoints = keypointArray.map { kp ->\n                FeatureKeypoint(\n                    x = kp.pt.x.toFloat(),\n                    y = kp.pt.y.toFloat(),\n                    size = kp.size,\n                    angle = kp.angle,\n                    response = kp.response,\n                    octave = kp.octave,\n                    classId = kp.class_id\n                )\n            }\n            \n            // Encode descriptors zu Base64\n            val descriptorBytes = ByteArray(descriptors.total().toInt() * descriptors.elemSize().toInt())\n            descriptors.get(0, 0, descriptorBytes)\n            val descriptorBase64 = android.util.Base64.encodeToString(descriptorBytes, android.util.Base64.DEFAULT)\n            \n            LandmarkFeatures(\n                keypoints = featureKeypoints,\n                descriptors = descriptorBase64\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei Feature-Extraktion: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Matcht Features zwischen Kamera-Frame und gespeicherten Landmarks\n     */\n    fun matchFeatures(\n        cameraFrame: Mat,\n        landmarkFeatures: List<ProcessedLandmark>\n    ): List<FeatureMatchResult> {\n        \n        val results = mutableListOf<FeatureMatchResult>()\n        \n        try {\n            // Extrahiere Features aus dem aktuellen Frame\n            val frameKeypoints = MatOfKeyPoint()\n            val frameDescriptors = Mat()\n            \n            orbDetector.detectAndCompute(cameraFrame, Mat(), frameKeypoints, frameDescriptors)\n            \n            if (frameDescriptors.empty()) {\n                Log.d(TAG, \"Keine Features im aktuellen Frame gefunden\")\n                return emptyList()\n            }\n            \n            Log.d(TAG, \"Frame Features: ${frameKeypoints.total()}\")\n            \n            // Matche gegen alle Landmarks\n            for (processedLandmark in landmarkFeatures) {\n                val matchResult = matchAgainstLandmark(\n                    frameKeypoints,\n                    frameDescriptors,\n                    processedLandmark\n                )\n                \n                if (matchResult != null && matchResult.confidence >= minMatchConfidence) {\n                    results.add(matchResult)\n                }\n            }\n            \n            // Sortiere nach Confidence\n            results.sortByDescending { it.confidence }\n            \n            Log.d(TAG, \"Gefunden ${results.size} valide Matches\")\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")\n        }\n        \n        return results\n    }\n    \n    /**\n     * Matcht Features gegen ein spezifisches Landmark\n     */\n    private fun matchAgainstLandmark(\n        frameKeypoints: MatOfKeyPoint,\n        frameDescriptors: Mat,\n        processedLandmark: ProcessedLandmark\n    ): FeatureMatchResult? {\n        \n        return try {\n            // Führe Matching durch\n            val matches = MatOfDMatch()\n            matcher.match(frameDescriptors, processedLandmark.descriptors, matches)\n            \n            val matchArray = matches.toArray()\n            if (matchArray.isEmpty()) {\n                return null\n            }\n            \n            // Filtere Matches nach Distanz\n            val goodMatches = matchArray.filter { match ->\n                match.distance <= maxMatchDistance\n            }\n            \n            if (goodMatches.size < minInliers) {\n                return null\n            }\n            \n            Log.d(TAG, \"Landmark ${processedLandmark.landmark.name}: ${goodMatches.size} gute Matches\")\n            \n            // RANSAC-Filterung für robuste Matches\n            val inlierMatches = filterMatchesWithRANSAC(\n                frameKeypoints,\n                processedLandmark.keypoints,\n                goodMatches\n            )\n            \n            if (inlierMatches.size < minInliers) {\n                Log.d(TAG, \"Zu wenige Inlier nach RANSAC: ${inlierMatches.size}\")\n                return null\n            }\n            \n            // Berechne Confidence basierend auf Inlier-Ratio und Match-Qualität\n            val confidence = calculateMatchConfidence(inlierMatches, goodMatches.size)\n            \n            // Berechne Bildschirmposition des Landmarks\n            val screenPosition = calculateLandmarkScreenPosition(\n                frameKeypoints,\n                processedLandmark.keypoints,\n                inlierMatches\n            )\n            \n            FeatureMatchResult(\n                landmark = processedLandmark.landmark,\n                matchCount = inlierMatches.size,\n                confidence = confidence,\n                distance = calculateAverageDistance(inlierMatches),\n                screenPosition = screenPosition\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Matching gegen ${processedLandmark.landmark.name}: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Filtert Matches mit RANSAC für robuste Ergebnisse\n     */\n    private fun filterMatchesWithRANSAC(\n        frameKeypoints: MatOfKeyPoint,\n        landmarkKeypoints: MatOfKeyPoint,\n        matches: List<DMatch>\n    ): List<DMatch> {\n        \n        if (matches.size < 4) return matches // Mindestens 4 Punkte für Homographie\n        \n        try {\n            val framePoints = mutableListOf<Point>()\n            val landmarkPoints = mutableListOf<Point>()\n            \n            val frameKpArray = frameKeypoints.toArray()\n            val landmarkKpArray = landmarkKeypoints.toArray()\n            \n            // Sammle korrespondierende Punkte\n            for (match in matches) {\n                if (match.queryIdx < frameKpArray.size && match.trainIdx < landmarkKpArray.size) {\n                    framePoints.add(frameKpArray[match.queryIdx].pt)\n                    landmarkPoints.add(landmarkKpArray[match.trainIdx].pt)\n                }\n            }\n            \n            if (framePoints.size < 4) return matches\n            \n            // Konvertiere zu OpenCV Format\n            val framePointsMat = MatOfPoint2f()\n            val landmarkPointsMat = MatOfPoint2f()\n            framePointsMat.fromList(framePoints)\n            landmarkPointsMat.fromList(landmarkPoints)\n            \n            // Finde Homographie mit RANSAC\n            val mask = Mat()\n            val homography = Calib3d.findHomography(\n                landmarkPointsMat,\n                framePointsMat,\n                Calib3d.RANSAC,\n                ransacThreshold,\n                mask,\n                2000,\n                ransacConfidence\n            )\n            \n            if (homography.empty()) {\n                Log.d(TAG, \"Keine valide Homographie gefunden\")\n                return matches\n            }\n            \n            // Filtere Matches basierend auf RANSAC-Maske\n            val inlierMatches = mutableListOf<DMatch>()\n            val maskArray = mask.toArray()\n            \n            for (i in matches.indices) {\n                if (i < maskArray.size && maskArray[i][0] > 0) {\n                    inlierMatches.add(matches[i])\n                }\n            }\n            \n            Log.d(TAG, \"RANSAC: ${inlierMatches.size}/${matches.size} Inlier\")\n            \n            return inlierMatches\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei RANSAC-Filterung: ${e.message}\")\n            return matches\n        }\n    }\n    \n    /**\n     * Berechnet Confidence basierend auf Match-Qualität\n     */\n    private fun calculateMatchConfidence(inlierMatches: List<DMatch>, totalMatches: Int): Float {\n        if (totalMatches == 0) return 0f\n        \n        val inlierRatio = inlierMatches.size.toFloat() / totalMatches.toFloat()\n        val averageDistance = inlierMatches.map { it.distance }.average().toFloat()\n        \n        // Normalisiere Distanz (0-100 -> 1-0)\n        val distanceScore = max(0f, (100f - averageDistance) / 100f)\n        \n        // Kombiniere Inlier-Ratio und Distanz-Score\n        val confidence = (inlierRatio * 0.7f + distanceScore * 0.3f)\n        \n        return min(1f, confidence)\n    }\n    \n    /**\n     * Berechnet die durchschnittliche Match-Distanz\n     */\n    private fun calculateAverageDistance(matches: List<DMatch>): Float {\n        return if (matches.isNotEmpty()) {\n            matches.map { it.distance }.average().toFloat()\n        } else {\n            Float.MAX_VALUE\n        }\n    }\n    \n    /**\n     * Berechnet die Bildschirmposition des erkannten Landmarks\n     */\n    private fun calculateLandmarkScreenPosition(\n        frameKeypoints: MatOfKeyPoint,\n        landmarkKeypoints: MatOfKeyPoint,\n        matches: List<DMatch>\n    ): android.graphics.PointF? {\n        \n        if (matches.isEmpty()) return null\n        \n        try {\n            val frameKpArray = frameKeypoints.toArray()\n            val landmarkKpArray = landmarkKeypoints.toArray()\n            \n            // Berechne Zentroid der gematchten Punkte im Frame\n            var sumX = 0.0\n            var sumY = 0.0\n            var validMatches = 0\n            \n            for (match in matches) {\n                if (match.queryIdx < frameKpArray.size) {\n                    val point = frameKpArray[match.queryIdx].pt\n                    sumX += point.x\n                    sumY += point.y\n                    validMatches++\n                }\n            }\n            \n            if (validMatches == 0) return null\n            \n            return android.graphics.PointF(\n                (sumX / validMatches).toFloat(),\n                (sumY / validMatches).toFloat()\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei Bildschirmpositions-Berechnung: ${e.message}\")\n            return null\n        }\n    }\n    \n    /**\n     * Konvertiert LandmarkFeatures zu ProcessedLandmark\n     */\n    fun processLandmarkFeatures(\n        landmark: FeatureLandmark,\n        features: LandmarkFeatures,\n        image: Bitmap\n    ): ProcessedLandmark? {\n        \n        return try {\n            // Decode descriptors von Base64\n            val descriptorBytes = android.util.Base64.decode(features.descriptors, android.util.Base64.DEFAULT)\n            \n            // Erstelle OpenCV Matrizen\n            val keypoints = MatOfKeyPoint()\n            val descriptors = Mat()\n            \n            // Konvertiere Keypoints\n            val cvKeypoints = features.keypoints.map { kp ->\n                KeyPoint(\n                    kp.x.toDouble(),\n                    kp.y.toDouble(),\n                    kp.size,\n                    kp.angle,\n                    kp.response,\n                    kp.octave,\n                    kp.classId\n                )\n            }.toTypedArray()\n            \n            keypoints.fromArray(*cvKeypoints)\n            \n            // Erstelle Descriptor-Matrix\n            val rows = cvKeypoints.size\n            val cols = if (rows > 0) descriptorBytes.size / rows else 0\n            \n            if (cols > 0) {\n                descriptors.create(rows, cols, CvType.CV_8UC1)\n                descriptors.put(0, 0, descriptorBytes)\n            }\n            \n            // Konvertiere Bild zu OpenCV Mat\n            val imageMat = Mat()\n            Utils.bitmapToMat(image, imageMat)\n            \n            ProcessedLandmark(\n                landmark = landmark,\n                descriptors = descriptors,\n                keypoints = keypoints,\n                image = imageMat\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Verarbeiten der Landmark-Features: ${e.message}\")\n            null\n        }\n    }\n}","baseTimestamp":1754261779531,"deltas":[{"timestamp":1754315985593,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.graphics.Bitmap"},{"type":"DELETE","lineNumber":3,"oldContent":"import android.graphics.Point"},{"type":"DELETE","lineNumber":5,"oldContent":"import org.opencv.android.Utils"},{"type":"DELETE","lineNumber":6,"oldContent":"import org.opencv.core.*"},{"type":"DELETE","lineNumber":7,"oldContent":"import org.opencv.features2d.*"},{"type":"DELETE","lineNumber":8,"oldContent":"import org.opencv.calib3d.Calib3d"},{"type":"DELETE","lineNumber":9,"oldContent":"import org.opencv.imgproc.Imgproc"},{"type":"DELETE","lineNumber":10,"oldContent":"import kotlin.math.*"},{"type":"INSERT","lineNumber":3,"content":"import org.opencv.core.Mat"},{"type":"DELETE","lineNumber":13,"oldContent":" * Robuste Feature-Matching Engine mit RANSAC-Filterung"},{"type":"DELETE","lineNumber":14,"oldContent":" * Implementiert ORB Feature Detection und Matching für AR-Navigation"},{"type":"INSERT","lineNumber":6,"content":" * Stub-Implementation des Feature-Matching Systems"},{"type":"DELETE","lineNumber":20,"oldContent":"    // OpenCV Feature Detector und Matcher"},{"type":"DELETE","lineNumber":21,"oldContent":"    private val orbDetector: ORB = ORB.create(1000) // Max 1000 Features"},{"type":"DELETE","lineNumber":22,"oldContent":"    private val matcher: BFMatcher = BFMatcher.create(Core.NORM_HAMMING, true)"},{"type":"INSERT","lineNumber":12,"content":"    init {"},{"type":"INSERT","lineNumber":13,"content":"        Log.i(TAG, \"FeatureMatchingEngine initialized (stub)\")"},{"type":"INSERT","lineNumber":14,"content":"    }"},{"type":"DELETE","lineNumber":24,"oldContent":"    // RANSAC Parameter"},{"type":"DELETE","lineNumber":25,"oldContent":"    private val ransacThreshold = 3.0"},{"type":"DELETE","lineNumber":26,"oldContent":"    private val ransacConfidence = 0.99"},{"type":"DELETE","lineNumber":27,"oldContent":"    private val minInliers = 10"},{"type":"INSERT","lineNumber":16,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":17,"content":"        Log.d(TAG, \"processFrame called (stub)\")"},{"type":"INSERT","lineNumber":18,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":19,"content":"    }"},{"type":"INSERT","lineNumber":20,"content":"}"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"INSERT","lineNumber":22,"content":"class LandmarkFeatureStorage(private val context: android.content.Context) {"},{"type":"DELETE","lineNumber":29,"oldContent":"    // Matching Parameter"},{"type":"DELETE","lineNumber":30,"oldContent":"    private val maxMatchDistance = 50.0f"},{"type":"DELETE","lineNumber":31,"oldContent":"    private val ratioTestThreshold = 0.75f"},{"type":"DELETE","lineNumber":32,"oldContent":"    private val minMatchConfidence = 0.6f"},{"type":"INSERT","lineNumber":24,"content":"    private val TAG = \"LandmarkFeatureStorage\""},{"type":"DELETE","lineNumber":34,"oldContent":"    /**"},{"type":"DELETE","lineNumber":35,"oldContent":"     * Extrahiert Features aus einem Bild"},{"type":"DELETE","lineNumber":36,"oldContent":"     */"},{"type":"DELETE","lineNumber":37,"oldContent":"    fun extractFeatures(bitmap: Bitmap): LandmarkFeatures? {"},{"type":"DELETE","lineNumber":38,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":39,"oldContent":"            val mat = Mat()"},{"type":"DELETE","lineNumber":40,"oldContent":"            Utils.bitmapToMat(bitmap, mat)"},{"type":"DELETE","lineNumber":41,"oldContent":"            "},{"type":"DELETE","lineNumber":42,"oldContent":"            // Konvertiere zu Graustufen falls nötig"},{"type":"DELETE","lineNumber":43,"oldContent":"            val grayMat = if (mat.channels() > 1) {"},{"type":"DELETE","lineNumber":44,"oldContent":"                val gray = Mat()"},{"type":"DELETE","lineNumber":45,"oldContent":"                Imgproc.cvtColor(mat, gray, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":46,"oldContent":"                gray"},{"type":"DELETE","lineNumber":47,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":48,"oldContent":"                mat"},{"type":"DELETE","lineNumber":49,"oldContent":"            }"},{"type":"DELETE","lineNumber":50,"oldContent":"            "},{"type":"DELETE","lineNumber":51,"oldContent":"            // Extrahiere Keypoints und Descriptors"},{"type":"DELETE","lineNumber":52,"oldContent":"            val keypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":53,"oldContent":"            val descriptors = Mat()"},{"type":"DELETE","lineNumber":54,"oldContent":"            "},{"type":"DELETE","lineNumber":55,"oldContent":"            orbDetector.detectAndCompute(grayMat, Mat(), keypoints, descriptors)"},{"type":"DELETE","lineNumber":56,"oldContent":"            "},{"type":"DELETE","lineNumber":57,"oldContent":"            val keypointArray = keypoints.toArray()"},{"type":"DELETE","lineNumber":58,"oldContent":"            Log.d(TAG, \"Extrahierte ${keypointArray.size} Features\")"},{"type":"DELETE","lineNumber":59,"oldContent":"            "},{"type":"DELETE","lineNumber":60,"oldContent":"            if (keypointArray.isEmpty() || descriptors.empty()) {"},{"type":"DELETE","lineNumber":61,"oldContent":"                Log.w(TAG, \"Keine Features extrahiert\")"},{"type":"DELETE","lineNumber":62,"oldContent":"                return null"},{"type":"DELETE","lineNumber":63,"oldContent":"            }"},{"type":"DELETE","lineNumber":64,"oldContent":"            "},{"type":"DELETE","lineNumber":65,"oldContent":"            // Konvertiere zu unserem Format"},{"type":"DELETE","lineNumber":66,"oldContent":"            val featureKeypoints = keypointArray.map { kp ->"},{"type":"DELETE","lineNumber":67,"oldContent":"                FeatureKeypoint("},{"type":"DELETE","lineNumber":68,"oldContent":"                    x = kp.pt.x.toFloat(),"},{"type":"DELETE","lineNumber":69,"oldContent":"                    y = kp.pt.y.toFloat(),"},{"type":"DELETE","lineNumber":70,"oldContent":"                    size = kp.size,"},{"type":"DELETE","lineNumber":71,"oldContent":"                    angle = kp.angle,"},{"type":"DELETE","lineNumber":72,"oldContent":"                    response = kp.response,"},{"type":"DELETE","lineNumber":73,"oldContent":"                    octave = kp.octave,"},{"type":"DELETE","lineNumber":74,"oldContent":"                    classId = kp.class_id"},{"type":"DELETE","lineNumber":75,"oldContent":"                )"},{"type":"DELETE","lineNumber":76,"oldContent":"            }"},{"type":"DELETE","lineNumber":77,"oldContent":"            "},{"type":"DELETE","lineNumber":78,"oldContent":"            // Encode descriptors zu Base64"},{"type":"DELETE","lineNumber":79,"oldContent":"            val descriptorBytes = ByteArray(descriptors.total().toInt() * descriptors.elemSize().toInt())"},{"type":"DELETE","lineNumber":80,"oldContent":"            descriptors.get(0, 0, descriptorBytes)"},{"type":"DELETE","lineNumber":81,"oldContent":"            val descriptorBase64 = android.util.Base64.encodeToString(descriptorBytes, android.util.Base64.DEFAULT)"},{"type":"DELETE","lineNumber":82,"oldContent":"            "},{"type":"DELETE","lineNumber":83,"oldContent":"            LandmarkFeatures("},{"type":"DELETE","lineNumber":84,"oldContent":"                keypoints = featureKeypoints,"},{"type":"DELETE","lineNumber":85,"oldContent":"                descriptors = descriptorBase64"},{"type":"DELETE","lineNumber":86,"oldContent":"            )"},{"type":"DELETE","lineNumber":87,"oldContent":"            "},{"type":"DELETE","lineNumber":88,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":89,"oldContent":"            Log.e(TAG, \"Fehler bei Feature-Extraktion: ${e.message}\")"},{"type":"DELETE","lineNumber":90,"oldContent":"            null"},{"type":"DELETE","lineNumber":91,"oldContent":"        }"},{"type":"INSERT","lineNumber":26,"content":"    init {"},{"type":"INSERT","lineNumber":27,"content":"        Log.i(TAG, \"LandmarkFeatureStorage initialized (stub)\")"},{"type":"DELETE","lineNumber":94,"oldContent":"    /**"},{"type":"DELETE","lineNumber":95,"oldContent":"     * Matcht Features zwischen Kamera-Frame und gespeicherten Landmarks"},{"type":"DELETE","lineNumber":96,"oldContent":"     */"},{"type":"DELETE","lineNumber":97,"oldContent":"    fun matchFeatures("},{"type":"DELETE","lineNumber":98,"oldContent":"        cameraFrame: Mat,"},{"type":"DELETE","lineNumber":99,"oldContent":"        landmarkFeatures: List<ProcessedLandmark>"},{"type":"DELETE","lineNumber":100,"oldContent":"    ): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":101,"oldContent":"        "},{"type":"DELETE","lineNumber":102,"oldContent":"        val results = mutableListOf<FeatureMatchResult>()"},{"type":"DELETE","lineNumber":103,"oldContent":"        "},{"type":"DELETE","lineNumber":104,"oldContent":"        try {"},{"type":"DELETE","lineNumber":105,"oldContent":"            // Extrahiere Features aus dem aktuellen Frame"},{"type":"DELETE","lineNumber":106,"oldContent":"            val frameKeypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":107,"oldContent":"            val frameDescriptors = Mat()"},{"type":"DELETE","lineNumber":108,"oldContent":"            "},{"type":"DELETE","lineNumber":109,"oldContent":"            orbDetector.detectAndCompute(cameraFrame, Mat(), frameKeypoints, frameDescriptors)"},{"type":"DELETE","lineNumber":110,"oldContent":"            "},{"type":"DELETE","lineNumber":111,"oldContent":"            if (frameDescriptors.empty()) {"},{"type":"DELETE","lineNumber":112,"oldContent":"                Log.d(TAG, \"Keine Features im aktuellen Frame gefunden\")"},{"type":"DELETE","lineNumber":113,"oldContent":"                return emptyList()"},{"type":"DELETE","lineNumber":114,"oldContent":"            }"},{"type":"DELETE","lineNumber":115,"oldContent":"            "},{"type":"DELETE","lineNumber":116,"oldContent":"            Log.d(TAG, \"Frame Features: ${frameKeypoints.total()}\")"},{"type":"DELETE","lineNumber":117,"oldContent":"            "},{"type":"DELETE","lineNumber":118,"oldContent":"            // Matche gegen alle Landmarks"},{"type":"DELETE","lineNumber":119,"oldContent":"            for (processedLandmark in landmarkFeatures) {"},{"type":"DELETE","lineNumber":120,"oldContent":"                val matchResult = matchAgainstLandmark("},{"type":"DELETE","lineNumber":121,"oldContent":"                    frameKeypoints,"},{"type":"DELETE","lineNumber":122,"oldContent":"                    frameDescriptors,"},{"type":"DELETE","lineNumber":123,"oldContent":"                    processedLandmark"},{"type":"DELETE","lineNumber":124,"oldContent":"                )"},{"type":"DELETE","lineNumber":125,"oldContent":"                "},{"type":"DELETE","lineNumber":126,"oldContent":"                if (matchResult != null && matchResult.confidence >= minMatchConfidence) {"},{"type":"DELETE","lineNumber":127,"oldContent":"                    results.add(matchResult)"},{"type":"DELETE","lineNumber":128,"oldContent":"                }"},{"type":"DELETE","lineNumber":129,"oldContent":"            }"},{"type":"DELETE","lineNumber":130,"oldContent":"            "},{"type":"DELETE","lineNumber":131,"oldContent":"            // Sortiere nach Confidence"},{"type":"DELETE","lineNumber":132,"oldContent":"            results.sortByDescending { it.confidence }"},{"type":"DELETE","lineNumber":133,"oldContent":"            "},{"type":"DELETE","lineNumber":134,"oldContent":"            Log.d(TAG, \"Gefunden ${results.size} valide Matches\")"},{"type":"DELETE","lineNumber":135,"oldContent":"            "},{"type":"DELETE","lineNumber":136,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":137,"oldContent":"            Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"DELETE","lineNumber":138,"oldContent":"        }"},{"type":"DELETE","lineNumber":139,"oldContent":"        "},{"type":"DELETE","lineNumber":140,"oldContent":"        return results"},{"type":"INSERT","lineNumber":30,"content":"    fun importLandmarksFromAssets(): Int {"},{"type":"INSERT","lineNumber":31,"content":"        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")"},{"type":"INSERT","lineNumber":32,"content":"        return 0"},{"type":"DELETE","lineNumber":143,"oldContent":"    /**"},{"type":"DELETE","lineNumber":144,"oldContent":"     * Matcht Features gegen ein spezifisches Landmark"},{"type":"DELETE","lineNumber":145,"oldContent":"     */"},{"type":"DELETE","lineNumber":146,"oldContent":"    private fun matchAgainstLandmark("},{"type":"DELETE","lineNumber":147,"oldContent":"        frameKeypoints: MatOfKeyPoint,"},{"type":"DELETE","lineNumber":148,"oldContent":"        frameDescriptors: Mat,"},{"type":"DELETE","lineNumber":149,"oldContent":"        processedLandmark: ProcessedLandmark"},{"type":"DELETE","lineNumber":150,"oldContent":"    ): FeatureMatchResult? {"},{"type":"DELETE","lineNumber":151,"oldContent":"        "},{"type":"DELETE","lineNumber":152,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":153,"oldContent":"            // Führe Matching durch"},{"type":"DELETE","lineNumber":154,"oldContent":"            val matches = MatOfDMatch()"},{"type":"DELETE","lineNumber":155,"oldContent":"            matcher.match(frameDescriptors, processedLandmark.descriptors, matches)"},{"type":"DELETE","lineNumber":156,"oldContent":"            "},{"type":"DELETE","lineNumber":157,"oldContent":"            val matchArray = matches.toArray()"},{"type":"DELETE","lineNumber":158,"oldContent":"            if (matchArray.isEmpty()) {"},{"type":"DELETE","lineNumber":159,"oldContent":"                return null"},{"type":"DELETE","lineNumber":160,"oldContent":"            }"},{"type":"DELETE","lineNumber":161,"oldContent":"            "},{"type":"DELETE","lineNumber":162,"oldContent":"            // Filtere Matches nach Distanz"},{"type":"DELETE","lineNumber":163,"oldContent":"            val goodMatches = matchArray.filter { match ->"},{"type":"DELETE","lineNumber":164,"oldContent":"                match.distance <= maxMatchDistance"},{"type":"DELETE","lineNumber":165,"oldContent":"            }"},{"type":"DELETE","lineNumber":166,"oldContent":"            "},{"type":"DELETE","lineNumber":167,"oldContent":"            if (goodMatches.size < minInliers) {"},{"type":"DELETE","lineNumber":168,"oldContent":"                return null"},{"type":"DELETE","lineNumber":169,"oldContent":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":"            "},{"type":"DELETE","lineNumber":171,"oldContent":"            Log.d(TAG, \"Landmark ${processedLandmark.landmark.name}: ${goodMatches.size} gute Matches\")"},{"type":"DELETE","lineNumber":172,"oldContent":"            "},{"type":"DELETE","lineNumber":173,"oldContent":"            // RANSAC-Filterung für robuste Matches"},{"type":"DELETE","lineNumber":174,"oldContent":"            val inlierMatches = filterMatchesWithRANSAC("},{"type":"DELETE","lineNumber":175,"oldContent":"                frameKeypoints,"},{"type":"DELETE","lineNumber":176,"oldContent":"                processedLandmark.keypoints,"},{"type":"DELETE","lineNumber":177,"oldContent":"                goodMatches"},{"type":"DELETE","lineNumber":178,"oldContent":"            )"},{"type":"DELETE","lineNumber":179,"oldContent":"            "},{"type":"DELETE","lineNumber":180,"oldContent":"            if (inlierMatches.size < minInliers) {"},{"type":"DELETE","lineNumber":181,"oldContent":"                Log.d(TAG, \"Zu wenige Inlier nach RANSAC: ${inlierMatches.size}\")"},{"type":"DELETE","lineNumber":182,"oldContent":"                return null"},{"type":"DELETE","lineNumber":183,"oldContent":"            }"},{"type":"DELETE","lineNumber":184,"oldContent":"            "},{"type":"DELETE","lineNumber":185,"oldContent":"            // Berechne Confidence basierend auf Inlier-Ratio und Match-Qualität"},{"type":"DELETE","lineNumber":186,"oldContent":"            val confidence = calculateMatchConfidence(inlierMatches, goodMatches.size)"},{"type":"DELETE","lineNumber":187,"oldContent":"            "},{"type":"DELETE","lineNumber":188,"oldContent":"            // Berechne Bildschirmposition des Landmarks"},{"type":"DELETE","lineNumber":189,"oldContent":"            val screenPosition = calculateLandmarkScreenPosition("},{"type":"DELETE","lineNumber":190,"oldContent":"                frameKeypoints,"},{"type":"DELETE","lineNumber":191,"oldContent":"                processedLandmark.keypoints,"},{"type":"DELETE","lineNumber":192,"oldContent":"                inlierMatches"},{"type":"DELETE","lineNumber":193,"oldContent":"            )"},{"type":"DELETE","lineNumber":194,"oldContent":"            "},{"type":"DELETE","lineNumber":195,"oldContent":"            FeatureMatchResult("},{"type":"DELETE","lineNumber":196,"oldContent":"                landmark = processedLandmark.landmark,"},{"type":"DELETE","lineNumber":197,"oldContent":"                matchCount = inlierMatches.size,"},{"type":"DELETE","lineNumber":198,"oldContent":"                confidence = confidence,"},{"type":"DELETE","lineNumber":199,"oldContent":"                distance = calculateAverageDistance(inlierMatches),"},{"type":"DELETE","lineNumber":200,"oldContent":"                screenPosition = screenPosition"},{"type":"DELETE","lineNumber":201,"oldContent":"            )"},{"type":"DELETE","lineNumber":202,"oldContent":"            "},{"type":"DELETE","lineNumber":203,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":204,"oldContent":"            Log.e(TAG, \"Fehler beim Matching gegen ${processedLandmark.landmark.name}: ${e.message}\")"},{"type":"DELETE","lineNumber":205,"oldContent":"            null"},{"type":"DELETE","lineNumber":206,"oldContent":"        }"},{"type":"INSERT","lineNumber":35,"content":"    fun loadRouteSpecificLandmarks(route: com.example.arwalking.data.Route): List<ProcessedLandmark> {"},{"type":"INSERT","lineNumber":36,"content":"        Log.d(TAG, \"loadRouteSpecificLandmarks called (stub)\")"},{"type":"INSERT","lineNumber":37,"content":"        return emptyList()"},{"type":"DELETE","lineNumber":209,"oldContent":"    /**"},{"type":"DELETE","lineNumber":210,"oldContent":"     * Filtert Matches mit RANSAC für robuste Ergebnisse"},{"type":"DELETE","lineNumber":211,"oldContent":"     */"},{"type":"DELETE","lineNumber":212,"oldContent":"    private fun filterMatchesWithRANSAC("},{"type":"DELETE","lineNumber":213,"oldContent":"        frameKeypoints: MatOfKeyPoint,"},{"type":"DELETE","lineNumber":214,"oldContent":"        landmarkKeypoints: MatOfKeyPoint,"},{"type":"DELETE","lineNumber":215,"oldContent":"        matches: List<DMatch>"},{"type":"DELETE","lineNumber":216,"oldContent":"    ): List<DMatch> {"},{"type":"DELETE","lineNumber":217,"oldContent":"        "},{"type":"DELETE","lineNumber":218,"oldContent":"        if (matches.size < 4) return matches // Mindestens 4 Punkte für Homographie"},{"type":"DELETE","lineNumber":219,"oldContent":"        "},{"type":"DELETE","lineNumber":220,"oldContent":"        try {"},{"type":"DELETE","lineNumber":221,"oldContent":"            val framePoints = mutableListOf<Point>()"},{"type":"DELETE","lineNumber":222,"oldContent":"            val landmarkPoints = mutableListOf<Point>()"},{"type":"DELETE","lineNumber":223,"oldContent":"            "},{"type":"DELETE","lineNumber":224,"oldContent":"            val frameKpArray = frameKeypoints.toArray()"},{"type":"DELETE","lineNumber":225,"oldContent":"            val landmarkKpArray = landmarkKeypoints.toArray()"},{"type":"DELETE","lineNumber":226,"oldContent":"            "},{"type":"DELETE","lineNumber":227,"oldContent":"            // Sammle korrespondierende Punkte"},{"type":"DELETE","lineNumber":228,"oldContent":"            for (match in matches) {"},{"type":"DELETE","lineNumber":229,"oldContent":"                if (match.queryIdx < frameKpArray.size && match.trainIdx < landmarkKpArray.size) {"},{"type":"DELETE","lineNumber":230,"oldContent":"                    framePoints.add(frameKpArray[match.queryIdx].pt)"},{"type":"DELETE","lineNumber":231,"oldContent":"                    landmarkPoints.add(landmarkKpArray[match.trainIdx].pt)"},{"type":"DELETE","lineNumber":232,"oldContent":"                }"},{"type":"DELETE","lineNumber":233,"oldContent":"            }"},{"type":"DELETE","lineNumber":234,"oldContent":"            "},{"type":"DELETE","lineNumber":235,"oldContent":"            if (framePoints.size < 4) return matches"},{"type":"DELETE","lineNumber":236,"oldContent":"            "},{"type":"DELETE","lineNumber":237,"oldContent":"            // Konvertiere zu OpenCV Format"},{"type":"DELETE","lineNumber":238,"oldContent":"            val framePointsMat = MatOfPoint2f()"},{"type":"DELETE","lineNumber":239,"oldContent":"            val landmarkPointsMat = MatOfPoint2f()"},{"type":"DELETE","lineNumber":240,"oldContent":"            framePointsMat.fromList(framePoints)"},{"type":"DELETE","lineNumber":241,"oldContent":"            landmarkPointsMat.fromList(landmarkPoints)"},{"type":"DELETE","lineNumber":242,"oldContent":"            "},{"type":"DELETE","lineNumber":243,"oldContent":"            // Finde Homographie mit RANSAC"},{"type":"DELETE","lineNumber":244,"oldContent":"            val mask = Mat()"},{"type":"DELETE","lineNumber":245,"oldContent":"            val homography = Calib3d.findHomography("},{"type":"DELETE","lineNumber":246,"oldContent":"                landmarkPointsMat,"},{"type":"DELETE","lineNumber":247,"oldContent":"                framePointsMat,"},{"type":"DELETE","lineNumber":248,"oldContent":"                Calib3d.RANSAC,"},{"type":"DELETE","lineNumber":249,"oldContent":"                ransacThreshold,"},{"type":"DELETE","lineNumber":250,"oldContent":"                mask,"},{"type":"DELETE","lineNumber":251,"oldContent":"                2000,"},{"type":"DELETE","lineNumber":252,"oldContent":"                ransacConfidence"},{"type":"DELETE","lineNumber":253,"oldContent":"            )"},{"type":"DELETE","lineNumber":254,"oldContent":"            "},{"type":"DELETE","lineNumber":255,"oldContent":"            if (homography.empty()) {"},{"type":"DELETE","lineNumber":256,"oldContent":"                Log.d(TAG, \"Keine valide Homographie gefunden\")"},{"type":"DELETE","lineNumber":257,"oldContent":"                return matches"},{"type":"DELETE","lineNumber":258,"oldContent":"            }"},{"type":"DELETE","lineNumber":259,"oldContent":"            "},{"type":"DELETE","lineNumber":260,"oldContent":"            // Filtere Matches basierend auf RANSAC-Maske"},{"type":"DELETE","lineNumber":261,"oldContent":"            val inlierMatches = mutableListOf<DMatch>()"},{"type":"DELETE","lineNumber":262,"oldContent":"            val maskArray = mask.toArray()"},{"type":"DELETE","lineNumber":263,"oldContent":"            "},{"type":"DELETE","lineNumber":264,"oldContent":"            for (i in matches.indices) {"},{"type":"DELETE","lineNumber":265,"oldContent":"                if (i < maskArray.size && maskArray[i][0] > 0) {"},{"type":"DELETE","lineNumber":266,"oldContent":"                    inlierMatches.add(matches[i])"},{"type":"DELETE","lineNumber":267,"oldContent":"                }"},{"type":"DELETE","lineNumber":268,"oldContent":"            }"},{"type":"DELETE","lineNumber":269,"oldContent":"            "},{"type":"DELETE","lineNumber":270,"oldContent":"            Log.d(TAG, \"RANSAC: ${inlierMatches.size}/${matches.size} Inlier\")"},{"type":"DELETE","lineNumber":271,"oldContent":"            "},{"type":"DELETE","lineNumber":272,"oldContent":"            return inlierMatches"},{"type":"DELETE","lineNumber":273,"oldContent":"            "},{"type":"DELETE","lineNumber":274,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":275,"oldContent":"            Log.e(TAG, \"Fehler bei RANSAC-Filterung: ${e.message}\")"},{"type":"DELETE","lineNumber":276,"oldContent":"            return matches"},{"type":"DELETE","lineNumber":277,"oldContent":"        }"},{"type":"INSERT","lineNumber":40,"content":"    fun loadAllLandmarks(): List<ProcessedLandmark> {"},{"type":"INSERT","lineNumber":41,"content":"        Log.d(TAG, \"loadAllLandmarks called (stub)\")"},{"type":"INSERT","lineNumber":42,"content":"        return emptyList()"},{"type":"DELETE","lineNumber":280,"oldContent":"    /**"},{"type":"DELETE","lineNumber":281,"oldContent":"     * Berechnet Confidence basierend auf Match-Qualität"},{"type":"DELETE","lineNumber":282,"oldContent":"     */"},{"type":"DELETE","lineNumber":283,"oldContent":"    private fun calculateMatchConfidence(inlierMatches: List<DMatch>, totalMatches: Int): Float {"},{"type":"DELETE","lineNumber":284,"oldContent":"        if (totalMatches == 0) return 0f"},{"type":"DELETE","lineNumber":285,"oldContent":"        "},{"type":"DELETE","lineNumber":286,"oldContent":"        val inlierRatio = inlierMatches.size.toFloat() / totalMatches.toFloat()"},{"type":"DELETE","lineNumber":287,"oldContent":"        val averageDistance = inlierMatches.map { it.distance }.average().toFloat()"},{"type":"DELETE","lineNumber":288,"oldContent":"        "},{"type":"DELETE","lineNumber":289,"oldContent":"        // Normalisiere Distanz (0-100 -> 1-0)"},{"type":"DELETE","lineNumber":290,"oldContent":"        val distanceScore = max(0f, (100f - averageDistance) / 100f)"},{"type":"DELETE","lineNumber":291,"oldContent":"        "},{"type":"DELETE","lineNumber":292,"oldContent":"        // Kombiniere Inlier-Ratio und Distanz-Score"},{"type":"DELETE","lineNumber":293,"oldContent":"        val confidence = (inlierRatio * 0.7f + distanceScore * 0.3f)"},{"type":"DELETE","lineNumber":294,"oldContent":"        "},{"type":"DELETE","lineNumber":295,"oldContent":"        return min(1f, confidence)"},{"type":"INSERT","lineNumber":45,"content":"    fun getStorageStats(): StorageStats {"},{"type":"INSERT","lineNumber":46,"content":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"INSERT","lineNumber":47,"content":"        return StorageStats()"},{"type":"DELETE","lineNumber":298,"oldContent":"    /**"},{"type":"DELETE","lineNumber":299,"oldContent":"     * Berechnet die durchschnittliche Match-Distanz"},{"type":"DELETE","lineNumber":300,"oldContent":"     */"},{"type":"DELETE","lineNumber":301,"oldContent":"    private fun calculateAverageDistance(matches: List<DMatch>): Float {"},{"type":"DELETE","lineNumber":302,"oldContent":"        return if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":303,"oldContent":"            matches.map { it.distance }.average().toFloat()"},{"type":"DELETE","lineNumber":304,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":305,"oldContent":"            Float.MAX_VALUE"},{"type":"DELETE","lineNumber":306,"oldContent":"        }"},{"type":"INSERT","lineNumber":50,"content":"    fun cleanup() {"},{"type":"INSERT","lineNumber":51,"content":"        Log.d(TAG, \"cleanup called (stub)\")"},{"type":"INSERT","lineNumber":53,"content":"}"},{"type":"INSERT","lineNumber":54,"content":""},{"type":"INSERT","lineNumber":55,"content":"class ARTrackingSystem {"},{"type":"DELETE","lineNumber":309,"oldContent":"    /**"},{"type":"DELETE","lineNumber":310,"oldContent":"     * Berechnet die Bildschirmposition des erkannten Landmarks"},{"type":"DELETE","lineNumber":311,"oldContent":"     */"},{"type":"DELETE","lineNumber":312,"oldContent":"    private fun calculateLandmarkScreenPosition("},{"type":"DELETE","lineNumber":313,"oldContent":"        frameKeypoints: MatOfKeyPoint,"},{"type":"DELETE","lineNumber":314,"oldContent":"        landmarkKeypoints: MatOfKeyPoint,"},{"type":"DELETE","lineNumber":315,"oldContent":"        matches: List<DMatch>"},{"type":"DELETE","lineNumber":316,"oldContent":"    ): android.graphics.PointF? {"},{"type":"DELETE","lineNumber":317,"oldContent":"        "},{"type":"DELETE","lineNumber":318,"oldContent":"        if (matches.isEmpty()) return null"},{"type":"DELETE","lineNumber":319,"oldContent":"        "},{"type":"DELETE","lineNumber":320,"oldContent":"        try {"},{"type":"DELETE","lineNumber":321,"oldContent":"            val frameKpArray = frameKeypoints.toArray()"},{"type":"DELETE","lineNumber":322,"oldContent":"            val landmarkKpArray = landmarkKeypoints.toArray()"},{"type":"DELETE","lineNumber":323,"oldContent":"            "},{"type":"DELETE","lineNumber":324,"oldContent":"            // Berechne Zentroid der gematchten Punkte im Frame"},{"type":"DELETE","lineNumber":325,"oldContent":"            var sumX = 0.0"},{"type":"DELETE","lineNumber":326,"oldContent":"            var sumY = 0.0"},{"type":"DELETE","lineNumber":327,"oldContent":"            var validMatches = 0"},{"type":"DELETE","lineNumber":328,"oldContent":"            "},{"type":"DELETE","lineNumber":329,"oldContent":"            for (match in matches) {"},{"type":"DELETE","lineNumber":330,"oldContent":"                if (match.queryIdx < frameKpArray.size) {"},{"type":"DELETE","lineNumber":331,"oldContent":"                    val point = frameKpArray[match.queryIdx].pt"},{"type":"DELETE","lineNumber":332,"oldContent":"                    sumX += point.x"},{"type":"DELETE","lineNumber":333,"oldContent":"                    sumY += point.y"},{"type":"DELETE","lineNumber":334,"oldContent":"                    validMatches++"},{"type":"DELETE","lineNumber":335,"oldContent":"                }"},{"type":"DELETE","lineNumber":336,"oldContent":"            }"},{"type":"DELETE","lineNumber":337,"oldContent":"            "},{"type":"DELETE","lineNumber":338,"oldContent":"            if (validMatches == 0) return null"},{"type":"DELETE","lineNumber":339,"oldContent":"            "},{"type":"DELETE","lineNumber":340,"oldContent":"            return android.graphics.PointF("},{"type":"DELETE","lineNumber":341,"oldContent":"                (sumX / validMatches).toFloat(),"},{"type":"DELETE","lineNumber":342,"oldContent":"                (sumY / validMatches).toFloat()"},{"type":"DELETE","lineNumber":343,"oldContent":"            )"},{"type":"DELETE","lineNumber":344,"oldContent":"            "},{"type":"DELETE","lineNumber":345,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":346,"oldContent":"            Log.e(TAG, \"Fehler bei Bildschirmpositions-Berechnung: ${e.message}\")"},{"type":"DELETE","lineNumber":347,"oldContent":"            return null"},{"type":"DELETE","lineNumber":348,"oldContent":"        }"},{"type":"DELETE","lineNumber":349,"oldContent":"    }"},{"type":"INSERT","lineNumber":57,"content":"    private val TAG = \"ARTrackingSystem\""},{"type":"DELETE","lineNumber":351,"oldContent":"    /**"},{"type":"DELETE","lineNumber":352,"oldContent":"     * Konvertiert LandmarkFeatures zu ProcessedLandmark"},{"type":"DELETE","lineNumber":353,"oldContent":"     */"},{"type":"DELETE","lineNumber":354,"oldContent":"    fun processLandmarkFeatures("},{"type":"DELETE","lineNumber":355,"oldContent":"        landmark: FeatureLandmark,"},{"type":"DELETE","lineNumber":356,"oldContent":"        features: LandmarkFeatures,"},{"type":"DELETE","lineNumber":357,"oldContent":"        image: Bitmap"},{"type":"DELETE","lineNumber":358,"oldContent":"    ): ProcessedLandmark? {"},{"type":"DELETE","lineNumber":359,"oldContent":"        "},{"type":"DELETE","lineNumber":360,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":361,"oldContent":"            // Decode descriptors von Base64"},{"type":"DELETE","lineNumber":362,"oldContent":"            val descriptorBytes = android.util.Base64.decode(features.descriptors, android.util.Base64.DEFAULT)"},{"type":"DELETE","lineNumber":363,"oldContent":"            "},{"type":"DELETE","lineNumber":364,"oldContent":"            // Erstelle OpenCV Matrizen"},{"type":"DELETE","lineNumber":365,"oldContent":"            val keypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":366,"oldContent":"            val descriptors = Mat()"},{"type":"DELETE","lineNumber":367,"oldContent":"            "},{"type":"DELETE","lineNumber":368,"oldContent":"            // Konvertiere Keypoints"},{"type":"DELETE","lineNumber":369,"oldContent":"            val cvKeypoints = features.keypoints.map { kp ->"},{"type":"DELETE","lineNumber":370,"oldContent":"                KeyPoint("},{"type":"DELETE","lineNumber":371,"oldContent":"                    kp.x.toDouble(),"},{"type":"DELETE","lineNumber":372,"oldContent":"                    kp.y.toDouble(),"},{"type":"DELETE","lineNumber":373,"oldContent":"                    kp.size,"},{"type":"DELETE","lineNumber":374,"oldContent":"                    kp.angle,"},{"type":"DELETE","lineNumber":375,"oldContent":"                    kp.response,"},{"type":"DELETE","lineNumber":376,"oldContent":"                    kp.octave,"},{"type":"DELETE","lineNumber":377,"oldContent":"                    kp.classId"},{"type":"DELETE","lineNumber":378,"oldContent":"                )"},{"type":"DELETE","lineNumber":379,"oldContent":"            }.toTypedArray()"},{"type":"DELETE","lineNumber":380,"oldContent":"            "},{"type":"DELETE","lineNumber":381,"oldContent":"            keypoints.fromArray(*cvKeypoints)"},{"type":"DELETE","lineNumber":382,"oldContent":"            "},{"type":"DELETE","lineNumber":383,"oldContent":"            // Erstelle Descriptor-Matrix"},{"type":"DELETE","lineNumber":384,"oldContent":"            val rows = cvKeypoints.size"},{"type":"DELETE","lineNumber":385,"oldContent":"            val cols = if (rows > 0) descriptorBytes.size / rows else 0"},{"type":"DELETE","lineNumber":386,"oldContent":"            "},{"type":"DELETE","lineNumber":387,"oldContent":"            if (cols > 0) {"},{"type":"DELETE","lineNumber":388,"oldContent":"                descriptors.create(rows, cols, CvType.CV_8UC1)"},{"type":"DELETE","lineNumber":389,"oldContent":"                descriptors.put(0, 0, descriptorBytes)"},{"type":"DELETE","lineNumber":390,"oldContent":"            }"},{"type":"DELETE","lineNumber":391,"oldContent":"            "},{"type":"DELETE","lineNumber":392,"oldContent":"            // Konvertiere Bild zu OpenCV Mat"},{"type":"DELETE","lineNumber":393,"oldContent":"            val imageMat = Mat()"},{"type":"DELETE","lineNumber":394,"oldContent":"            Utils.bitmapToMat(image, imageMat)"},{"type":"DELETE","lineNumber":395,"oldContent":"            "},{"type":"DELETE","lineNumber":396,"oldContent":"            ProcessedLandmark("},{"type":"DELETE","lineNumber":397,"oldContent":"                landmark = landmark,"},{"type":"DELETE","lineNumber":398,"oldContent":"                descriptors = descriptors,"},{"type":"DELETE","lineNumber":399,"oldContent":"                keypoints = keypoints,"},{"type":"DELETE","lineNumber":400,"oldContent":"                image = imageMat"},{"type":"DELETE","lineNumber":401,"oldContent":"            )"},{"type":"DELETE","lineNumber":402,"oldContent":"            "},{"type":"DELETE","lineNumber":403,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":404,"oldContent":"            Log.e(TAG, \"Fehler beim Verarbeiten der Landmark-Features: ${e.message}\")"},{"type":"DELETE","lineNumber":405,"oldContent":"            null"},{"type":"DELETE","lineNumber":406,"oldContent":"        }"},{"type":"INSERT","lineNumber":59,"content":"    init {"},{"type":"INSERT","lineNumber":60,"content":"        Log.i(TAG, \"ARTrackingSystem initialized (stub)\")"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":64,"content":"data class ProcessedLandmark("},{"type":"INSERT","lineNumber":65,"content":"    val id: String,"},{"type":"INSERT","lineNumber":66,"content":"    val name: String"},{"type":"INSERT","lineNumber":67,"content":")"},{"type":"INSERT","lineNumber":68,"content":""},{"type":"INSERT","lineNumber":69,"content":"data class FeatureMatchResult("},{"type":"INSERT","lineNumber":70,"content":"    val landmarkId: String,"},{"type":"INSERT","lineNumber":71,"content":"    val confidence: Float"},{"type":"INSERT","lineNumber":72,"content":")"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"class StorageStats {"},{"type":"INSERT","lineNumber":75,"content":"    val landmarkCount: Int = 0"},{"type":"INSERT","lineNumber":76,"content":"    "},{"type":"INSERT","lineNumber":77,"content":"    fun getTotalSizeMB(): Double = 0.0"},{"type":"INSERT","lineNumber":78,"content":"}"}]},{"timestamp":1754315990575,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import org.opencv.core.Mat"},{"type":"DELETE","lineNumber":4,"oldContent":" * Stub-Implementation des Feature-Matching Systems"},{"type":"INSERT","lineNumber":3,"content":"import org.opencv.core.Mat"},{"type":"DELETE","lineNumber":6,"oldContent":"    init {"},{"type":"DELETE","lineNumber":8,"oldContent":"        Log.i(TAG, \"FeatureMatchingEngine initialized (stub)\")"},{"type":"DELETE","lineNumber":9,"oldContent":"    }"},{"type":"INSERT","lineNumber":6,"content":" * Stub-Implementation des Feature-Matching Systems"},{"type":"DELETE","lineNumber":11,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":13,"oldContent":"        Log.d(TAG, \"processFrame called (stub)\")"},{"type":"DELETE","lineNumber":15,"oldContent":"        return emptyList()"},{"type":"INSERT","lineNumber":11,"content":"    "},{"type":"INSERT","lineNumber":12,"content":"    init {"},{"type":"INSERT","lineNumber":13,"content":"        Log.i(TAG, \"FeatureMatchingEngine initialized (stub)\")"},{"type":"INSERT","lineNumber":16,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":17,"content":"        Log.d(TAG, \"processFrame called (stub)\")"},{"type":"INSERT","lineNumber":18,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":19,"content":"    }"},{"type":"INSERT","lineNumber":25,"content":"    "},{"type":"INSERT","lineNumber":28,"content":"    }"},{"type":"INSERT","lineNumber":33,"content":"    }"},{"type":"INSERT","lineNumber":38,"content":"    }"},{"type":"INSERT","lineNumber":39,"content":"    "},{"type":"INSERT","lineNumber":43,"content":"    }"},{"type":"INSERT","lineNumber":44,"content":"    "},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":49,"content":"    "},{"type":"INSERT","lineNumber":52,"content":"    }"},{"type":"INSERT","lineNumber":56,"content":"    "},{"type":"INSERT","lineNumber":58,"content":"    "},{"type":"INSERT","lineNumber":61,"content":"    }"},{"type":"INSERT","lineNumber":62,"content":"    "},{"type":"INSERT","lineNumber":63,"content":"    fun resetTracking() {"},{"type":"INSERT","lineNumber":64,"content":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"INSERT","lineNumber":65,"content":"    }"},{"type":"INSERT","lineNumber":66,"content":"}"},{"type":"DELETE","lineNumber":64,"oldContent":"    }"},{"type":"DELETE","lineNumber":65,"oldContent":"    "},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"    "},{"type":"DELETE","lineNumber":68,"oldContent":"    }"},{"type":"DELETE","lineNumber":69,"oldContent":"    "},{"type":"DELETE","lineNumber":70,"oldContent":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"    "},{"type":"DELETE","lineNumber":72,"oldContent":"    }"},{"type":"DELETE","lineNumber":73,"oldContent":"    "},{"type":"DELETE","lineNumber":74,"oldContent":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"    "},{"type":"DELETE","lineNumber":76,"oldContent":"    "},{"type":"DELETE","lineNumber":77,"oldContent":"    }"},{"type":"DELETE","lineNumber":78,"oldContent":"}"}]},{"timestamp":1754318142924,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import org.opencv.core.Mat","oldContent":"import org.opencv.core.Mat"},{"type":"MODIFY","lineNumber":6,"content":" * Stub-Implementation des Feature-Matching Systems","oldContent":" * Stub-Implementation des Feature-Matching Systems"},{"type":"INSERT","lineNumber":8,"content":"class FeatureMatchingEngine {"},{"type":"INSERT","lineNumber":10,"content":"    private val TAG = \"FeatureMatchingEngine\""},{"type":"INSERT","lineNumber":11,"content":"    "},{"type":"DELETE","lineNumber":10,"oldContent":"class FeatureMatchingEngine {"},{"type":"INSERT","lineNumber":14,"content":"    }"},{"type":"DELETE","lineNumber":14,"oldContent":"    private val TAG = \"FeatureMatchingEngine\""},{"type":"DELETE","lineNumber":16,"oldContent":"    }"},{"type":"DELETE","lineNumber":18,"oldContent":"    "},{"type":"MODIFY","lineNumber":26,"content":"    init {","oldContent":"    init {"},{"type":"INSERT","lineNumber":28,"content":"    }"},{"type":"DELETE","lineNumber":30,"oldContent":"    }"},{"type":"INSERT","lineNumber":33,"content":"    }"},{"type":"DELETE","lineNumber":36,"oldContent":"    }"},{"type":"INSERT","lineNumber":38,"content":"    }"},{"type":"INSERT","lineNumber":39,"content":"    "},{"type":"DELETE","lineNumber":41,"oldContent":"    fun getStorageStats(): StorageStats {"},{"type":"DELETE","lineNumber":43,"oldContent":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"INSERT","lineNumber":45,"content":"    fun getStorageStats(): StorageStats {"},{"type":"INSERT","lineNumber":46,"content":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":49,"content":"    "},{"type":"DELETE","lineNumber":48,"oldContent":"}"},{"type":"INSERT","lineNumber":53,"content":"}"},{"type":"DELETE","lineNumber":51,"oldContent":"    "},{"type":"INSERT","lineNumber":56,"content":"    "},{"type":"INSERT","lineNumber":58,"content":"    "},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"INSERT","lineNumber":63,"content":"    fun resetTracking() {"},{"type":"INSERT","lineNumber":64,"content":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"INSERT","lineNumber":65,"content":"    }"},{"type":"INSERT","lineNumber":66,"content":"}"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"DELETE","lineNumber":62,"oldContent":"    }"},{"type":"DELETE","lineNumber":67,"oldContent":"    "},{"type":"DELETE","lineNumber":70,"oldContent":"    "},{"type":"DELETE","lineNumber":74,"oldContent":"    }"},{"type":"DELETE","lineNumber":76,"oldContent":"    "},{"type":"DELETE","lineNumber":78,"oldContent":"    fun resetTracking() {"},{"type":"DELETE","lineNumber":80,"oldContent":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"DELETE","lineNumber":81,"oldContent":"    }"},{"type":"DELETE","lineNumber":82,"oldContent":"}"}]},{"timestamp":1754318724999,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":3,"oldContent":"import org.opencv.core.Mat"},{"type":"INSERT","lineNumber":5,"content":"/**"},{"type":"DELETE","lineNumber":6,"oldContent":" * Stub-Implementation des Feature-Matching Systems"},{"type":"DELETE","lineNumber":10,"oldContent":"    init {"},{"type":"INSERT","lineNumber":12,"content":"    init {"},{"type":"INSERT","lineNumber":14,"content":"    }"},{"type":"DELETE","lineNumber":16,"oldContent":"    }"},{"type":"INSERT","lineNumber":25,"content":"    "},{"type":"DELETE","lineNumber":26,"oldContent":"    init {"},{"type":"MODIFY","lineNumber":40,"content":"    fun loadAllLandmarks(): List<ProcessedLandmark> {","oldContent":"    fun loadAllLandmarks(): List<ProcessedLandmark> {"},{"type":"MODIFY","lineNumber":47,"content":"        return StorageStats()","oldContent":"        return StorageStats()"},{"type":"INSERT","lineNumber":48,"content":"    }"},{"type":"INSERT","lineNumber":49,"content":"    "},{"type":"INSERT","lineNumber":54,"content":"    fun saveLandmarkFeatures(landmarkId: String, landmark: Any, features: Any, bitmap: android.graphics.Bitmap): Boolean {"},{"type":"INSERT","lineNumber":55,"content":"        Log.d(TAG, \"saveLandmarkFeatures called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":56,"content":"        return true"},{"type":"INSERT","lineNumber":58,"content":"}"},{"type":"DELETE","lineNumber":55,"oldContent":"}"},{"type":"INSERT","lineNumber":61,"content":"    "},{"type":"INSERT","lineNumber":63,"content":"    "},{"type":"DELETE","lineNumber":59,"oldContent":"    "},{"type":"DELETE","lineNumber":62,"oldContent":"    "},{"type":"INSERT","lineNumber":68,"content":"    fun resetTracking() {"},{"type":"INSERT","lineNumber":69,"content":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"INSERT","lineNumber":70,"content":"    }"},{"type":"INSERT","lineNumber":71,"content":"}"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"DELETE","lineNumber":66,"oldContent":"    fun resetTracking() {"},{"type":"DELETE","lineNumber":68,"oldContent":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"DELETE","lineNumber":70,"oldContent":"    }"},{"type":"DELETE","lineNumber":72,"oldContent":"}"},{"type":"DELETE","lineNumber":74,"oldContent":""}]},{"timestamp":1754318732424,"changes":[{"type":"MODIFY","lineNumber":12,"content":"    init {","oldContent":"    init {"},{"type":"INSERT","lineNumber":20,"content":"    "},{"type":"INSERT","lineNumber":21,"content":"    fun extractFeatures(bitmap: android.graphics.Bitmap): Any? {"},{"type":"INSERT","lineNumber":22,"content":"        Log.d(TAG, \"extractFeatures called (stub)\")"},{"type":"INSERT","lineNumber":23,"content":"        return null"},{"type":"INSERT","lineNumber":24,"content":"    }"},{"type":"INSERT","lineNumber":25,"content":"    "},{"type":"INSERT","lineNumber":26,"content":"    fun matchFeatures(frame: Mat, landmarks: List<ProcessedLandmark>): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":27,"content":"        Log.d(TAG, \"matchFeatures called (stub)\")"},{"type":"INSERT","lineNumber":28,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":29,"content":"    }"},{"type":"INSERT","lineNumber":30,"content":"    "},{"type":"INSERT","lineNumber":31,"content":"    fun processLandmarkFeatures(landmark: Any, features: Any, bitmap: android.graphics.Bitmap): ProcessedLandmark? {"},{"type":"INSERT","lineNumber":32,"content":"        Log.d(TAG, \"processLandmarkFeatures called (stub)\")"},{"type":"INSERT","lineNumber":33,"content":"        return null"},{"type":"INSERT","lineNumber":34,"content":"    }"},{"type":"INSERT","lineNumber":54,"content":"    "},{"type":"DELETE","lineNumber":40,"oldContent":"    fun loadAllLandmarks(): List<ProcessedLandmark> {"},{"type":"INSERT","lineNumber":61,"content":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"DELETE","lineNumber":47,"oldContent":"        return StorageStats()"},{"type":"DELETE","lineNumber":49,"oldContent":"    fun cleanup() {"},{"type":"INSERT","lineNumber":65,"content":"    fun cleanup() {"},{"type":"DELETE","lineNumber":54,"oldContent":"    }"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"class ARTrackingSystem {"},{"type":"INSERT","lineNumber":72,"content":"    }"},{"type":"INSERT","lineNumber":73,"content":"}"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"class ARTrackingSystem {"},{"type":"INSERT","lineNumber":76,"content":"    "},{"type":"INSERT","lineNumber":78,"content":"    "},{"type":"DELETE","lineNumber":62,"oldContent":"}"},{"type":"DELETE","lineNumber":66,"oldContent":"    "},{"type":"DELETE","lineNumber":67,"oldContent":"    "},{"type":"INSERT","lineNumber":83,"content":"    fun resetTracking() {"},{"type":"INSERT","lineNumber":84,"content":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"INSERT","lineNumber":85,"content":"    }"},{"type":"INSERT","lineNumber":86,"content":"}"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"DELETE","lineNumber":72,"oldContent":"    fun resetTracking() {"},{"type":"DELETE","lineNumber":73,"oldContent":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"DELETE","lineNumber":75,"oldContent":"    }"},{"type":"DELETE","lineNumber":76,"oldContent":"}"},{"type":"DELETE","lineNumber":78,"oldContent":""}]},{"timestamp":1754318738604,"changes":[{"type":"INSERT","lineNumber":11,"content":"    "},{"type":"DELETE","lineNumber":12,"oldContent":"    init {"},{"type":"DELETE","lineNumber":21,"oldContent":"}"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"DELETE","lineNumber":25,"oldContent":"class LandmarkFeatureStorage(private val context: android.content.Context) {"},{"type":"DELETE","lineNumber":27,"oldContent":"    "},{"type":"DELETE","lineNumber":29,"oldContent":"    private val TAG = \"LandmarkFeatureStorage\""},{"type":"DELETE","lineNumber":31,"oldContent":"    "},{"type":"DELETE","lineNumber":33,"oldContent":"    init {"},{"type":"DELETE","lineNumber":35,"oldContent":"        Log.i(TAG, \"LandmarkFeatureStorage initialized (stub)\")"},{"type":"INSERT","lineNumber":30,"content":"    "},{"type":"INSERT","lineNumber":31,"content":"    fun processLandmarkFeatures(landmark: Any, features: Any, bitmap: android.graphics.Bitmap): ProcessedLandmark? {"},{"type":"INSERT","lineNumber":32,"content":"        Log.d(TAG, \"processLandmarkFeatures called (stub)\")"},{"type":"INSERT","lineNumber":33,"content":"        return null"},{"type":"INSERT","lineNumber":35,"content":"}"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"class LandmarkFeatureStorage(private val context: android.content.Context) {"},{"type":"INSERT","lineNumber":39,"content":"    private val TAG = \"LandmarkFeatureStorage\""},{"type":"INSERT","lineNumber":41,"content":"    init {"},{"type":"INSERT","lineNumber":42,"content":"        Log.i(TAG, \"LandmarkFeatureStorage initialized (stub)\")"},{"type":"INSERT","lineNumber":43,"content":"    }"},{"type":"INSERT","lineNumber":44,"content":"    "},{"type":"DELETE","lineNumber":42,"oldContent":"    fun processLandmarkFeatures(landmark: Any, features: Any, bitmap: android.graphics.Bitmap): ProcessedLandmark? {"},{"type":"DELETE","lineNumber":44,"oldContent":"        Log.d(TAG, \"processLandmarkFeatures called (stub)\")"},{"type":"DELETE","lineNumber":46,"oldContent":"        return null"},{"type":"DELETE","lineNumber":48,"oldContent":"    }"},{"type":"INSERT","lineNumber":54,"content":"    "},{"type":"INSERT","lineNumber":61,"content":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"INSERT","lineNumber":65,"content":"    fun cleanup() {"},{"type":"DELETE","lineNumber":66,"oldContent":"    "},{"type":"INSERT","lineNumber":72,"content":"    }"},{"type":"INSERT","lineNumber":73,"content":"}"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"class ARTrackingSystem {"},{"type":"INSERT","lineNumber":76,"content":"    "},{"type":"DELETE","lineNumber":71,"oldContent":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"INSERT","lineNumber":78,"content":"    "},{"type":"DELETE","lineNumber":75,"oldContent":"    fun cleanup() {"},{"type":"INSERT","lineNumber":83,"content":"    fun resetTracking() {"},{"type":"INSERT","lineNumber":84,"content":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"INSERT","lineNumber":85,"content":"    }"},{"type":"INSERT","lineNumber":86,"content":"    "},{"type":"INSERT","lineNumber":87,"content":"    fun updateTracking(matches: List<FeatureMatchResult>): List<Any> {"},{"type":"INSERT","lineNumber":88,"content":"        Log.d(TAG, \"updateTracking called (stub)\")"},{"type":"INSERT","lineNumber":89,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":90,"content":"    }"},{"type":"INSERT","lineNumber":91,"content":"}"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"DELETE","lineNumber":81,"oldContent":"    }"},{"type":"DELETE","lineNumber":82,"oldContent":"}"},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"DELETE","lineNumber":85,"oldContent":"class ARTrackingSystem {"},{"type":"DELETE","lineNumber":86,"oldContent":"    "},{"type":"DELETE","lineNumber":88,"oldContent":"    "},{"type":"DELETE","lineNumber":93,"oldContent":"    fun resetTracking() {"},{"type":"DELETE","lineNumber":95,"oldContent":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"DELETE","lineNumber":97,"oldContent":"    }"},{"type":"DELETE","lineNumber":99,"oldContent":"}"},{"type":"DELETE","lineNumber":101,"oldContent":""}]},{"timestamp":1754318744777,"changes":[{"type":"INSERT","lineNumber":26,"content":"    fun matchFeatures(frame: Mat, landmarks: List<ProcessedLandmark>): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":27,"content":"        Log.d(TAG, \"matchFeatures called (stub)\")"},{"type":"INSERT","lineNumber":28,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":29,"content":"    }"},{"type":"DELETE","lineNumber":29,"oldContent":"    fun matchFeatures(frame: Mat, landmarks: List<ProcessedLandmark>): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":31,"oldContent":"        Log.d(TAG, \"matchFeatures called (stub)\")"},{"type":"INSERT","lineNumber":34,"content":"    }"},{"type":"DELETE","lineNumber":34,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":36,"oldContent":"    }"},{"type":"DELETE","lineNumber":37,"oldContent":"    }"},{"type":"INSERT","lineNumber":38,"content":"    "},{"type":"DELETE","lineNumber":40,"oldContent":"    "},{"type":"DELETE","lineNumber":42,"oldContent":"    fun importLandmarksFromAssets(): Int {"},{"type":"MODIFY","lineNumber":45,"content":"    fun importLandmarksFromAssets(): Int {","oldContent":"        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")"},{"type":"INSERT","lineNumber":46,"content":"        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")"},{"type":"MODIFY","lineNumber":62,"content":"        return StorageStats()","oldContent":"        return StorageStats()"},{"type":"INSERT","lineNumber":65,"content":"    fun cleanup() {"},{"type":"DELETE","lineNumber":67,"oldContent":"    fun cleanup() {"},{"type":"DELETE","lineNumber":72,"oldContent":"    private val TAG = \"ARTrackingSystem\""},{"type":"DELETE","lineNumber":74,"oldContent":"    init {"},{"type":"DELETE","lineNumber":76,"oldContent":"        Log.i(TAG, \"ARTrackingSystem initialized (stub)\")"},{"type":"DELETE","lineNumber":78,"oldContent":"    }"},{"type":"INSERT","lineNumber":77,"content":"    private val TAG = \"ARTrackingSystem\""},{"type":"DELETE","lineNumber":82,"oldContent":"data class ProcessedLandmark("},{"type":"INSERT","lineNumber":79,"content":"    init {"},{"type":"INSERT","lineNumber":80,"content":"        Log.i(TAG, \"ARTrackingSystem initialized (stub)\")"},{"type":"INSERT","lineNumber":81,"content":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"    val id: String,"},{"type":"DELETE","lineNumber":85,"oldContent":"    val name: String"},{"type":"DELETE","lineNumber":86,"oldContent":")"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"data class FeatureMatchResult("},{"type":"DELETE","lineNumber":96,"oldContent":"    val landmarkId: String,"},{"type":"DELETE","lineNumber":98,"oldContent":"    val confidence: Float"},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":93,"content":"data class ProcessedLandmark("},{"type":"INSERT","lineNumber":94,"content":"    val id: String,"},{"type":"INSERT","lineNumber":95,"content":"    val name: String"},{"type":"INSERT","lineNumber":98,"content":"data class FeatureMatchResult("},{"type":"INSERT","lineNumber":99,"content":"    val landmarkId: String,"},{"type":"INSERT","lineNumber":100,"content":"    val confidence: Float,"},{"type":"INSERT","lineNumber":101,"content":"    val landmark: ProcessedLandmark? = null,"},{"type":"INSERT","lineNumber":102,"content":"    val matchCount: Int = 0,"},{"type":"INSERT","lineNumber":103,"content":"    val distance: Float? = null,"},{"type":"INSERT","lineNumber":104,"content":"    val angle: Float? = null,"},{"type":"INSERT","lineNumber":105,"content":"    val screenPosition: android.graphics.PointF? = null"},{"type":"INSERT","lineNumber":106,"content":")"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/RouteViewModel.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/RouteViewModel.kt","baseContent":"// RouteViewModel.kt (erweitert)\npackage com.example.arwalking\n\nimport RouteData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport android.util.Log\nimport android.content.Context\nimport com.google.gson.Gson\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\nclass RouteViewModel : ViewModel() {\n\n    private val TAG = \"RouteViewModel\"\n    \n    // Feature Map Manager\n    private var featureMapManager: FeatureMapManager? = null\n    \n    // State für Feature-Navigation\n    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)\n    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()\n    \n    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())\n    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()\n    \n    private val _isFeatureMappingEnabled = MutableStateFlow(false)\n    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()\n\n    // Die neue Funktion die das NavigationRoute-Objekt zurückgibt\n    fun loadNavigationRoute(context: Context): NavigationRoute? {\n        return try {\n            Log.i(TAG, \"Route wird geladen...\")\n\n            // JSON laden und parsen (wie vorher)\n            val jsonString = loadJSONFromAsset(context, \"route.json\")\n            val gson = Gson()\n            val routeData = gson.fromJson(jsonString, RouteData::class.java)\n\n            // In NavigationRoute umwandeln\n            convertToNavigationRoute(routeData)\n\n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")\n            null\n        }\n    }\n\n    // Konvertierung von RouteData zu NavigationRoute\n    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {\n        val steps = mutableListOf<NavigationStep>()\n        var stepNumber = 1\n\n        routeData.route.path.forEach { pathItem ->\n            pathItem.routeParts.forEach { routePart ->\n                val landmarkIds = routePart.landmarks.map { it.id }\n\n                val step = NavigationStep(\n                    stepNumber = stepNumber,\n                    instruction = routePart.instructionDe,\n                    building = pathItem.xmlName,\n                    landmarkIds = landmarkIds\n                )\n\n                steps.add(step)\n                stepNumber++\n            }\n        }\n\n        return NavigationRoute(\n            totalLength = routeData.route.routeInfo.routeLength,\n            steps = steps\n        )\n    }\n\n    // Optional: Für Debugging - die alte Logging-Funktion angepasst\n    fun logNavigationRoute(navigationRoute: NavigationRoute) {\n        Log.i(TAG, \"=== NAVIGATION ROUTE START ===\")\n        Log.i(TAG, \"Gesamte Routenlänge: ${navigationRoute.totalLength} Meter\")\n        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")\n        Log.i(TAG, \"\")\n\n        navigationRoute.steps.forEach { step ->\n            Log.i(TAG, \"Schritt ${step.stepNumber}: ${step.instruction}\")\n            Log.i(TAG, \"  Gebäude: ${step.building}\")\n            if (step.landmarkIds.isNotEmpty()) {\n                Log.i(TAG, \"  Landmark IDs: ${step.landmarkIds.joinToString(\", \")}\")\n            } else {\n                Log.i(TAG, \"  Keine Landmarks\")\n            }\n            Log.i(TAG, \"\")\n        }\n\n        Log.i(TAG, \"=== NAVIGATION ROUTE ENDE ===\")\n    }\n\n    private fun loadJSONFromAsset(context: Context, filename: String): String {\n        return context.assets.open(filename).bufferedReader().use { it.readText() }\n    }\n}","baseTimestamp":1754044850874,"deltas":[{"timestamp":1754318130022,"changes":[{"type":"DELETE","lineNumber":40,"oldContent":"    // State für geladene Route aus JSON"},{"type":"DELETE","lineNumber":42,"oldContent":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)"},{"type":"INSERT","lineNumber":43,"content":"    // State für geladene Route aus JSON"},{"type":"INSERT","lineNumber":44,"content":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)"},{"type":"DELETE","lineNumber":57,"oldContent":"        }"},{"type":"DELETE","lineNumber":58,"oldContent":"    }"},{"type":"INSERT","lineNumber":57,"content":"    // State für aktuellen Navigationsschritt"},{"type":"INSERT","lineNumber":58,"content":"    private val _currentNavigationStep = MutableStateFlow(1)"},{"type":"INSERT","lineNumber":93,"content":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":94,"oldContent":"                steps = emptyList()"},{"type":"INSERT","lineNumber":118,"content":"            Log.d(TAG, \"  - Estimated Time: ${step.estimatedTime}s\")"},{"type":"INSERT","lineNumber":119,"content":"            Log.d(TAG, \"  - Landmarks: ${step.landmarks.size}\")"},{"type":"DELETE","lineNumber":120,"oldContent":"    }"},{"type":"DELETE","lineNumber":122,"oldContent":"            Log.d(TAG, \"  - Landmarks: ${step.landmarks.size}\")"},{"type":"INSERT","lineNumber":126,"content":"     * Konvertiert RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":127,"oldContent":"     */"},{"type":"INSERT","lineNumber":130,"content":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":131,"oldContent":"        "},{"type":"INSERT","lineNumber":146,"content":"                        floor = floor,"},{"type":"DELETE","lineNumber":147,"oldContent":"                        landmarks = routePart.landmarks,"},{"type":"DELETE","lineNumber":151,"oldContent":"        "},{"type":"INSERT","lineNumber":152,"content":"            }"},{"type":"INSERT","lineNumber":153,"content":"        }"},{"type":"INSERT","lineNumber":154,"content":"        "},{"type":"DELETE","lineNumber":155,"oldContent":"            }"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":160,"oldContent":"    fun initializeStorage(context: Context) {"},{"type":"DELETE","lineNumber":162,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":164,"oldContent":"            try {"},{"type":"DELETE","lineNumber":167,"oldContent":"                "},{"type":"DELETE","lineNumber":170,"oldContent":"                // Neues Storage-System initialisieren"},{"type":"DELETE","lineNumber":173,"oldContent":"                storageManager = ArWalkingStorageManager(context)"},{"type":"INSERT","lineNumber":170,"content":"    fun initializeStorage(context: Context) {"},{"type":"INSERT","lineNumber":171,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":172,"content":"            try {"},{"type":"INSERT","lineNumber":173,"content":"                Log.i(TAG, \"Initialisiere neues Storage-System und Feature-Matching...\")"},{"type":"INSERT","lineNumber":175,"content":"                // Neues Storage-System initialisieren"},{"type":"INSERT","lineNumber":176,"content":"                storageManager = ArWalkingStorageManager(context)"},{"type":"INSERT","lineNumber":177,"content":"                "},{"type":"DELETE","lineNumber":179,"oldContent":"                Log.i(TAG, \"Initialisiere neues Storage-System und Feature-Matching...\")"},{"type":"DELETE","lineNumber":206,"oldContent":"                val status = storageManager!!.getStorageStatus()"},{"type":"DELETE","lineNumber":208,"oldContent":"                Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"DELETE","lineNumber":212,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":211,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":212,"content":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"INSERT","lineNumber":213,"content":"                "},{"type":"INSERT","lineNumber":214,"content":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":215,"content":"                "},{"type":"INSERT","lineNumber":216,"content":"                // Logge Storage-Status"},{"type":"INSERT","lineNumber":217,"content":"                val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":218,"content":"                Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":219,"content":"                "},{"type":"INSERT","lineNumber":220,"content":"                val storageStats = landmarkFeatureStorage!!.getStorageStats()"},{"type":"INSERT","lineNumber":221,"content":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"INSERT","lineNumber":222,"content":"                "},{"type":"INSERT","lineNumber":223,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":216,"oldContent":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":218,"oldContent":"                _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"DELETE","lineNumber":221,"oldContent":"                "},{"type":"DELETE","lineNumber":223,"oldContent":"                Log.i(TAG, \"Feature-Matching System erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":226,"oldContent":"                "},{"type":"DELETE","lineNumber":228,"oldContent":"                // Logge Storage-Status"},{"type":"DELETE","lineNumber":231,"oldContent":"                "},{"type":"DELETE","lineNumber":233,"oldContent":"                val storageStats = landmarkFeatureStorage!!.getStorageStats()"},{"type":"DELETE","lineNumber":236,"oldContent":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"DELETE","lineNumber":238,"oldContent":"                "},{"type":"INSERT","lineNumber":307,"content":"     * Fügt einen neuen Landmark hinzu (nur lokale Speicherung)"},{"type":"DELETE","lineNumber":308,"oldContent":"     */"},{"type":"INSERT","lineNumber":331,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":332,"content":"                        true"},{"type":"DELETE","lineNumber":333,"oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"DELETE","lineNumber":336,"oldContent":"                        true"},{"type":"DELETE","lineNumber":338,"oldContent":"                false"},{"type":"DELETE","lineNumber":340,"oldContent":"            }"},{"type":"INSERT","lineNumber":341,"content":"                false"},{"type":"INSERT","lineNumber":342,"content":"            }"},{"type":"INSERT","lineNumber":353,"content":"     * Aktiviert Storage-System sofort"},{"type":"INSERT","lineNumber":354,"content":"     */"},{"type":"DELETE","lineNumber":355,"oldContent":"     * Aktiviert Storage-System sofort"},{"type":"DELETE","lineNumber":357,"oldContent":"     */"},{"type":"DELETE","lineNumber":366,"oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"MODIFY","lineNumber":368,"content":"                Log.i(TAG, \"Storage-System sofort aktiviert\")","oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"INSERT","lineNumber":369,"content":"                "},{"type":"MODIFY","lineNumber":405,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {","oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":406,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":408,"oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":413,"content":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"DELETE","lineNumber":415,"oldContent":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"MODIFY","lineNumber":417,"content":"     * Gibt Performance-Informationen zurück","oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"MODIFY","lineNumber":425,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":426,"content":"    }"},{"type":"DELETE","lineNumber":428,"oldContent":"        }"},{"type":"DELETE","lineNumber":474,"oldContent":"     */"},{"type":"DELETE","lineNumber":475,"oldContent":"     * Erstellt einen neuen Landmark"},{"type":"INSERT","lineNumber":474,"content":"    }"},{"type":"INSERT","lineNumber":475,"content":"    "},{"type":"MODIFY","lineNumber":477,"content":"     * Geht zum vorherigen Navigationsschritt","oldContent":"    /**"},{"type":"DELETE","lineNumber":479,"oldContent":"    }"},{"type":"DELETE","lineNumber":480,"oldContent":"        }"},{"type":"DELETE","lineNumber":481,"oldContent":"    }"},{"type":"DELETE","lineNumber":482,"oldContent":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":479,"content":"    fun previousNavigationStep() {"},{"type":"INSERT","lineNumber":480,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":481,"content":"        if (currentStep > 1) {"},{"type":"INSERT","lineNumber":482,"content":"            _currentNavigationStep.value = currentStep - 1"},{"type":"DELETE","lineNumber":495,"oldContent":"    "},{"type":"DELETE","lineNumber":497,"oldContent":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"INSERT","lineNumber":496,"content":"    "},{"type":"INSERT","lineNumber":498,"content":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"INSERT","lineNumber":501,"content":"        landmarkId: String,"},{"type":"DELETE","lineNumber":503,"oldContent":"        landmarkId: String,"},{"type":"INSERT","lineNumber":512,"content":"                    landmarkName = name,"},{"type":"INSERT","lineNumber":513,"content":"                    description = description,"},{"type":"INSERT","lineNumber":514,"content":"                    category = \"Manual\""},{"type":"INSERT","lineNumber":515,"content":"                )"},{"type":"DELETE","lineNumber":514,"oldContent":"                    landmarkName = name,"},{"type":"DELETE","lineNumber":516,"oldContent":"                    description = description,"},{"type":"DELETE","lineNumber":519,"oldContent":"                    category = \"Manual\""},{"type":"DELETE","lineNumber":522,"oldContent":"                )"},{"type":"DELETE","lineNumber":565,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":567,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":568,"oldContent":"            try {"},{"type":"DELETE","lineNumber":569,"oldContent":"            false"},{"type":"INSERT","lineNumber":566,"content":"                "},{"type":"DELETE","lineNumber":571,"oldContent":"        }"},{"type":"DELETE","lineNumber":574,"oldContent":"    "},{"type":"INSERT","lineNumber":571,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":572,"content":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":573,"content":"            false"},{"type":"INSERT","lineNumber":574,"content":"        }"},{"type":"INSERT","lineNumber":575,"content":"    }"},{"type":"INSERT","lineNumber":576,"content":"    "},{"type":"DELETE","lineNumber":577,"oldContent":"        Log.d(TAG, \"processFrameForFeatureMatching called (stub)\")"},{"type":"DELETE","lineNumber":626,"oldContent":"            }"},{"type":"MODIFY","lineNumber":632,"content":"            }","oldContent":"     */"},{"type":"DELETE","lineNumber":635,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":637,"oldContent":"            try {"},{"type":"INSERT","lineNumber":638,"content":"     */"},{"type":"INSERT","lineNumber":640,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":641,"content":"            try {"},{"type":"DELETE","lineNumber":644,"oldContent":"                "},{"type":"DELETE","lineNumber":646,"oldContent":"                // Führe echtes Feature-Matching durch"},{"type":"DELETE","lineNumber":648,"oldContent":"                val matches = featureMatchingEngine!!.matchFeatures(frame, processedLandmarks)"},{"type":"DELETE","lineNumber":651,"oldContent":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":648,"content":"                // Führe echtes Feature-Matching durch"},{"type":"INSERT","lineNumber":649,"content":"                val matches = featureMatchingEngine!!.matchFeatures(frame, processedLandmarks)"},{"type":"INSERT","lineNumber":650,"content":"                "},{"type":"DELETE","lineNumber":653,"oldContent":"                                    0.0"},{"type":"DELETE","lineNumber":656,"oldContent":"                                ),"},{"type":"DELETE","lineNumber":658,"oldContent":"                                imageUrl = \"\","},{"type":"DELETE","lineNumber":661,"oldContent":"                                confidence = 1.0f"},{"type":"DELETE","lineNumber":663,"oldContent":"                            )"},{"type":"DELETE","lineNumber":666,"oldContent":"                        )"},{"type":"DELETE","lineNumber":669,"oldContent":"                    }"},{"type":"DELETE","lineNumber":671,"oldContent":"                }"},{"type":"DELETE","lineNumber":673,"oldContent":"            }"},{"type":"DELETE","lineNumber":676,"oldContent":"            "},{"type":"DELETE","lineNumber":678,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":681,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":684,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":686,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":688,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":691,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":693,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":696,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":698,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":701,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":703,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":706,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":708,"oldContent":"                                imageUrl = \"\","},{"type":"DELETE","lineNumber":711,"oldContent":"                                confidence = 1.0f"},{"type":"DELETE","lineNumber":713,"oldContent":"                            )"},{"type":"DELETE","lineNumber":716,"oldContent":"                        )"},{"type":"DELETE","lineNumber":718,"oldContent":"                    }"},{"type":"DELETE","lineNumber":721,"oldContent":"                }"},{"type":"DELETE","lineNumber":723,"oldContent":"            }"},{"type":"DELETE","lineNumber":726,"oldContent":"            "},{"type":"DELETE","lineNumber":728,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":731,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":733,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":736,"oldContent":"            }"},{"type":"DELETE","lineNumber":738,"oldContent":"            "},{"type":"DELETE","lineNumber":741,"oldContent":"            routeLandmarks"},{"type":"DELETE","lineNumber":743,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":746,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":748,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":751,"oldContent":"        }"},{"type":"DELETE","lineNumber":754,"oldContent":"    }"},{"type":"DELETE","lineNumber":756,"oldContent":"    "},{"type":"DELETE","lineNumber":758,"oldContent":"    /**"},{"type":"DELETE","lineNumber":761,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":763,"oldContent":"     */"},{"type":"DELETE","lineNumber":766,"oldContent":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"DELETE","lineNumber":768,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":771,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":773,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":776,"oldContent":"                convertToNavigationRoute(route).steps"},{"type":"DELETE","lineNumber":778,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":781,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":783,"oldContent":"            }"},{"type":"DELETE","lineNumber":786,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":788,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"DELETE","lineNumber":791,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":793,"oldContent":"        }"},{"type":"DELETE","lineNumber":796,"oldContent":"    }"},{"type":"DELETE","lineNumber":798,"oldContent":""},{"type":"INSERT","lineNumber":741,"content":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":742,"content":"                                    0.0"},{"type":"INSERT","lineNumber":743,"content":"                                ),"},{"type":"INSERT","lineNumber":744,"content":"                                imageUrl = \"\","},{"type":"INSERT","lineNumber":745,"content":"                                confidence = 1.0f"},{"type":"INSERT","lineNumber":746,"content":"                            )"},{"type":"INSERT","lineNumber":747,"content":"                        )"},{"type":"INSERT","lineNumber":748,"content":"                    }"},{"type":"INSERT","lineNumber":749,"content":"                }"},{"type":"INSERT","lineNumber":750,"content":"            }"},{"type":"INSERT","lineNumber":751,"content":"            "},{"type":"INSERT","lineNumber":752,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":753,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":754,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":755,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":756,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":757,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":758,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":759,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":760,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":761,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":762,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":763,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":764,"content":"                                imageUrl = \"\","},{"type":"INSERT","lineNumber":765,"content":"                                confidence = 1.0f"},{"type":"INSERT","lineNumber":766,"content":"                            )"},{"type":"INSERT","lineNumber":767,"content":"                        )"},{"type":"INSERT","lineNumber":768,"content":"                    }"},{"type":"INSERT","lineNumber":769,"content":"                }"},{"type":"INSERT","lineNumber":770,"content":"            }"},{"type":"INSERT","lineNumber":771,"content":"            "},{"type":"INSERT","lineNumber":772,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":773,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":774,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":775,"content":"            }"},{"type":"INSERT","lineNumber":776,"content":"            "},{"type":"INSERT","lineNumber":777,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":778,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":779,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":780,"content":"            emptyList()"},{"type":"INSERT","lineNumber":781,"content":"        }"},{"type":"INSERT","lineNumber":782,"content":"    }"},{"type":"INSERT","lineNumber":783,"content":"    "},{"type":"INSERT","lineNumber":785,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":786,"content":"     */"},{"type":"INSERT","lineNumber":787,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":788,"content":"        return try {"},{"type":"INSERT","lineNumber":789,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":790,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":791,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":792,"content":"            } else {"},{"type":"INSERT","lineNumber":793,"content":"                emptyList()"},{"type":"INSERT","lineNumber":794,"content":"            }"},{"type":"INSERT","lineNumber":795,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":796,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":797,"content":"            emptyList()"},{"type":"INSERT","lineNumber":798,"content":"        }"},{"type":"INSERT","lineNumber":799,"content":"    }"},{"type":"INSERT","lineNumber":800,"content":""},{"type":"INSERT","lineNumber":801,"content":"    /**"},{"type":"INSERT","lineNumber":926,"content":"}"}]},{"timestamp":1754318168759,"changes":[{"type":"DELETE","lineNumber":41,"oldContent":"    // State für geladene Route aus JSON"},{"type":"MODIFY","lineNumber":43,"content":"    // State für geladene Route aus JSON","oldContent":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)"},{"type":"INSERT","lineNumber":44,"content":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)"},{"type":"DELETE","lineNumber":60,"oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":61,"oldContent":"        var stepNumber = 1"},{"type":"INSERT","lineNumber":60,"content":""},{"type":"INSERT","lineNumber":61,"content":"    /**"},{"type":"MODIFY","lineNumber":120,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":152,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":155,"content":"        return NavigationRoute(","oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":166,"content":"    "},{"type":"INSERT","lineNumber":167,"content":"    /**"},{"type":"INSERT","lineNumber":168,"content":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"INSERT","lineNumber":169,"content":"     */"},{"type":"DELETE","lineNumber":168,"oldContent":"    "},{"type":"DELETE","lineNumber":170,"oldContent":"    /**"},{"type":"DELETE","lineNumber":172,"oldContent":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"INSERT","lineNumber":174,"content":"                "},{"type":"DELETE","lineNumber":174,"oldContent":"     */"},{"type":"DELETE","lineNumber":177,"oldContent":"                "},{"type":"DELETE","lineNumber":209,"oldContent":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"INSERT","lineNumber":210,"content":"                "},{"type":"INSERT","lineNumber":211,"content":"                // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":213,"oldContent":"                "},{"type":"DELETE","lineNumber":215,"oldContent":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"DELETE","lineNumber":217,"oldContent":"                _isFeatureMappingEnabled.value = false"},{"type":"DELETE","lineNumber":220,"oldContent":"            }"},{"type":"DELETE","lineNumber":223,"oldContent":"        }"},{"type":"DELETE","lineNumber":225,"oldContent":"    }"},{"type":"DELETE","lineNumber":228,"oldContent":"    "},{"type":"INSERT","lineNumber":224,"content":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"INSERT","lineNumber":225,"content":"                _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":226,"content":"            }"},{"type":"INSERT","lineNumber":227,"content":"        }"},{"type":"INSERT","lineNumber":228,"content":"    }"},{"type":"INSERT","lineNumber":229,"content":"    "},{"type":"MODIFY","lineNumber":333,"content":"                    }","oldContent":"                    }"},{"type":"DELETE","lineNumber":339,"oldContent":"                false"},{"type":"MODIFY","lineNumber":341,"content":"                false","oldContent":"            }"},{"type":"INSERT","lineNumber":342,"content":"            }"},{"type":"MODIFY","lineNumber":355,"content":"    fun enableStorageSystemImmediately(context: Context) {","oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":366,"oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"MODIFY","lineNumber":368,"content":"                Log.i(TAG, \"Storage-System sofort aktiviert\")","oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"INSERT","lineNumber":369,"content":"                "},{"type":"INSERT","lineNumber":404,"content":"     */"},{"type":"DELETE","lineNumber":405,"oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":416,"content":"    /**"},{"type":"DELETE","lineNumber":417,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"MODIFY","lineNumber":424,"content":"            \"Storage-System nicht verfügbar\"","oldContent":"    }"},{"type":"MODIFY","lineNumber":431,"content":"    suspend fun cleanup(): CleanupSummary? {","oldContent":"    suspend fun cleanup(): com.example.arwalking.storage.CleanupSummary? {"},{"type":"INSERT","lineNumber":456,"content":"        }"},{"type":"INSERT","lineNumber":457,"content":"    }"},{"type":"INSERT","lineNumber":458,"content":"    "},{"type":"INSERT","lineNumber":459,"content":"    /**"},{"type":"DELETE","lineNumber":457,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":458,"oldContent":"            try {"},{"type":"DELETE","lineNumber":459,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":460,"oldContent":"     * Setzt den aktuellen Navigationsschritt"},{"type":"MODIFY","lineNumber":476,"content":"    /**","oldContent":"            Log.d(TAG, \"Vorheriger Navigationsschritt: ${currentStep - 1}\")"},{"type":"INSERT","lineNumber":495,"content":"    }"},{"type":"DELETE","lineNumber":496,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":497,"oldContent":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"DELETE","lineNumber":499,"oldContent":"            try {"},{"type":"INSERT","lineNumber":498,"content":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"INSERT","lineNumber":499,"content":"     */"},{"type":"DELETE","lineNumber":513,"oldContent":"                "},{"type":"DELETE","lineNumber":515,"oldContent":"                if (result is SaveResult.Success) {"},{"type":"INSERT","lineNumber":516,"content":"                "},{"type":"INSERT","lineNumber":517,"content":"                if (result is SaveResult.Success) {"},{"type":"MODIFY","lineNumber":566,"content":"                ","oldContent":"                "},{"type":"INSERT","lineNumber":568,"content":"                Log.w(TAG, \"Feature-Matching System nicht verfügbar\")"},{"type":"INSERT","lineNumber":569,"content":"                false"},{"type":"INSERT","lineNumber":570,"content":"            }"},{"type":"DELETE","lineNumber":570,"oldContent":"                Log.w(TAG, \"Feature-Matching System nicht verfügbar\")"},{"type":"DELETE","lineNumber":572,"oldContent":"                false"},{"type":"DELETE","lineNumber":575,"oldContent":"            }"},{"type":"MODIFY","lineNumber":632,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":635,"oldContent":"     */"},{"type":"DELETE","lineNumber":638,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":640,"oldContent":"            try {"},{"type":"INSERT","lineNumber":638,"content":"     */"},{"type":"INSERT","lineNumber":640,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":641,"content":"            try {"},{"type":"INSERT","lineNumber":646,"content":"                }"},{"type":"INSERT","lineNumber":647,"content":"                "},{"type":"DELETE","lineNumber":648,"oldContent":"                }"},{"type":"DELETE","lineNumber":650,"oldContent":"                "},{"type":"INSERT","lineNumber":705,"content":"    }"},{"type":"INSERT","lineNumber":706,"content":"    "},{"type":"INSERT","lineNumber":707,"content":"    /**"},{"type":"INSERT","lineNumber":708,"content":"     * Gibt den aktuellen Startpunkt zurück"},{"type":"INSERT","lineNumber":709,"content":"     */"},{"type":"INSERT","lineNumber":710,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":711,"content":"        return _currentRoute.value?.route?.path?.firstOrNull()?.xmlName ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":712,"content":"    }"},{"type":"INSERT","lineNumber":713,"content":"    "},{"type":"INSERT","lineNumber":714,"content":"    /**"},{"type":"INSERT","lineNumber":715,"content":"     * Gibt den aktuellen Endpunkt zurück"},{"type":"INSERT","lineNumber":716,"content":"     */"},{"type":"INSERT","lineNumber":717,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":718,"content":"        return _currentRoute.value?.route?.path?.lastOrNull()?.xmlName ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":719,"content":"    }"},{"type":"INSERT","lineNumber":720,"content":"    "},{"type":"INSERT","lineNumber":721,"content":"    /**"},{"type":"INSERT","lineNumber":722,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":723,"content":"     */"},{"type":"INSERT","lineNumber":724,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":725,"content":"        return try {"},{"type":"INSERT","lineNumber":726,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":727,"content":"            "},{"type":"INSERT","lineNumber":728,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":729,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":730,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":731,"content":"                    routePart.landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":732,"content":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":733,"content":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":734,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":735,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":736,"content":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":737,"content":"                                name = landmarkName,"},{"type":"INSERT","lineNumber":738,"content":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"INSERT","lineNumber":739,"content":"                                position = Position("},{"type":"INSERT","lineNumber":740,"content":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":707,"oldContent":"    }"},{"type":"DELETE","lineNumber":710,"oldContent":"    "},{"type":"DELETE","lineNumber":712,"oldContent":"    /**"},{"type":"DELETE","lineNumber":715,"oldContent":"     * Gibt den aktuellen Startpunkt zurück"},{"type":"DELETE","lineNumber":718,"oldContent":"     */"},{"type":"DELETE","lineNumber":720,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":723,"oldContent":"        return _currentRoute.value?.route?.path?.firstOrNull()?.xmlName ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":725,"oldContent":"    }"},{"type":"DELETE","lineNumber":728,"oldContent":"    "},{"type":"DELETE","lineNumber":731,"oldContent":"    /**"},{"type":"DELETE","lineNumber":734,"oldContent":"     * Gibt den aktuellen Endpunkt zurück"},{"type":"DELETE","lineNumber":736,"oldContent":"     */"},{"type":"DELETE","lineNumber":739,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":742,"oldContent":"        return _currentRoute.value?.route?.path?.lastOrNull()?.xmlName ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":744,"oldContent":"    }"},{"type":"DELETE","lineNumber":747,"oldContent":"    "},{"type":"DELETE","lineNumber":750,"oldContent":"    /**"},{"type":"DELETE","lineNumber":752,"oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":755,"oldContent":"     */"},{"type":"DELETE","lineNumber":758,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":760,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":763,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":766,"oldContent":"            "},{"type":"DELETE","lineNumber":768,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":771,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":773,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":784,"content":"    /**"},{"type":"DELETE","lineNumber":775,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":778,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":781,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":783,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":786,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":789,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":791,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":794,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":797,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":799,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":801,"oldContent":"    /**"},{"type":"INSERT","lineNumber":924,"content":"        }"},{"type":"INSERT","lineNumber":925,"content":"    }"}]},{"timestamp":1754318174722,"changes":[{"type":"INSERT","lineNumber":16,"content":"import com.example.arwalking.storage.CleanupSummary"},{"type":"INSERT","lineNumber":43,"content":"    "},{"type":"DELETE","lineNumber":44,"oldContent":"    "},{"type":"INSERT","lineNumber":120,"content":"            Log.d(TAG, \"  - Landmarks: ${step.landmarks.size}\")"},{"type":"DELETE","lineNumber":120,"oldContent":"        }"},{"type":"INSERT","lineNumber":152,"content":"                )"},{"type":"DELETE","lineNumber":152,"oldContent":"            }"},{"type":"INSERT","lineNumber":155,"content":"        "},{"type":"DELETE","lineNumber":155,"oldContent":"        return NavigationRoute("},{"type":"DELETE","lineNumber":167,"oldContent":"    fun initializeStorage(context: Context) {"},{"type":"DELETE","lineNumber":169,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":171,"content":"    fun initializeStorage(context: Context) {"},{"type":"INSERT","lineNumber":172,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":174,"oldContent":"                // Neues Storage-System initialisieren"},{"type":"INSERT","lineNumber":176,"content":"                // Neues Storage-System initialisieren"},{"type":"DELETE","lineNumber":209,"oldContent":"                "},{"type":"INSERT","lineNumber":211,"content":"                "},{"type":"DELETE","lineNumber":220,"oldContent":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"INSERT","lineNumber":222,"content":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"INSERT","lineNumber":223,"content":"                "},{"type":"INSERT","lineNumber":224,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":225,"content":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"DELETE","lineNumber":224,"oldContent":"                Log.i(TAG, \"Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"DELETE","lineNumber":226,"oldContent":"                "},{"type":"DELETE","lineNumber":229,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":333,"content":"                        true"},{"type":"DELETE","lineNumber":333,"oldContent":"                    }"},{"type":"INSERT","lineNumber":341,"content":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":342,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"INSERT","lineNumber":355,"content":"     */"},{"type":"DELETE","lineNumber":355,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":366,"oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"DELETE","lineNumber":367,"oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"INSERT","lineNumber":369,"content":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"INSERT","lineNumber":370,"content":"                "},{"type":"DELETE","lineNumber":457,"oldContent":"     */"},{"type":"INSERT","lineNumber":461,"content":"     * Setzt den aktuellen Navigationsschritt"},{"type":"DELETE","lineNumber":484,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":485,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":486,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":485,"content":"        }"},{"type":"INSERT","lineNumber":486,"content":"    }"},{"type":"INSERT","lineNumber":487,"content":"    "},{"type":"INSERT","lineNumber":498,"content":"    /**"},{"type":"DELETE","lineNumber":498,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":514,"oldContent":"                "},{"type":"DELETE","lineNumber":516,"oldContent":"                if (result is SaveResult.Success) {"},{"type":"INSERT","lineNumber":517,"content":"                "},{"type":"INSERT","lineNumber":518,"content":"                if (result is SaveResult.Success) {"},{"type":"INSERT","lineNumber":566,"content":"                return result is SaveResult.Success"},{"type":"DELETE","lineNumber":566,"oldContent":"                "},{"type":"DELETE","lineNumber":569,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":571,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":572,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":573,"content":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":632,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":632,"oldContent":"            }"},{"type":"DELETE","lineNumber":637,"oldContent":"     */"},{"type":"INSERT","lineNumber":639,"content":"     */"},{"type":"INSERT","lineNumber":640,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":641,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":647,"oldContent":"                // Führe echtes Feature-Matching durch"},{"type":"INSERT","lineNumber":649,"content":"                // Führe echtes Feature-Matching durch"},{"type":"DELETE","lineNumber":706,"oldContent":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":708,"oldContent":"                                    0.0"},{"type":"DELETE","lineNumber":711,"oldContent":"                                ),"},{"type":"DELETE","lineNumber":713,"oldContent":"                                imageUrl = \"\","},{"type":"DELETE","lineNumber":716,"oldContent":"                                confidence = 1.0f"},{"type":"DELETE","lineNumber":719,"oldContent":"                            )"},{"type":"DELETE","lineNumber":721,"oldContent":"                        )"},{"type":"DELETE","lineNumber":724,"oldContent":"                    }"},{"type":"DELETE","lineNumber":726,"oldContent":"                }"},{"type":"DELETE","lineNumber":729,"oldContent":"            }"},{"type":"DELETE","lineNumber":732,"oldContent":"            "},{"type":"DELETE","lineNumber":734,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":737,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":740,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":742,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":745,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":747,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":750,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":752,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":755,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":758,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":760,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":742,"content":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":743,"content":"                                    0.0"},{"type":"INSERT","lineNumber":744,"content":"                                ),"},{"type":"INSERT","lineNumber":745,"content":"                                imageUrl = \"\","},{"type":"INSERT","lineNumber":746,"content":"                                confidence = 1.0f"},{"type":"INSERT","lineNumber":747,"content":"                            )"},{"type":"INSERT","lineNumber":748,"content":"                        )"},{"type":"INSERT","lineNumber":749,"content":"                    }"},{"type":"INSERT","lineNumber":750,"content":"                }"},{"type":"INSERT","lineNumber":751,"content":"            }"},{"type":"INSERT","lineNumber":752,"content":"            "},{"type":"INSERT","lineNumber":753,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":754,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":755,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":756,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":757,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":758,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":759,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":760,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":761,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":762,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":763,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":785,"content":"    /**"},{"type":"DELETE","lineNumber":790,"oldContent":"    /**"},{"type":"DELETE","lineNumber":925,"oldContent":"}"},{"type":"INSERT","lineNumber":927,"content":"}"}]},{"timestamp":1754318635954,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"// RouteViewModel.kt (erweitert)"},{"type":"INSERT","lineNumber":1,"content":""},{"type":"MODIFY","lineNumber":25,"content":"    ","oldContent":"    private var featureMapManager: FeatureMapManager? = null"},{"type":"MODIFY","lineNumber":44,"content":"    // State für geladene Route aus JSON","oldContent":"    // State für geladene Route aus JSON"},{"type":"DELETE","lineNumber":91,"oldContent":"    }"},{"type":"DELETE","lineNumber":92,"oldContent":"    // Optional: Für Debugging - die alte Logging-Funktion angepasst"},{"type":"DELETE","lineNumber":93,"oldContent":"        Log.i(TAG, \"=== NAVIGATION ROUTE START ===\")"},{"type":"INSERT","lineNumber":91,"content":"                id = \"default_route\","},{"type":"INSERT","lineNumber":92,"content":"                name = \"Standard Route\","},{"type":"INSERT","lineNumber":93,"content":"                description = \"Lade Route...\","},{"type":"DELETE","lineNumber":95,"oldContent":"        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")"},{"type":"DELETE","lineNumber":96,"oldContent":"        Log.i(TAG, \"\")"},{"type":"DELETE","lineNumber":97,"oldContent":""},{"type":"INSERT","lineNumber":95,"content":"                steps = emptyList()"},{"type":"INSERT","lineNumber":96,"content":"            )"},{"type":"INSERT","lineNumber":97,"content":"            "},{"type":"MODIFY","lineNumber":121,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":153,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":156,"content":"        return NavigationRoute(","oldContent":"        return NavigationRoute("},{"type":"MODIFY","lineNumber":171,"content":"    fun initializeStorage(context: Context) {","oldContent":"    fun initializeStorage(context: Context) {"},{"type":"DELETE","lineNumber":223,"oldContent":"                _isFeatureMappingEnabled.value = false"},{"type":"DELETE","lineNumber":225,"oldContent":"            }"},{"type":"INSERT","lineNumber":226,"content":"                _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":227,"content":"            }"},{"type":"MODIFY","lineNumber":334,"content":"                    }","oldContent":"                    }"},{"type":"MODIFY","lineNumber":342,"content":"                false","oldContent":"                false"},{"type":"MODIFY","lineNumber":356,"content":"    fun enableStorageSystemImmediately(context: Context) {","oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"MODIFY","lineNumber":369,"content":"                Log.i(TAG, \"Storage-System sofort aktiviert\")","oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"MODIFY","lineNumber":402,"content":"    ","oldContent":"        super.onCleared()"},{"type":"MODIFY","lineNumber":484,"content":"            Log.d(TAG, \"Vorheriger Navigationsschritt: ${currentStep - 1}\")","oldContent":"     */"},{"type":"DELETE","lineNumber":489,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":490,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":491,"oldContent":"        name: String,"},{"type":"DELETE","lineNumber":492,"oldContent":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":489,"content":"     * Konvertiert Bitmap zu Base64 String"},{"type":"INSERT","lineNumber":490,"content":"     */"},{"type":"INSERT","lineNumber":491,"content":"    private fun bitmapToBase64(bitmap: Bitmap): String {"},{"type":"INSERT","lineNumber":492,"content":"        val byteArrayOutputStream = ByteArrayOutputStream()"},{"type":"MODIFY","lineNumber":495,"content":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)","oldContent":"            }"},{"type":"MODIFY","lineNumber":499,"content":"     * Erstellt einen neuen Landmark (vereinfacht)","oldContent":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"DELETE","lineNumber":508,"oldContent":"            if (storageManager != null && featureMatchingEngine != null && landmarkFeatureStorage != null) {"},{"type":"DELETE","lineNumber":509,"oldContent":"                // Speichere im alten Storage-System"},{"type":"INSERT","lineNumber":508,"content":"            Log.d(TAG, \"createLandmark called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":509,"content":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":516,"oldContent":"                "},{"type":"DELETE","lineNumber":518,"oldContent":"                if (result is SaveResult.Success) {"},{"type":"DELETE","lineNumber":519,"oldContent":"                    // Extrahiere Features für das neue Landmark"},{"type":"DELETE","lineNumber":520,"oldContent":"                    val features = featureMatchingEngine!!.extractFeatures(bitmap)"},{"type":"DELETE","lineNumber":521,"oldContent":"                    "},{"type":"DELETE","lineNumber":522,"oldContent":"                    if (features != null) {"},{"type":"DELETE","lineNumber":523,"oldContent":"                        // Erstelle FeatureLandmark"},{"type":"DELETE","lineNumber":524,"oldContent":"                        val landmark = FeatureLandmark("},{"type":"DELETE","lineNumber":525,"oldContent":"                            id = landmarkId,"},{"type":"DELETE","lineNumber":526,"oldContent":"                            name = name,"},{"type":"DELETE","lineNumber":527,"oldContent":"                            description = description,"},{"type":"DELETE","lineNumber":528,"oldContent":"                            position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":529,"oldContent":"                            imageUrl = \"\","},{"type":"DELETE","lineNumber":530,"oldContent":"                            localImagePath = \"$landmarkId.jpg\","},{"type":"DELETE","lineNumber":531,"oldContent":"                            featureDescriptors = features.descriptors,"},{"type":"DELETE","lineNumber":532,"oldContent":"                            keypoints = features.keypoints.map { kp ->"},{"type":"DELETE","lineNumber":533,"oldContent":"                                KeypointData("},{"type":"DELETE","lineNumber":534,"oldContent":"                                    x = kp.x,"},{"type":"DELETE","lineNumber":535,"oldContent":"                                    y = kp.y,"},{"type":"DELETE","lineNumber":536,"oldContent":"                                    angle = kp.angle,"},{"type":"DELETE","lineNumber":537,"oldContent":"                                    response = kp.response,"},{"type":"DELETE","lineNumber":538,"oldContent":"                                    octave = kp.octave,"},{"type":"DELETE","lineNumber":539,"oldContent":"                                    classId = kp.classId"},{"type":"DELETE","lineNumber":540,"oldContent":"                                )"},{"type":"DELETE","lineNumber":541,"oldContent":"                            }"},{"type":"DELETE","lineNumber":542,"oldContent":"                        )"},{"type":"DELETE","lineNumber":543,"oldContent":"                        "},{"type":"DELETE","lineNumber":544,"oldContent":"                        // Speichere Features"},{"type":"DELETE","lineNumber":545,"oldContent":"                        val featureSaved = landmarkFeatureStorage!!.saveLandmarkFeatures("},{"type":"DELETE","lineNumber":546,"oldContent":"                            landmarkId, landmark, features, bitmap"},{"type":"DELETE","lineNumber":547,"oldContent":"                        )"},{"type":"DELETE","lineNumber":548,"oldContent":"                        "},{"type":"DELETE","lineNumber":549,"oldContent":"                        if (featureSaved) {"},{"type":"DELETE","lineNumber":550,"oldContent":"                            // Füge zu verarbeiteten Landmarks hinzu"},{"type":"DELETE","lineNumber":551,"oldContent":"                            val processedLandmark = featureMatchingEngine!!.processLandmarkFeatures("},{"type":"DELETE","lineNumber":552,"oldContent":"                                landmark, features, bitmap"},{"type":"DELETE","lineNumber":553,"oldContent":"                            )"},{"type":"DELETE","lineNumber":554,"oldContent":"                            "},{"type":"DELETE","lineNumber":555,"oldContent":"                            if (processedLandmark != null) {"},{"type":"DELETE","lineNumber":556,"oldContent":"                                processedLandmarks.add(processedLandmark)"},{"type":"DELETE","lineNumber":557,"oldContent":"                                Log.i(TAG, \"Neuer Landmark mit Features erstellt: $landmarkId (${features.keypoints.size} Features)\")"},{"type":"DELETE","lineNumber":558,"oldContent":"                                return true"},{"type":"DELETE","lineNumber":559,"oldContent":"                            }"},{"type":"DELETE","lineNumber":560,"oldContent":"                        }"},{"type":"DELETE","lineNumber":561,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":562,"oldContent":"                        Log.w(TAG, \"Keine Features aus Bild extrahiert für: $landmarkId\")"},{"type":"DELETE","lineNumber":563,"oldContent":"                    }"},{"type":"DELETE","lineNumber":564,"oldContent":"                }"},{"type":"DELETE","lineNumber":565,"oldContent":"                "},{"type":"DELETE","lineNumber":566,"oldContent":"                "},{"type":"DELETE","lineNumber":567,"oldContent":"                return result is SaveResult.Success"},{"type":"INSERT","lineNumber":517,"content":"                result is SaveResult.Success"},{"type":"DELETE","lineNumber":569,"oldContent":"                Log.w(TAG, \"Feature-Matching System nicht verfügbar\")"},{"type":"DELETE","lineNumber":571,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":521,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":632,"oldContent":"            }"},{"type":"INSERT","lineNumber":582,"content":"            }"},{"type":"DELETE","lineNumber":640,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":590,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":678,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":679,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":680,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":681,"content":"                    routePart.landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":682,"content":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":683,"content":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":684,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":685,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":686,"content":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":687,"content":"                                name = landmarkName,"},{"type":"INSERT","lineNumber":688,"content":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"INSERT","lineNumber":689,"content":"                                position = Position("},{"type":"INSERT","lineNumber":690,"content":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":731,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":733,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":736,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":739,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":741,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":744,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":747,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":749,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":752,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":754,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":757,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":760,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":762,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":785,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":735,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":923,"oldContent":"}"},{"type":"DELETE","lineNumber":924,"oldContent":"    }"},{"type":"INSERT","lineNumber":872,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":873,"content":"            }"},{"type":"INSERT","lineNumber":875,"content":"    }"},{"type":"INSERT","lineNumber":876,"content":"}"}]},{"timestamp":1754318674048,"changes":[{"type":"MODIFY","lineNumber":1,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":23,"content":" */","oldContent":"    private val TAG = \"RouteViewModel\""},{"type":"INSERT","lineNumber":43,"content":"    "},{"type":"DELETE","lineNumber":44,"oldContent":"    // State für geladene Route aus JSON"},{"type":"DELETE","lineNumber":86,"oldContent":"            steps = steps"},{"type":"MODIFY","lineNumber":86,"content":"                }","oldContent":"    }"},{"type":"INSERT","lineNumber":87,"content":"            }"},{"type":"INSERT","lineNumber":120,"content":"            Log.d(TAG, \"  - Landmarks: ${step.landmarks.size}\")"},{"type":"DELETE","lineNumber":121,"oldContent":"        }"},{"type":"INSERT","lineNumber":152,"content":"                )"},{"type":"DELETE","lineNumber":153,"oldContent":"            }"},{"type":"INSERT","lineNumber":155,"content":"        "},{"type":"DELETE","lineNumber":156,"oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":170,"content":"     */"},{"type":"DELETE","lineNumber":171,"oldContent":"    fun initializeStorage(context: Context) {"},{"type":"DELETE","lineNumber":224,"oldContent":"                _isFeatureMappingEnabled.value = false"},{"type":"MODIFY","lineNumber":226,"content":"                _isFeatureMappingEnabled.value = false","oldContent":"            }"},{"type":"INSERT","lineNumber":227,"content":"            }"},{"type":"INSERT","lineNumber":333,"content":"                        true"},{"type":"DELETE","lineNumber":334,"oldContent":"                    }"},{"type":"INSERT","lineNumber":341,"content":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":342,"oldContent":"                false"},{"type":"INSERT","lineNumber":355,"content":"     */"},{"type":"DELETE","lineNumber":356,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":368,"content":"                _isFeatureMappingEnabled.value = true"},{"type":"DELETE","lineNumber":369,"oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"MODIFY","lineNumber":395,"content":"    ","oldContent":"        super.onCleared()"},{"type":"MODIFY","lineNumber":403,"content":"    /**","oldContent":"     */"},{"type":"DELETE","lineNumber":462,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":463,"oldContent":"        name: String,"},{"type":"DELETE","lineNumber":464,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":465,"oldContent":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"INSERT","lineNumber":462,"content":"     */"},{"type":"INSERT","lineNumber":463,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":464,"content":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":465,"content":"        Log.d(TAG, \"Navigationsschritt gesetzt: $step\")"},{"type":"DELETE","lineNumber":469,"oldContent":"        Log.d(TAG, \"Nächster Navigationsschritt: ${currentStep + 1}\")"},{"type":"DELETE","lineNumber":470,"oldContent":"            }"},{"type":"DELETE","lineNumber":471,"oldContent":"            try {"},{"type":"INSERT","lineNumber":469,"content":"     * Geht zum nächsten Navigationsschritt"},{"type":"INSERT","lineNumber":470,"content":"     */"},{"type":"INSERT","lineNumber":471,"content":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":473,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":474,"oldContent":"    "},{"type":"INSERT","lineNumber":473,"content":"        _currentNavigationStep.value = currentStep + 1"},{"type":"INSERT","lineNumber":474,"content":"        Log.d(TAG, \"Nächster Navigationsschritt: ${currentStep + 1}\")"},{"type":"MODIFY","lineNumber":494,"content":"        val byteArray = byteArrayOutputStream.toByteArray()","oldContent":"}"},{"type":"MODIFY","lineNumber":498,"content":"    /**","oldContent":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"MODIFY","lineNumber":501,"content":"    suspend fun createLandmark(","oldContent":"            } else {"},{"type":"DELETE","lineNumber":516,"oldContent":"                result is SaveResult.Success"},{"type":"DELETE","lineNumber":518,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":517,"content":"                result is SaveResult.Success"},{"type":"INSERT","lineNumber":521,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":531,"oldContent":"            }"},{"type":"DELETE","lineNumber":536,"oldContent":"                // Versuche echte Route zu laden falls verfügbar"},{"type":"DELETE","lineNumber":537,"oldContent":"                val realRoute = routeRepository?.loadRoute(building, floor.toString(), \"\")"},{"type":"DELETE","lineNumber":538,"oldContent":"                if (realRoute != null) {"},{"type":"DELETE","lineNumber":539,"oldContent":"                    _currentRoute.value = realRoute"},{"type":"DELETE","lineNumber":540,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":541,"oldContent":"                    reloadLandmarksForRoute(realRoute.route)"},{"type":"DELETE","lineNumber":542,"oldContent":"                    Log.i(TAG, \"Echte Route geladen und Landmarks aktualisiert\")"},{"type":"DELETE","lineNumber":543,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":544,"oldContent":"                }"},{"type":"INSERT","lineNumber":535,"content":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"INSERT","lineNumber":536,"content":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"INSERT","lineNumber":576,"content":"            }"},{"type":"INSERT","lineNumber":584,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":627,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":629,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":631,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":633,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":635,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":637,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":639,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":641,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":643,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":645,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":647,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":649,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":651,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":672,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":673,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":674,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":675,"content":"                    routePart.landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":676,"content":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":677,"content":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":678,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":679,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":680,"content":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":681,"content":"                                name = landmarkName,"},{"type":"INSERT","lineNumber":682,"content":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"INSERT","lineNumber":683,"content":"                                position = Position("},{"type":"INSERT","lineNumber":684,"content":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":695,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":729,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":821,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":823,"oldContent":"            }"},{"type":"DELETE","lineNumber":826,"oldContent":"    }"},{"type":"DELETE","lineNumber":828,"oldContent":"}"},{"type":"DELETE","lineNumber":869,"oldContent":"}"},{"type":"DELETE","lineNumber":870,"oldContent":"    }"},{"type":"INSERT","lineNumber":859,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":860,"content":"                "},{"type":"INSERT","lineNumber":861,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":862,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":863,"content":"                "},{"type":"INSERT","lineNumber":864,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":865,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":866,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":867,"content":"            }"},{"type":"INSERT","lineNumber":869,"content":"    }"}]},{"timestamp":1754318691349,"changes":[{"type":"INSERT","lineNumber":0,"content":"package com.example.arwalking"},{"type":"DELETE","lineNumber":1,"oldContent":""},{"type":"DELETE","lineNumber":9,"oldContent":"import kotlinx.coroutines.launch"},{"type":"MODIFY","lineNumber":10,"content":"import kotlinx.coroutines.launch","oldContent":"import kotlinx.coroutines.flow.MutableStateFlow"},{"type":"INSERT","lineNumber":11,"content":"import kotlinx.coroutines.delay"},{"type":"MODIFY","lineNumber":33,"content":"    ","oldContent":"    private val _isFeatureMappingEnabled = MutableStateFlow(false)"},{"type":"MODIFY","lineNumber":60,"content":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()","oldContent":"    }"},{"type":"DELETE","lineNumber":82,"oldContent":"        }"},{"type":"MODIFY","lineNumber":82,"content":"                    val navigationRoute = convertToNavigationRoute(routeData)","oldContent":"        return NavigationRoute("},{"type":"INSERT","lineNumber":83,"content":"                    Log.i(TAG, \"Route konvertiert: ${navigationRoute.steps.size} Schritte\")"},{"type":"MODIFY","lineNumber":85,"content":"                    Log.w(TAG, \"Keine Route in JSON-Datei gefunden\")","oldContent":"            steps = steps"},{"type":"MODIFY","lineNumber":87,"content":"            }","oldContent":"    }"},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":90,"oldContent":"    fun logNavigationRoute(navigationRoute: NavigationRoute) {"},{"type":"INSERT","lineNumber":89,"content":"            // Erstelle eine Standard-Route für sofortige Rückgabe"},{"type":"INSERT","lineNumber":90,"content":"            NavigationRoute("},{"type":"INSERT","lineNumber":225,"content":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"DELETE","lineNumber":227,"oldContent":"                Log.e(TAG, \"Fehler bei Storage-Initialisierung: ${e.message}\")"},{"type":"DELETE","lineNumber":253,"oldContent":"    }"},{"type":"DELETE","lineNumber":254,"oldContent":"            }"},{"type":"DELETE","lineNumber":255,"oldContent":"    fun getPerformanceInfo(): String {"},{"type":"INSERT","lineNumber":253,"content":"                }"},{"type":"INSERT","lineNumber":254,"content":"                "},{"type":"INSERT","lineNumber":255,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":258,"content":"        }"},{"type":"INSERT","lineNumber":259,"content":"    }"},{"type":"DELETE","lineNumber":260,"oldContent":"        return scalableUploadManager?.uploadImageScalable("},{"type":"DELETE","lineNumber":261,"oldContent":"                _isFeatureMappingEnabled.value = true"},{"type":"MODIFY","lineNumber":263,"content":"     */","oldContent":"    }"},{"type":"DELETE","lineNumber":467,"oldContent":"}"},{"type":"DELETE","lineNumber":468,"oldContent":"    }"},{"type":"INSERT","lineNumber":467,"content":"    "},{"type":"INSERT","lineNumber":468,"content":"    /**"},{"type":"MODIFY","lineNumber":488,"content":"    /**","oldContent":"}"},{"type":"MODIFY","lineNumber":493,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)","oldContent":"        super.onCleared()"},{"type":"MODIFY","lineNumber":517,"content":"                result is SaveResult.Success","oldContent":"                result is SaveResult.Success"},{"type":"MODIFY","lineNumber":521,"content":"        } catch (e: Exception) {","oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":535,"content":"                // Stub - echte Route laden würde hier implementiert werden","oldContent":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"DELETE","lineNumber":568,"oldContent":"            }"},{"type":"DELETE","lineNumber":577,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":576,"content":"            }"},{"type":"MODIFY","lineNumber":581,"content":"     * Verarbeitet einen Kamera-Frame (vereinfacht)","oldContent":"     * Verarbeitet einen Kamera-Frame für robustes Feature-Matching mit RANSAC"},{"type":"INSERT","lineNumber":584,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":586,"oldContent":"                if (featureMatchingEngine == null || processedLandmarks.isEmpty()) {"},{"type":"DELETE","lineNumber":587,"oldContent":"                    Log.d(TAG, \"Feature-Matching System nicht bereit\")"},{"type":"DELETE","lineNumber":588,"oldContent":"                    _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":589,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":590,"oldContent":"                }"},{"type":"DELETE","lineNumber":591,"oldContent":"                "},{"type":"DELETE","lineNumber":592,"oldContent":"                // Führe echtes Feature-Matching durch"},{"type":"DELETE","lineNumber":593,"oldContent":"                val matches = featureMatchingEngine!!.matchFeatures(frame, processedLandmarks)"},{"type":"DELETE","lineNumber":594,"oldContent":"                "},{"type":"DELETE","lineNumber":595,"oldContent":"                // Aktualisiere AR-Tracking System"},{"type":"DELETE","lineNumber":596,"oldContent":"                val trackedLandmarks = arTrackingSystem?.updateTracking(matches) ?: emptyList()"},{"type":"DELETE","lineNumber":597,"oldContent":"                "},{"type":"DELETE","lineNumber":598,"oldContent":"                // Konvertiere TrackedLandmarks zurück zu FeatureMatchResults für UI-Kompatibilität"},{"type":"DELETE","lineNumber":599,"oldContent":"                val featureMatchResults = trackedLandmarks.map { tracked ->"},{"type":"DELETE","lineNumber":600,"oldContent":"                    FeatureMatchResult("},{"type":"DELETE","lineNumber":601,"oldContent":"                        landmark = tracked.landmark,"},{"type":"DELETE","lineNumber":602,"oldContent":"                        matchCount = tracked.frameCount,"},{"type":"DELETE","lineNumber":603,"oldContent":"                        confidence = tracked.confidence,"},{"type":"DELETE","lineNumber":604,"oldContent":"                        distance = null,"},{"type":"DELETE","lineNumber":605,"oldContent":"                        angle = null,"},{"type":"DELETE","lineNumber":606,"oldContent":"                        screenPosition = tracked.position"},{"type":"DELETE","lineNumber":607,"oldContent":"                    )"},{"type":"DELETE","lineNumber":608,"oldContent":"                }"},{"type":"DELETE","lineNumber":609,"oldContent":"                "},{"type":"DELETE","lineNumber":610,"oldContent":"                _currentMatches.value = featureMatchResults"},{"type":"DELETE","lineNumber":611,"oldContent":"                "},{"type":"DELETE","lineNumber":612,"oldContent":"                if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":613,"oldContent":"                    Log.d(TAG, \"Feature-Matching: ${matches.size} rohe Matches, ${trackedLandmarks.size} getrackte Landmarks\")"},{"type":"DELETE","lineNumber":614,"oldContent":"                    "},{"type":"DELETE","lineNumber":615,"oldContent":"                    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":616,"oldContent":"                    if (bestMatch != null) {"},{"type":"DELETE","lineNumber":617,"oldContent":"                        Log.d(TAG, \"Bestes Match: ${bestMatch.landmark.name} (${(bestMatch.confidence * 100).toInt()}%, ${bestMatch.matchCount} Features)\")"},{"type":"DELETE","lineNumber":618,"oldContent":"                    }"},{"type":"DELETE","lineNumber":619,"oldContent":"                    "},{"type":"DELETE","lineNumber":620,"oldContent":"                    // Logge Tracking-Qualität"},{"type":"DELETE","lineNumber":621,"oldContent":"                    val stableTracked = trackedLandmarks.filter { it.isStable }"},{"type":"DELETE","lineNumber":622,"oldContent":"                    if (stableTracked.isNotEmpty()) {"},{"type":"DELETE","lineNumber":623,"oldContent":"                        Log.d(TAG, \"Stabile Tracks: ${stableTracked.size}, beste Qualität: ${(stableTracked.maxOf { it.trackingQuality } * 100).toInt()}%\")"},{"type":"DELETE","lineNumber":624,"oldContent":"                    }"},{"type":"DELETE","lineNumber":625,"oldContent":"                }"},{"type":"DELETE","lineNumber":626,"oldContent":"                "},{"type":"INSERT","lineNumber":586,"content":"                Log.d(TAG, \"processFrameForFeatureMatching called (stub)\")"},{"type":"INSERT","lineNumber":587,"content":"                // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":588,"content":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":653,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":655,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":657,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":659,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":661,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":663,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":665,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":667,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":669,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":671,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":673,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":675,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":677,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":634,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":635,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":636,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":637,"content":"                    routePart.landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":638,"content":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":639,"content":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":640,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":641,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":642,"content":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":643,"content":"                                name = landmarkName,"},{"type":"INSERT","lineNumber":644,"content":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"INSERT","lineNumber":645,"content":"                                position = Position("},{"type":"INSERT","lineNumber":646,"content":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":722,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":691,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":849,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":851,"oldContent":"                "},{"type":"DELETE","lineNumber":853,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":814,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":815,"content":"     */"},{"type":"INSERT","lineNumber":816,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":817,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":818,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":819,"content":"            try {"},{"type":"INSERT","lineNumber":820,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":821,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":822,"content":"                "},{"type":"INSERT","lineNumber":823,"content":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":856,"oldContent":"}"},{"type":"DELETE","lineNumber":858,"oldContent":"    }"},{"type":"DELETE","lineNumber":860,"oldContent":"        }"},{"type":"DELETE","lineNumber":862,"oldContent":"}"},{"type":"DELETE","lineNumber":864,"oldContent":"    }"},{"type":"INSERT","lineNumber":830,"content":"        }"},{"type":"INSERT","lineNumber":831,"content":"    }"},{"type":"INSERT","lineNumber":832,"content":"}"}]},{"timestamp":1754318716876,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import kotlinx.coroutines.flow.StateFlow","oldContent":"import com.google.gson.Gson"},{"type":"INSERT","lineNumber":9,"content":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"DELETE","lineNumber":11,"oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":"    "},{"type":"INSERT","lineNumber":21,"content":" * ViewModel für Route-Management und Feature-Mapping"},{"type":"INSERT","lineNumber":22,"content":" * Verwendet das neue Storage-System - kein Trainingsmodus erforderlich!"},{"type":"DELETE","lineNumber":28,"oldContent":"    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)"},{"type":"DELETE","lineNumber":29,"oldContent":"    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()"},{"type":"INSERT","lineNumber":28,"content":"    // Neues Storage-System (ersetzt LocalFeatureMapManager)"},{"type":"INSERT","lineNumber":29,"content":"    private var storageManager: ArWalkingStorageManager? = null"},{"type":"MODIFY","lineNumber":83,"content":"                    Log.i(TAG, \"Route konvertiert: ${navigationRoute.steps.size} Schritte\")","oldContent":"        return NavigationRoute("},{"type":"DELETE","lineNumber":259,"oldContent":"    /**"},{"type":"DELETE","lineNumber":261,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"INSERT","lineNumber":260,"content":"    "},{"type":"INSERT","lineNumber":261,"content":"    /**"},{"type":"DELETE","lineNumber":451,"oldContent":"}"},{"type":"DELETE","lineNumber":452,"oldContent":"    }"},{"type":"DELETE","lineNumber":453,"oldContent":"                localFeatureMapManager?.destroy()"},{"type":"INSERT","lineNumber":451,"content":"                    Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"INSERT","lineNumber":452,"content":"                }"},{"type":"INSERT","lineNumber":453,"content":"                "},{"type":"INSERT","lineNumber":516,"content":"                )"},{"type":"DELETE","lineNumber":517,"oldContent":"                result is SaveResult.Success"},{"type":"INSERT","lineNumber":520,"content":"            }"},{"type":"DELETE","lineNumber":521,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":534,"content":"                "},{"type":"DELETE","lineNumber":535,"oldContent":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"MODIFY","lineNumber":576,"content":"            }","oldContent":"            }"},{"type":"INSERT","lineNumber":580,"content":"    /**"},{"type":"DELETE","lineNumber":581,"oldContent":"     * Verarbeitet einen Kamera-Frame für robustes Feature-Matching mit RANSAC"},{"type":"MODIFY","lineNumber":584,"content":"        viewModelScope.launch {","oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":596,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":598,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":600,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":602,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":604,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":606,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":608,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":610,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":612,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":614,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":616,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":618,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":620,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":634,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":635,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":636,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":637,"content":"                    routePart.landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":638,"content":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":639,"content":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":640,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":641,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":642,"content":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":643,"content":"                                name = landmarkName,"},{"type":"INSERT","lineNumber":644,"content":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"INSERT","lineNumber":645,"content":"                                position = Position("},{"type":"INSERT","lineNumber":646,"content":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":653,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":691,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":776,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":778,"oldContent":"     */"},{"type":"DELETE","lineNumber":780,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":782,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":784,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":786,"oldContent":"            try {"},{"type":"DELETE","lineNumber":788,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":790,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":792,"oldContent":"                "},{"type":"DELETE","lineNumber":794,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":802,"oldContent":"        }"},{"type":"DELETE","lineNumber":803,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":804,"oldContent":"    }"},{"type":"INSERT","lineNumber":792,"content":"    "},{"type":"DELETE","lineNumber":806,"oldContent":"}"},{"type":"DELETE","lineNumber":820,"oldContent":"}"},{"type":"DELETE","lineNumber":821,"oldContent":"    }"},{"type":"DELETE","lineNumber":822,"oldContent":"        }"},{"type":"DELETE","lineNumber":823,"oldContent":"}"},{"type":"DELETE","lineNumber":824,"oldContent":"    }"},{"type":"DELETE","lineNumber":825,"oldContent":"            }"},{"type":"DELETE","lineNumber":826,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":807,"content":"    "},{"type":"INSERT","lineNumber":808,"content":""},{"type":"INSERT","lineNumber":809,"content":""},{"type":"INSERT","lineNumber":810,"content":"    /**"},{"type":"INSERT","lineNumber":811,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":812,"content":"     */"},{"type":"INSERT","lineNumber":813,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":814,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":815,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":816,"content":"            try {"},{"type":"INSERT","lineNumber":817,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":818,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":819,"content":"                "},{"type":"INSERT","lineNumber":820,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":823,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":824,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":825,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":826,"content":"            }"},{"type":"INSERT","lineNumber":827,"content":"        }"},{"type":"INSERT","lineNumber":828,"content":"    }"},{"type":"INSERT","lineNumber":829,"content":"}"}]},{"timestamp":1754318892471,"changes":[{"type":"MODIFY","lineNumber":14,"content":"import com.example.arwalking.storage.ArWalkingStorageManager","oldContent":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"MODIFY","lineNumber":27,"content":"    ","oldContent":"    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)"},{"type":"MODIFY","lineNumber":81,"content":"                    // Konvertiere RouteData zu NavigationRoute für Feature-Mapping","oldContent":"        }"},{"type":"MODIFY","lineNumber":88,"content":"            ","oldContent":""},{"type":"DELETE","lineNumber":246,"oldContent":"        Log.d(TAG, \"Navigationsschritt gesetzt: $step\")"},{"type":"DELETE","lineNumber":247,"oldContent":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":248,"oldContent":"     */"},{"type":"DELETE","lineNumber":249,"oldContent":"     * Setzt den aktuellen Navigationsschritt"},{"type":"DELETE","lineNumber":250,"oldContent":"    fun getPerformanceInfo(): String {"},{"type":"DELETE","lineNumber":251,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"DELETE","lineNumber":252,"oldContent":"     */"},{"type":"INSERT","lineNumber":246,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"INSERT","lineNumber":247,"content":"                    landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":248,"content":"                        Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")"},{"type":"INSERT","lineNumber":249,"content":"                    }"},{"type":"INSERT","lineNumber":250,"content":"                } else {"},{"type":"INSERT","lineNumber":251,"content":"                    Log.w(TAG, \"Keine Landmark-Bilder im Projektverzeichnis gefunden\")"},{"type":"INSERT","lineNumber":252,"content":"                    Log.i(TAG, \"Tipp: Kopiere Bilder in /Users/florian/Documents/GitHub/ar-walking/landmark_images/\")"},{"type":"MODIFY","lineNumber":260,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":282,"oldContent":"        }"},{"type":"DELETE","lineNumber":283,"oldContent":"            null"},{"type":"DELETE","lineNumber":284,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":282,"content":"    }"},{"type":"INSERT","lineNumber":283,"content":"    "},{"type":"INSERT","lineNumber":284,"content":"    /**"},{"type":"DELETE","lineNumber":293,"oldContent":"            try {"},{"type":"DELETE","lineNumber":294,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":295,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":296,"oldContent":"     */"},{"type":"DELETE","lineNumber":297,"oldContent":"     * Erstellt einen neuen Landmark"},{"type":"DELETE","lineNumber":298,"oldContent":"    /**"},{"type":"DELETE","lineNumber":299,"oldContent":"    "},{"type":"DELETE","lineNumber":300,"oldContent":"        }"},{"type":"DELETE","lineNumber":301,"oldContent":"            Log.d(TAG, \"Vorheriger Navigationsschritt: ${currentStep - 1}\")"},{"type":"INSERT","lineNumber":293,"content":"            "},{"type":"INSERT","lineNumber":294,"content":"            val thumbnail = storageManager!!.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":295,"content":"            if (thumbnail != null) {"},{"type":"INSERT","lineNumber":296,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"INSERT","lineNumber":297,"content":"            } else {"},{"type":"INSERT","lineNumber":298,"content":"                Log.w(TAG, \"Landmark-Thumbnail nicht gefunden: $landmarkId\")"},{"type":"INSERT","lineNumber":299,"content":"            }"},{"type":"INSERT","lineNumber":300,"content":"            thumbnail"},{"type":"INSERT","lineNumber":301,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":354,"content":"    "},{"type":"DELETE","lineNumber":354,"oldContent":"     * Aktiviert Storage-System sofort"},{"type":"DELETE","lineNumber":355,"oldContent":"     */"},{"type":"DELETE","lineNumber":356,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":357,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":358,"oldContent":"            try {"},{"type":"DELETE","lineNumber":359,"oldContent":"                Log.i(TAG, \"Aktiviere Storage-System sofort...\")"},{"type":"DELETE","lineNumber":360,"oldContent":"                "},{"type":"DELETE","lineNumber":361,"oldContent":"                // Stelle sicher, dass Storage-System initialisiert ist"},{"type":"DELETE","lineNumber":362,"oldContent":"                if (storageManager == null) {"},{"type":"DELETE","lineNumber":363,"oldContent":"                    Log.w(TAG, \"Storage-Manager nicht initialisiert - initialisiere jetzt...\")"},{"type":"DELETE","lineNumber":364,"oldContent":"                    initializeStorage(context)"},{"type":"DELETE","lineNumber":365,"oldContent":"                    return@launch"},{"type":"DELETE","lineNumber":366,"oldContent":"                }"},{"type":"DELETE","lineNumber":367,"oldContent":"                "},{"type":"DELETE","lineNumber":368,"oldContent":"                _isFeatureMappingEnabled.value = true"},{"type":"DELETE","lineNumber":369,"oldContent":"                Log.i(TAG, \"Storage-System sofort aktiviert\")"},{"type":"DELETE","lineNumber":370,"oldContent":"                "},{"type":"DELETE","lineNumber":371,"oldContent":"                // Lade verfügbare Landmarks"},{"type":"DELETE","lineNumber":372,"oldContent":"                loadAvailableLandmarks(context)"},{"type":"DELETE","lineNumber":373,"oldContent":"                "},{"type":"DELETE","lineNumber":374,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":375,"oldContent":"                Log.e(TAG, \"Fehler beim sofortigen Aktivieren des Feature Mappings: ${e.message}\")"},{"type":"DELETE","lineNumber":376,"oldContent":"            }"},{"type":"DELETE","lineNumber":377,"oldContent":"        }"},{"type":"DELETE","lineNumber":378,"oldContent":"    }"},{"type":"DELETE","lineNumber":379,"oldContent":"    /**"},{"type":"DELETE","lineNumber":380,"oldContent":"    /**"},{"type":"DELETE","lineNumber":397,"oldContent":"    "},{"type":"INSERT","lineNumber":372,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":374,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":375,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":400,"oldContent":"        }"},{"type":"DELETE","lineNumber":401,"oldContent":"    }"},{"type":"DELETE","lineNumber":404,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":379,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":412,"oldContent":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":387,"content":"     */"},{"type":"DELETE","lineNumber":421,"oldContent":"     */"},{"type":"DELETE","lineNumber":422,"oldContent":"    /**"},{"type":"DELETE","lineNumber":423,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":424,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":396,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":397,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"INSERT","lineNumber":398,"content":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":399,"content":"        } else {"},{"type":"DELETE","lineNumber":442,"oldContent":"}"},{"type":"DELETE","lineNumber":443,"oldContent":"    }"},{"type":"DELETE","lineNumber":444,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":445,"oldContent":"                localFeatureMapManager?.destroy()"},{"type":"DELETE","lineNumber":446,"oldContent":"                scalableUploadManager?.shutdown()"},{"type":"DELETE","lineNumber":447,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":448,"oldContent":"    /**"},{"type":"DELETE","lineNumber":449,"oldContent":"            }"},{"type":"DELETE","lineNumber":450,"oldContent":"                false"},{"type":"INSERT","lineNumber":417,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":418,"content":"                "},{"type":"INSERT","lineNumber":419,"content":"                if (storageManager != null) {"},{"type":"INSERT","lineNumber":420,"content":"                    val landmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":421,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"INSERT","lineNumber":422,"content":"                    "},{"type":"INSERT","lineNumber":423,"content":"                    val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":424,"content":"                    Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":425,"content":"                } else {"},{"type":"DELETE","lineNumber":466,"oldContent":"}"},{"type":"INSERT","lineNumber":441,"content":"    }"},{"type":"DELETE","lineNumber":472,"oldContent":"     */"},{"type":"INSERT","lineNumber":447,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":550,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":576,"oldContent":"            }"},{"type":"INSERT","lineNumber":558,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":584,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":621,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":623,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":625,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":627,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":629,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":631,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":633,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":635,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":637,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":639,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":641,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":643,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":645,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":609,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":610,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":611,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":612,"content":"                    routePart.landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":613,"content":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":614,"content":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":615,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":616,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":617,"content":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":618,"content":"                                name = landmarkName,"},{"type":"INSERT","lineNumber":619,"content":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"INSERT","lineNumber":620,"content":"                                position = Position("},{"type":"INSERT","lineNumber":621,"content":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":690,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":666,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":784,"oldContent":"    "},{"type":"DELETE","lineNumber":793,"oldContent":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":768,"content":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":796,"oldContent":""},{"type":"DELETE","lineNumber":798,"oldContent":""},{"type":"DELETE","lineNumber":800,"oldContent":"    /**"},{"type":"DELETE","lineNumber":802,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":804,"oldContent":"     */"},{"type":"DELETE","lineNumber":806,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":808,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":810,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":778,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":779,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":780,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":781,"content":"    }"},{"type":"INSERT","lineNumber":782,"content":"    "},{"type":"INSERT","lineNumber":783,"content":""},{"type":"INSERT","lineNumber":784,"content":""},{"type":"INSERT","lineNumber":785,"content":"    /**"},{"type":"INSERT","lineNumber":786,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":787,"content":"     */"},{"type":"INSERT","lineNumber":788,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":789,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":790,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":813,"oldContent":"}"},{"type":"DELETE","lineNumber":815,"oldContent":"    }"},{"type":"DELETE","lineNumber":817,"oldContent":"        }"},{"type":"DELETE","lineNumber":819,"oldContent":"}"},{"type":"INSERT","lineNumber":796,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":797,"content":"                "},{"type":"DELETE","lineNumber":826,"oldContent":"}"},{"type":"INSERT","lineNumber":804,"content":"}"}]},{"timestamp":1754318910931,"changes":[{"type":"MODIFY","lineNumber":257,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":259,"content":"    }"},{"type":"DELETE","lineNumber":260,"oldContent":"    "},{"type":"MODIFY","lineNumber":262,"content":"     * Lädt ein Landmark-Bild für die Anzeige","oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":264,"oldContent":"     * Setzt den aktuellen Navigationsschritt"},{"type":"DELETE","lineNumber":265,"oldContent":"    fun getPerformanceInfo(): String {"},{"type":"DELETE","lineNumber":266,"oldContent":"    /**"},{"type":"DELETE","lineNumber":267,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"DELETE","lineNumber":268,"oldContent":"     */"},{"type":"INSERT","lineNumber":264,"content":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":265,"content":"        return try {"},{"type":"INSERT","lineNumber":266,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":267,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":268,"content":"                return null"},{"type":"DELETE","lineNumber":270,"oldContent":"     */"},{"type":"DELETE","lineNumber":271,"oldContent":"     * Lädt ein Vollbild (mit Cache)"},{"type":"DELETE","lineNumber":272,"oldContent":"     * Lädt ein Thumbnail (schnell)"},{"type":"DELETE","lineNumber":273,"oldContent":"    /**"},{"type":"DELETE","lineNumber":274,"oldContent":"            bitmap = bitmap,"},{"type":"DELETE","lineNumber":275,"oldContent":"                Log.e(TAG, \"Fehler beim sofortigen Aktivieren des Feature Mappings: ${e.message}\")"},{"type":"DELETE","lineNumber":276,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":277,"oldContent":"                "},{"type":"DELETE","lineNumber":278,"oldContent":"                }"},{"type":"DELETE","lineNumber":279,"oldContent":"                if (localFeatureMapManager == null) {"},{"type":"INSERT","lineNumber":270,"content":"            "},{"type":"INSERT","lineNumber":271,"content":"            val image = storageManager!!.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":272,"content":"            if (image != null) {"},{"type":"INSERT","lineNumber":273,"content":"                Log.d(TAG, \"Landmark-Bild geladen: $landmarkId (${image.width}x${image.height})\")"},{"type":"INSERT","lineNumber":274,"content":"            } else {"},{"type":"INSERT","lineNumber":275,"content":"                Log.w(TAG, \"Landmark-Bild nicht gefunden: $landmarkId\")"},{"type":"INSERT","lineNumber":276,"content":"            }"},{"type":"INSERT","lineNumber":277,"content":"            image"},{"type":"INSERT","lineNumber":278,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":279,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":285,"oldContent":"    fun enableFeatureMappingImmediately() {"},{"type":"DELETE","lineNumber":286,"oldContent":"     * Aktiviert Feature Mapping sofort"},{"type":"DELETE","lineNumber":287,"oldContent":"                "},{"type":"DELETE","lineNumber":288,"oldContent":"                Log.i(TAG, \"Upload-Komponenten erfolgreich gestartet\")"},{"type":"DELETE","lineNumber":289,"oldContent":"                "},{"type":"INSERT","lineNumber":285,"content":"     * Lädt ein Landmark-Thumbnail für die Anzeige"},{"type":"INSERT","lineNumber":286,"content":"     */"},{"type":"INSERT","lineNumber":287,"content":"    suspend fun loadLandmarkThumbnail(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":288,"content":"        return try {"},{"type":"INSERT","lineNumber":289,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":290,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":291,"content":"                return null"},{"type":"INSERT","lineNumber":292,"content":"            }"},{"type":"DELETE","lineNumber":291,"oldContent":"                }"},{"type":"DELETE","lineNumber":292,"oldContent":"                    Log.w(TAG, \"Lokale Speicherung fehlgeschlagen: ${e.message}\")"},{"type":"DELETE","lineNumber":293,"oldContent":"            "},{"type":"DELETE","lineNumber":354,"oldContent":"    /**"},{"type":"DELETE","lineNumber":356,"oldContent":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":357,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":358,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":359,"oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":355,"content":"    /**"},{"type":"DELETE","lineNumber":362,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":363,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":364,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":365,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":366,"oldContent":"     */"},{"type":"DELETE","lineNumber":367,"oldContent":"        name: String,"},{"type":"DELETE","lineNumber":368,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":369,"oldContent":"    suspend fun createLandmark("},{"type":"DELETE","lineNumber":370,"oldContent":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"INSERT","lineNumber":358,"content":"    private fun isEmulatorDevice(): Boolean {"},{"type":"INSERT","lineNumber":359,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":360,"content":"                android.os.Build.FINGERPRINT.startsWith(\"unknown\") ||"},{"type":"INSERT","lineNumber":361,"content":"                android.os.Build.MODEL.contains(\"google_sdk\") ||"},{"type":"INSERT","lineNumber":362,"content":"                android.os.Build.MODEL.contains(\"Emulator\") ||"},{"type":"INSERT","lineNumber":363,"content":"                android.os.Build.MODEL.contains(\"Android SDK built for x86\") ||"},{"type":"INSERT","lineNumber":364,"content":"                android.os.Build.MANUFACTURER.contains(\"Genymotion\") ||"},{"type":"INSERT","lineNumber":365,"content":"                android.os.Build.BRAND.startsWith(\"generic\") && android.os.Build.DEVICE.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":376,"oldContent":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":377,"oldContent":"        name: String,"},{"type":"DELETE","lineNumber":378,"oldContent":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"DELETE","lineNumber":379,"oldContent":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"DELETE","lineNumber":380,"oldContent":"        }"},{"type":"DELETE","lineNumber":381,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":382,"oldContent":"            }"},{"type":"INSERT","lineNumber":371,"content":"    /**"},{"type":"INSERT","lineNumber":372,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":373,"content":"     */"},{"type":"INSERT","lineNumber":374,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":375,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":376,"content":"    }"},{"type":"INSERT","lineNumber":379,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":391,"oldContent":"    }"},{"type":"INSERT","lineNumber":386,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":387,"content":"     */"},{"type":"DELETE","lineNumber":396,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":398,"oldContent":"                "},{"type":"DELETE","lineNumber":400,"oldContent":"                if (storageManager != null) {"},{"type":"DELETE","lineNumber":402,"oldContent":"                    val landmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"DELETE","lineNumber":404,"oldContent":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"DELETE","lineNumber":405,"oldContent":"                    "},{"type":"DELETE","lineNumber":406,"oldContent":"                    val status = storageManager!!.getStorageStatus()"},{"type":"DELETE","lineNumber":407,"oldContent":"                    Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"DELETE","lineNumber":408,"oldContent":"                } else {"},{"type":"INSERT","lineNumber":396,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":397,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"INSERT","lineNumber":398,"content":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":399,"content":"        } else {"},{"type":"DELETE","lineNumber":420,"oldContent":"                false"},{"type":"DELETE","lineNumber":421,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"INSERT","lineNumber":411,"content":"    /**"},{"type":"INSERT","lineNumber":412,"content":"     * Lädt verfügbare Landmarks aus dem Storage-System"},{"type":"DELETE","lineNumber":423,"oldContent":"                )"},{"type":"INSERT","lineNumber":414,"content":"    private fun loadAvailableStorageData() {"},{"type":"DELETE","lineNumber":425,"oldContent":"    }"},{"type":"DELETE","lineNumber":427,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":417,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":418,"content":"                "},{"type":"INSERT","lineNumber":419,"content":"                if (storageManager != null) {"},{"type":"INSERT","lineNumber":420,"content":"                    val landmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":421,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"INSERT","lineNumber":422,"content":"                    "},{"type":"INSERT","lineNumber":423,"content":"                    val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":424,"content":"                    Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":425,"content":"                } else {"},{"type":"DELETE","lineNumber":432,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":433,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":430,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"INSERT","lineNumber":431,"content":"            }"},{"type":"INSERT","lineNumber":441,"content":"    }"},{"type":"INSERT","lineNumber":447,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":525,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":534,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":550,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"INSERT","lineNumber":558,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":573,"content":""},{"type":"INSERT","lineNumber":574,"content":"    "},{"type":"DELETE","lineNumber":574,"oldContent":"     * Startet Frame-Processing für Feature-Matching"},{"type":"INSERT","lineNumber":576,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":576,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":577,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":578,"oldContent":"            try {"},{"type":"DELETE","lineNumber":579,"oldContent":"                Log.i(TAG, \"Starte Frame-Processing für Feature-Matching...\")"},{"type":"DELETE","lineNumber":580,"oldContent":"                _isFeatureMappingEnabled.value = true"},{"type":"DELETE","lineNumber":581,"oldContent":"                Log.i(TAG, \"Frame-Processing gestartet\")"},{"type":"DELETE","lineNumber":582,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":583,"oldContent":"                Log.e(TAG, \"Fehler beim Starten des Frame-Processing: ${e.message}\")"},{"type":"INSERT","lineNumber":578,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":579,"content":"        return try {"},{"type":"INSERT","lineNumber":580,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":581,"content":"            "},{"type":"DELETE","lineNumber":585,"oldContent":"            }"},{"type":"DELETE","lineNumber":587,"oldContent":"        }"},{"type":"DELETE","lineNumber":589,"oldContent":"    }"},{"type":"DELETE","lineNumber":591,"oldContent":"    "},{"type":"DELETE","lineNumber":593,"oldContent":"    /**"},{"type":"DELETE","lineNumber":595,"oldContent":"     * Gibt den aktuellen Startpunkt zurück"},{"type":"DELETE","lineNumber":597,"oldContent":"     */"},{"type":"DELETE","lineNumber":599,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":601,"oldContent":"        return _currentRoute.value?.route?.path?.firstOrNull()?.xmlName ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":603,"oldContent":"    }"},{"type":"DELETE","lineNumber":605,"oldContent":"    "},{"type":"DELETE","lineNumber":607,"oldContent":"    /**"},{"type":"DELETE","lineNumber":609,"oldContent":"     * Gibt den aktuellen Endpunkt zurück"},{"type":"DELETE","lineNumber":610,"oldContent":"     */"},{"type":"DELETE","lineNumber":611,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":612,"oldContent":"        return _currentRoute.value?.route?.path?.lastOrNull()?.xmlName ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":613,"oldContent":"    }"},{"type":"DELETE","lineNumber":614,"oldContent":"    "},{"type":"DELETE","lineNumber":615,"oldContent":"    /**"},{"type":"DELETE","lineNumber":616,"oldContent":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":617,"oldContent":"     */"},{"type":"DELETE","lineNumber":618,"oldContent":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"DELETE","lineNumber":619,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":620,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":621,"oldContent":"            "},{"type":"DELETE","lineNumber":641,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":639,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":743,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":754,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":756,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":758,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":760,"oldContent":"    }"},{"type":"DELETE","lineNumber":762,"oldContent":"    "},{"type":"DELETE","lineNumber":764,"oldContent":""},{"type":"DELETE","lineNumber":768,"oldContent":""},{"type":"DELETE","lineNumber":769,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":770,"oldContent":"    /**"},{"type":"DELETE","lineNumber":771,"oldContent":"     */"},{"type":"DELETE","lineNumber":773,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":775,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":777,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":741,"content":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":783,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":784,"oldContent":"                "},{"type":"DELETE","lineNumber":786,"oldContent":"}"},{"type":"DELETE","lineNumber":788,"oldContent":"        }"},{"type":"DELETE","lineNumber":789,"oldContent":"}"},{"type":"DELETE","lineNumber":790,"oldContent":"}"},{"type":"INSERT","lineNumber":745,"content":"    "},{"type":"INSERT","lineNumber":746,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":747,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":748,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":792,"oldContent":"            }"},{"type":"DELETE","lineNumber":793,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":750,"content":"    "},{"type":"INSERT","lineNumber":751,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":752,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":753,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":754,"content":"    }"},{"type":"INSERT","lineNumber":755,"content":"    "},{"type":"INSERT","lineNumber":756,"content":""},{"type":"INSERT","lineNumber":757,"content":""},{"type":"INSERT","lineNumber":758,"content":"    /**"},{"type":"INSERT","lineNumber":759,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":760,"content":"     */"},{"type":"INSERT","lineNumber":761,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":762,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":763,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":769,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":770,"content":"                "},{"type":"INSERT","lineNumber":775,"content":"        }"},{"type":"INSERT","lineNumber":776,"content":"    }"},{"type":"INSERT","lineNumber":777,"content":"}"}]},{"timestamp":1754318941658,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import java.io.ByteArrayOutputStream","oldContent":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"MODIFY","lineNumber":240,"content":"                    initializeStorage(context)","oldContent":"    }"},{"type":"MODIFY","lineNumber":243,"content":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()","oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":245,"content":"                if (landmarks.isNotEmpty()) {","oldContent":"    override fun onCleared() {"},{"type":"MODIFY","lineNumber":269,"content":"            }","oldContent":"            bitmap = bitmap,"},{"type":"MODIFY","lineNumber":281,"content":"        }","oldContent":"                // Stelle sicher, dass Storage-System initialisiert ist"},{"type":"DELETE","lineNumber":291,"oldContent":"                // Initialisiere skalierbaren Upload Manager falls noch nicht geschehen"},{"type":"INSERT","lineNumber":293,"content":"            "},{"type":"DELETE","lineNumber":310,"oldContent":"}"},{"type":"DELETE","lineNumber":311,"oldContent":"            try {"},{"type":"DELETE","lineNumber":312,"oldContent":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":310,"content":"    suspend fun addLandmark("},{"type":"INSERT","lineNumber":311,"content":"        context: Context,"},{"type":"INSERT","lineNumber":312,"content":"        bitmap: Bitmap,"},{"type":"MODIFY","lineNumber":355,"content":"    /**","oldContent":"    /**"},{"type":"INSERT","lineNumber":356,"content":"     * Prüft ob die App im Emulator läuft"},{"type":"INSERT","lineNumber":357,"content":"     */"},{"type":"DELETE","lineNumber":359,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":361,"oldContent":"    }"},{"type":"DELETE","lineNumber":366,"oldContent":"    /**"},{"type":"INSERT","lineNumber":367,"content":"    }"},{"type":"INSERT","lineNumber":368,"content":"    "},{"type":"INSERT","lineNumber":369,"content":""},{"type":"INSERT","lineNumber":370,"content":"    "},{"type":"INSERT","lineNumber":371,"content":"    /**"},{"type":"DELETE","lineNumber":370,"oldContent":"     */"},{"type":"DELETE","lineNumber":371,"oldContent":"    ): UploadResult {"},{"type":"DELETE","lineNumber":373,"oldContent":""},{"type":"DELETE","lineNumber":375,"oldContent":"    "},{"type":"DELETE","lineNumber":377,"oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":379,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":381,"oldContent":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":383,"oldContent":"     */"},{"type":"DELETE","lineNumber":388,"oldContent":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":386,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":387,"content":"     */"},{"type":"INSERT","lineNumber":388,"content":"    suspend fun deleteLandmark(landmarkId: String): Boolean {"},{"type":"DELETE","lineNumber":392,"oldContent":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":393,"oldContent":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"DELETE","lineNumber":395,"oldContent":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"MODIFY","lineNumber":396,"content":"        return if (storageManager != null) {","oldContent":"        } else {"},{"type":"INSERT","lineNumber":397,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"INSERT","lineNumber":398,"content":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":399,"content":"        } else {"},{"type":"DELETE","lineNumber":402,"oldContent":"    /**"},{"type":"DELETE","lineNumber":404,"oldContent":"     * Lädt verfügbare Landmarks aus dem Storage-System"},{"type":"DELETE","lineNumber":407,"oldContent":"    private fun loadAvailableStorageData() {"},{"type":"INSERT","lineNumber":408,"content":"        return storageManager?.cleanup()"},{"type":"INSERT","lineNumber":409,"content":"    }"},{"type":"INSERT","lineNumber":410,"content":"    "},{"type":"INSERT","lineNumber":411,"content":"    /**"},{"type":"INSERT","lineNumber":412,"content":"     * Lädt verfügbare Landmarks aus dem Storage-System"},{"type":"INSERT","lineNumber":413,"content":"     */"},{"type":"INSERT","lineNumber":414,"content":"    private fun loadAvailableStorageData() {"},{"type":"INSERT","lineNumber":415,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":416,"content":"            try {"},{"type":"DELETE","lineNumber":412,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":414,"oldContent":"     */"},{"type":"DELETE","lineNumber":416,"oldContent":"    /**"},{"type":"DELETE","lineNumber":420,"oldContent":"     */"},{"type":"DELETE","lineNumber":423,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":425,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":428,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"INSERT","lineNumber":429,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":430,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"DELETE","lineNumber":431,"oldContent":"                "},{"type":"DELETE","lineNumber":439,"oldContent":"    }"},{"type":"INSERT","lineNumber":441,"content":"    }"},{"type":"MODIFY","lineNumber":447,"content":"        val currentStep = _currentNavigationStep.value","oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":548,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"INSERT","lineNumber":550,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"MODIFY","lineNumber":558,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {","oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":574,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":575,"content":"    /**","oldContent":"     */"},{"type":"INSERT","lineNumber":577,"content":"     */"},{"type":"DELETE","lineNumber":585,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":586,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":587,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":585,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":586,"content":"                        // landmark ist bereits ein String (Landmark-ID)"},{"type":"DELETE","lineNumber":590,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":591,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":592,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":593,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":594,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":595,"oldContent":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":596,"oldContent":"                                    0.0"},{"type":"DELETE","lineNumber":597,"oldContent":"                                ),"},{"type":"INSERT","lineNumber":589,"content":"                                id = landmark, // String aus JSON"},{"type":"INSERT","lineNumber":590,"content":"                                name = landmark,"},{"type":"INSERT","lineNumber":591,"content":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":592,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":612,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":634,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":714,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":718,"oldContent":"    "},{"type":"DELETE","lineNumber":720,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":722,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":724,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":727,"oldContent":"    "},{"type":"DELETE","lineNumber":729,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":731,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":733,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":735,"oldContent":"    }"},{"type":"DELETE","lineNumber":736,"oldContent":"    "},{"type":"DELETE","lineNumber":738,"oldContent":""},{"type":"DELETE","lineNumber":739,"oldContent":""},{"type":"DELETE","lineNumber":741,"oldContent":"    /**"},{"type":"DELETE","lineNumber":742,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":744,"oldContent":"     */"},{"type":"DELETE","lineNumber":745,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":747,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":748,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":753,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":754,"oldContent":"                "},{"type":"DELETE","lineNumber":755,"oldContent":"        }"},{"type":"DELETE","lineNumber":756,"oldContent":"}"},{"type":"DELETE","lineNumber":757,"oldContent":"        }"},{"type":"INSERT","lineNumber":729,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":730,"content":"     */"},{"type":"INSERT","lineNumber":731,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":732,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":733,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":735,"content":"    "},{"type":"INSERT","lineNumber":736,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":737,"content":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"INSERT","lineNumber":738,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":760,"oldContent":"}"},{"type":"DELETE","lineNumber":761,"oldContent":"            }"},{"type":"DELETE","lineNumber":762,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":763,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":765,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":766,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":767,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":768,"oldContent":"        }"},{"type":"INSERT","lineNumber":741,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":742,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":743,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":744,"content":"    }"},{"type":"INSERT","lineNumber":745,"content":"    "},{"type":"INSERT","lineNumber":746,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":747,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":748,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":749,"content":"    }"},{"type":"INSERT","lineNumber":750,"content":"    "},{"type":"INSERT","lineNumber":751,"content":""},{"type":"INSERT","lineNumber":752,"content":""},{"type":"INSERT","lineNumber":753,"content":"    /**"},{"type":"INSERT","lineNumber":754,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":755,"content":"     */"},{"type":"INSERT","lineNumber":756,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":757,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":758,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":763,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":764,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":765,"content":"                "},{"type":"INSERT","lineNumber":766,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":767,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":768,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":769,"content":"            }"},{"type":"INSERT","lineNumber":770,"content":"        }"},{"type":"INSERT","lineNumber":771,"content":"    }"},{"type":"INSERT","lineNumber":772,"content":"}"}]},{"timestamp":1754318966963,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.content.Context","oldContent":""},{"type":"MODIFY","lineNumber":241,"content":"                }","oldContent":"    private fun bitmapToBase64(bitmap: Bitmap): String {"},{"type":"MODIFY","lineNumber":244,"content":"                ","oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"MODIFY","lineNumber":256,"content":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")","oldContent":"    /**"},{"type":"MODIFY","lineNumber":293,"content":"            ","oldContent":"            "},{"type":"DELETE","lineNumber":305,"oldContent":"        name: String,"},{"type":"DELETE","lineNumber":306,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":307,"oldContent":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"INSERT","lineNumber":305,"content":"    }"},{"type":"INSERT","lineNumber":306,"content":"    "},{"type":"INSERT","lineNumber":307,"content":"    /**"},{"type":"MODIFY","lineNumber":309,"content":"     */","oldContent":"        Log.d(TAG, \"Nächster Navigationsschritt: ${currentStep + 1}\")"},{"type":"DELETE","lineNumber":318,"oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":319,"oldContent":"     */"},{"type":"DELETE","lineNumber":320,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":318,"content":"        return try {"},{"type":"INSERT","lineNumber":319,"content":"            Log.i(TAG, \"Füge neuen Landmark hinzu: $landmarkId\")"},{"type":"INSERT","lineNumber":320,"content":"            "},{"type":"INSERT","lineNumber":354,"content":"    "},{"type":"DELETE","lineNumber":355,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":358,"content":"    private fun isEmulatorDevice(): Boolean {","oldContent":"    private fun isEmulatorDevice(): Boolean {"},{"type":"INSERT","lineNumber":366,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":367,"oldContent":"    ): Boolean {"},{"type":"DELETE","lineNumber":369,"oldContent":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":371,"oldContent":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":372,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":373,"content":"     */"},{"type":"MODIFY","lineNumber":379,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System","oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":384,"oldContent":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"MODIFY","lineNumber":386,"content":"     * Löscht ein Landmark - verwendet neues Storage-System","oldContent":"     */"},{"type":"INSERT","lineNumber":387,"content":"     */"},{"type":"INSERT","lineNumber":393,"content":"     * Gibt Performance-Informationen zurück"},{"type":"INSERT","lineNumber":394,"content":"     */"},{"type":"INSERT","lineNumber":395,"content":"    fun getPerformanceInfo(): String {"},{"type":"DELETE","lineNumber":395,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"DELETE","lineNumber":397,"oldContent":"     */"},{"type":"DELETE","lineNumber":399,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":405,"content":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":406,"content":"     */"},{"type":"INSERT","lineNumber":407,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":406,"oldContent":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"DELETE","lineNumber":408,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":410,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":412,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":415,"oldContent":"                "},{"type":"DELETE","lineNumber":418,"oldContent":"                if (storageManager != null) {"},{"type":"INSERT","lineNumber":417,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":418,"content":"                "},{"type":"INSERT","lineNumber":419,"content":"                if (storageManager != null) {"},{"type":"MODIFY","lineNumber":429,"content":"            } catch (e: Exception) {","oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":441,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":446,"content":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":447,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"MODIFY","lineNumber":550,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")","oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"INSERT","lineNumber":557,"content":"     */"},{"type":"DELETE","lineNumber":558,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":574,"content":"    "},{"type":"DELETE","lineNumber":575,"oldContent":"     */"},{"type":"MODIFY","lineNumber":577,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":589,"content":"                                id = landmark, // String aus JSON","oldContent":"                                id = landmark, // String aus JSON"},{"type":"DELETE","lineNumber":628,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":634,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":701,"oldContent":"}"},{"type":"DELETE","lineNumber":703,"oldContent":"        }"},{"type":"DELETE","lineNumber":704,"oldContent":"}"},{"type":"DELETE","lineNumber":705,"oldContent":"}"},{"type":"INSERT","lineNumber":702,"content":"    "},{"type":"INSERT","lineNumber":703,"content":"    /**"},{"type":"INSERT","lineNumber":704,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":705,"content":"     */"},{"type":"INSERT","lineNumber":706,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":707,"content":"        return processedLandmarks.map { it.id }"},{"type":"INSERT","lineNumber":709,"content":"    "},{"type":"INSERT","lineNumber":710,"content":"    /**"},{"type":"INSERT","lineNumber":711,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":712,"content":"     */"},{"type":"INSERT","lineNumber":713,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":714,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":715,"content":"        "},{"type":"INSERT","lineNumber":716,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":717,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":718,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":719,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":720,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":721,"content":"                }"},{"type":"DELETE","lineNumber":708,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":723,"content":"        }"},{"type":"INSERT","lineNumber":724,"content":"        "},{"type":"INSERT","lineNumber":725,"content":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":710,"oldContent":"            }"},{"type":"DELETE","lineNumber":711,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":712,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":713,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":714,"oldContent":"                "},{"type":"DELETE","lineNumber":715,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":716,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":717,"oldContent":"                "},{"type":"INSERT","lineNumber":727,"content":""},{"type":"INSERT","lineNumber":728,"content":"    /**"},{"type":"DELETE","lineNumber":720,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":723,"oldContent":"}"},{"type":"DELETE","lineNumber":729,"oldContent":"        }"},{"type":"DELETE","lineNumber":731,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":739,"content":"    }"},{"type":"INSERT","lineNumber":740,"content":"    "},{"type":"DELETE","lineNumber":735,"oldContent":"                "},{"type":"DELETE","lineNumber":739,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":743,"oldContent":"}"},{"type":"DELETE","lineNumber":745,"oldContent":"        }"},{"type":"DELETE","lineNumber":748,"oldContent":""},{"type":"DELETE","lineNumber":750,"oldContent":"    /**"},{"type":"DELETE","lineNumber":756,"oldContent":"    }"},{"type":"INSERT","lineNumber":759,"content":"            try {"},{"type":"INSERT","lineNumber":760,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":762,"content":"                "},{"type":"DELETE","lineNumber":760,"oldContent":"    "},{"type":"INSERT","lineNumber":771,"content":"    }"},{"type":"INSERT","lineNumber":772,"content":"}"}]},{"timestamp":1754319020046,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.graphics.Bitmap","oldContent":"import RouteData"},{"type":"MODIFY","lineNumber":30,"content":"    ","oldContent":"    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())"},{"type":"MODIFY","lineNumber":53,"content":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()","oldContent":"            // In NavigationRoute umwandeln"},{"type":"MODIFY","lineNumber":192,"content":"                ","oldContent":"    "},{"type":"MODIFY","lineNumber":242,"content":"                ","oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"MODIFY","lineNumber":280,"content":"            null","oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":292,"content":"            }"},{"type":"DELETE","lineNumber":293,"oldContent":"            "},{"type":"DELETE","lineNumber":303,"oldContent":"            try {"},{"type":"DELETE","lineNumber":304,"oldContent":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":303,"content":"            null"},{"type":"INSERT","lineNumber":304,"content":"        }"},{"type":"DELETE","lineNumber":313,"oldContent":"    }"},{"type":"DELETE","lineNumber":314,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":315,"oldContent":"                "},{"type":"DELETE","lineNumber":316,"oldContent":"                }"},{"type":"INSERT","lineNumber":313,"content":"        landmarkId: String,"},{"type":"INSERT","lineNumber":314,"content":"        landmarkName: String,"},{"type":"INSERT","lineNumber":315,"content":"        description: String,"},{"type":"INSERT","lineNumber":316,"content":"        onProgress: (String) -> Unit = {}"},{"type":"INSERT","lineNumber":357,"content":"     */"},{"type":"DELETE","lineNumber":358,"oldContent":"    private fun isEmulatorDevice(): Boolean {"},{"type":"DELETE","lineNumber":370,"oldContent":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"MODIFY","lineNumber":372,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System","oldContent":"     */"},{"type":"INSERT","lineNumber":373,"content":"     */"},{"type":"INSERT","lineNumber":378,"content":"    /**"},{"type":"DELETE","lineNumber":379,"oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":385,"content":"    /**"},{"type":"DELETE","lineNumber":387,"oldContent":"    /**"},{"type":"DELETE","lineNumber":394,"oldContent":"        return if (storageManager != null) {"},{"type":"MODIFY","lineNumber":396,"content":"        return if (storageManager != null) {","oldContent":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"INSERT","lineNumber":397,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }"},{"type":"DELETE","lineNumber":406,"oldContent":"        return storageManager?.cleanup()"},{"type":"INSERT","lineNumber":408,"content":"        return storageManager?.cleanup()"},{"type":"DELETE","lineNumber":415,"oldContent":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"INSERT","lineNumber":416,"content":"            try {"},{"type":"INSERT","lineNumber":417,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"DELETE","lineNumber":419,"oldContent":"            try {"},{"type":"INSERT","lineNumber":428,"content":"                "},{"type":"DELETE","lineNumber":429,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":440,"content":"        Log.d(TAG, \"Navigationsschritt gesetzt: $step\")"},{"type":"DELETE","lineNumber":441,"oldContent":"    }"},{"type":"INSERT","lineNumber":549,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":550,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"MODIFY","lineNumber":554,"content":"    ","oldContent":"            }"},{"type":"INSERT","lineNumber":576,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":577,"oldContent":"     */"},{"type":"INSERT","lineNumber":588,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":589,"oldContent":"                                id = landmark, // String aus JSON"},{"type":"MODIFY","lineNumber":634,"content":"     * Gibt die aktuellen Navigationsschritte zurück","oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":671,"oldContent":"     * Lädt Landmarks neu für eine spezifische Route"},{"type":"DELETE","lineNumber":672,"oldContent":"}"},{"type":"DELETE","lineNumber":673,"oldContent":"    }"},{"type":"INSERT","lineNumber":671,"content":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"INSERT","lineNumber":672,"content":"     */"},{"type":"INSERT","lineNumber":673,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":674,"content":"        try {"},{"type":"INSERT","lineNumber":675,"content":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":676,"content":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":677,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":678,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":675,"oldContent":"}"},{"type":"DELETE","lineNumber":676,"oldContent":"}"},{"type":"INSERT","lineNumber":681,"content":"    "},{"type":"INSERT","lineNumber":682,"content":"    /**"},{"type":"INSERT","lineNumber":683,"content":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":684,"content":"     */"},{"type":"INSERT","lineNumber":685,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":686,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":687,"content":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":688,"content":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":689,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":679,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":680,"oldContent":"    }"},{"type":"DELETE","lineNumber":681,"oldContent":"            }"},{"type":"DELETE","lineNumber":682,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":683,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":684,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":685,"oldContent":"                "},{"type":"DELETE","lineNumber":686,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":687,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":688,"oldContent":"                "},{"type":"DELETE","lineNumber":689,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":690,"oldContent":"}"},{"type":"DELETE","lineNumber":691,"oldContent":"    }"},{"type":"DELETE","lineNumber":693,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":694,"oldContent":"                "},{"type":"DELETE","lineNumber":695,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":696,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":697,"oldContent":"            try {"},{"type":"DELETE","lineNumber":698,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":699,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":700,"oldContent":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":692,"content":"    }"},{"type":"DELETE","lineNumber":702,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":707,"oldContent":"            }"},{"type":"DELETE","lineNumber":709,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":699,"content":"    }"},{"type":"DELETE","lineNumber":711,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":721,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":723,"oldContent":"     */"},{"type":"DELETE","lineNumber":726,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":727,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":713,"content":"            }"},{"type":"DELETE","lineNumber":730,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":717,"content":"    }"},{"type":"INSERT","lineNumber":719,"content":"    /**"},{"type":"INSERT","lineNumber":720,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":721,"content":"     */"},{"type":"INSERT","lineNumber":722,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":723,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":724,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":725,"content":"    }"},{"type":"DELETE","lineNumber":734,"oldContent":""},{"type":"DELETE","lineNumber":736,"oldContent":"    /**"},{"type":"INSERT","lineNumber":730,"content":"    }"},{"type":"INSERT","lineNumber":731,"content":"    "},{"type":"DELETE","lineNumber":745,"oldContent":"    }"},{"type":"DELETE","lineNumber":746,"oldContent":"    "},{"type":"DELETE","lineNumber":759,"oldContent":"            }"},{"type":"DELETE","lineNumber":760,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":762,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":764,"oldContent":"    }"},{"type":"INSERT","lineNumber":752,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":754,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":755,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":756,"content":"                "},{"type":"INSERT","lineNumber":757,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":758,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":759,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":760,"content":"            }"},{"type":"INSERT","lineNumber":761,"content":"        }"},{"type":"INSERT","lineNumber":762,"content":"    }"},{"type":"INSERT","lineNumber":763,"content":"}"}]},{"timestamp":1754319553974,"changes":[{"type":"MODIFY","lineNumber":24,"content":"class RouteViewModel : ViewModel() {","oldContent":"    private var featureMapManager: FeatureMapManager? = null"},{"type":"MODIFY","lineNumber":31,"content":"    // Route Repository für JSON-Daten","oldContent":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()"},{"type":"MODIFY","lineNumber":38,"content":"    ","oldContent":""},{"type":"MODIFY","lineNumber":54,"content":"    ","oldContent":"            convertToNavigationRoute(routeData)"},{"type":"DELETE","lineNumber":67,"oldContent":"        routeData.route.path.forEach { pathItem ->"},{"type":"DELETE","lineNumber":68,"oldContent":"            pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":69,"oldContent":"                val landmarkIds = routePart.landmarks.map { it.id }"},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"                val step = NavigationStep("},{"type":"INSERT","lineNumber":67,"content":"            Log.i(TAG, \"Lade Route aus JSON-Datei...\")"},{"type":"INSERT","lineNumber":68,"content":"            "},{"type":"INSERT","lineNumber":69,"content":"            // Initialisiere RouteRepository falls noch nicht geschehen"},{"type":"INSERT","lineNumber":70,"content":"            if (routeRepository == null) {"},{"type":"INSERT","lineNumber":71,"content":"                routeRepository = RouteRepository(context)"},{"type":"DELETE","lineNumber":73,"oldContent":"                    instruction = routePart.instructionDe,"},{"type":"DELETE","lineNumber":74,"oldContent":"                    building = pathItem.xmlName,"},{"type":"DELETE","lineNumber":75,"oldContent":"                    landmarkIds = landmarkIds"},{"type":"DELETE","lineNumber":76,"oldContent":"                )"},{"type":"DELETE","lineNumber":77,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"                steps.add(step)"},{"type":"DELETE","lineNumber":79,"oldContent":"                stepNumber++"},{"type":"DELETE","lineNumber":80,"oldContent":"            }"},{"type":"INSERT","lineNumber":73,"content":"            "},{"type":"INSERT","lineNumber":74,"content":"            // Lade Route aus JSON-Datei"},{"type":"INSERT","lineNumber":75,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":76,"content":"                val routeData = routeRepository?.getRouteFromAssets(\"route.json\")"},{"type":"INSERT","lineNumber":77,"content":"                _currentRoute.value = routeData"},{"type":"INSERT","lineNumber":78,"content":"                "},{"type":"INSERT","lineNumber":79,"content":"                if (routeData != null) {"},{"type":"INSERT","lineNumber":80,"content":"                    Log.i(TAG, \"Route erfolgreich aus JSON geladen\")"},{"type":"MODIFY","lineNumber":84,"content":"                } else {","oldContent":"            totalLength = routeData.route.routeInfo.routeLength,"},{"type":"MODIFY","lineNumber":100,"content":"            null","oldContent":"            if (step.landmarkIds.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":104,"content":"    /**","oldContent":"            }"},{"type":"MODIFY","lineNumber":302,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Thumbnails $landmarkId: ${e.message}\")","oldContent":"                _isFeatureMappingEnabled.value = true"},{"type":"INSERT","lineNumber":371,"content":"    /**"},{"type":"DELETE","lineNumber":373,"oldContent":"    /**"},{"type":"INSERT","lineNumber":395,"content":"    fun getPerformanceInfo(): String {"},{"type":"DELETE","lineNumber":397,"oldContent":"    fun getPerformanceInfo(): String {"},{"type":"MODIFY","lineNumber":408,"content":"        return storageManager?.cleanup()","oldContent":"        return storageManager?.cleanup()"},{"type":"MODIFY","lineNumber":416,"content":"            try {","oldContent":"            try {"},{"type":"DELETE","lineNumber":517,"oldContent":"}"},{"type":"DELETE","lineNumber":518,"oldContent":"        }"},{"type":"DELETE","lineNumber":519,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":520,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":521,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":517,"content":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"INSERT","lineNumber":518,"content":"                        building = building,"},{"type":"INSERT","lineNumber":519,"content":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":520,"content":"                    ),"},{"type":"INSERT","lineNumber":521,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":522,"content":"                        stepNumber = 2,"},{"type":"INSERT","lineNumber":523,"content":"                        instruction = \"Biegen Sie links ab zur Treppe\","},{"type":"INSERT","lineNumber":524,"content":"                        building = building,"},{"type":"INSERT","lineNumber":525,"content":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":526,"content":"                    ),"},{"type":"INSERT","lineNumber":527,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":528,"content":"                        stepNumber = 3,"},{"type":"INSERT","lineNumber":529,"content":"                        instruction = \"Gehen Sie die Treppe hoch zu Stockwerk $floor\","},{"type":"INSERT","lineNumber":530,"content":"                        building = building,"},{"type":"INSERT","lineNumber":531,"content":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":532,"content":"                    ),"},{"type":"INSERT","lineNumber":533,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":534,"content":"                        stepNumber = 4,"},{"type":"INSERT","lineNumber":535,"content":"                        instruction = \"Folgen Sie dem Korridor bis zum Ziel\","},{"type":"INSERT","lineNumber":536,"content":"                        building = building,"},{"type":"INSERT","lineNumber":537,"content":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":538,"content":"                    )"},{"type":"INSERT","lineNumber":539,"content":"                )"},{"type":"DELETE","lineNumber":523,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":524,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":525,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":526,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":527,"oldContent":""},{"type":"DELETE","lineNumber":528,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":529,"oldContent":"    fun processFrameForFeatureMatching(mat: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":530,"oldContent":"    }"},{"type":"DELETE","lineNumber":531,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":532,"oldContent":"    "},{"type":"DELETE","lineNumber":533,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":534,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":535,"oldContent":"    }"},{"type":"DELETE","lineNumber":536,"oldContent":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"DELETE","lineNumber":537,"oldContent":"    "},{"type":"DELETE","lineNumber":538,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":539,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":540,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":541,"oldContent":""},{"type":"DELETE","lineNumber":542,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":543,"oldContent":"        }"},{"type":"DELETE","lineNumber":544,"oldContent":"                }"},{"type":"DELETE","lineNumber":545,"oldContent":"                for (landmark in routePart.landmarks) {"},{"type":"DELETE","lineNumber":546,"oldContent":"        for (pathItem in currentRoute.route.path) {"},{"type":"DELETE","lineNumber":547,"oldContent":"        "},{"type":"DELETE","lineNumber":548,"oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":541,"content":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":542,"content":"                    totalLength = 150.0, // 150 Meter"},{"type":"INSERT","lineNumber":543,"content":"                    steps = demoSteps"},{"type":"INSERT","lineNumber":544,"content":"                )"},{"type":"INSERT","lineNumber":545,"content":"                "},{"type":"INSERT","lineNumber":546,"content":"                _featureNavigationRoute.value = featureRoute"},{"type":"INSERT","lineNumber":547,"content":"                Log.i(TAG, \"Feature-Navigation Route geladen: ${demoSteps.size} Schritte, ${featureRoute.totalLength}m\")"},{"type":"INSERT","lineNumber":548,"content":"                "},{"type":"DELETE","lineNumber":552,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":553,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":552,"content":"        }"},{"type":"INSERT","lineNumber":553,"content":"    }"},{"type":"INSERT","lineNumber":633,"content":"    /**"},{"type":"DELETE","lineNumber":634,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":643,"oldContent":"    }"},{"type":"DELETE","lineNumber":644,"oldContent":"}"},{"type":"DELETE","lineNumber":645,"oldContent":"}"},{"type":"DELETE","lineNumber":646,"oldContent":"    }"},{"type":"DELETE","lineNumber":648,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":644,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":645,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":646,"content":"            emptyList()"},{"type":"INSERT","lineNumber":647,"content":"        }"},{"type":"INSERT","lineNumber":649,"content":""},{"type":"INSERT","lineNumber":650,"content":"    /**"},{"type":"INSERT","lineNumber":651,"content":"     * Gibt den aktuellen Navigationsschritt zurück"},{"type":"INSERT","lineNumber":652,"content":"     */"},{"type":"INSERT","lineNumber":653,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":654,"content":"        return try {"},{"type":"INSERT","lineNumber":655,"content":"            val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":656,"content":"            val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":657,"content":"            "},{"type":"INSERT","lineNumber":658,"content":"            if (steps.isNotEmpty() && currentStepNumber > 0 && currentStepNumber <= steps.size) {"},{"type":"INSERT","lineNumber":659,"content":"                steps[currentStepNumber - 1] // Convert to 0-based index"},{"type":"INSERT","lineNumber":660,"content":"            } else {"},{"type":"INSERT","lineNumber":661,"content":"                Log.w(TAG, \"Aktueller Schritt nicht verfügbar: $currentStepNumber von ${steps.size}\")"},{"type":"INSERT","lineNumber":662,"content":"                null"},{"type":"DELETE","lineNumber":651,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":652,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":653,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":654,"oldContent":"                "},{"type":"DELETE","lineNumber":655,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":656,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":657,"oldContent":"                "},{"type":"DELETE","lineNumber":658,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":659,"oldContent":"}"},{"type":"DELETE","lineNumber":660,"oldContent":"    }"},{"type":"INSERT","lineNumber":664,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":665,"content":"            Log.e(TAG, \"Fehler beim Laden des aktuellen Schritts: ${e.message}\")"},{"type":"INSERT","lineNumber":666,"content":"            null"},{"type":"DELETE","lineNumber":662,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":663,"oldContent":"                "},{"type":"DELETE","lineNumber":664,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":665,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":666,"oldContent":"            try {"},{"type":"DELETE","lineNumber":667,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":668,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":669,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":670,"oldContent":"     */"},{"type":"INSERT","lineNumber":668,"content":"    }"},{"type":"INSERT","lineNumber":669,"content":""},{"type":"INSERT","lineNumber":670,"content":"    /**"},{"type":"DELETE","lineNumber":675,"oldContent":"        }"},{"type":"DELETE","lineNumber":679,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":681,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":679,"content":"        }"},{"type":"INSERT","lineNumber":680,"content":"    }"},{"type":"INSERT","lineNumber":690,"content":"            }"},{"type":"INSERT","lineNumber":691,"content":"        }"},{"type":"DELETE","lineNumber":693,"oldContent":"    }"},{"type":"DELETE","lineNumber":694,"oldContent":"    "},{"type":"MODIFY","lineNumber":698,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")","oldContent":"        return processedLandmarks.map { it.id }"},{"type":"INSERT","lineNumber":699,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":700,"content":"    }"},{"type":"DELETE","lineNumber":702,"oldContent":"            }"},{"type":"DELETE","lineNumber":707,"oldContent":"    }"},{"type":"DELETE","lineNumber":710,"oldContent":"    /**"},{"type":"DELETE","lineNumber":712,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":714,"oldContent":"     */"},{"type":"DELETE","lineNumber":715,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":717,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":718,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":720,"oldContent":"    }"},{"type":"INSERT","lineNumber":714,"content":"            }"},{"type":"DELETE","lineNumber":724,"oldContent":"    }"},{"type":"DELETE","lineNumber":725,"oldContent":"    "},{"type":"INSERT","lineNumber":718,"content":"    }"},{"type":"INSERT","lineNumber":719,"content":""},{"type":"INSERT","lineNumber":721,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":722,"content":"     */"},{"type":"INSERT","lineNumber":723,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":724,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":725,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":726,"content":"    }"},{"type":"INSERT","lineNumber":731,"content":"    }"},{"type":"INSERT","lineNumber":732,"content":"    "},{"type":"DELETE","lineNumber":743,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"MODIFY","lineNumber":744,"content":"","oldContent":"     */"},{"type":"INSERT","lineNumber":745,"content":"    /**"},{"type":"INSERT","lineNumber":747,"content":"     */"},{"type":"INSERT","lineNumber":748,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":749,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":750,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":751,"content":"            try {"},{"type":"INSERT","lineNumber":752,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":753,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":754,"content":"                "},{"type":"DELETE","lineNumber":747,"oldContent":"}"},{"type":"DELETE","lineNumber":749,"oldContent":"    }"},{"type":"DELETE","lineNumber":751,"oldContent":"                "},{"type":"DELETE","lineNumber":753,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":755,"oldContent":"            try {"},{"type":"INSERT","lineNumber":763,"content":"    }"},{"type":"INSERT","lineNumber":764,"content":"}"}]},{"timestamp":1754319834978,"changes":[{"type":"DELETE","lineNumber":56,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":57,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"INSERT","lineNumber":56,"content":"    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()"},{"type":"INSERT","lineNumber":57,"content":"    "},{"type":"MODIFY","lineNumber":63,"content":"     * Lädt die Route aus der JSON-Datei","oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"MODIFY","lineNumber":72,"content":"            }","oldContent":"                    stepNumber = stepNumber,"},{"type":"DELETE","lineNumber":102,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":103,"oldContent":"                Log.i(TAG, \"  Keine Landmarks\")"},{"type":"INSERT","lineNumber":102,"content":"    }"},{"type":"INSERT","lineNumber":103,"content":"    "},{"type":"INSERT","lineNumber":407,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":408,"oldContent":"        return storageManager?.cleanup()"},{"type":"INSERT","lineNumber":415,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":416,"oldContent":"            try {"},{"type":"DELETE","lineNumber":503,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":504,"oldContent":"                "},{"type":"DELETE","lineNumber":505,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":506,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":503,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":504,"content":"     */"},{"type":"INSERT","lineNumber":505,"content":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"INSERT","lineNumber":506,"content":"        viewModelScope.launch {"},{"type":"MODIFY","lineNumber":508,"content":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")","oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":512,"oldContent":"    "},{"type":"DELETE","lineNumber":513,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":514,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":515,"oldContent":"    }"},{"type":"DELETE","lineNumber":516,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":512,"content":"                "},{"type":"INSERT","lineNumber":513,"content":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"INSERT","lineNumber":514,"content":"                val demoSteps = listOf("},{"type":"INSERT","lineNumber":515,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":516,"content":"                        stepNumber = 1,"},{"type":"DELETE","lineNumber":523,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":540,"content":"                "},{"type":"INSERT","lineNumber":628,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":629,"content":"            emptyList()"},{"type":"INSERT","lineNumber":630,"content":"        }"},{"type":"INSERT","lineNumber":632,"content":"    "},{"type":"DELETE","lineNumber":630,"oldContent":"}"},{"type":"DELETE","lineNumber":631,"oldContent":"    /**"},{"type":"DELETE","lineNumber":632,"oldContent":"}"},{"type":"DELETE","lineNumber":633,"oldContent":"    /**"},{"type":"DELETE","lineNumber":635,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":636,"oldContent":"    }"},{"type":"INSERT","lineNumber":635,"content":"     */"},{"type":"INSERT","lineNumber":636,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"INSERT","lineNumber":637,"content":"        return try {"},{"type":"INSERT","lineNumber":638,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":639,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":640,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":641,"content":"            } else {"},{"type":"INSERT","lineNumber":642,"content":"                emptyList()"},{"type":"DELETE","lineNumber":638,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":639,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":640,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":641,"oldContent":"                "},{"type":"DELETE","lineNumber":642,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":649,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":651,"oldContent":"                "},{"type":"MODIFY","lineNumber":663,"content":"            }","oldContent":"        }"},{"type":"INSERT","lineNumber":667,"content":"        }"},{"type":"INSERT","lineNumber":678,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":680,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"MODIFY","lineNumber":690,"content":"            }","oldContent":"            }"},{"type":"INSERT","lineNumber":697,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":699,"oldContent":"        return processedLandmarks.map { it.id }"},{"type":"DELETE","lineNumber":711,"oldContent":"            }"},{"type":"INSERT","lineNumber":712,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":713,"content":"                }"},{"type":"INSERT","lineNumber":714,"content":"            }"},{"type":"INSERT","lineNumber":715,"content":"        }"},{"type":"INSERT","lineNumber":716,"content":"        "},{"type":"INSERT","lineNumber":717,"content":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":715,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":720,"content":"    /**"},{"type":"DELETE","lineNumber":717,"oldContent":"                }"},{"type":"DELETE","lineNumber":719,"oldContent":"        }"},{"type":"DELETE","lineNumber":721,"oldContent":"        "},{"type":"DELETE","lineNumber":725,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":726,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"MODIFY","lineNumber":731,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":740,"content":"        return \"Haupteingang\"","oldContent":"}"},{"type":"DELETE","lineNumber":742,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":743,"oldContent":"}"},{"type":"INSERT","lineNumber":742,"content":"    "},{"type":"INSERT","lineNumber":743,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":744,"content":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"INSERT","lineNumber":745,"content":"        _currentNavigationStep.value = step"},{"type":"INSERT","lineNumber":746,"content":"    }"},{"type":"INSERT","lineNumber":747,"content":"    "},{"type":"INSERT","lineNumber":748,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":749,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":750,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":751,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":752,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":753,"content":"    }"},{"type":"INSERT","lineNumber":754,"content":"    "},{"type":"INSERT","lineNumber":756,"content":""},{"type":"DELETE","lineNumber":746,"oldContent":"        }"},{"type":"DELETE","lineNumber":747,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":758,"content":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":750,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":753,"oldContent":"                "},{"type":"DELETE","lineNumber":756,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":767,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":768,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":769,"content":"                "},{"type":"INSERT","lineNumber":770,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":771,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":772,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":773,"content":"            }"},{"type":"INSERT","lineNumber":774,"content":"        }"},{"type":"INSERT","lineNumber":776,"content":"}"}]},{"timestamp":1754319978425,"changes":[{"type":"INSERT","lineNumber":32,"content":"    private var routeRepository: RouteRepository? = null"},{"type":"DELETE","lineNumber":33,"oldContent":"    "},{"type":"MODIFY","lineNumber":55,"content":"    private val _isFeatureMappingEnabled = MutableStateFlow(false)","oldContent":""},{"type":"MODIFY","lineNumber":101,"content":"        }","oldContent":"                Log.i(TAG, \"  Landmark IDs: ${step.landmarkIds.joinToString(\", \")}\")"},{"type":"DELETE","lineNumber":435,"oldContent":"    /**"},{"type":"DELETE","lineNumber":436,"oldContent":"     * Setzt den aktuellen Navigationsschritt"},{"type":"DELETE","lineNumber":437,"oldContent":"     */"},{"type":"DELETE","lineNumber":438,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":439,"oldContent":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":440,"oldContent":"        Log.d(TAG, \"Navigationsschritt gesetzt: $step\")"},{"type":"DELETE","lineNumber":441,"oldContent":"    }"},{"type":"INSERT","lineNumber":435,"content":""},{"type":"DELETE","lineNumber":493,"oldContent":"    }"},{"type":"INSERT","lineNumber":487,"content":"            } else {"},{"type":"DELETE","lineNumber":507,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":501,"content":"            try {"},{"type":"DELETE","lineNumber":539,"oldContent":"                "},{"type":"INSERT","lineNumber":534,"content":"                "},{"type":"DELETE","lineNumber":619,"oldContent":"        }"},{"type":"DELETE","lineNumber":620,"oldContent":"}"},{"type":"DELETE","lineNumber":621,"oldContent":"    /**"},{"type":"DELETE","lineNumber":622,"oldContent":"}"},{"type":"DELETE","lineNumber":623,"oldContent":"    }"},{"type":"DELETE","lineNumber":625,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":626,"oldContent":"    }"},{"type":"INSERT","lineNumber":614,"content":"            "},{"type":"INSERT","lineNumber":615,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":616,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":617,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":619,"content":"            "},{"type":"INSERT","lineNumber":620,"content":"            routeLandmarks"},{"type":"INSERT","lineNumber":621,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":629,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":631,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":625,"content":"    }"},{"type":"INSERT","lineNumber":627,"content":"    /**"},{"type":"MODIFY","lineNumber":637,"content":"            }","oldContent":"}"},{"type":"DELETE","lineNumber":648,"oldContent":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":642,"content":"    }"},{"type":"DELETE","lineNumber":662,"oldContent":"            }"},{"type":"INSERT","lineNumber":657,"content":"            }"},{"type":"DELETE","lineNumber":666,"oldContent":"        }"},{"type":"INSERT","lineNumber":661,"content":"        }"},{"type":"INSERT","lineNumber":683,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":690,"oldContent":"            }"},{"type":"DELETE","lineNumber":693,"oldContent":"                "},{"type":"INSERT","lineNumber":687,"content":"    "},{"type":"DELETE","lineNumber":711,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":706,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":714,"oldContent":"    }"},{"type":"DELETE","lineNumber":716,"oldContent":""},{"type":"DELETE","lineNumber":719,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":721,"oldContent":"     */"},{"type":"INSERT","lineNumber":712,"content":"    }"},{"type":"INSERT","lineNumber":713,"content":""},{"type":"INSERT","lineNumber":715,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":716,"content":"     */"},{"type":"INSERT","lineNumber":724,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":731,"oldContent":"    }"},{"type":"DELETE","lineNumber":735,"oldContent":"}"},{"type":"DELETE","lineNumber":736,"oldContent":"                "},{"type":"DELETE","lineNumber":737,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":738,"oldContent":"            try {"},{"type":"INSERT","lineNumber":729,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":731,"content":"    "},{"type":"INSERT","lineNumber":732,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":733,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":741,"oldContent":"            }"},{"type":"INSERT","lineNumber":735,"content":"    }"},{"type":"DELETE","lineNumber":745,"oldContent":""},{"type":"DELETE","lineNumber":747,"oldContent":"    /**"},{"type":"DELETE","lineNumber":751,"oldContent":"     */"},{"type":"DELETE","lineNumber":753,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":756,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":758,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":761,"oldContent":"            try {"},{"type":"DELETE","lineNumber":762,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":764,"oldContent":"        }"},{"type":"INSERT","lineNumber":750,"content":""},{"type":"INSERT","lineNumber":751,"content":"    /**"},{"type":"DELETE","lineNumber":766,"oldContent":"            }"},{"type":"DELETE","lineNumber":767,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":768,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":769,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":753,"content":"     */"},{"type":"INSERT","lineNumber":754,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":755,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":756,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":757,"content":"            try {"},{"type":"INSERT","lineNumber":758,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":759,"content":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":771,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":762,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":763,"content":"                "},{"type":"INSERT","lineNumber":764,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":765,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":766,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":767,"content":"            }"},{"type":"INSERT","lineNumber":768,"content":"        }"},{"type":"INSERT","lineNumber":769,"content":"    }"},{"type":"INSERT","lineNumber":770,"content":"}"}]},{"timestamp":1754319994231,"changes":[{"type":"INSERT","lineNumber":4,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":6,"oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":65,"oldContent":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":66,"oldContent":""},{"type":"INSERT","lineNumber":65,"content":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"INSERT","lineNumber":66,"content":"        return try {"},{"type":"DELETE","lineNumber":98,"oldContent":"            Log.i(TAG, \"Schritt ${step.stepNumber}: ${step.instruction}\")"},{"type":"DELETE","lineNumber":99,"oldContent":"            Log.i(TAG, \"  Gebäude: ${step.building}\")"},{"type":"INSERT","lineNumber":98,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":99,"content":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"DELETE","lineNumber":481,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":487,"content":"            } else {"},{"type":"DELETE","lineNumber":495,"oldContent":"            try {"},{"type":"INSERT","lineNumber":501,"content":"            try {"},{"type":"DELETE","lineNumber":528,"oldContent":"                "},{"type":"INSERT","lineNumber":534,"content":"                "},{"type":"DELETE","lineNumber":606,"oldContent":"}"},{"type":"DELETE","lineNumber":607,"oldContent":"    /**"},{"type":"INSERT","lineNumber":606,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":607,"content":"                                imageUrl = \"\","},{"type":"INSERT","lineNumber":608,"content":"                                confidence = 1.0f"},{"type":"INSERT","lineNumber":609,"content":"                            )"},{"type":"INSERT","lineNumber":610,"content":"                        )"},{"type":"INSERT","lineNumber":611,"content":"                    }"},{"type":"INSERT","lineNumber":612,"content":"                }"},{"type":"INSERT","lineNumber":613,"content":"            }"},{"type":"DELETE","lineNumber":609,"oldContent":"}"},{"type":"DELETE","lineNumber":611,"oldContent":"    }"},{"type":"DELETE","lineNumber":613,"oldContent":"            }"},{"type":"DELETE","lineNumber":615,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":616,"oldContent":"    }"},{"type":"INSERT","lineNumber":618,"content":"            }"},{"type":"DELETE","lineNumber":620,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":621,"oldContent":"    }"},{"type":"DELETE","lineNumber":622,"oldContent":"    /**"},{"type":"DELETE","lineNumber":623,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":625,"content":"    }"},{"type":"INSERT","lineNumber":627,"content":"    /**"},{"type":"DELETE","lineNumber":631,"oldContent":"            }"},{"type":"DELETE","lineNumber":632,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":631,"content":"        return try {"},{"type":"MODIFY","lineNumber":637,"content":"            }","oldContent":"    }"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"DELETE","lineNumber":644,"oldContent":"    /**"},{"type":"DELETE","lineNumber":645,"oldContent":"     * Gibt den aktuellen Navigationsschritt zurück"},{"type":"DELETE","lineNumber":646,"oldContent":"     */"},{"type":"DELETE","lineNumber":647,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":648,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":649,"oldContent":"            val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":650,"oldContent":"            val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":651,"oldContent":"            }"},{"type":"DELETE","lineNumber":652,"oldContent":"            "},{"type":"DELETE","lineNumber":653,"oldContent":"            if (steps.isNotEmpty() && currentStepNumber > 0 && currentStepNumber <= steps.size) {"},{"type":"DELETE","lineNumber":654,"oldContent":"                steps[currentStepNumber - 1] // Convert to 0-based index"},{"type":"DELETE","lineNumber":655,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":656,"oldContent":"        }"},{"type":"DELETE","lineNumber":657,"oldContent":"                Log.w(TAG, \"Aktueller Schritt nicht verfügbar: $currentStepNumber von ${steps.size}\")"},{"type":"DELETE","lineNumber":658,"oldContent":"                null"},{"type":"DELETE","lineNumber":659,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":660,"oldContent":"            Log.e(TAG, \"Fehler beim Laden des aktuellen Schritts: ${e.message}\")"},{"type":"DELETE","lineNumber":661,"oldContent":"            null"},{"type":"INSERT","lineNumber":644,"content":""},{"type":"INSERT","lineNumber":645,"content":""},{"type":"DELETE","lineNumber":677,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":682,"oldContent":"    "},{"type":"INSERT","lineNumber":665,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":669,"content":"    "},{"type":"DELETE","lineNumber":700,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":706,"oldContent":"    }"},{"type":"DELETE","lineNumber":708,"oldContent":""},{"type":"INSERT","lineNumber":688,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":710,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":712,"oldContent":"     */"},{"type":"INSERT","lineNumber":694,"content":"    }"},{"type":"INSERT","lineNumber":695,"content":""},{"type":"INSERT","lineNumber":697,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":698,"content":"     */"},{"type":"DELETE","lineNumber":718,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":724,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":706,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":728,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":709,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":710,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":711,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":712,"content":"    }"},{"type":"INSERT","lineNumber":714,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":731,"oldContent":"    }"},{"type":"DELETE","lineNumber":732,"oldContent":"                "},{"type":"DELETE","lineNumber":733,"oldContent":"    }"},{"type":"DELETE","lineNumber":734,"oldContent":"            }"},{"type":"INSERT","lineNumber":717,"content":"    }"},{"type":"DELETE","lineNumber":742,"oldContent":""},{"type":"DELETE","lineNumber":744,"oldContent":"    /**"},{"type":"INSERT","lineNumber":726,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":727,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":728,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":729,"content":"    }"},{"type":"INSERT","lineNumber":730,"content":"    "},{"type":"INSERT","lineNumber":731,"content":""},{"type":"INSERT","lineNumber":732,"content":""},{"type":"INSERT","lineNumber":733,"content":"    /**"},{"type":"INSERT","lineNumber":734,"content":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":748,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":750,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":753,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":756,"oldContent":"    }"},{"type":"DELETE","lineNumber":757,"oldContent":"    "},{"type":"INSERT","lineNumber":742,"content":"                "},{"type":"INSERT","lineNumber":743,"content":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":760,"oldContent":""},{"type":"DELETE","lineNumber":763,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":769,"oldContent":"                landmarkFeatureStorage?.cleanup()"}]},{"timestamp":1754321415007,"changes":[{"type":"MODIFY","lineNumber":26,"content":"    private val TAG = \"RouteViewModel\"","oldContent":"    // State für Feature-Navigation"},{"type":"MODIFY","lineNumber":487,"content":"            } else {","oldContent":"            } else {"},{"type":"MODIFY","lineNumber":501,"content":"            try {","oldContent":"            try {"},{"type":"DELETE","lineNumber":512,"oldContent":"                        building = building,"},{"type":"DELETE","lineNumber":513,"oldContent":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":512,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":518,"oldContent":"                        building = building,"},{"type":"DELETE","lineNumber":519,"oldContent":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":517,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":524,"oldContent":"                        building = building,"},{"type":"DELETE","lineNumber":525,"oldContent":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":522,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":530,"oldContent":"                        building = building,"},{"type":"DELETE","lineNumber":531,"oldContent":"                        targetLandmark = null"},{"type":"INSERT","lineNumber":527,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":533,"oldContent":"                "},{"type":"INSERT","lineNumber":530,"content":"                "},{"type":"DELETE","lineNumber":536,"oldContent":"                    totalLength = 150.0, // 150 Meter"},{"type":"INSERT","lineNumber":532,"content":"                    id = \"demo_route\","},{"type":"INSERT","lineNumber":533,"content":"                    name = \"Demo Route\","},{"type":"DELETE","lineNumber":559,"oldContent":"}"},{"type":"DELETE","lineNumber":560,"oldContent":""},{"type":"DELETE","lineNumber":561,"oldContent":"    }"},{"type":"DELETE","lineNumber":562,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":563,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":556,"content":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":557,"content":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":565,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":566,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":559,"content":"        }"},{"type":"INSERT","lineNumber":560,"content":"    }"},{"type":"INSERT","lineNumber":561,"content":"    "},{"type":"INSERT","lineNumber":564,"content":""},{"type":"INSERT","lineNumber":565,"content":"    "},{"type":"DELETE","lineNumber":603,"oldContent":"}"},{"type":"DELETE","lineNumber":604,"oldContent":"            }"},{"type":"DELETE","lineNumber":605,"oldContent":"    }"},{"type":"INSERT","lineNumber":600,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":601,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":602,"content":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":609,"oldContent":"            "},{"type":"DELETE","lineNumber":612,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":615,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":617,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":612,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":613,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":614,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":616,"content":"            "},{"type":"DELETE","lineNumber":623,"oldContent":"    }"},{"type":"DELETE","lineNumber":626,"oldContent":"    /**"},{"type":"INSERT","lineNumber":622,"content":"    }"},{"type":"INSERT","lineNumber":624,"content":"    /**"},{"type":"DELETE","lineNumber":635,"oldContent":"    }"},{"type":"DELETE","lineNumber":636,"oldContent":"            }"},{"type":"INSERT","lineNumber":632,"content":"            } else {"},{"type":"INSERT","lineNumber":634,"content":"            }"},{"type":"INSERT","lineNumber":639,"content":"    }"},{"type":"DELETE","lineNumber":644,"oldContent":"    }"},{"type":"DELETE","lineNumber":647,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":652,"oldContent":"    "},{"type":"INSERT","lineNumber":662,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":670,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":666,"content":"    "},{"type":"DELETE","lineNumber":678,"oldContent":"    }"},{"type":"DELETE","lineNumber":679,"oldContent":""},{"type":"DELETE","lineNumber":682,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":685,"oldContent":"     */"},{"type":"DELETE","lineNumber":692,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":694,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":685,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"DELETE","lineNumber":696,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":697,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":699,"oldContent":"    }"},{"type":"DELETE","lineNumber":701,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":704,"oldContent":"    /**"},{"type":"INSERT","lineNumber":692,"content":""},{"type":"INSERT","lineNumber":693,"content":"    /**"},{"type":"INSERT","lineNumber":694,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":695,"content":"     */"},{"type":"DELETE","lineNumber":710,"oldContent":"}"},{"type":"INSERT","lineNumber":700,"content":"    "},{"type":"INSERT","lineNumber":701,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":702,"content":"        Log.d(TAG, \"startFrameProcessing called (stub)\")"},{"type":"INSERT","lineNumber":703,"content":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":712,"oldContent":"                "},{"type":"DELETE","lineNumber":713,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":714,"oldContent":"    }"},{"type":"DELETE","lineNumber":715,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":717,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":706,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":707,"content":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"INSERT","lineNumber":708,"content":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":720,"oldContent":"    "},{"type":"INSERT","lineNumber":711,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":722,"oldContent":""},{"type":"DELETE","lineNumber":723,"oldContent":""},{"type":"DELETE","lineNumber":724,"oldContent":"    /**"},{"type":"DELETE","lineNumber":725,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":714,"content":"    }"},{"type":"DELETE","lineNumber":733,"oldContent":"                "},{"type":"DELETE","lineNumber":734,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":723,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":724,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":725,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":726,"content":"    }"},{"type":"INSERT","lineNumber":727,"content":"    "},{"type":"INSERT","lineNumber":728,"content":""},{"type":"INSERT","lineNumber":729,"content":""},{"type":"INSERT","lineNumber":730,"content":"    /**"},{"type":"INSERT","lineNumber":731,"content":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":739,"content":"                "},{"type":"INSERT","lineNumber":740,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":749,"content":"}"}]},{"timestamp":1754321425478,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import kotlinx.coroutines.flow.MutableStateFlow","oldContent":"import android.content.Context"},{"type":"MODIFY","lineNumber":64,"content":"     */","oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"INSERT","lineNumber":486,"content":"                result is SaveResult.Success"},{"type":"DELETE","lineNumber":487,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":500,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":501,"oldContent":"            try {"},{"type":"MODIFY","lineNumber":517,"content":"                        landmarks = emptyList()","oldContent":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":520,"oldContent":"                        landmarks = emptyList()"},{"type":"MODIFY","lineNumber":523,"content":"                    ),","oldContent":"                    ),"},{"type":"DELETE","lineNumber":528,"oldContent":"                "},{"type":"DELETE","lineNumber":529,"oldContent":"                    id = \"demo_route\","},{"type":"INSERT","lineNumber":527,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":531,"oldContent":"                    name = \"Demo Route\","},{"type":"INSERT","lineNumber":530,"content":"                "},{"type":"INSERT","lineNumber":532,"content":"                    id = \"demo_route\","},{"type":"INSERT","lineNumber":533,"content":"                    name = \"Demo Route\","},{"type":"MODIFY","lineNumber":538,"content":"                Log.i(TAG, \"Feature-Navigation Route geladen: ${demoSteps.size} Schritte\")","oldContent":"                Log.i(TAG, \"Feature-Navigation Route geladen: ${demoSteps.size} Schritte, ${featureRoute.totalLength}m\")"},{"type":"DELETE","lineNumber":553,"oldContent":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":555,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":556,"content":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"DELETE","lineNumber":557,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":558,"content":"            }"},{"type":"DELETE","lineNumber":562,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":597,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":598,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":599,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":598,"oldContent":"    }"},{"type":"DELETE","lineNumber":600,"oldContent":"            }"},{"type":"DELETE","lineNumber":602,"oldContent":"    }"},{"type":"DELETE","lineNumber":608,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":609,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":611,"oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":613,"oldContent":"            "},{"type":"INSERT","lineNumber":612,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":613,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":614,"content":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":616,"content":"            "},{"type":"DELETE","lineNumber":619,"oldContent":"    }"},{"type":"DELETE","lineNumber":621,"oldContent":"    /**"},{"type":"INSERT","lineNumber":622,"content":"    }"},{"type":"INSERT","lineNumber":624,"content":"    /**"},{"type":"DELETE","lineNumber":629,"oldContent":"            } else {"},{"type":"MODIFY","lineNumber":632,"content":"            } else {","oldContent":"            }"},{"type":"INSERT","lineNumber":634,"content":"            }"},{"type":"DELETE","lineNumber":636,"oldContent":"    }"},{"type":"INSERT","lineNumber":639,"content":"    }"},{"type":"DELETE","lineNumber":657,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"MODIFY","lineNumber":662,"content":"                reloadLandmarksForRoute(currentRoute.route)","oldContent":"    "},{"type":"INSERT","lineNumber":666,"content":"    "},{"type":"DELETE","lineNumber":678,"oldContent":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":684,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":685,"content":"                    landmarkIds.add(landmark) // landmarks ist bereits List<String>"},{"type":"INSERT","lineNumber":686,"content":"                }"},{"type":"INSERT","lineNumber":687,"content":"            }"},{"type":"INSERT","lineNumber":688,"content":"        }"},{"type":"INSERT","lineNumber":689,"content":"        "},{"type":"INSERT","lineNumber":690,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":691,"content":"    }"},{"type":"DELETE","lineNumber":687,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":690,"oldContent":"                }"},{"type":"DELETE","lineNumber":691,"oldContent":"            }"},{"type":"INSERT","lineNumber":696,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":697,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":698,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":699,"content":"    }"},{"type":"DELETE","lineNumber":693,"oldContent":"        }"},{"type":"DELETE","lineNumber":696,"oldContent":"        "},{"type":"DELETE","lineNumber":698,"oldContent":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":705,"content":"    "},{"type":"DELETE","lineNumber":701,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":703,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":705,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":710,"content":"    "},{"type":"DELETE","lineNumber":708,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":712,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":713,"content":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":716,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":717,"content":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"INSERT","lineNumber":718,"content":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":713,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":721,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":722,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":718,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":720,"oldContent":"    "},{"type":"DELETE","lineNumber":722,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":724,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":726,"oldContent":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":728,"oldContent":"    }"},{"type":"DELETE","lineNumber":729,"oldContent":"    "},{"type":"DELETE","lineNumber":730,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":731,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":734,"oldContent":"                "},{"type":"DELETE","lineNumber":736,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":739,"content":"                "},{"type":"INSERT","lineNumber":740,"content":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":746,"oldContent":"}"},{"type":"INSERT","lineNumber":749,"content":"}"}]},{"timestamp":1754321441007,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import kotlinx.coroutines.runBlocking","oldContent":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"MODIFY","lineNumber":15,"content":"import com.example.arwalking.storage.SaveResult","oldContent":"    private val TAG = \"RouteViewModel\""},{"type":"DELETE","lineNumber":33,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":36,"oldContent":"            val jsonString = loadJSONFromAsset(context, \"route.json\")"},{"type":"DELETE","lineNumber":37,"oldContent":"            val routeData = gson.fromJson(jsonString, RouteData::class.java)"},{"type":"DELETE","lineNumber":39,"oldContent":"            convertToNavigationRoute(routeData)"},{"type":"INSERT","lineNumber":34,"content":"    // Feature Matching System"},{"type":"INSERT","lineNumber":35,"content":"    private var featureMatchingEngine: FeatureMatchingEngine? = null"},{"type":"INSERT","lineNumber":36,"content":"    private var landmarkFeatureStorage: LandmarkFeatureStorage? = null"},{"type":"INSERT","lineNumber":37,"content":"    private var arTrackingSystem: ARTrackingSystem? = null"},{"type":"INSERT","lineNumber":38,"content":"    "},{"type":"INSERT","lineNumber":39,"content":"    // Verarbeitete Landmarks für schnelles Matching"},{"type":"MODIFY","lineNumber":105,"content":"     * Loggt Informationen über die geladene NavigationRoute","oldContent":"        }"},{"type":"DELETE","lineNumber":107,"oldContent":"            }"},{"type":"DELETE","lineNumber":108,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":109,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"DELETE","lineNumber":110,"oldContent":"                landmarkFeatureStorage?.cleanup()"},{"type":"DELETE","lineNumber":111,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":114,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":115,"oldContent":"            try {"},{"type":"DELETE","lineNumber":116,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":117,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":118,"oldContent":"     * Cleanup beim Destroy"},{"type":"INSERT","lineNumber":107,"content":"    fun logNavigationRoute(navigationRoute: NavigationRoute) {"},{"type":"INSERT","lineNumber":108,"content":"        Log.i(TAG, \"=== Navigation Route Details ===\")"},{"type":"INSERT","lineNumber":109,"content":"        Log.i(TAG, \"Route ID: ${navigationRoute.id}\")"},{"type":"INSERT","lineNumber":110,"content":"        Log.i(TAG, \"Route Name: ${navigationRoute.name}\")"},{"type":"INSERT","lineNumber":111,"content":"        Log.i(TAG, \"Route Description: ${navigationRoute.description}\")"},{"type":"INSERT","lineNumber":112,"content":"        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")"},{"type":"INSERT","lineNumber":113,"content":"        "},{"type":"INSERT","lineNumber":114,"content":"        navigationRoute.steps.forEachIndexed { index, step ->"},{"type":"INSERT","lineNumber":115,"content":"            Log.d(TAG, \"Schritt ${index + 1}: ${step.instruction}\")"},{"type":"INSERT","lineNumber":116,"content":"            Log.d(TAG, \"  - Building: ${step.building}\")"},{"type":"INSERT","lineNumber":117,"content":"            Log.d(TAG, \"  - Floor: ${step.floor}\")"},{"type":"INSERT","lineNumber":118,"content":"            Log.d(TAG, \"  - Distance: ${step.distance}m\")"},{"type":"DELETE","lineNumber":129,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":130,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":129,"content":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"INSERT","lineNumber":130,"content":"        val steps = mutableListOf<NavigationStep>()"},{"type":"DELETE","lineNumber":133,"oldContent":"    "},{"type":"DELETE","lineNumber":134,"oldContent":"    }"},{"type":"DELETE","lineNumber":135,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":136,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":137,"oldContent":"    "},{"type":"DELETE","lineNumber":138,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":139,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":140,"oldContent":"    "},{"type":"DELETE","lineNumber":141,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":142,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":143,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":145,"oldContent":"    }"},{"type":"DELETE","lineNumber":146,"oldContent":"        "},{"type":"INSERT","lineNumber":133,"content":"        // Durchlaufe alle PathItems und RouteParts"},{"type":"INSERT","lineNumber":134,"content":"        routeData.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":135,"content":"            pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":136,"content":"                // Verwende die deutsche Anweisung als primäre Anweisung"},{"type":"INSERT","lineNumber":137,"content":"                val instruction = routePart.instructionDe ?: routePart.instruction ?: \"Folgen Sie der Route\""},{"type":"INSERT","lineNumber":138,"content":"                "},{"type":"INSERT","lineNumber":139,"content":"                // Extrahiere Stockwerk aus levelInfo falls verfügbar"},{"type":"INSERT","lineNumber":140,"content":"                val floor = pathItem.levelInfo?.storey?.toIntOrNull() ?: 0"},{"type":"INSERT","lineNumber":141,"content":"                "},{"type":"INSERT","lineNumber":142,"content":"                steps.add("},{"type":"INSERT","lineNumber":143,"content":"                    NavigationStep("},{"type":"INSERT","lineNumber":144,"content":"                        stepNumber = stepNumber++,"},{"type":"INSERT","lineNumber":145,"content":"                        instruction = instruction,"},{"type":"INSERT","lineNumber":146,"content":"                        building = pathItem.xmlName,"},{"type":"DELETE","lineNumber":149,"oldContent":"            for (routePart in pathItem.routeParts) {"},{"type":"DELETE","lineNumber":150,"oldContent":"        val landmarkIds = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":151,"oldContent":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":149,"content":"                        distance = routePart.distance ?: 0.0,"},{"type":"INSERT","lineNumber":150,"content":"                        estimatedTime = routePart.duration ?: 60"},{"type":"INSERT","lineNumber":151,"content":"                    )"},{"type":"DELETE","lineNumber":321,"oldContent":"                _isFeatureMappingEnabled.value = true"},{"type":"DELETE","lineNumber":322,"oldContent":"                }"},{"type":"DELETE","lineNumber":323,"oldContent":"     */"},{"type":"DELETE","lineNumber":324,"oldContent":"     * Aktiviert Storage-System sofort"},{"type":"DELETE","lineNumber":325,"oldContent":"    /**"},{"type":"DELETE","lineNumber":326,"oldContent":"    "},{"type":"DELETE","lineNumber":327,"oldContent":""},{"type":"DELETE","lineNumber":328,"oldContent":"    "},{"type":"DELETE","lineNumber":329,"oldContent":"    }"},{"type":"DELETE","lineNumber":330,"oldContent":"        }"},{"type":"DELETE","lineNumber":331,"oldContent":"            false"},{"type":"INSERT","lineNumber":321,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":322,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":323,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":324,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":325,"content":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":326,"content":"                    description = description,"},{"type":"INSERT","lineNumber":327,"content":"                    category = \"Training\""},{"type":"INSERT","lineNumber":328,"content":"                )"},{"type":"INSERT","lineNumber":329,"content":"                "},{"type":"INSERT","lineNumber":330,"content":"                when (saveResult) {"},{"type":"INSERT","lineNumber":331,"content":"                    is SaveResult.Success -> {"},{"type":"DELETE","lineNumber":344,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":345,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":346,"oldContent":"                                id = landmark.id, // Exakte ID aus JSON (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":347,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":348,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":349,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":350,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":351,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":352,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":344,"content":"            "},{"type":"INSERT","lineNumber":345,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":346,"content":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":347,"content":"            false"},{"type":"INSERT","lineNumber":348,"content":"        }"},{"type":"INSERT","lineNumber":349,"content":"    }"},{"type":"INSERT","lineNumber":350,"content":"    "},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":354,"content":"    "},{"type":"MODIFY","lineNumber":448,"content":"     */","oldContent":"                Log.d(TAG, \"- ${landmark.id}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":472,"oldContent":"            "},{"type":"DELETE","lineNumber":473,"oldContent":"            }"},{"type":"DELETE","lineNumber":474,"oldContent":"                    }"},{"type":"DELETE","lineNumber":475,"oldContent":"                        )"},{"type":"DELETE","lineNumber":476,"oldContent":"                            )"},{"type":"INSERT","lineNumber":472,"content":"        name: String,"},{"type":"INSERT","lineNumber":473,"content":"        description: String,"},{"type":"INSERT","lineNumber":474,"content":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":475,"content":"    ): Boolean {"},{"type":"INSERT","lineNumber":476,"content":"        return try {"},{"type":"DELETE","lineNumber":479,"oldContent":"                                ),"},{"type":"DELETE","lineNumber":480,"oldContent":"                                    0.0"},{"type":"DELETE","lineNumber":481,"oldContent":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"INSERT","lineNumber":479,"content":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":480,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":481,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":492,"content":"            false"},{"type":"INSERT","lineNumber":493,"content":"        }"},{"type":"INSERT","lineNumber":494,"content":"    }"},{"type":"INSERT","lineNumber":495,"content":"    "},{"type":"DELETE","lineNumber":493,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":494,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":495,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":496,"oldContent":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":516,"content":"                        instruction = \"Biegen Sie links ab zur Treppe\","},{"type":"DELETE","lineNumber":517,"oldContent":"                        landmarks = emptyList()"},{"type":"MODIFY","lineNumber":523,"content":"                    ),","oldContent":"                    ),"},{"type":"DELETE","lineNumber":526,"oldContent":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":528,"oldContent":"                "},{"type":"INSERT","lineNumber":527,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":530,"oldContent":"                    id = \"demo_route\","},{"type":"DELETE","lineNumber":532,"oldContent":"                    name = \"Demo Route\","},{"type":"INSERT","lineNumber":530,"content":"                "},{"type":"INSERT","lineNumber":532,"content":"                    id = \"demo_route\","},{"type":"INSERT","lineNumber":533,"content":"                    name = \"Demo Route\","},{"type":"MODIFY","lineNumber":551,"content":"            try {","oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"MODIFY","lineNumber":555,"content":"            } catch (e: Exception) {","oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":584,"oldContent":""},{"type":"DELETE","lineNumber":585,"oldContent":"    "},{"type":"DELETE","lineNumber":586,"oldContent":"    }"},{"type":"DELETE","lineNumber":587,"oldContent":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":588,"oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"DELETE","lineNumber":589,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":590,"oldContent":"    "},{"type":"DELETE","lineNumber":591,"oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":592,"oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":593,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":594,"oldContent":"    "},{"type":"DELETE","lineNumber":595,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":596,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":584,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":585,"content":"                            )"},{"type":"INSERT","lineNumber":586,"content":"                        )"},{"type":"INSERT","lineNumber":587,"content":"                    }"},{"type":"INSERT","lineNumber":588,"content":"                }"},{"type":"INSERT","lineNumber":589,"content":"            }"},{"type":"INSERT","lineNumber":590,"content":"            "},{"type":"INSERT","lineNumber":591,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":592,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":593,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":594,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":595,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"MODIFY","lineNumber":599,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname","oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"MODIFY","lineNumber":609,"content":"            }","oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":610,"content":"            "},{"type":"INSERT","lineNumber":611,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":615,"oldContent":"            "},{"type":"DELETE","lineNumber":616,"oldContent":"            }"},{"type":"DELETE","lineNumber":620,"oldContent":"    }"},{"type":"DELETE","lineNumber":623,"oldContent":"    /**"},{"type":"INSERT","lineNumber":621,"content":"    }"},{"type":"INSERT","lineNumber":623,"content":"    /**"},{"type":"DELETE","lineNumber":631,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":633,"oldContent":"            }"},{"type":"INSERT","lineNumber":631,"content":"            } else {"},{"type":"INSERT","lineNumber":633,"content":"            }"},{"type":"MODIFY","lineNumber":638,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":661,"content":"                reloadLandmarksForRoute(currentRoute.route)","oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":665,"oldContent":"    "},{"type":"DELETE","lineNumber":667,"oldContent":"                "},{"type":"DELETE","lineNumber":668,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":669,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":665,"content":"    "},{"type":"INSERT","lineNumber":666,"content":"    /**"},{"type":"INSERT","lineNumber":667,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":668,"content":"     */"},{"type":"DELETE","lineNumber":674,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":675,"oldContent":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":673,"content":"    "},{"type":"INSERT","lineNumber":675,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":678,"oldContent":"    }"},{"type":"DELETE","lineNumber":679,"oldContent":"    }"},{"type":"DELETE","lineNumber":680,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":681,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":682,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":677,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":678,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":679,"content":"        "},{"type":"INSERT","lineNumber":680,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":681,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":682,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"DELETE","lineNumber":684,"oldContent":"    }"},{"type":"DELETE","lineNumber":686,"oldContent":""},{"type":"DELETE","lineNumber":688,"oldContent":"    /**"},{"type":"DELETE","lineNumber":691,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":693,"oldContent":"     */"},{"type":"INSERT","lineNumber":691,"content":""},{"type":"INSERT","lineNumber":692,"content":"    /**"},{"type":"INSERT","lineNumber":693,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":694,"content":"     */"},{"type":"INSERT","lineNumber":695,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"INSERT","lineNumber":696,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"INSERT","lineNumber":697,"content":"        // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":698,"content":"    }"},{"type":"DELETE","lineNumber":699,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":700,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called (stub)\")"},{"type":"DELETE","lineNumber":702,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"MODIFY","lineNumber":704,"content":"    ","oldContent":"    }"},{"type":"MODIFY","lineNumber":709,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":711,"content":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":712,"content":"        return \"Haupteingang\""},{"type":"DELETE","lineNumber":713,"oldContent":"    "},{"type":"DELETE","lineNumber":714,"oldContent":"    }"},{"type":"MODIFY","lineNumber":715,"content":"    fun setCurrentNavigationStep(step: Int) {","oldContent":"        Log.d(TAG, \"getCurrentEndPoint called (stub)\")"},{"type":"INSERT","lineNumber":716,"content":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":717,"oldContent":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":718,"content":"    }"},{"type":"INSERT","lineNumber":719,"content":"    "},{"type":"INSERT","lineNumber":720,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":721,"content":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":720,"oldContent":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"DELETE","lineNumber":722,"oldContent":"        Log.d(TAG, \"setCurrentNavigationStep called (stub): $step\")"},{"type":"DELETE","lineNumber":724,"oldContent":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":726,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":728,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"DELETE","lineNumber":732,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":731,"content":"     */"},{"type":"INSERT","lineNumber":732,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":733,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":734,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":735,"content":"            try {"},{"type":"INSERT","lineNumber":736,"content":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":737,"content":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":740,"content":"                landmarkFeatureStorage?.cleanup()"},{"type":"INSERT","lineNumber":741,"content":"                "},{"type":"INSERT","lineNumber":742,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":743,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":744,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":745,"content":"            }"},{"type":"INSERT","lineNumber":746,"content":"        }"},{"type":"INSERT","lineNumber":747,"content":"    }"},{"type":"INSERT","lineNumber":748,"content":"}"}]},{"timestamp":1754321471836,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"    private val TAG = \"RouteViewModel\""},{"type":"DELETE","lineNumber":19,"oldContent":"    "},{"type":"DELETE","lineNumber":20,"oldContent":"    private var featureMapManager: FeatureMapManager? = null"},{"type":"INSERT","lineNumber":18,"content":"import com.example.arwalking.data.RouteData"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":20,"content":"/**"},{"type":"INSERT","lineNumber":33,"content":"    "},{"type":"DELETE","lineNumber":38,"oldContent":"    "},{"type":"DELETE","lineNumber":46,"oldContent":"            convertToNavigationRoute(routeData)"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":48,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"DELETE","lineNumber":49,"oldContent":"            null"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"INSERT","lineNumber":46,"content":"    val currentRoute: StateFlow<RouteData?> = _currentRoute.asStateFlow()"},{"type":"INSERT","lineNumber":47,"content":"    "},{"type":"INSERT","lineNumber":48,"content":"    // State für Feature-Navigation"},{"type":"INSERT","lineNumber":49,"content":"    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)"},{"type":"INSERT","lineNumber":50,"content":"    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()"},{"type":"INSERT","lineNumber":51,"content":"    "},{"type":"INSERT","lineNumber":52,"content":"    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())"},{"type":"MODIFY","lineNumber":106,"content":"     */","oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"        return _currentRoute.value?.route?.path?.lastOrNull()?.xmlName ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":125,"content":"    "},{"type":"INSERT","lineNumber":126,"content":"    /**"},{"type":"MODIFY","lineNumber":132,"content":"        ","oldContent":"    }"},{"type":"DELETE","lineNumber":178,"oldContent":"                        Log.d(TAG, \"Bestes Match: ${bestMatch.landmark.name} (${(bestMatch.confidence * 100).toInt()}%, ${bestMatch.matchCount} Features)\")"},{"type":"DELETE","lineNumber":179,"oldContent":"                    if (bestMatch != null) {"},{"type":"DELETE","lineNumber":180,"oldContent":"                    "},{"type":"DELETE","lineNumber":181,"oldContent":"                if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":182,"oldContent":"                _currentMatches.value = featureMatchResults"},{"type":"INSERT","lineNumber":178,"content":"                "},{"type":"INSERT","lineNumber":179,"content":"                // Feature-Matching System initialisieren"},{"type":"INSERT","lineNumber":180,"content":"                featureMatchingEngine = FeatureMatchingEngine()"},{"type":"INSERT","lineNumber":181,"content":"                landmarkFeatureStorage = LandmarkFeatureStorage(context)"},{"type":"INSERT","lineNumber":182,"content":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":183,"content":"                "},{"type":"INSERT","lineNumber":184,"content":"                // Importiere Landmarks aus Assets falls noch nicht vorhanden"},{"type":"INSERT","lineNumber":185,"content":"                val importedCount = landmarkFeatureStorage!!.importLandmarksFromAssets()"},{"type":"INSERT","lineNumber":186,"content":"                if (importedCount > 0) {"},{"type":"INSERT","lineNumber":187,"content":"                    Log.i(TAG, \"$importedCount Landmarks aus Assets importiert\")"},{"type":"DELETE","lineNumber":184,"oldContent":"                        screenPosition = tracked.position"},{"type":"DELETE","lineNumber":185,"oldContent":"                        distance = null,"},{"type":"DELETE","lineNumber":186,"oldContent":"                        confidence = tracked.confidence,"},{"type":"DELETE","lineNumber":187,"oldContent":"                        landmark = tracked.landmark,"},{"type":"DELETE","lineNumber":188,"oldContent":"                    FeatureMatchResult("},{"type":"DELETE","lineNumber":189,"oldContent":"                // Konvertiere TrackedLandmarks zurück zu FeatureMatchResults für UI-Kompatibilität"},{"type":"MODIFY","lineNumber":190,"content":"                // Lade route-spezifische Landmarks falls Route verfügbar ist","oldContent":"                val trackedLandmarks = arTrackingSystem?.updateTracking(matches) ?: emptyList()"},{"type":"INSERT","lineNumber":191,"content":"                processedLandmarks.clear()"},{"type":"DELETE","lineNumber":193,"oldContent":"            try {"},{"type":"DELETE","lineNumber":194,"oldContent":"     */"},{"type":"DELETE","lineNumber":195,"oldContent":"    /**"},{"type":"DELETE","lineNumber":196,"oldContent":"        }"},{"type":"DELETE","lineNumber":197,"oldContent":"            false"},{"type":"DELETE","lineNumber":198,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":199,"oldContent":"                        // Erstelle FeatureLandmark"},{"type":"DELETE","lineNumber":200,"oldContent":"                    "},{"type":"DELETE","lineNumber":201,"oldContent":"                    val features = featureMatchingEngine!!.extractFeatures(bitmap)"},{"type":"DELETE","lineNumber":202,"oldContent":"                if (result is SaveResult.Success) {"},{"type":"INSERT","lineNumber":193,"content":"                val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":194,"content":"                if (currentRoute != null) {"},{"type":"INSERT","lineNumber":195,"content":"                    // Lade nur die Landmarks, die in der aktuellen Route verwendet werden"},{"type":"INSERT","lineNumber":196,"content":"                    processedLandmarks.addAll(landmarkFeatureStorage!!.loadRouteSpecificLandmarks(currentRoute.route))"},{"type":"INSERT","lineNumber":197,"content":"                    Log.i(TAG, \"${processedLandmarks.size} route-spezifische Landmarks für Feature-Matching geladen\")"},{"type":"INSERT","lineNumber":198,"content":"                } else {"},{"type":"INSERT","lineNumber":199,"content":"                    // Fallback: Lade alle verfügbaren Landmarks"},{"type":"INSERT","lineNumber":200,"content":"                    processedLandmarks.addAll(landmarkFeatureStorage!!.loadAllLandmarks())"},{"type":"INSERT","lineNumber":201,"content":"                    Log.i(TAG, \"${processedLandmarks.size} Landmarks für Feature-Matching geladen (alle verfügbaren)\")"},{"type":"INSERT","lineNumber":202,"content":"                }"},{"type":"DELETE","lineNumber":204,"oldContent":"     * Erstellt einen neuen Landmark mit Feature-Extraktion"},{"type":"DELETE","lineNumber":205,"oldContent":"    /**"},{"type":"DELETE","lineNumber":206,"oldContent":"    }"},{"type":"DELETE","lineNumber":207,"oldContent":"     * Gibt Performance-Informationen zurück"},{"type":"DELETE","lineNumber":208,"oldContent":"    }"},{"type":"DELETE","lineNumber":209,"oldContent":"    "},{"type":"DELETE","lineNumber":210,"oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":204,"content":"                // Prüfe verfügbare Bilder im Projektverzeichnis"},{"type":"INSERT","lineNumber":205,"content":"                val availableLandmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":206,"content":"                Log.i(TAG, \"Verfügbare Landmark-Bilder: ${availableLandmarks.size}\")"},{"type":"INSERT","lineNumber":208,"content":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"INSERT","lineNumber":209,"content":"                    Log.d(TAG, \"- ${landmark.id} (${landmark.filename})\")"},{"type":"INSERT","lineNumber":210,"content":"                }"},{"type":"INSERT","lineNumber":211,"content":"                "},{"type":"DELETE","lineNumber":238,"oldContent":"}"},{"type":"MODIFY","lineNumber":238,"content":"                ","oldContent":""},{"type":"INSERT","lineNumber":239,"content":"                if (storageManager == null) {"},{"type":"MODIFY","lineNumber":317,"content":"    ): Boolean {","oldContent":"            _currentNavigationStep.value = currentStep - 1"},{"type":"DELETE","lineNumber":334,"oldContent":"    }"},{"type":"DELETE","lineNumber":335,"oldContent":"    /**"},{"type":"DELETE","lineNumber":336,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":337,"oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":338,"oldContent":"                                description = \"Landmark ${landmark.type ?: \"\"}\","},{"type":"DELETE","lineNumber":339,"oldContent":"                                name = landmarkName,"},{"type":"DELETE","lineNumber":340,"oldContent":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":334,"content":"                    }"},{"type":"INSERT","lineNumber":335,"content":"                    is SaveResult.Error -> {"},{"type":"INSERT","lineNumber":336,"content":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"INSERT","lineNumber":337,"content":"                        false"},{"type":"INSERT","lineNumber":338,"content":"                    }"},{"type":"INSERT","lineNumber":339,"content":"                }"},{"type":"INSERT","lineNumber":340,"content":"            } else {"},{"type":"INSERT","lineNumber":352,"content":"    "},{"type":"DELETE","lineNumber":354,"oldContent":"    "},{"type":"DELETE","lineNumber":380,"oldContent":"            }"},{"type":"DELETE","lineNumber":381,"oldContent":"                }"},{"type":"DELETE","lineNumber":382,"oldContent":"                    }"},{"type":"DELETE","lineNumber":383,"oldContent":"                        )"},{"type":"DELETE","lineNumber":384,"oldContent":"                            )"},{"type":"INSERT","lineNumber":380,"content":"     */"},{"type":"INSERT","lineNumber":381,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":382,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":383,"content":"    }"},{"type":"INSERT","lineNumber":384,"content":"    "},{"type":"DELETE","lineNumber":389,"oldContent":"                                    landmark.y?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":390,"oldContent":"                // Führe echtes Feature-Matching durch"},{"type":"DELETE","lineNumber":391,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":392,"oldContent":"     */"},{"type":"INSERT","lineNumber":389,"content":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"INSERT","lineNumber":390,"content":"    }"},{"type":"INSERT","lineNumber":391,"content":"    "},{"type":"INSERT","lineNumber":392,"content":"    /**"},{"type":"DELETE","lineNumber":400,"oldContent":"    "},{"type":"DELETE","lineNumber":401,"oldContent":"    }"},{"type":"INSERT","lineNumber":400,"content":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":403,"oldContent":"     * Setzt den aktuellen Navigationsschritt"},{"type":"DELETE","lineNumber":404,"oldContent":"}"},{"type":"INSERT","lineNumber":402,"content":"    }"},{"type":"INSERT","lineNumber":403,"content":"    "},{"type":"INSERT","lineNumber":404,"content":"    /**"},{"type":"INSERT","lineNumber":432,"content":"        }"},{"type":"DELETE","lineNumber":433,"oldContent":"            }"},{"type":"MODIFY","lineNumber":434,"content":"    ","oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":444,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":445,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"DELETE","lineNumber":446,"oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":447,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":448,"oldContent":"     */"},{"type":"DELETE","lineNumber":449,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":450,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":451,"oldContent":"            }"},{"type":"DELETE","lineNumber":452,"oldContent":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"DELETE","lineNumber":453,"oldContent":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"DELETE","lineNumber":454,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":455,"oldContent":"                result is SaveResult.Success"},{"type":"DELETE","lineNumber":456,"oldContent":"}"},{"type":"INSERT","lineNumber":444,"content":"    }"},{"type":"INSERT","lineNumber":445,"content":"    "},{"type":"INSERT","lineNumber":447,"content":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":448,"content":"     */"},{"type":"INSERT","lineNumber":449,"content":"    fun previousNavigationStep() {"},{"type":"INSERT","lineNumber":450,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":451,"content":"        if (currentStep > 1) {"},{"type":"INSERT","lineNumber":452,"content":"            _currentNavigationStep.value = currentStep - 1"},{"type":"INSERT","lineNumber":453,"content":"            Log.d(TAG, \"Vorheriger Navigationsschritt: ${currentStep - 1}\")"},{"type":"DELETE","lineNumber":459,"oldContent":"                // Bereinige Feature-Storage Cache"},{"type":"DELETE","lineNumber":460,"oldContent":"                "},{"type":"DELETE","lineNumber":461,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":455,"content":"    }"},{"type":"INSERT","lineNumber":456,"content":"    "},{"type":"INSERT","lineNumber":457,"content":"    /**"},{"type":"INSERT","lineNumber":458,"content":"     * Konvertiert Bitmap zu Base64 String"},{"type":"INSERT","lineNumber":459,"content":"     */"},{"type":"INSERT","lineNumber":460,"content":"    private fun bitmapToBase64(bitmap: Bitmap): String {"},{"type":"INSERT","lineNumber":461,"content":"        val byteArrayOutputStream = ByteArrayOutputStream()"},{"type":"DELETE","lineNumber":463,"oldContent":"            try {"},{"type":"DELETE","lineNumber":464,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":465,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":466,"oldContent":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":463,"content":"        val byteArray = byteArrayOutputStream.toByteArray()"},{"type":"INSERT","lineNumber":464,"content":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"INSERT","lineNumber":465,"content":"    }"},{"type":"INSERT","lineNumber":466,"content":"    "},{"type":"INSERT","lineNumber":467,"content":"    /**"},{"type":"INSERT","lineNumber":468,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":468,"oldContent":"     * Cleanup beim Destroy"},{"type":"DELETE","lineNumber":469,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":470,"oldContent":"                                    landmark.x?.toDoubleOrNull() ?: 0.0,"},{"type":"DELETE","lineNumber":471,"oldContent":"                                position = Position("},{"type":"INSERT","lineNumber":470,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":471,"content":"        landmarkId: String,"},{"type":"DELETE","lineNumber":477,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"DELETE","lineNumber":478,"oldContent":"                        // Verwende die Landmark-ID genau wie sie in der JSON steht (z.B. \"PT-1-566\")"},{"type":"INSERT","lineNumber":477,"content":"            Log.d(TAG, \"createLandmark called (stub): $landmarkId\")"},{"type":"INSERT","lineNumber":478,"content":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":482,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":483,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":484,"oldContent":"                // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":482,"content":"                    landmarkName = name,"},{"type":"INSERT","lineNumber":483,"content":"                    description = description,"},{"type":"INSERT","lineNumber":484,"content":"                    category = \"Manual\""},{"type":"MODIFY","lineNumber":488,"content":"                false","oldContent":"}"},{"type":"DELETE","lineNumber":490,"oldContent":"    }"},{"type":"DELETE","lineNumber":491,"oldContent":"            }"},{"type":"INSERT","lineNumber":490,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":491,"content":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":493,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":496,"content":"    /**"},{"type":"DELETE","lineNumber":504,"oldContent":"     */"},{"type":"DELETE","lineNumber":505,"oldContent":"    /**"},{"type":"INSERT","lineNumber":504,"content":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"INSERT","lineNumber":505,"content":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"INSERT","lineNumber":522,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":523,"oldContent":"                    ),"},{"type":"MODIFY","lineNumber":527,"content":"                        landmarks = emptyList()","oldContent":"                        landmarks = emptyList()"},{"type":"MODIFY","lineNumber":530,"content":"                ","oldContent":"                "},{"type":"INSERT","lineNumber":531,"content":"                val featureRoute = FeatureNavigationRoute("},{"type":"DELETE","lineNumber":533,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"MODIFY","lineNumber":542,"content":"            }","oldContent":"                                position = Position("},{"type":"DELETE","lineNumber":546,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":547,"oldContent":"                        val landmarkName = landmark.nameDe ?: landmark.nameEn ?: landmark.id"},{"type":"INSERT","lineNumber":546,"content":"    /**"},{"type":"INSERT","lineNumber":547,"content":"     * Verarbeitet einen Kamera-Frame (vereinfacht)"},{"type":"MODIFY","lineNumber":550,"content":"        viewModelScope.launch {","oldContent":"                    routePart.landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":552,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":553,"oldContent":"}"},{"type":"INSERT","lineNumber":552,"content":"                Log.d(TAG, \"processFrameForFeatureMatching called (stub)\")"},{"type":"INSERT","lineNumber":553,"content":"                // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":554,"content":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":555,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":557,"content":"                _currentMatches.value = emptyList()","oldContent":"    }"},{"type":"DELETE","lineNumber":573,"oldContent":"    "},{"type":"DELETE","lineNumber":574,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":575,"oldContent":"}"},{"type":"INSERT","lineNumber":573,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":574,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":575,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"MODIFY","lineNumber":578,"content":"                        routeLandmarks.add(","oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":597,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":598,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":597,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":599,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":603,"oldContent":"                                imageUrl = \"\","},{"type":"DELETE","lineNumber":604,"oldContent":"                                confidence = 1.0f"},{"type":"INSERT","lineNumber":603,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":607,"content":"                }"},{"type":"DELETE","lineNumber":610,"oldContent":"                }"},{"type":"DELETE","lineNumber":619,"oldContent":"    }"},{"type":"DELETE","lineNumber":622,"oldContent":"    /**"},{"type":"INSERT","lineNumber":620,"content":"    }"},{"type":"INSERT","lineNumber":622,"content":"    /**"},{"type":"DELETE","lineNumber":630,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":632,"oldContent":"            }"},{"type":"INSERT","lineNumber":630,"content":"            } else {"},{"type":"INSERT","lineNumber":632,"content":"            }"},{"type":"MODIFY","lineNumber":637,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":653,"oldContent":"}"},{"type":"DELETE","lineNumber":654,"oldContent":"    }"},{"type":"DELETE","lineNumber":655,"oldContent":"                "},{"type":"DELETE","lineNumber":656,"oldContent":"                storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":657,"oldContent":"                // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":658,"oldContent":"            try {"},{"type":"INSERT","lineNumber":652,"content":"    "},{"type":"INSERT","lineNumber":653,"content":"    /**"},{"type":"INSERT","lineNumber":654,"content":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":655,"content":"     */"},{"type":"INSERT","lineNumber":656,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":658,"content":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":659,"content":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":661,"oldContent":"        super.onCleared()"},{"type":"INSERT","lineNumber":663,"content":"    }"},{"type":"DELETE","lineNumber":666,"oldContent":"     */"},{"type":"MODIFY","lineNumber":672,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":673,"content":"    /**"},{"type":"DELETE","lineNumber":675,"oldContent":"            }"},{"type":"MODIFY","lineNumber":676,"content":"    fun getRequiredLandmarkIds(): List<String> {","oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":687,"content":"        "},{"type":"INSERT","lineNumber":688,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":689,"content":"    }"},{"type":"DELETE","lineNumber":690,"oldContent":"        "},{"type":"DELETE","lineNumber":693,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":695,"oldContent":"    }"},{"type":"DELETE","lineNumber":697,"oldContent":"    "},{"type":"DELETE","lineNumber":699,"oldContent":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":698,"content":"    "},{"type":"INSERT","lineNumber":699,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":707,"content":"    }"},{"type":"DELETE","lineNumber":709,"oldContent":"    "},{"type":"MODIFY","lineNumber":712,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":717,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":716,"content":"        _currentNavigationStep.value = step"},{"type":"DELETE","lineNumber":719,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"MODIFY","lineNumber":721,"content":"        val steps = getCurrentNavigationSteps()","oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":722,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"MODIFY","lineNumber":730,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":734,"oldContent":"}"},{"type":"DELETE","lineNumber":736,"oldContent":"    }"},{"type":"DELETE","lineNumber":738,"oldContent":"        }"},{"type":"DELETE","lineNumber":740,"oldContent":"            }"},{"type":"DELETE","lineNumber":742,"oldContent":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"DELETE","lineNumber":743,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":744,"oldContent":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":737,"content":"                "},{"type":"INSERT","lineNumber":738,"content":"                // Bereinige Feature-Storage Cache"},{"type":"INSERT","lineNumber":741,"content":"                Log.i(TAG, \"RouteViewModel bereinigt\")"},{"type":"INSERT","lineNumber":742,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":743,"content":"                Log.e(TAG, \"Fehler beim Bereinigen: ${e.message}\")"},{"type":"INSERT","lineNumber":744,"content":"            }"},{"type":"INSERT","lineNumber":745,"content":"        }"},{"type":"INSERT","lineNumber":746,"content":"    }"},{"type":"INSERT","lineNumber":747,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/RouteRepository.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/RouteRepository.kt","baseContent":"package com.example.arwalking.data\n\nimport android.content.Context\nimport android.util.Log\nimport com.google.gson.Gson\nimport java.io.IOException\n\n/**\n * Repository für Route-Daten aus JSON-Assets\n */\nclass RouteRepository(private val context: Context) {\n    \n    private val TAG = \"RouteRepository\"\n    private val gson = Gson()\n    \n    suspend fun getRouteFromAssets(filename: String): RouteData? {\n        return try {\n            Log.i(TAG, \"Loading route from assets: $filename\")\n            \n            val jsonString = context.assets.open(filename).bufferedReader().use { it.readText() }\n            val routeData = gson.fromJson(jsonString, RouteData::class.java)\n            \n            Log.i(TAG, \"Route loaded successfully from $filename\")\n            routeData\n            \n        } catch (e: IOException) {\n            Log.e(TAG, \"Error reading route file $filename: ${e.message}\")\n            null\n        } catch (e: Exception) {\n            Log.e(TAG, \"Error parsing route data: ${e.message}\")\n            null\n        }\n    }\n}\n\n// Datenklassen für Route-JSON\ndata class RouteData(\n    val route: Route\n)\n\ndata class Route(\n    val path: List<PathItem>\n)\n\ndata class PathItem(\n    val xmlName: String,\n    val levelInfo: LevelInfo?,\n    val routeParts: List<RoutePart>\n)\n\ndata class LevelInfo(\n    val storey: String?\n)\n\ndata class RoutePart(\n    val instruction: String?,\n    val instructionDe: String?,\n    val distance: Double?,\n    val duration: Int?,\n    val landmarks: List<String>?\n)","baseTimestamp":1754318137171,"deltas":[{"timestamp":1754318759044,"changes":[{"type":"INSERT","lineNumber":33,"content":"    "},{"type":"INSERT","lineNumber":34,"content":"    suspend fun loadRoute(building: String, floor: String, additionalParam: String): RouteData? {"},{"type":"INSERT","lineNumber":35,"content":"        Log.d(TAG, \"loadRoute called (stub): $building, $floor\")"},{"type":"INSERT","lineNumber":36,"content":"        return getRouteFromAssets(\"route.json\")"},{"type":"INSERT","lineNumber":37,"content":"    }"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/NavigationRoute.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/NavigationRoute.kt","baseContent":"package com.example.arwalking\n\n/**\n * Datenklassen für Navigation und Routing\n */\ndata class NavigationRoute(\n    val id: String,\n    val name: String,\n    val description: String,\n    val totalLength: Double,\n    val steps: List<NavigationStep>,\n    val estimatedTime: Int = 0\n)\n\ndata class NavigationStep(\n    val stepNumber: Int,\n    val instruction: String,\n    val building: String,\n    val floor: Int,\n    val landmarks: List<String>,\n    val distance: Double,\n    val estimatedTime: Int\n)\n\ndata class FeatureNavigationRoute(\n    val id: String = \"default\",\n    val totalLength: Double,\n    val steps: List<FeatureNavigationStep>\n)\n\ndata class FeatureNavigationStep(\n    val stepNumber: Int,\n    val instruction: String,\n    val building: String,\n    val targetLandmark: String?\n)","baseTimestamp":1754318664987,"deltas":[{"timestamp":1754318949677,"changes":[{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":37,"content":"data class FeatureLandmark("},{"type":"INSERT","lineNumber":38,"content":"    val id: String,"},{"type":"INSERT","lineNumber":39,"content":"    val name: String,"},{"type":"INSERT","lineNumber":40,"content":"    val description: String,"},{"type":"INSERT","lineNumber":41,"content":"    val position: Position,"},{"type":"INSERT","lineNumber":42,"content":"    val imageUrl: String,"},{"type":"INSERT","lineNumber":43,"content":"    val confidence: Float"},{"type":"INSERT","lineNumber":44,"content":")"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"data class Position("},{"type":"INSERT","lineNumber":47,"content":"    val x: Double,"},{"type":"INSERT","lineNumber":48,"content":"    val y: Double,"},{"type":"INSERT","lineNumber":49,"content":"    val z: Double"},{"type":"INSERT","lineNumber":50,"content":")"}]},{"timestamp":1754319599712,"changes":[{"type":"DELETE","lineNumber":37,"oldContent":")"},{"type":"DELETE","lineNumber":39,"oldContent":"    val z: Double"},{"type":"DELETE","lineNumber":41,"oldContent":"    val y: Double,"},{"type":"DELETE","lineNumber":43,"oldContent":"    val x: Double,"},{"type":"DELETE","lineNumber":45,"oldContent":"data class Position("},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":")"},{"type":"INSERT","lineNumber":44,"content":")"},{"type":"INSERT","lineNumber":45,"content":""},{"type":"INSERT","lineNumber":46,"content":"data class Position("},{"type":"INSERT","lineNumber":47,"content":"    val x: Double,"},{"type":"INSERT","lineNumber":48,"content":"    val y: Double,"},{"type":"INSERT","lineNumber":49,"content":"    val z: Double"},{"type":"INSERT","lineNumber":50,"content":")"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"data class TrackedLandmark("},{"type":"INSERT","lineNumber":53,"content":"    val landmark: FeatureLandmark,"},{"type":"INSERT","lineNumber":54,"content":"    val position: android.graphics.PointF,"},{"type":"INSERT","lineNumber":55,"content":"    val confidence: Float,"},{"type":"INSERT","lineNumber":56,"content":"    val frameCount: Int,"},{"type":"INSERT","lineNumber":57,"content":"    val isStable: Boolean,"},{"type":"INSERT","lineNumber":58,"content":"    val trackingQuality: Float"},{"type":"INSERT","lineNumber":59,"content":")"}]},{"timestamp":1754321368602,"changes":[{"type":"DELETE","lineNumber":24,"oldContent":"data class FeatureNavigationRoute("},{"type":"DELETE","lineNumber":25,"oldContent":"    val id: String = \"default\","},{"type":"DELETE","lineNumber":26,"oldContent":"    val totalLength: Double,"},{"type":"DELETE","lineNumber":27,"oldContent":"    val steps: List<FeatureNavigationStep>"},{"type":"DELETE","lineNumber":28,"oldContent":")"},{"type":"INSERT","lineNumber":24,"content":"// FeatureNavigationRoute und FeatureNavigationStep sind in FeatureNavigationRoute.kt definiert"},{"type":"INSERT","lineNumber":25,"content":"// FeatureLandmark ist in FeatureLandmark.kt definiert"},{"type":"DELETE","lineNumber":30,"oldContent":"data class FeatureNavigationStep("},{"type":"DELETE","lineNumber":31,"oldContent":"    val stepNumber: Int,"},{"type":"DELETE","lineNumber":32,"oldContent":"    val instruction: String,"},{"type":"DELETE","lineNumber":33,"oldContent":"    val building: String,"},{"type":"DELETE","lineNumber":34,"oldContent":"    val targetLandmark: String?"},{"type":"DELETE","lineNumber":35,"oldContent":")"},{"type":"DELETE","lineNumber":36,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"data class FeatureLandmark("},{"type":"DELETE","lineNumber":38,"oldContent":"    val id: String,"},{"type":"DELETE","lineNumber":39,"oldContent":"    val name: String,"},{"type":"DELETE","lineNumber":40,"oldContent":")"},{"type":"DELETE","lineNumber":41,"oldContent":"    val description: String,"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":44,"oldContent":"    val position: Position,"},{"type":"DELETE","lineNumber":47,"oldContent":"    val imageUrl: String,"},{"type":"DELETE","lineNumber":50,"oldContent":"    val confidence: Float"},{"type":"DELETE","lineNumber":52,"oldContent":")"},{"type":"DELETE","lineNumber":54,"oldContent":"    val trackingQuality: Float"},{"type":"DELETE","lineNumber":56,"oldContent":"    val isStable: Boolean,"},{"type":"DELETE","lineNumber":58,"oldContent":"    val frameCount: Int,"},{"type":"INSERT","lineNumber":37,"content":"    val frameCount: Int,"},{"type":"INSERT","lineNumber":38,"content":"    val isStable: Boolean,"},{"type":"INSERT","lineNumber":39,"content":"    val trackingQuality: Float"},{"type":"INSERT","lineNumber":40,"content":")"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/AR3DArrowOverlay.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/AR3DArrowOverlay.kt","baseContent":"package com.example.arwalking.components\n\nimport android.graphics.Canvas\nimport android.graphics.Paint\nimport android.graphics.Path\nimport android.graphics.PointF\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.*\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\nimport androidx.compose.ui.graphics.drawscope.rotate\nimport androidx.compose.ui.graphics.drawscope.scale\nimport androidx.compose.ui.graphics.drawscope.translate\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.dp\nimport com.example.arwalking.FeatureMatchResult\nimport kotlin.math.*\n\n/**\n * 3D-Pfeil Overlay für AR-Navigation\n * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt\n */\n@Composable\nfun AR3DArrowOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    screenWidth: Float,\n    screenHeight: Float,\n    modifier: Modifier = Modifier\n) {\n    // Nur den besten Match verwenden\n    val bestMatch = matches.maxByOrNull { it.confidence }\n    \n    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {\n        \n        // Berechne die Position des Pfeils basierend auf dem Landmark\n        val arrowPosition = calculateArrowPosition(\n            landmark = bestMatch.landmark,\n            screenPosition = bestMatch.screenPosition,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight\n        )\n        \n        // Berechne die Richtung des Pfeils\n        val arrowDirection = calculateArrowDirection(bestMatch.landmark)\n        \n        Box(modifier = modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.fillMaxSize()) {\n                draw3DArrow(\n                    position = arrowPosition,\n                    direction = arrowDirection,\n                    confidence = bestMatch.confidence,\n                    size = size\n                )\n            }\n        }\n    }\n}\n\n/**\n * Berechnet die Position des 3D-Pfeils auf dem Bildschirm\n */\nprivate fun calculateArrowPosition(\n    landmark: com.example.arwalking.FeatureLandmark,\n    screenWidth: Float,\n    screenHeight: Float\n): Offset {\n    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen\n    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man\n    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden\n    \n    val x = landmark.position.x.toFloat()\n    val y = landmark.position.y.toFloat()\n    \n    // Normalisiere die Position auf Bildschirmkoordinaten\n    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung\n    val normalizedY = (y % 100) / 100f\n    \n    return Offset(\n        x = normalizedX * screenWidth,\n        y = normalizedY * screenHeight\n    )\n}\n\n/**\n * Berechnet die Richtung des Pfeils basierend auf der Navigation\n */\nprivate fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {\n    // Vereinfachte Richtungsberechnung\n    // In einer echten Implementierung würde man die aktuelle Position des Benutzers\n    // und die Zielposition verwenden\n    \n    val angle = landmark.position.x.toFloat() * 0.1f // Vereinfachte Berechnung\n    return angle % 360f\n}\n\n/**\n * Zeichnet einen 3D-Pfeil auf dem Canvas\n */\nprivate fun DrawScope.draw3DArrow(\n    position: Offset,\n    direction: Float,\n    confidence: Float,\n    size: androidx.compose.ui.geometry.Size\n) {\n    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence\n    val arrowColor = getArrowColor(confidence)\n    \n    drawIntoCanvas { canvas ->\n        // Speichere den aktuellen Zustand\n        canvas.save()\n        \n        // Verschiebe zum Pfeil-Zentrum\n        canvas.translate(position.x, position.y)\n        \n        // Rotiere basierend auf der Richtung\n        canvas.rotate(direction)\n        \n        // Zeichne den 3D-Pfeil\n        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)\n        \n        // Stelle den ursprünglichen Zustand wieder her\n        canvas.restore()\n    }\n}\n\n/**\n * Zeichnet die 3D-Pfeil-Form\n */\nprivate fun DrawScope.draw3DArrowShape(\n    canvas: Canvas,\n    size: Float,\n    color: Color,\n    confidence: Float\n) {\n    val paint = Paint().apply {\n        this.color = color.toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    val strokePaint = Paint().apply {\n        this.color = Color.White.copy(alpha = 0.8f).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.STROKE\n        strokeWidth = 3f\n    }\n    \n    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)\n    val arrowPath = Path().apply {\n        // Pfeilspitze\n        moveTo(0f, -size * 0.5f)\n        lineTo(size * 0.3f, -size * 0.2f)\n        lineTo(size * 0.15f, -size * 0.2f)\n        \n        // Pfeilkörper\n        lineTo(size * 0.15f, size * 0.3f)\n        lineTo(-size * 0.15f, size * 0.3f)\n        lineTo(-size * 0.15f, -size * 0.2f)\n        lineTo(-size * 0.3f, -size * 0.2f)\n        \n        close()\n    }\n    \n    // Schatten-Effekt (3D-Tiefe)\n    val shadowPath = Path(arrowPath).apply {\n        offset(size * 0.05f, size * 0.05f)\n    }\n    \n    val shadowPaint = Paint().apply {\n        this.color = Color.Black.copy(alpha = 0.3f).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    // Zeichne Schatten\n    canvas.drawPath(shadowPath, shadowPaint)\n    \n    // Zeichne Hauptpfeil\n    canvas.drawPath(arrowPath, paint)\n    \n    // Zeichne Umriss\n    canvas.drawPath(arrowPath, strokePaint)\n    \n    // Zeichne Glanz-Effekt für 3D-Look\n    val highlightPaint = Paint().apply {\n        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    val highlightPath = Path().apply {\n        moveTo(-size * 0.05f, -size * 0.4f)\n        lineTo(size * 0.05f, -size * 0.3f)\n        lineTo(size * 0.05f, -size * 0.1f)\n        lineTo(-size * 0.05f, -size * 0.2f)\n        close()\n    }\n    \n    canvas.drawPath(highlightPath, highlightPaint)\n}\n\n/**\n * Bestimmt die Farbe des Pfeils basierend auf der Confidence\n */\nprivate fun getArrowColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher\n        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher\n        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay\n        else -> Color(0xFFFF9800) // Orange - Unsicher\n    }\n}\n\n/**\n * Erweiterte 3D-Pfeil-Komponente mit Animation\n */\n@Composable\nfun Animated3DArrowOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    screenWidth: Float,\n    screenHeight: Float,\n    modifier: Modifier = Modifier\n) {\n    val bestMatch = matches.maxByOrNull { it.confidence }\n    var animationProgress by remember { mutableStateOf(0f) }\n    \n    // Animation für pulsierenden Effekt\n    LaunchedEffect(bestMatch) {\n        if (bestMatch != null && bestMatch.confidence >= 0.7f) {\n            while (true) {\n                animationProgress = (animationProgress + 0.02f) % 1f\n                kotlinx.coroutines.delay(16) // ~60 FPS\n            }\n        }\n    }\n    \n    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {\n        val arrowPosition = calculateArrowPosition(\n            landmark = bestMatch.landmark,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight\n        )\n        \n        val arrowDirection = calculateArrowDirection(bestMatch.landmark)\n        \n        Box(modifier = modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.fillMaxSize()) {\n                drawAnimated3DArrow(\n                    position = arrowPosition,\n                    direction = arrowDirection,\n                    confidence = bestMatch.confidence,\n                    animationProgress = animationProgress,\n                    size = size\n                )\n            }\n        }\n    }\n}\n\n/**\n * Zeichnet einen animierten 3D-Pfeil\n */\nprivate fun DrawScope.drawAnimated3DArrow(\n    position: Offset,\n    direction: Float,\n    confidence: Float,\n    animationProgress: Float,\n    size: androidx.compose.ui.geometry.Size\n) {\n    val baseSize = 60.dp.toPx()\n    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f\n    val arrowSize = baseSize * confidence * pulseScale\n    val arrowColor = getArrowColor(confidence)\n    \n    // Leichtes Schweben des Pfeils\n    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f\n    val adjustedPosition = position.copy(y = position.y + hoverOffset)\n    \n    drawIntoCanvas { canvas ->\n        canvas.save()\n        canvas.translate(adjustedPosition.x, adjustedPosition.y)\n        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation\n        \n        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)\n        \n        canvas.restore()\n    }\n}","baseTimestamp":1754116843411,"deltas":[{"timestamp":1754260355127,"changes":[{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.foundation.Canvas"},{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"INSERT","lineNumber":379,"content":"/**"},{"type":"DELETE","lineNumber":380,"oldContent":" * Snapchat-Style AR Arrow mit verbesserter 3D-Positionierung und Tracking"},{"type":"INSERT","lineNumber":392,"content":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":394,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":405,"oldContent":"    // Aktualisiere Tracking mit neuen Matches"},{"type":"DELETE","lineNumber":407,"oldContent":"    LaunchedEffect(matches) {"},{"type":"DELETE","lineNumber":410,"oldContent":"        if (matches.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":411,"content":"    // Aktualisiere Tracking mit neuen Matches","oldContent":"            trackedLandmarks = trackingSystem.updateTracking(matches)"},{"type":"INSERT","lineNumber":412,"content":"    LaunchedEffect(matches) {"},{"type":"INSERT","lineNumber":413,"content":"        if (matches.isNotEmpty()) {"},{"type":"INSERT","lineNumber":414,"content":"            trackedLandmarks = trackingSystem.updateTracking(matches)"},{"type":"INSERT","lineNumber":424,"content":"        val stabilizedPosition = calculateStabilized3DPosition("},{"type":"DELETE","lineNumber":426,"oldContent":"        val stabilizedPosition = calculateStabilized3DPosition("},{"type":"DELETE","lineNumber":460,"oldContent":"}"},{"type":"MODIFY","lineNumber":462,"content":"}","oldContent":""},{"type":"INSERT","lineNumber":463,"content":""},{"type":"MODIFY","lineNumber":476,"content":"    if (screenPosition != null) {","oldContent":"    if (screenPosition != null) {"},{"type":"DELETE","lineNumber":478,"oldContent":"/**"},{"type":"DELETE","lineNumber":480,"oldContent":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"DELETE","lineNumber":483,"oldContent":" */"},{"type":"DELETE","lineNumber":485,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":488,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":491,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":493,"oldContent":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":496,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":499,"oldContent":"    // Basis-Richtung basierend auf Landmark-Typ"},{"type":"DELETE","lineNumber":502,"oldContent":"    val baseDirection = when {"},{"type":"DELETE","lineNumber":504,"oldContent":"        landmark.id.contains(\"entrance\") -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":507,"oldContent":"        landmark.id.contains(\"stairs\") -> 45f     // Diagonal nach oben"},{"type":"DELETE","lineNumber":509,"oldContent":"        landmark.id.contains(\"elevator\") -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":499,"content":"/**"},{"type":"INSERT","lineNumber":500,"content":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"INSERT","lineNumber":501,"content":" */"},{"type":"INSERT","lineNumber":502,"content":"private fun calculateSmoothArrowOrientation("},{"type":"INSERT","lineNumber":503,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":504,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":505,"content":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":506,"content":"): Float {"},{"type":"INSERT","lineNumber":507,"content":"    "},{"type":"INSERT","lineNumber":508,"content":"    // Basis-Richtung basierend auf Landmark-Typ"},{"type":"INSERT","lineNumber":509,"content":"    val baseDirection = when {"},{"type":"INSERT","lineNumber":510,"content":"        landmark.id.contains(\"entrance\") -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":511,"content":"        landmark.id.contains(\"stairs\") -> 45f     // Diagonal nach oben"},{"type":"INSERT","lineNumber":512,"content":"        landmark.id.contains(\"elevator\") -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":519,"oldContent":"    "},{"type":"MODIFY","lineNumber":570,"content":"    canvas: android.graphics.Canvas,","oldContent":"    canvas: Canvas,"},{"type":"INSERT","lineNumber":617,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":618,"oldContent":"        "}]},{"timestamp":1754260363846,"changes":[{"type":"INSERT","lineNumber":408,"content":"        }"},{"type":"INSERT","lineNumber":409,"content":"    }"},{"type":"INSERT","lineNumber":410,"content":"    "},{"type":"DELETE","lineNumber":410,"oldContent":"            trackedLandmarks = trackingSystem.updateTracking(matches)"},{"type":"DELETE","lineNumber":412,"oldContent":"    }"},{"type":"DELETE","lineNumber":414,"oldContent":"    "},{"type":"INSERT","lineNumber":461,"content":"    }"},{"type":"DELETE","lineNumber":463,"oldContent":"    }"},{"type":"INSERT","lineNumber":475,"content":"    "},{"type":"DELETE","lineNumber":476,"oldContent":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":491,"content":"    val normalizedY = (landmark.position.y.toFloat() % 100) / 100f"},{"type":"INSERT","lineNumber":492,"content":"    "},{"type":"INSERT","lineNumber":493,"content":"    return Offset("},{"type":"INSERT","lineNumber":494,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":495,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":496,"content":"    )"},{"type":"INSERT","lineNumber":497,"content":"}"},{"type":"INSERT","lineNumber":498,"content":""},{"type":"DELETE","lineNumber":493,"oldContent":"    val normalizedY = (landmark.position.y.toFloat() % 100) / 100f"},{"type":"DELETE","lineNumber":495,"oldContent":"    "},{"type":"DELETE","lineNumber":498,"oldContent":"    return Offset("},{"type":"DELETE","lineNumber":501,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":503,"oldContent":"        y = normalizedY * screenHeight"},{"type":"DELETE","lineNumber":506,"oldContent":"    )"},{"type":"DELETE","lineNumber":509,"oldContent":"}"},{"type":"DELETE","lineNumber":511,"oldContent":""},{"type":"MODIFY","lineNumber":595,"content":"    canvas: android.graphics.Canvas,","oldContent":"    canvas: Canvas,"}]},{"timestamp":1754261502082,"changes":[{"type":"DELETE","lineNumber":122,"oldContent":"        // Prof. Ludwig Büro - Ausgang nach links"},{"type":"DELETE","lineNumber":123,"oldContent":"        landmark.id == \"prof_ludwig_office\" -> 270f // Nach links"},{"type":"INSERT","lineNumber":122,"content":"        // Prof. Ludwig Büro (PT-1-86) - Ausgang nach links"},{"type":"INSERT","lineNumber":123,"content":"        landmark.id == \"PT-1-86\" -> 270f // Nach links"},{"type":"DELETE","lineNumber":125,"oldContent":"        // Türen/Eingänge - geradeaus durch"},{"type":"DELETE","lineNumber":126,"oldContent":"        landmark.id.contains(\"entrance\") || landmark.id.contains(\"door\") -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":125,"content":"        // Türen/Eingänge - geradeaus durch (z.B. PT-1-566, PT-1-697)"},{"type":"INSERT","lineNumber":126,"content":"        landmark.id.contains(\"PT-1-566\") || landmark.id.contains(\"PT-1-697\") -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":128,"content":"        // Allgemeine Türen basierend auf Typ"},{"type":"INSERT","lineNumber":129,"content":"        landmark.name.contains(\"Tür\", ignoreCase = true) || "},{"type":"INSERT","lineNumber":130,"content":"        landmark.name.contains(\"door\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":131,"content":"        landmark.name.contains(\"Entry\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":132,"content":"        "},{"type":"INSERT","lineNumber":133,"content":"        // Büros - nach links"},{"type":"INSERT","lineNumber":134,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":135,"content":"        landmark.name.contains(\"Office\", ignoreCase = true) -> 270f // Nach links"},{"type":"INSERT","lineNumber":136,"content":"        "},{"type":"DELETE","lineNumber":129,"oldContent":"        landmark.id.contains(\"stairs\") -> 45f // Diagonal nach oben"},{"type":"INSERT","lineNumber":138,"content":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":139,"content":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f // Diagonal nach oben"},{"type":"DELETE","lineNumber":132,"oldContent":"        landmark.id.contains(\"elevator\") -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":142,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":143,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":409,"oldContent":"    // Aktualisiere Tracking mit neuen Matches"},{"type":"DELETE","lineNumber":411,"oldContent":"    LaunchedEffect(matches) {"},{"type":"INSERT","lineNumber":422,"content":"    // Aktualisiere Tracking mit neuen Matches"},{"type":"INSERT","lineNumber":423,"content":"    LaunchedEffect(matches) {"},{"type":"DELETE","lineNumber":492,"oldContent":"/**"},{"type":"DELETE","lineNumber":494,"oldContent":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"DELETE","lineNumber":497,"oldContent":" */"},{"type":"DELETE","lineNumber":500,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":502,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":510,"content":"/**"},{"type":"INSERT","lineNumber":511,"content":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"INSERT","lineNumber":512,"content":" */"},{"type":"INSERT","lineNumber":513,"content":"private fun calculateSmoothArrowOrientation("},{"type":"INSERT","lineNumber":514,"content":"    landmark: com.example.arwalking.FeatureLandmark,"}]},{"timestamp":1754261511075,"changes":[{"type":"DELETE","lineNumber":129,"oldContent":"        // Treppen - nach oben/unten"},{"type":"DELETE","lineNumber":132,"oldContent":"        "},{"type":"DELETE","lineNumber":134,"oldContent":"        // Aufzüge - geradeaus"},{"type":"DELETE","lineNumber":137,"oldContent":"        "},{"type":"DELETE","lineNumber":139,"oldContent":"        else -> {"},{"type":"DELETE","lineNumber":141,"oldContent":"            // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"INSERT","lineNumber":137,"content":"        // Treppen - nach oben/unten"},{"type":"INSERT","lineNumber":138,"content":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":139,"content":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f // Diagonal nach oben"},{"type":"INSERT","lineNumber":140,"content":"        "},{"type":"INSERT","lineNumber":141,"content":"        // Aufzüge - geradeaus"},{"type":"INSERT","lineNumber":142,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":143,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":144,"content":"        "},{"type":"INSERT","lineNumber":145,"content":"        else -> {"},{"type":"INSERT","lineNumber":146,"content":"            // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"DELETE","lineNumber":145,"oldContent":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":147,"oldContent":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f // Diagonal nach oben"},{"type":"DELETE","lineNumber":151,"oldContent":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":153,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":422,"content":"    // Aktualisiere Tracking mit neuen Matches"},{"type":"INSERT","lineNumber":423,"content":"    LaunchedEffect(matches) {"},{"type":"DELETE","lineNumber":431,"oldContent":"    // Aktualisiere Tracking mit neuen Matches"},{"type":"DELETE","lineNumber":433,"oldContent":"    LaunchedEffect(matches) {"},{"type":"INSERT","lineNumber":510,"content":"/**"},{"type":"INSERT","lineNumber":511,"content":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"INSERT","lineNumber":512,"content":" */"},{"type":"INSERT","lineNumber":513,"content":"private fun calculateSmoothArrowOrientation("},{"type":"INSERT","lineNumber":514,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":516,"oldContent":"/**"},{"type":"DELETE","lineNumber":517,"oldContent":"        landmark.id.contains(\"entrance\") -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":518,"oldContent":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"DELETE","lineNumber":519,"oldContent":"        landmark.id.contains(\"stairs\") -> 45f     // Diagonal nach oben"},{"type":"DELETE","lineNumber":520,"oldContent":" */"},{"type":"DELETE","lineNumber":521,"oldContent":"        landmark.id.contains(\"elevator\") -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":522,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":523,"oldContent":"        landmark.id.contains(\"office\") -> 270f    // Nach links"},{"type":"DELETE","lineNumber":524,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":521,"content":"        // Spezifische Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":522,"content":"        landmark.id == \"PT-1-86\" -> 270f    // Prof. Ludwig Büro - nach links"},{"type":"INSERT","lineNumber":523,"content":"        landmark.id == \"PT-1-566\" -> 0f     // Tür - geradeaus"},{"type":"INSERT","lineNumber":524,"content":"        landmark.id == \"PT-1-697\" -> 0f     // Entry - geradeaus"},{"type":"INSERT","lineNumber":525,"content":"        "},{"type":"INSERT","lineNumber":526,"content":"        // Allgemeine Typen basierend auf Namen"},{"type":"INSERT","lineNumber":527,"content":"        landmark.name.contains(\"Entry\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":528,"content":"        landmark.name.contains(\"entrance\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":529,"content":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":530,"content":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f     // Diagonal nach oben"},{"type":"INSERT","lineNumber":531,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":532,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":533,"content":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":534,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"}]},{"timestamp":1754311773355,"changes":[{"type":"INSERT","lineNumber":134,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":135,"content":"        landmark.name.contains(\"Office\", ignoreCase = true) -> 270f // Nach links"},{"type":"INSERT","lineNumber":136,"content":"        "},{"type":"DELETE","lineNumber":136,"oldContent":"        landmark.name.contains(\"Prof.\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":139,"oldContent":"        landmark.name.contains(\"Office\", ignoreCase = true) -> 270f // Nach links"},{"type":"DELETE","lineNumber":142,"oldContent":"        "},{"type":"DELETE","lineNumber":144,"oldContent":"            val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"DELETE","lineNumber":146,"oldContent":"            when {"},{"type":"INSERT","lineNumber":147,"content":"            val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"INSERT","lineNumber":148,"content":"            when {"},{"type":"DELETE","lineNumber":390,"oldContent":"/**"},{"type":"DELETE","lineNumber":391,"oldContent":" * Snapchat-Style AR Arrow mit verbesserter 3D-Positionierung und Tracking"},{"type":"DELETE","lineNumber":392,"oldContent":" */"},{"type":"DELETE","lineNumber":393,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":394,"oldContent":"fun SnapchatStyleAR3DArrow("},{"type":"DELETE","lineNumber":395,"oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"DELETE","lineNumber":396,"oldContent":"    isFeatureMappingEnabled: Boolean,"},{"type":"DELETE","lineNumber":397,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":398,"oldContent":"    screenHeight: Float,"},{"type":"DELETE","lineNumber":399,"oldContent":"    cameraRotation: Float = 0f,"},{"type":"DELETE","lineNumber":400,"oldContent":"    deviceOrientation: Float = 0f,"},{"type":"DELETE","lineNumber":401,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":402,"oldContent":") {"},{"type":"DELETE","lineNumber":403,"oldContent":"    val context = LocalContext.current"},{"type":"DELETE","lineNumber":404,"oldContent":"    "},{"type":"DELETE","lineNumber":405,"oldContent":"    // AR Tracking System"},{"type":"DELETE","lineNumber":406,"oldContent":"    val trackingSystem = remember { ARTrackingSystem() }"},{"type":"DELETE","lineNumber":407,"oldContent":"    var trackedLandmarks by remember { mutableStateOf<List<TrackedLandmark>>(emptyList()) }"},{"type":"DELETE","lineNumber":408,"oldContent":"    "},{"type":"DELETE","lineNumber":409,"oldContent":"    // GLB Model State"},{"type":"DELETE","lineNumber":410,"oldContent":"    var glbModel by remember { mutableStateOf<GLBArrowModel?>(null) }"},{"type":"DELETE","lineNumber":411,"oldContent":"    var isModelLoaded by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":412,"oldContent":"    "},{"type":"DELETE","lineNumber":413,"oldContent":"    // Lade GLB-Modell"},{"type":"DELETE","lineNumber":414,"oldContent":"    LaunchedEffect(Unit) {"},{"type":"DELETE","lineNumber":415,"oldContent":"        val model = GLBArrowModel(context)"},{"type":"DELETE","lineNumber":416,"oldContent":"        if (model.loadModel()) {"},{"type":"DELETE","lineNumber":417,"oldContent":"            glbModel = model"},{"type":"DELETE","lineNumber":418,"oldContent":"            isModelLoaded = true"},{"type":"DELETE","lineNumber":419,"oldContent":"        }"},{"type":"DELETE","lineNumber":420,"oldContent":"    }"},{"type":"DELETE","lineNumber":421,"oldContent":"    "},{"type":"DELETE","lineNumber":422,"oldContent":"    // Aktualisiere Tracking mit neuen Matches"},{"type":"DELETE","lineNumber":423,"oldContent":"        if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":424,"oldContent":"    LaunchedEffect(matches) {"},{"type":"DELETE","lineNumber":425,"oldContent":"            trackedLandmarks = trackingSystem.updateTracking(matches)"},{"type":"DELETE","lineNumber":426,"oldContent":"        }"},{"type":"DELETE","lineNumber":427,"oldContent":"    }"},{"type":"DELETE","lineNumber":428,"oldContent":"    "},{"type":"DELETE","lineNumber":429,"oldContent":"    // Verwende besten getrackte Landmark"},{"type":"DELETE","lineNumber":430,"oldContent":"    val bestTrackedLandmark = trackedLandmarks.firstOrNull { it.isStable }"},{"type":"DELETE","lineNumber":431,"oldContent":"    "},{"type":"DELETE","lineNumber":432,"oldContent":"    if (isFeatureMappingEnabled && bestTrackedLandmark != null && bestTrackedLandmark.confidence >= 0.7f) {"},{"type":"DELETE","lineNumber":433,"oldContent":"        "},{"type":"DELETE","lineNumber":434,"oldContent":"        // Berechne stabilisierte 3D-Position (Snapchat-Style)"},{"type":"DELETE","lineNumber":435,"oldContent":"        val stabilizedPosition = calculateStabilized3DPosition("},{"type":"DELETE","lineNumber":436,"oldContent":"            landmark = bestTrackedLandmark.landmark,"},{"type":"DELETE","lineNumber":437,"oldContent":"            screenPosition = bestTrackedLandmark.position,"},{"type":"DELETE","lineNumber":438,"oldContent":"            screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":439,"oldContent":"            screenHeight = screenHeight,"},{"type":"DELETE","lineNumber":440,"oldContent":"            cameraRotation = cameraRotation,"},{"type":"DELETE","lineNumber":441,"oldContent":"            deviceOrientation = deviceOrientation"},{"type":"DELETE","lineNumber":442,"oldContent":"        )"},{"type":"DELETE","lineNumber":443,"oldContent":"        "},{"type":"DELETE","lineNumber":444,"oldContent":"        // Berechne Pfeil-Orientierung mit Smooth-Tracking"},{"type":"DELETE","lineNumber":445,"oldContent":"        val arrowOrientation = calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":446,"oldContent":"            landmark = bestTrackedLandmark.landmark,"},{"type":"DELETE","lineNumber":447,"oldContent":"            confidence = bestTrackedLandmark.confidence,"},{"type":"DELETE","lineNumber":448,"oldContent":"            cameraRotation = cameraRotation"},{"type":"DELETE","lineNumber":449,"oldContent":"        )"},{"type":"DELETE","lineNumber":450,"oldContent":"        "},{"type":"DELETE","lineNumber":451,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":452,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":453,"oldContent":"                if (isModelLoaded) {"},{"type":"DELETE","lineNumber":454,"oldContent":"                    // Verwende GLB-Modell falls verfügbar"},{"type":"DELETE","lineNumber":455,"oldContent":"                    drawGLBArrow("},{"type":"DELETE","lineNumber":456,"oldContent":"                        position = stabilizedPosition,"},{"type":"DELETE","lineNumber":457,"oldContent":"                        orientation = arrowOrientation,"},{"type":"DELETE","lineNumber":458,"oldContent":"                        confidence = bestTrackedLandmark.confidence,"},{"type":"DELETE","lineNumber":459,"oldContent":"                        size = size"},{"type":"DELETE","lineNumber":460,"oldContent":"                    )"},{"type":"DELETE","lineNumber":461,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":462,"oldContent":"                    // Fallback auf verbesserte 2D-Darstellung"},{"type":"DELETE","lineNumber":463,"oldContent":"                    drawEnhanced3DArrow("},{"type":"DELETE","lineNumber":464,"oldContent":"                        position = stabilizedPosition,"},{"type":"DELETE","lineNumber":465,"oldContent":"                        orientation = arrowOrientation,"},{"type":"DELETE","lineNumber":466,"oldContent":"                        confidence = bestTrackedLandmark.confidence,"},{"type":"DELETE","lineNumber":467,"oldContent":"                        size = size"},{"type":"DELETE","lineNumber":468,"oldContent":"                    )"},{"type":"DELETE","lineNumber":469,"oldContent":"                }"},{"type":"DELETE","lineNumber":470,"oldContent":"            }"},{"type":"DELETE","lineNumber":471,"oldContent":"        }"},{"type":"DELETE","lineNumber":472,"oldContent":"    }"},{"type":"DELETE","lineNumber":473,"oldContent":"}"},{"type":"INSERT","lineNumber":391,"content":""},{"type":"DELETE","lineNumber":511,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":513,"oldContent":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":515,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":517,"oldContent":"    "},{"type":"INSERT","lineNumber":432,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":433,"content":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":434,"content":"): Float {"},{"type":"INSERT","lineNumber":435,"content":"    "},{"type":"DELETE","lineNumber":526,"oldContent":"        else -> 0f"},{"type":"DELETE","lineNumber":528,"oldContent":"    }"},{"type":"DELETE","lineNumber":530,"oldContent":"    "},{"type":"DELETE","lineNumber":532,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":534,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":536,"oldContent":"    "},{"type":"DELETE","lineNumber":538,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":540,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":542,"oldContent":"    "},{"type":"INSERT","lineNumber":452,"content":"        else -> 0f"},{"type":"INSERT","lineNumber":453,"content":"    }"},{"type":"INSERT","lineNumber":454,"content":"    "},{"type":"INSERT","lineNumber":455,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":456,"content":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":457,"content":"    "},{"type":"INSERT","lineNumber":458,"content":"    // Füge Confidence-basierte Variation hinzu"},{"type":"INSERT","lineNumber":459,"content":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"INSERT","lineNumber":460,"content":"    "}]},{"timestamp":1754312410556,"changes":[{"type":"DELETE","lineNumber":135,"oldContent":"        // Treppen - nach oben/unten"},{"type":"MODIFY","lineNumber":137,"content":"        // Treppen - nach oben/unten","oldContent":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":138,"content":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":145,"oldContent":"            val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"MODIFY","lineNumber":147,"content":"            val progress = currentStep.toFloat() / totalSteps.toFloat()","oldContent":"            when {"},{"type":"INSERT","lineNumber":148,"content":"            when {"},{"type":"MODIFY","lineNumber":245,"content":"    canvas.drawPath(arrowPath, paint as androidx.compose.ui.graphics.Paint)","oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":391,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":392,"oldContent":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":393,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":394,"oldContent":"    "},{"type":"DELETE","lineNumber":395,"oldContent":"        else -> 0f"},{"type":"DELETE","lineNumber":396,"oldContent":"    }"},{"type":"DELETE","lineNumber":397,"oldContent":"    "},{"type":"DELETE","lineNumber":398,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":399,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":400,"oldContent":"    "},{"type":"DELETE","lineNumber":401,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":402,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":403,"oldContent":"    "},{"type":"INSERT","lineNumber":432,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":433,"content":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":434,"content":"): Float {"},{"type":"INSERT","lineNumber":435,"content":"    "},{"type":"INSERT","lineNumber":452,"content":"        else -> 0f"},{"type":"INSERT","lineNumber":453,"content":"    }"},{"type":"INSERT","lineNumber":454,"content":"    "},{"type":"INSERT","lineNumber":455,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":456,"content":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":457,"content":"    "},{"type":"INSERT","lineNumber":458,"content":"    // Füge Confidence-basierte Variation hinzu"},{"type":"INSERT","lineNumber":459,"content":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"INSERT","lineNumber":460,"content":"    "}]},{"timestamp":1754312414761,"changes":[{"type":"INSERT","lineNumber":136,"content":"        "},{"type":"DELETE","lineNumber":138,"oldContent":"        "},{"type":"INSERT","lineNumber":146,"content":"            // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"DELETE","lineNumber":148,"oldContent":"            // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"MODIFY","lineNumber":245,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)","oldContent":"    canvas.drawPath(arrowPath, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":419,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":421,"oldContent":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":423,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":425,"oldContent":"    "},{"type":"INSERT","lineNumber":432,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":433,"content":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":434,"content":"): Float {"},{"type":"INSERT","lineNumber":435,"content":"    "},{"type":"DELETE","lineNumber":443,"oldContent":"        else -> 0f"},{"type":"DELETE","lineNumber":445,"oldContent":"    }"},{"type":"DELETE","lineNumber":447,"oldContent":"    "},{"type":"DELETE","lineNumber":449,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":451,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":453,"oldContent":"    "},{"type":"DELETE","lineNumber":455,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":457,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":459,"oldContent":"    "},{"type":"INSERT","lineNumber":452,"content":"        else -> 0f"},{"type":"INSERT","lineNumber":453,"content":"    }"},{"type":"INSERT","lineNumber":454,"content":"    "},{"type":"INSERT","lineNumber":455,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":456,"content":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":457,"content":"    "},{"type":"INSERT","lineNumber":458,"content":"    // Füge Confidence-basierte Variation hinzu"},{"type":"INSERT","lineNumber":459,"content":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"INSERT","lineNumber":460,"content":"    "}]},{"timestamp":1754312416761,"changes":[{"type":"MODIFY","lineNumber":242,"content":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path, shadowPaint)","oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":428,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":430,"oldContent":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":432,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":434,"oldContent":"    "},{"type":"INSERT","lineNumber":432,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":433,"content":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":434,"content":"): Float {"},{"type":"INSERT","lineNumber":435,"content":"    "},{"type":"DELETE","lineNumber":447,"oldContent":"        else -> 0f"},{"type":"INSERT","lineNumber":448,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":449,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":450,"content":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":451,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"INSERT","lineNumber":452,"content":"        else -> 0f"},{"type":"DELETE","lineNumber":451,"oldContent":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":454,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":457,"oldContent":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":460,"oldContent":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"}]},{"timestamp":1754312421292,"changes":[{"type":"INSERT","lineNumber":83,"content":"    screenPosition: android.graphics.PointF?,"},{"type":"DELETE","lineNumber":86,"oldContent":"    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen"},{"type":"DELETE","lineNumber":87,"oldContent":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"DELETE","lineNumber":88,"oldContent":"    "},{"type":"DELETE","lineNumber":89,"oldContent":"    val y = landmark.position.y.toFloat()"},{"type":"DELETE","lineNumber":90,"oldContent":"    // Normalisiere die Position auf Bildschirmkoordinaten"},{"type":"DELETE","lineNumber":91,"oldContent":"    val normalizedY = (y % 100) / 100f"},{"type":"INSERT","lineNumber":87,"content":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"INSERT","lineNumber":88,"content":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":89,"content":"        return Offset("},{"type":"INSERT","lineNumber":90,"content":"            x = screenPosition.x,"},{"type":"INSERT","lineNumber":91,"content":"            y = screenPosition.y"},{"type":"DELETE","lineNumber":104,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"DELETE","lineNumber":105,"oldContent":" */"},{"type":"DELETE","lineNumber":106,"oldContent":"private fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {"},{"type":"DELETE","lineNumber":107,"oldContent":"    // Vereinfachte Richtungsberechnung"},{"type":"DELETE","lineNumber":108,"oldContent":"    // In einer echten Implementierung würde man die aktuelle Position des Benutzers"},{"type":"DELETE","lineNumber":109,"oldContent":"    // und die Zielposition verwenden"},{"type":"INSERT","lineNumber":104,"content":"    val normalizedY = (y % 100) / 100f"},{"type":"DELETE","lineNumber":111,"oldContent":"    val angle = landmark.position.x.toFloat() * 0.1f // Vereinfachte Berechnung"},{"type":"DELETE","lineNumber":112,"oldContent":"    return angle % 360f"},{"type":"INSERT","lineNumber":106,"content":"    return Offset("},{"type":"INSERT","lineNumber":107,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":108,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":109,"content":"    )"},{"type":"INSERT","lineNumber":112,"content":"/**"},{"type":"INSERT","lineNumber":113,"content":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":114,"content":" */"},{"type":"INSERT","lineNumber":191,"content":""},{"type":"INSERT","lineNumber":192,"content":"/**"},{"type":"INSERT","lineNumber":193,"content":" * Zeichnet die 3D-Pfeil-Form"},{"type":"INSERT","lineNumber":194,"content":" */"},{"type":"INSERT","lineNumber":195,"content":"private fun DrawScope.draw3DArrowShape("},{"type":"INSERT","lineNumber":196,"content":"    canvas: Canvas,"},{"type":"INSERT","lineNumber":197,"content":"    size: Float,"},{"type":"INSERT","lineNumber":198,"content":"    color: Color,"},{"type":"INSERT","lineNumber":199,"content":"    confidence: Float"},{"type":"DELETE","lineNumber":233,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"INSERT","lineNumber":242,"content":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":243,"content":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":244,"content":"    )"},{"type":"DELETE","lineNumber":236,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":247,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":239,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"INSERT","lineNumber":250,"content":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":242,"oldContent":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path, shadowPaint)"},{"type":"INSERT","lineNumber":253,"content":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":245,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":256,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":291,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":292,"content":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":289,"oldContent":"    currentStep: Int = 1,"},{"type":"DELETE","lineNumber":290,"oldContent":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":291,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":292,"oldContent":") {"},{"type":"INSERT","lineNumber":302,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"INSERT","lineNumber":303,"content":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"INSERT","lineNumber":311,"content":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":304,"oldContent":"        val arrowDirection = calculateArrowDirection(bestMatch.landmark)"},{"type":"DELETE","lineNumber":305,"oldContent":"        "},{"type":"DELETE","lineNumber":306,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":307,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":308,"oldContent":"                drawAnimated3DArrow("},{"type":"DELETE","lineNumber":309,"oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":310,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":311,"oldContent":"                    direction = arrowDirection,"},{"type":"DELETE","lineNumber":312,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":313,"oldContent":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":327,"content":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":328,"content":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":329,"content":"                    size = size"},{"type":"INSERT","lineNumber":330,"content":"                )"},{"type":"INSERT","lineNumber":331,"content":"            }"},{"type":"INSERT","lineNumber":332,"content":"        }"},{"type":"INSERT","lineNumber":333,"content":"    }"},{"type":"INSERT","lineNumber":334,"content":"}"},{"type":"INSERT","lineNumber":335,"content":""},{"type":"DELETE","lineNumber":349,"oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":360,"content":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":354,"oldContent":"}"},{"type":"DELETE","lineNumber":355,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":356,"oldContent":"    "},{"type":"DELETE","lineNumber":357,"oldContent":"    }"},{"type":"DELETE","lineNumber":358,"oldContent":"        close()"},{"type":"DELETE","lineNumber":359,"oldContent":"        "},{"type":"DELETE","lineNumber":360,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":361,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":362,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":432,"content":"private fun calculateSmoothArrowOrientation("},{"type":"INSERT","lineNumber":433,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":432,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":435,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":447,"oldContent":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":450,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":450,"oldContent":"    }"},{"type":"DELETE","lineNumber":452,"oldContent":"    "},{"type":"INSERT","lineNumber":455,"content":"    }"},{"type":"INSERT","lineNumber":456,"content":"    "},{"type":"DELETE","lineNumber":551,"oldContent":"}"},{"type":"DELETE","lineNumber":552,"oldContent":"    "},{"type":"MODIFY","lineNumber":553,"content":"        // Pfeilkörper","oldContent":"        close()"},{"type":"INSERT","lineNumber":554,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":555,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":559,"content":"        close()"},{"type":"INSERT","lineNumber":560,"content":"    }"},{"type":"INSERT","lineNumber":561,"content":"    "},{"type":"INSERT","lineNumber":562,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":563,"content":"}"}]},{"timestamp":1754312426823,"changes":[{"type":"DELETE","lineNumber":100,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":101,"oldContent":"        y = normalizedY * screenHeight"},{"type":"DELETE","lineNumber":102,"oldContent":"}"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"INSERT","lineNumber":100,"content":"    val y = landmark.position.y.toFloat()"},{"type":"INSERT","lineNumber":101,"content":"    "},{"type":"INSERT","lineNumber":102,"content":"    // Normalisiere die Position auf Bildschirmkoordinaten"},{"type":"INSERT","lineNumber":103,"content":"    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung"},{"type":"INSERT","lineNumber":105,"content":"    "},{"type":"DELETE","lineNumber":109,"oldContent":"    "},{"type":"INSERT","lineNumber":110,"content":"}"},{"type":"INSERT","lineNumber":111,"content":""},{"type":"DELETE","lineNumber":112,"oldContent":"}"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":192,"oldContent":") {"},{"type":"DELETE","lineNumber":194,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":196,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":198,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":200,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":202,"oldContent":"    }"},{"type":"DELETE","lineNumber":204,"oldContent":"    "},{"type":"DELETE","lineNumber":206,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"INSERT","lineNumber":200,"content":") {"},{"type":"INSERT","lineNumber":201,"content":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":202,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":203,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":204,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":205,"content":"    }"},{"type":"INSERT","lineNumber":206,"content":"    "},{"type":"INSERT","lineNumber":207,"content":"    val strokePaint = Paint().apply {"},{"type":"INSERT","lineNumber":242,"content":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":243,"content":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":244,"content":"    )"},{"type":"INSERT","lineNumber":247,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":250,"content":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":248,"oldContent":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":249,"oldContent":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":253,"content":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":251,"oldContent":"    )"},{"type":"INSERT","lineNumber":256,"content":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":254,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":258,"oldContent":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":262,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":266,"oldContent":"        style = Paint.Style.FILL"},{"type":"MODIFY","lineNumber":267,"content":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path, highlightPaint)","oldContent":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"INSERT","lineNumber":291,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":292,"content":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":300,"oldContent":"    currentStep: Int = 1,"},{"type":"DELETE","lineNumber":301,"oldContent":"    totalSteps: Int = 3,"},{"type":"INSERT","lineNumber":302,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"INSERT","lineNumber":303,"content":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"INSERT","lineNumber":311,"content":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":311,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":313,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":315,"oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"INSERT","lineNumber":327,"content":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":328,"content":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":329,"content":"                    size = size"},{"type":"INSERT","lineNumber":330,"content":"                )"},{"type":"INSERT","lineNumber":331,"content":"            }"},{"type":"INSERT","lineNumber":332,"content":"        }"},{"type":"INSERT","lineNumber":333,"content":"    }"},{"type":"INSERT","lineNumber":334,"content":"}"},{"type":"INSERT","lineNumber":335,"content":""},{"type":"INSERT","lineNumber":336,"content":"/**"},{"type":"DELETE","lineNumber":329,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":331,"oldContent":"                    animationProgress = animationProgress,"},{"type":"DELETE","lineNumber":333,"oldContent":"                    size = size"},{"type":"DELETE","lineNumber":335,"oldContent":"                )"},{"type":"DELETE","lineNumber":337,"oldContent":"            }"},{"type":"DELETE","lineNumber":339,"oldContent":"        }"},{"type":"DELETE","lineNumber":341,"oldContent":"    }"},{"type":"DELETE","lineNumber":343,"oldContent":"}"},{"type":"DELETE","lineNumber":345,"oldContent":""},{"type":"MODIFY","lineNumber":360,"content":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)","oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":361,"content":"        "},{"type":"DELETE","lineNumber":363,"oldContent":"}"},{"type":"DELETE","lineNumber":364,"oldContent":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":432,"oldContent":"    confidence: Float,"},{"type":"MODIFY","lineNumber":434,"content":"    confidence: Float,","oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":435,"content":"    cameraRotation: Float"},{"type":"MODIFY","lineNumber":451,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus","oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"MODIFY","lineNumber":457,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung","oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"MODIFY","lineNumber":556,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)","oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":558,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":559,"oldContent":"}"},{"type":"DELETE","lineNumber":560,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":558,"content":"        "},{"type":"MODIFY","lineNumber":561,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":562,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":563,"content":"}"}]},{"timestamp":1754312430856,"changes":[{"type":"INSERT","lineNumber":92,"content":"        )"},{"type":"INSERT","lineNumber":93,"content":"    }"},{"type":"DELETE","lineNumber":93,"oldContent":"    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung"},{"type":"DELETE","lineNumber":94,"oldContent":"    "},{"type":"MODIFY","lineNumber":95,"content":"    // Fallback: Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen","oldContent":"    return Offset("},{"type":"MODIFY","lineNumber":112,"content":"/**","oldContent":"/**"},{"type":"INSERT","lineNumber":196,"content":"    canvas: Canvas,"},{"type":"INSERT","lineNumber":197,"content":"    size: Float,"},{"type":"INSERT","lineNumber":198,"content":"    color: Color,"},{"type":"INSERT","lineNumber":199,"content":"    confidence: Float"},{"type":"DELETE","lineNumber":198,"oldContent":"    canvas: Canvas,"},{"type":"DELETE","lineNumber":201,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":204,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":207,"oldContent":"    confidence: Float"},{"type":"DELETE","lineNumber":243,"oldContent":"    "},{"type":"MODIFY","lineNumber":246,"content":"    // Zeichne Hauptpfeil","oldContent":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":247,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":248,"content":"    "},{"type":"INSERT","lineNumber":250,"content":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":250,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":252,"oldContent":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":253,"content":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":255,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":256,"content":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":258,"oldContent":"        style = Paint.Style.FILL"},{"type":"MODIFY","lineNumber":267,"content":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path,","oldContent":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path, highlightPaint)"},{"type":"INSERT","lineNumber":268,"content":"        highlightPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":269,"content":"    )"},{"type":"DELETE","lineNumber":292,"oldContent":"    modifier: Modifier = Modifier"},{"type":"INSERT","lineNumber":295,"content":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":303,"oldContent":"            }"},{"type":"INSERT","lineNumber":306,"content":"            }"},{"type":"INSERT","lineNumber":313,"content":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":313,"oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":328,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":330,"oldContent":" */"},{"type":"DELETE","lineNumber":333,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":336,"oldContent":"    position: Offset,"},{"type":"MODIFY","lineNumber":339,"content":" * Zeichnet einen animierten 3D-Pfeil","oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":340,"content":" */"},{"type":"INSERT","lineNumber":341,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":342,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":343,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":360,"oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":364,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":432,"oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":434,"content":"private fun calculateSmoothArrowOrientation("},{"type":"INSERT","lineNumber":435,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":435,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":452,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":451,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":458,"content":"    "},{"type":"DELETE","lineNumber":457,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":557,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":556,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":561,"content":"        close()"},{"type":"INSERT","lineNumber":562,"content":"    }"},{"type":"DELETE","lineNumber":561,"oldContent":"    "},{"type":"DELETE","lineNumber":563,"oldContent":"    }"}]},{"timestamp":1754319635662,"changes":[{"type":"DELETE","lineNumber":51,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":52,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":53,"oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":54,"oldContent":"            screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":55,"oldContent":"            screenHeight = screenHeight"},{"type":"DELETE","lineNumber":56,"oldContent":"        )"},{"type":"INSERT","lineNumber":51,"content":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":52,"content":"            calculateArrowPosition("},{"type":"INSERT","lineNumber":53,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":54,"content":"                screenPosition = bestMatch.screenPosition,"},{"type":"INSERT","lineNumber":55,"content":"                screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":56,"content":"                screenHeight = screenHeight"},{"type":"INSERT","lineNumber":57,"content":"            )"},{"type":"INSERT","lineNumber":58,"content":"        } else {"},{"type":"INSERT","lineNumber":59,"content":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"DELETE","lineNumber":59,"oldContent":"        val arrowDirection = calculateArrowDirection("},{"type":"DELETE","lineNumber":60,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":61,"oldContent":"            currentStep = currentStep,"},{"type":"DELETE","lineNumber":62,"oldContent":"            totalSteps = totalSteps"},{"type":"MODIFY","lineNumber":63,"content":"        val arrowDirection = if (bestMatch.landmark != null) {","oldContent":"        )"},{"type":"INSERT","lineNumber":64,"content":"            calculateArrowDirection("},{"type":"INSERT","lineNumber":65,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":66,"content":"                currentStep = currentStep,"},{"type":"INSERT","lineNumber":67,"content":"                totalSteps = totalSteps"},{"type":"INSERT","lineNumber":68,"content":"            )"},{"type":"INSERT","lineNumber":69,"content":"        } else {"},{"type":"INSERT","lineNumber":70,"content":"            0f"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"DELETE","lineNumber":93,"oldContent":"    "},{"type":"INSERT","lineNumber":102,"content":"    "},{"type":"INSERT","lineNumber":119,"content":""},{"type":"DELETE","lineNumber":112,"oldContent":"/**"},{"type":"DELETE","lineNumber":197,"oldContent":") {"},{"type":"DELETE","lineNumber":199,"oldContent":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":208,"content":") {"},{"type":"INSERT","lineNumber":209,"content":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":252,"content":"    )"},{"type":"INSERT","lineNumber":253,"content":"    "},{"type":"DELETE","lineNumber":245,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":248,"oldContent":"    "},{"type":"DELETE","lineNumber":250,"oldContent":"    "},{"type":"INSERT","lineNumber":259,"content":"    "},{"type":"DELETE","lineNumber":269,"oldContent":"}"},{"type":"INSERT","lineNumber":278,"content":"}"},{"type":"DELETE","lineNumber":295,"oldContent":") {"},{"type":"INSERT","lineNumber":304,"content":") {"},{"type":"DELETE","lineNumber":306,"oldContent":"        }"},{"type":"INSERT","lineNumber":315,"content":"        }"},{"type":"DELETE","lineNumber":311,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":312,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":313,"oldContent":"            screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":314,"oldContent":"            screenHeight = screenHeight"},{"type":"DELETE","lineNumber":315,"oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":316,"oldContent":"        )"},{"type":"INSERT","lineNumber":319,"content":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":320,"content":"            calculateArrowPosition("},{"type":"INSERT","lineNumber":321,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":322,"content":"                screenPosition = bestMatch.screenPosition,"},{"type":"INSERT","lineNumber":323,"content":"                screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":324,"content":"                screenHeight = screenHeight"},{"type":"INSERT","lineNumber":325,"content":"            )"},{"type":"INSERT","lineNumber":326,"content":"        } else {"},{"type":"INSERT","lineNumber":327,"content":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":328,"content":"        }"},{"type":"DELETE","lineNumber":318,"oldContent":"        val arrowDirection = calculateArrowDirection("},{"type":"DELETE","lineNumber":319,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":320,"oldContent":"            currentStep = currentStep,"},{"type":"DELETE","lineNumber":321,"oldContent":"            totalSteps = totalSteps"},{"type":"DELETE","lineNumber":322,"oldContent":"        )"},{"type":"INSERT","lineNumber":330,"content":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":331,"content":"            calculateArrowDirection("},{"type":"INSERT","lineNumber":332,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":333,"content":"                currentStep = currentStep,"},{"type":"INSERT","lineNumber":334,"content":"                totalSteps = totalSteps"},{"type":"INSERT","lineNumber":335,"content":"            )"},{"type":"INSERT","lineNumber":336,"content":"        } else {"},{"type":"INSERT","lineNumber":337,"content":"            0f"},{"type":"INSERT","lineNumber":338,"content":"        }"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":354,"content":"/**"},{"type":"DELETE","lineNumber":339,"oldContent":""},{"type":"DELETE","lineNumber":341,"oldContent":"/**"},{"type":"DELETE","lineNumber":343,"oldContent":"    confidence: Float,"},{"type":"INSERT","lineNumber":360,"content":"    confidence: Float,"},{"type":"DELETE","lineNumber":364,"oldContent":"    }"},{"type":"INSERT","lineNumber":381,"content":"    }"},{"type":"DELETE","lineNumber":434,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":436,"oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":452,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":453,"content":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":452,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":469,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":458,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":475,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":557,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":574,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":561,"oldContent":"    "},{"type":"DELETE","lineNumber":562,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":579,"content":"    "},{"type":"INSERT","lineNumber":580,"content":"    canvas.drawPath(arrowPath, paint)"}]},{"timestamp":1754319652814,"changes":[{"type":"MODIFY","lineNumber":39,"content":"    currentStep: Int = 1,","oldContent":"    modifier: Modifier = Modifier"},{"type":"MODIFY","lineNumber":43,"content":") {","oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":45,"content":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":46,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":49,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":50,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":58,"oldContent":"        val arrowDirection = calculateArrowDirection(bestMatch.landmark)"},{"type":"MODIFY","lineNumber":61,"content":"        ","oldContent":"        "},{"type":"INSERT","lineNumber":62,"content":"        // Berechne die Richtung des Pfeils mit Navigationsdaten"},{"type":"DELETE","lineNumber":65,"oldContent":"        "},{"type":"DELETE","lineNumber":67,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":69,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":71,"oldContent":"                draw3DArrow("},{"type":"DELETE","lineNumber":73,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":75,"oldContent":"    }"},{"type":"DELETE","lineNumber":77,"oldContent":"}"},{"type":"INSERT","lineNumber":72,"content":"        "},{"type":"INSERT","lineNumber":73,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":74,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":75,"content":"                draw3DArrow("},{"type":"INSERT","lineNumber":76,"content":"                    position = arrowPosition,"},{"type":"INSERT","lineNumber":77,"content":"                    direction = arrowDirection,"},{"type":"INSERT","lineNumber":78,"content":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":79,"content":"                    size = size"},{"type":"INSERT","lineNumber":80,"content":"                )"},{"type":"INSERT","lineNumber":81,"content":"            }"},{"type":"INSERT","lineNumber":82,"content":"        }"},{"type":"INSERT","lineNumber":83,"content":"    }"},{"type":"INSERT","lineNumber":84,"content":"}"},{"type":"INSERT","lineNumber":91,"content":"    screenPosition: android.graphics.PointF?,"},{"type":"DELETE","lineNumber":88,"oldContent":"    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen"},{"type":"DELETE","lineNumber":89,"oldContent":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"DELETE","lineNumber":90,"oldContent":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"DELETE","lineNumber":91,"oldContent":"    screenPosition: android.graphics.PointF?,"},{"type":"DELETE","lineNumber":92,"oldContent":"    "},{"type":"DELETE","lineNumber":93,"oldContent":"    val x = landmark.position.x.toFloat()"},{"type":"DELETE","lineNumber":94,"oldContent":"    val y = landmark.position.y.toFloat()"},{"type":"INSERT","lineNumber":102,"content":"    "},{"type":"DELETE","lineNumber":109,"oldContent":"    "},{"type":"INSERT","lineNumber":119,"content":""},{"type":"DELETE","lineNumber":122,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":123,"oldContent":") {"},{"type":"DELETE","lineNumber":124,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":125,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":126,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":128,"oldContent":"        // Verschiebe zum Pfeil-Zentrum"},{"type":"DELETE","lineNumber":129,"oldContent":"        "},{"type":"INSERT","lineNumber":123,"content":"private fun calculateArrowDirection("},{"type":"INSERT","lineNumber":124,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":125,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":126,"content":"    totalSteps: Int = 3"},{"type":"INSERT","lineNumber":127,"content":"): Float {"},{"type":"INSERT","lineNumber":128,"content":"    // Berechne Richtung basierend auf Landmark-Typ und Position"},{"type":"INSERT","lineNumber":129,"content":"    val baseAngle = when {"},{"type":"MODIFY","lineNumber":135,"content":"        ","oldContent":"/**"},{"type":"INSERT","lineNumber":208,"content":") {"},{"type":"INSERT","lineNumber":209,"content":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":214,"oldContent":") {"},{"type":"INSERT","lineNumber":216,"content":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"INSERT","lineNumber":217,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":218,"content":"        style = Paint.Style.STROKE"},{"type":"INSERT","lineNumber":219,"content":"        strokeWidth = 3f"},{"type":"INSERT","lineNumber":220,"content":"    }"},{"type":"INSERT","lineNumber":221,"content":"    "},{"type":"INSERT","lineNumber":222,"content":"    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)"},{"type":"INSERT","lineNumber":223,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":224,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":225,"content":"        moveTo(0f, -size * 0.5f)"},{"type":"INSERT","lineNumber":226,"content":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":227,"content":"        lineTo(size * 0.15f, -size * 0.2f)"},{"type":"INSERT","lineNumber":228,"content":"        "},{"type":"INSERT","lineNumber":229,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":230,"content":"        lineTo(size * 0.15f, size * 0.3f)"},{"type":"INSERT","lineNumber":231,"content":"        lineTo(-size * 0.15f, size * 0.3f)"},{"type":"INSERT","lineNumber":232,"content":"        lineTo(-size * 0.15f, -size * 0.2f)"},{"type":"INSERT","lineNumber":233,"content":"        lineTo(-size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":234,"content":"        "},{"type":"INSERT","lineNumber":235,"content":"        close()"},{"type":"INSERT","lineNumber":236,"content":"    }"},{"type":"INSERT","lineNumber":237,"content":"    "},{"type":"INSERT","lineNumber":238,"content":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"INSERT","lineNumber":239,"content":"    val shadowPath = Path(arrowPath).apply {"},{"type":"INSERT","lineNumber":240,"content":"        offset(size * 0.05f, size * 0.05f)"},{"type":"INSERT","lineNumber":241,"content":"    }"},{"type":"INSERT","lineNumber":242,"content":"    "},{"type":"INSERT","lineNumber":243,"content":"    val shadowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":244,"content":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"INSERT","lineNumber":245,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":246,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":247,"content":"    }"},{"type":"INSERT","lineNumber":248,"content":"    "},{"type":"DELETE","lineNumber":216,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":217,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"INSERT","lineNumber":250,"content":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":251,"content":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":252,"content":"    )"},{"type":"DELETE","lineNumber":220,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":255,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":223,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"INSERT","lineNumber":258,"content":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":240,"oldContent":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"INSERT","lineNumber":275,"content":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":276,"content":"        highlightPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":277,"content":"    )"},{"type":"DELETE","lineNumber":250,"oldContent":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":251,"oldContent":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":287,"content":"        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay"},{"type":"INSERT","lineNumber":288,"content":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"DELETE","lineNumber":253,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":290,"content":"}"},{"type":"DELETE","lineNumber":256,"oldContent":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":257,"oldContent":"    )"},{"type":"INSERT","lineNumber":293,"content":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"INSERT","lineNumber":294,"content":" */"},{"type":"DELETE","lineNumber":259,"oldContent":"    "},{"type":"DELETE","lineNumber":260,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":296,"content":"fun Animated3DArrowOverlay("},{"type":"DELETE","lineNumber":263,"oldContent":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":299,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":301,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":302,"content":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":266,"oldContent":"    "},{"type":"DELETE","lineNumber":275,"oldContent":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":276,"oldContent":"        highlightPaint as androidx.compose.ui.graphics.Paint"},{"type":"DELETE","lineNumber":277,"oldContent":"    )"},{"type":"INSERT","lineNumber":312,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"INSERT","lineNumber":313,"content":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":283,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":284,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":285,"oldContent":"}"},{"type":"DELETE","lineNumber":286,"oldContent":"            screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":287,"oldContent":"            screenHeight = screenHeight"},{"type":"DELETE","lineNumber":288,"oldContent":"        )"},{"type":"DELETE","lineNumber":289,"oldContent":"        "},{"type":"DELETE","lineNumber":290,"oldContent":"        val arrowDirection = calculateArrowDirection(bestMatch.landmark)"},{"type":"DELETE","lineNumber":291,"oldContent":"        "},{"type":"DELETE","lineNumber":292,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":293,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":294,"oldContent":"                drawAnimated3DArrow("},{"type":"DELETE","lineNumber":295,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":296,"oldContent":"                    direction = arrowDirection,"},{"type":"DELETE","lineNumber":297,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":298,"oldContent":"                    animationProgress = animationProgress,"},{"type":"DELETE","lineNumber":299,"oldContent":"                    size = size"},{"type":"DELETE","lineNumber":300,"oldContent":"                )"},{"type":"DELETE","lineNumber":301,"oldContent":"    currentStep: Int = 1,"},{"type":"DELETE","lineNumber":302,"oldContent":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":303,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":304,"oldContent":"    }"},{"type":"DELETE","lineNumber":305,"oldContent":"}"},{"type":"DELETE","lineNumber":306,"oldContent":""},{"type":"DELETE","lineNumber":307,"oldContent":"/**"},{"type":"DELETE","lineNumber":308,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":309,"oldContent":" */"},{"type":"DELETE","lineNumber":310,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":311,"oldContent":") {"},{"type":"DELETE","lineNumber":312,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":313,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":314,"oldContent":"            }"},{"type":"DELETE","lineNumber":315,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":316,"oldContent":") {"},{"type":"DELETE","lineNumber":317,"oldContent":"    val baseSize = 60.dp.toPx()"},{"type":"DELETE","lineNumber":318,"oldContent":"        }"},{"type":"DELETE","lineNumber":319,"oldContent":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"DELETE","lineNumber":325,"oldContent":"        "},{"type":"DELETE","lineNumber":327,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":329,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":331,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":333,"oldContent":"    "},{"type":"INSERT","lineNumber":329,"content":"        "},{"type":"INSERT","lineNumber":330,"content":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":331,"content":"            calculateArrowDirection("},{"type":"INSERT","lineNumber":332,"content":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"INSERT","lineNumber":333,"content":"                currentStep = currentStep,"},{"type":"INSERT","lineNumber":334,"content":"                totalSteps = totalSteps"},{"type":"INSERT","lineNumber":335,"content":"            )"},{"type":"INSERT","lineNumber":336,"content":"        } else {"},{"type":"INSERT","lineNumber":337,"content":"            0f"},{"type":"INSERT","lineNumber":338,"content":"        }"},{"type":"INSERT","lineNumber":339,"content":"        "},{"type":"INSERT","lineNumber":340,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":341,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":342,"content":"                drawAnimated3DArrow("},{"type":"INSERT","lineNumber":343,"content":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":337,"oldContent":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":339,"oldContent":"            calculateArrowDirection("},{"type":"DELETE","lineNumber":341,"oldContent":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"DELETE","lineNumber":343,"oldContent":"                currentStep = currentStep,"},{"type":"DELETE","lineNumber":345,"oldContent":"                totalSteps = totalSteps"},{"type":"DELETE","lineNumber":347,"oldContent":"            )"},{"type":"DELETE","lineNumber":349,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":351,"oldContent":"            0f"},{"type":"INSERT","lineNumber":353,"content":""},{"type":"INSERT","lineNumber":354,"content":"/**"},{"type":"DELETE","lineNumber":353,"oldContent":"        }"},{"type":"DELETE","lineNumber":358,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":359,"oldContent":"        "},{"type":"DELETE","lineNumber":360,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":361,"oldContent":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":362,"oldContent":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"DELETE","lineNumber":363,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":364,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":365,"oldContent":"    "},{"type":"DELETE","lineNumber":366,"oldContent":""},{"type":"DELETE","lineNumber":367,"oldContent":"    }"},{"type":"DELETE","lineNumber":368,"oldContent":"/**"},{"type":"DELETE","lineNumber":369,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":370,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":371,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":372,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":373,"oldContent":") {"},{"type":"DELETE","lineNumber":374,"oldContent":"    offsetY: Float = 0f"},{"type":"DELETE","lineNumber":376,"oldContent":"    offsetX: Float = 0f,"},{"type":"DELETE","lineNumber":377,"oldContent":"    color: Color,"},{"type":"INSERT","lineNumber":361,"content":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":362,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":363,"content":") {"},{"type":"INSERT","lineNumber":364,"content":"    val baseSize = 60.dp.toPx()"},{"type":"INSERT","lineNumber":365,"content":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"INSERT","lineNumber":366,"content":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"INSERT","lineNumber":367,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":368,"content":"    "},{"type":"INSERT","lineNumber":369,"content":"    // Leichtes Schweben des Pfeils"},{"type":"INSERT","lineNumber":370,"content":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"INSERT","lineNumber":371,"content":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"INSERT","lineNumber":372,"content":"    "},{"type":"INSERT","lineNumber":373,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":374,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":375,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":376,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":377,"content":"        "},{"type":"MODIFY","lineNumber":381,"content":"    }","oldContent":" * Zeichnet eine einzelne Pfeil-Schicht"},{"type":"INSERT","lineNumber":382,"content":"}"},{"type":"DELETE","lineNumber":396,"oldContent":"    }"},{"type":"INSERT","lineNumber":452,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":453,"content":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":466,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":467,"oldContent":"    cameraRotation: Float"},{"type":"INSERT","lineNumber":469,"content":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":475,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":483,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":490,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"MODIFY","lineNumber":555,"content":"    color: Color,","oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":556,"content":"    offsetX: Float = 0f,"},{"type":"INSERT","lineNumber":557,"content":"    offsetY: Float = 0f"},{"type":"INSERT","lineNumber":558,"content":") {"},{"type":"INSERT","lineNumber":559,"content":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":560,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":561,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":562,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":563,"content":"    }"},{"type":"DELETE","lineNumber":557,"oldContent":"        close()"},{"type":"INSERT","lineNumber":565,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":566,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":567,"content":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"INSERT","lineNumber":568,"content":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":569,"content":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":559,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":571,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":572,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":573,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":562,"oldContent":"}"},{"type":"DELETE","lineNumber":563,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":564,"oldContent":"    "},{"type":"DELETE","lineNumber":565,"oldContent":"    }"},{"type":"DELETE","lineNumber":566,"oldContent":"        close()"},{"type":"DELETE","lineNumber":567,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":568,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":569,"oldContent":"}"},{"type":"DELETE","lineNumber":570,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":577,"content":"        close()"},{"type":"DELETE","lineNumber":573,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":575,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":580,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":581,"content":"}"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"/**"},{"type":"INSERT","lineNumber":584,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":585,"content":" */"},{"type":"INSERT","lineNumber":586,"content":"private fun convertToFeatureLandmark(processedLandmark: ProcessedLandmark): FeatureLandmark {"},{"type":"INSERT","lineNumber":587,"content":"    return FeatureLandmark("},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":589,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":591,"content":"        position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":592,"content":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":593,"content":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":594,"content":"    )"},{"type":"INSERT","lineNumber":595,"content":"}"}]},{"timestamp":1754319678937,"changes":[{"type":"MODIFY","lineNumber":47,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":59,"content":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"DELETE","lineNumber":60,"oldContent":"        "},{"type":"DELETE","lineNumber":62,"oldContent":"        }"},{"type":"DELETE","lineNumber":68,"oldContent":"        "},{"type":"INSERT","lineNumber":69,"content":"        } else {"},{"type":"INSERT","lineNumber":70,"content":"            0f"},{"type":"INSERT","lineNumber":71,"content":"        }"},{"type":"INSERT","lineNumber":72,"content":"        "},{"type":"DELETE","lineNumber":72,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":75,"oldContent":"            0f"},{"type":"DELETE","lineNumber":78,"oldContent":"        }"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":"/**"},{"type":"DELETE","lineNumber":84,"oldContent":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"DELETE","lineNumber":86,"oldContent":" */"},{"type":"DELETE","lineNumber":88,"oldContent":"private fun calculateArrowPosition("},{"type":"INSERT","lineNumber":85,"content":""},{"type":"INSERT","lineNumber":86,"content":"/**"},{"type":"INSERT","lineNumber":87,"content":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"INSERT","lineNumber":88,"content":" */"},{"type":"INSERT","lineNumber":89,"content":"private fun calculateArrowPosition("},{"type":"INSERT","lineNumber":91,"content":"    screenPosition: android.graphics.PointF?,"},{"type":"DELETE","lineNumber":94,"oldContent":"    screenPosition: android.graphics.PointF?,"},{"type":"DELETE","lineNumber":104,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":104,"content":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"INSERT","lineNumber":105,"content":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"DELETE","lineNumber":182,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":183,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":184,"oldContent":"        style = Paint.Style.STROKE"},{"type":"DELETE","lineNumber":185,"oldContent":"    }"},{"type":"DELETE","lineNumber":186,"oldContent":"    "},{"type":"DELETE","lineNumber":187,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":188,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":189,"oldContent":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"DELETE","lineNumber":190,"oldContent":"        lineTo(size * 0.15f, -size * 0.2f)"},{"type":"DELETE","lineNumber":191,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":192,"oldContent":"        lineTo(size * 0.15f, size * 0.3f)"},{"type":"DELETE","lineNumber":193,"oldContent":"        lineTo(-size * 0.15f, size * 0.3f)"},{"type":"DELETE","lineNumber":194,"oldContent":"        lineTo(-size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":182,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":183,"content":"        // Speichere den aktuellen Zustand"},{"type":"INSERT","lineNumber":184,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":186,"content":"        // Verschiebe zum Pfeil-Zentrum"},{"type":"INSERT","lineNumber":187,"content":"        canvas.translate(position.x, position.y)"},{"type":"INSERT","lineNumber":188,"content":"        "},{"type":"INSERT","lineNumber":189,"content":"        // Rotiere basierend auf der Richtung"},{"type":"INSERT","lineNumber":190,"content":"        canvas.rotate(direction)"},{"type":"INSERT","lineNumber":191,"content":"        "},{"type":"INSERT","lineNumber":192,"content":"        // Zeichne den 3D-Pfeil"},{"type":"INSERT","lineNumber":193,"content":"        draw3DArrowShape(canvas as Canvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":194,"content":"        "},{"type":"INSERT","lineNumber":195,"content":"        // Stelle den ursprünglichen Zustand wieder her"},{"type":"INSERT","lineNumber":196,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":197,"oldContent":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"MODIFY","lineNumber":198,"content":"}","oldContent":"        offset(size * 0.05f, size * 0.05f)"},{"type":"MODIFY","lineNumber":210,"content":"        this.color = color.toArgb()","oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":216,"oldContent":"    // Zeichne Schatten"},{"type":"DELETE","lineNumber":220,"oldContent":"    "},{"type":"DELETE","lineNumber":222,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":225,"oldContent":"    "},{"type":"DELETE","lineNumber":227,"oldContent":"    // Zeichne Umriss"},{"type":"DELETE","lineNumber":230,"oldContent":"    "},{"type":"DELETE","lineNumber":232,"oldContent":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"DELETE","lineNumber":234,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":236,"oldContent":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"DELETE","lineNumber":238,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":240,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":242,"oldContent":"    }"},{"type":"DELETE","lineNumber":244,"oldContent":"    "},{"type":"DELETE","lineNumber":246,"oldContent":"    val highlightPath = Path().apply {"},{"type":"DELETE","lineNumber":248,"oldContent":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"DELETE","lineNumber":250,"oldContent":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"DELETE","lineNumber":252,"oldContent":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"DELETE","lineNumber":254,"oldContent":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"DELETE","lineNumber":256,"oldContent":"        close()"},{"type":"DELETE","lineNumber":258,"oldContent":"    }"},{"type":"DELETE","lineNumber":260,"oldContent":"    "},{"type":"DELETE","lineNumber":263,"oldContent":"}"},{"type":"DELETE","lineNumber":265,"oldContent":""},{"type":"DELETE","lineNumber":267,"oldContent":"/**"},{"type":"DELETE","lineNumber":269,"oldContent":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence"},{"type":"DELETE","lineNumber":271,"oldContent":" */"},{"type":"DELETE","lineNumber":273,"oldContent":"private fun getArrowColor(confidence: Float): Color {"},{"type":"DELETE","lineNumber":275,"oldContent":"    return when {"},{"type":"DELETE","lineNumber":277,"oldContent":"        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher"},{"type":"DELETE","lineNumber":278,"oldContent":"        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher"},{"type":"INSERT","lineNumber":249,"content":"    // Zeichne Schatten"},{"type":"INSERT","lineNumber":253,"content":"    "},{"type":"INSERT","lineNumber":254,"content":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":255,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":256,"content":"    "},{"type":"INSERT","lineNumber":257,"content":"    // Zeichne Umriss"},{"type":"INSERT","lineNumber":258,"content":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":259,"content":"    "},{"type":"INSERT","lineNumber":260,"content":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"INSERT","lineNumber":261,"content":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":262,"content":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"INSERT","lineNumber":263,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":264,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":266,"content":"    "},{"type":"INSERT","lineNumber":267,"content":"    val highlightPath = Path().apply {"},{"type":"INSERT","lineNumber":268,"content":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"INSERT","lineNumber":269,"content":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"INSERT","lineNumber":270,"content":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"INSERT","lineNumber":271,"content":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"INSERT","lineNumber":272,"content":"        close()"},{"type":"INSERT","lineNumber":273,"content":"    }"},{"type":"INSERT","lineNumber":274,"content":"    "},{"type":"INSERT","lineNumber":275,"content":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":276,"content":"        highlightPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":277,"content":"    )"},{"type":"INSERT","lineNumber":278,"content":"}"},{"type":"DELETE","lineNumber":284,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":286,"oldContent":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":281,"content":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence"},{"type":"INSERT","lineNumber":282,"content":" */"},{"type":"INSERT","lineNumber":283,"content":"private fun getArrowColor(confidence: Float): Color {"},{"type":"INSERT","lineNumber":284,"content":"    return when {"},{"type":"INSERT","lineNumber":285,"content":"        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher"},{"type":"INSERT","lineNumber":286,"content":"        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher"},{"type":"INSERT","lineNumber":287,"content":"        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay"},{"type":"INSERT","lineNumber":288,"content":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"INSERT","lineNumber":289,"content":"    }"},{"type":"INSERT","lineNumber":290,"content":"}"},{"type":"INSERT","lineNumber":291,"content":""},{"type":"INSERT","lineNumber":292,"content":"/**"},{"type":"INSERT","lineNumber":293,"content":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"INSERT","lineNumber":294,"content":" */"},{"type":"INSERT","lineNumber":296,"content":"fun Animated3DArrowOverlay("},{"type":"INSERT","lineNumber":299,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":301,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":302,"content":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":300,"oldContent":"    canvas.drawPath(highlightPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":301,"oldContent":"        highlightPaint as androidx.compose.ui.graphics.Paint"},{"type":"DELETE","lineNumber":302,"oldContent":"    )"},{"type":"INSERT","lineNumber":312,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"INSERT","lineNumber":313,"content":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":308,"oldContent":"        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay"},{"type":"DELETE","lineNumber":309,"oldContent":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"DELETE","lineNumber":310,"oldContent":"}"},{"type":"DELETE","lineNumber":311,"oldContent":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"DELETE","lineNumber":312,"oldContent":" */"},{"type":"DELETE","lineNumber":313,"oldContent":"fun Animated3DArrowOverlay("},{"type":"DELETE","lineNumber":314,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":315,"oldContent":"    currentStep: Int = 1,"},{"type":"DELETE","lineNumber":316,"oldContent":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":317,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":318,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"INSERT","lineNumber":326,"content":"        } else {"},{"type":"INSERT","lineNumber":327,"content":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":328,"content":"        }"},{"type":"DELETE","lineNumber":328,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":331,"oldContent":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"DELETE","lineNumber":334,"oldContent":"        }"},{"type":"DELETE","lineNumber":336,"oldContent":"                    direction = arrowDirection,"},{"type":"DELETE","lineNumber":338,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":341,"oldContent":"                    animationProgress = animationProgress,"},{"type":"DELETE","lineNumber":344,"oldContent":"                    size = size"},{"type":"DELETE","lineNumber":347,"oldContent":"                )"},{"type":"INSERT","lineNumber":344,"content":"                    direction = arrowDirection,"},{"type":"INSERT","lineNumber":345,"content":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":346,"content":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":347,"content":"                    size = size"},{"type":"INSERT","lineNumber":348,"content":"                )"},{"type":"DELETE","lineNumber":353,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":355,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":360,"content":"    confidence: Float,"},{"type":"DELETE","lineNumber":375,"oldContent":"    confidence: Float,"},{"type":"MODIFY","lineNumber":454,"content":"): Float {","oldContent":"): Float {"},{"type":"MODIFY","lineNumber":476,"content":"    val stabilizedDirection = baseDirection - cameraRotation","oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"MODIFY","lineNumber":554,"content":"    size: Float,","oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":557,"oldContent":"        close()"},{"type":"DELETE","lineNumber":560,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":563,"oldContent":"}"},{"type":"DELETE","lineNumber":565,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":564,"content":"    "},{"type":"INSERT","lineNumber":570,"content":"        "},{"type":"DELETE","lineNumber":574,"oldContent":"        close()"},{"type":"DELETE","lineNumber":577,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":579,"oldContent":"    )"},{"type":"INSERT","lineNumber":575,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":576,"content":"        "},{"type":"DELETE","lineNumber":581,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":582,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":583,"oldContent":"        position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"INSERT","lineNumber":579,"content":"    "},{"type":"DELETE","lineNumber":585,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":587,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":589,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":591,"oldContent":"    return FeatureLandmark("},{"type":"DELETE","lineNumber":593,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: ProcessedLandmark): FeatureLandmark {"},{"type":"INSERT","lineNumber":586,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":587,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":589,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":591,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":592,"content":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":593,"content":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":594,"content":"    )"},{"type":"INSERT","lineNumber":595,"content":"}"}]},{"timestamp":1754319697077,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.content.Context","oldContent":"import android.graphics.Canvas"},{"type":"INSERT","lineNumber":3,"content":"import android.graphics.Paint"},{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.foundation.Canvas"},{"type":"INSERT","lineNumber":8,"content":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":19,"oldContent":"import androidx.compose.ui.platform.LocalDensity"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.ui.platform.LocalDensity"},{"type":"DELETE","lineNumber":22,"oldContent":"import kotlin.math.*"},{"type":"MODIFY","lineNumber":23,"content":"import com.example.arwalking.FeatureMatchResult","oldContent":""},{"type":"INSERT","lineNumber":26,"content":"import kotlin.math.*"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":27,"oldContent":" * 3D-Pfeil Overlay für AR-Navigation"},{"type":"DELETE","lineNumber":28,"oldContent":" * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt"},{"type":"MODIFY","lineNumber":30,"content":" * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt","oldContent":"@Composable"},{"type":"INSERT","lineNumber":32,"content":" */"},{"type":"INSERT","lineNumber":33,"content":"@Composable"},{"type":"DELETE","lineNumber":37,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":38,"oldContent":") {"},{"type":"MODIFY","lineNumber":40,"content":"    totalSteps: Int = 3,","oldContent":"    "},{"type":"MODIFY","lineNumber":46,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }","oldContent":"        "},{"type":"INSERT","lineNumber":48,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":49,"content":"        "},{"type":"DELETE","lineNumber":49,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":50,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":59,"oldContent":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"DELETE","lineNumber":60,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":59,"content":"            Offset(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":61,"content":"        "},{"type":"MODIFY","lineNumber":69,"content":"        } else {","oldContent":"        } else {"},{"type":"DELETE","lineNumber":71,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"MODIFY","lineNumber":73,"content":"        Box(modifier = modifier.fillMaxSize()) {","oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":74,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"INSERT","lineNumber":83,"content":"    }"},{"type":"INSERT","lineNumber":84,"content":"}"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"DELETE","lineNumber":86,"oldContent":"    }"},{"type":"DELETE","lineNumber":89,"oldContent":"}"},{"type":"MODIFY","lineNumber":90,"content":"    landmark: com.example.arwalking.FeatureLandmark,","oldContent":"    screenHeight: Float"},{"type":"INSERT","lineNumber":92,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":93,"content":"    screenHeight: Float"},{"type":"DELETE","lineNumber":93,"oldContent":"    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen"},{"type":"DELETE","lineNumber":94,"oldContent":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"MODIFY","lineNumber":106,"content":"    ","oldContent":"    // Vereinfachte Richtungsberechnung"},{"type":"MODIFY","lineNumber":132,"content":"        ","oldContent":"        canvas.translate(position.x, position.y)"},{"type":"DELETE","lineNumber":157,"oldContent":"    canvas: Canvas,"},{"type":"DELETE","lineNumber":158,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":159,"oldContent":"    confidence: Float"},{"type":"DELETE","lineNumber":160,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":161,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":162,"oldContent":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":157,"content":"                progress < 0.33f -> 270f // Anfang: nach links"},{"type":"INSERT","lineNumber":158,"content":"                progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"INSERT","lineNumber":159,"content":"                else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":160,"content":"            }"},{"type":"INSERT","lineNumber":161,"content":"        }"},{"type":"INSERT","lineNumber":162,"content":"    }"},{"type":"MODIFY","lineNumber":164,"content":"    // Füge leichte Variation basierend auf Position hinzu","oldContent":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"INSERT","lineNumber":185,"content":"        "},{"type":"DELETE","lineNumber":195,"oldContent":"    val shadowPath = Path(arrowPath).apply {"},{"type":"MODIFY","lineNumber":197,"content":"    }","oldContent":"        offset(size * 0.05f, size * 0.05f)"},{"type":"INSERT","lineNumber":209,"content":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":210,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":234,"oldContent":"    // Zeichne Schatten"},{"type":"INSERT","lineNumber":236,"content":"    }"},{"type":"INSERT","lineNumber":238,"content":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"INSERT","lineNumber":239,"content":"    val shadowPath = Path(arrowPath).apply {"},{"type":"INSERT","lineNumber":240,"content":"        offset(size * 0.05f, size * 0.05f)"},{"type":"INSERT","lineNumber":242,"content":"    "},{"type":"INSERT","lineNumber":243,"content":"    val shadowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":244,"content":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"INSERT","lineNumber":245,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":246,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":247,"content":"    }"},{"type":"INSERT","lineNumber":248,"content":"    "},{"type":"INSERT","lineNumber":249,"content":"    // Zeichne Schatten"},{"type":"INSERT","lineNumber":250,"content":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":251,"content":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":252,"content":"    )"},{"type":"INSERT","lineNumber":253,"content":"    "},{"type":"DELETE","lineNumber":242,"oldContent":"    "},{"type":"DELETE","lineNumber":244,"oldContent":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"DELETE","lineNumber":247,"oldContent":"    val shadowPath = Path(arrowPath).apply {"},{"type":"DELETE","lineNumber":250,"oldContent":"        offset(size * 0.05f, size * 0.05f)"},{"type":"DELETE","lineNumber":252,"oldContent":"    }"},{"type":"INSERT","lineNumber":265,"content":"    }"},{"type":"DELETE","lineNumber":256,"oldContent":"    "},{"type":"DELETE","lineNumber":257,"oldContent":"    val shadowPaint = Paint().apply {"},{"type":"DELETE","lineNumber":260,"oldContent":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"DELETE","lineNumber":263,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":266,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":269,"oldContent":"    }"},{"type":"DELETE","lineNumber":272,"oldContent":"    "},{"type":"DELETE","lineNumber":275,"oldContent":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":276,"oldContent":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":279,"content":""},{"type":"INSERT","lineNumber":280,"content":"/**"},{"type":"DELETE","lineNumber":278,"oldContent":"    )"},{"type":"DELETE","lineNumber":280,"oldContent":""},{"type":"DELETE","lineNumber":282,"oldContent":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"DELETE","lineNumber":285,"oldContent":" */"},{"type":"DELETE","lineNumber":288,"oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"DELETE","lineNumber":290,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":292,"oldContent":"    screenHeight: Float,"},{"type":"DELETE","lineNumber":294,"oldContent":") {"},{"type":"DELETE","lineNumber":296,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":298,"oldContent":"    var animationProgress by remember { mutableStateOf(0f) }"},{"type":"DELETE","lineNumber":300,"oldContent":"    "},{"type":"INSERT","lineNumber":295,"content":"@Composable"},{"type":"INSERT","lineNumber":296,"content":"fun Animated3DArrowOverlay("},{"type":"INSERT","lineNumber":297,"content":"    matches: List<FeatureMatchResult>,"},{"type":"INSERT","lineNumber":298,"content":"    isFeatureMappingEnabled: Boolean,"},{"type":"INSERT","lineNumber":299,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":300,"content":"    screenHeight: Float,"},{"type":"INSERT","lineNumber":301,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":302,"content":"    totalSteps: Int = 3,"},{"type":"INSERT","lineNumber":303,"content":"    modifier: Modifier = Modifier"},{"type":"INSERT","lineNumber":304,"content":") {"},{"type":"INSERT","lineNumber":305,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":306,"content":"    var animationProgress by remember { mutableStateOf(0f) }"},{"type":"INSERT","lineNumber":307,"content":"    "},{"type":"DELETE","lineNumber":304,"oldContent":"fun Animated3DArrowOverlay("},{"type":"DELETE","lineNumber":308,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":310,"oldContent":"    currentStep: Int = 1,"},{"type":"DELETE","lineNumber":311,"oldContent":"    totalSteps: Int = 3,"},{"type":"INSERT","lineNumber":314,"content":"            }"},{"type":"INSERT","lineNumber":315,"content":"        }"},{"type":"DELETE","lineNumber":315,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":316,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":317,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":318,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":327,"oldContent":"        "},{"type":"MODIFY","lineNumber":329,"content":"        ","oldContent":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":330,"content":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"INSERT","lineNumber":341,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":342,"content":"                drawAnimated3DArrow("},{"type":"INSERT","lineNumber":343,"content":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":343,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":345,"oldContent":"                drawAnimated3DArrow("},{"type":"DELETE","lineNumber":348,"oldContent":"                    position = arrowPosition,"},{"type":"MODIFY","lineNumber":355,"content":" * Zeichnet einen animierten 3D-Pfeil","oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":453,"content":"    cameraRotation: Float"},{"type":"DELETE","lineNumber":454,"oldContent":"): Float {"},{"type":"INSERT","lineNumber":475,"content":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":476,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"MODIFY","lineNumber":552,"content":"private fun drawArrowLayer(","oldContent":"}"},{"type":"DELETE","lineNumber":561,"oldContent":"    "},{"type":"INSERT","lineNumber":564,"content":"    "},{"type":"DELETE","lineNumber":567,"oldContent":"        "},{"type":"INSERT","lineNumber":570,"content":"        "},{"type":"MODIFY","lineNumber":573,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)","oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":574,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":575,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":575,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":577,"content":"        close()"},{"type":"DELETE","lineNumber":577,"oldContent":"}"},{"type":"DELETE","lineNumber":579,"oldContent":"        close()"},{"type":"DELETE","lineNumber":581,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"/**"},{"type":"INSERT","lineNumber":584,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":585,"content":" */"},{"type":"INSERT","lineNumber":586,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":585,"oldContent":""},{"type":"DELETE","lineNumber":588,"oldContent":"/**"},{"type":"DELETE","lineNumber":591,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"}]},{"timestamp":1754319703162,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":"/**"},{"type":"MODIFY","lineNumber":28,"content":"/**","oldContent":" */"},{"type":"INSERT","lineNumber":29,"content":" * 3D-Pfeil Overlay für AR-Navigation (Snapchat-Style)"},{"type":"MODIFY","lineNumber":31,"content":" * Unterstützt GLB-Modelle für realistischere 3D-Darstellung","oldContent":"fun AR3DArrowOverlay("},{"type":"DELETE","lineNumber":33,"oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"INSERT","lineNumber":34,"content":"fun AR3DArrowOverlay("},{"type":"INSERT","lineNumber":35,"content":"    matches: List<FeatureMatchResult>,"},{"type":"DELETE","lineNumber":38,"oldContent":"    modifier: Modifier = Modifier"},{"type":"MODIFY","lineNumber":41,"content":"    useGLBModel: Boolean = true,","oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"DELETE","lineNumber":49,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"INSERT","lineNumber":50,"content":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"MODIFY","lineNumber":61,"content":"        ","oldContent":"        "},{"type":"INSERT","lineNumber":68,"content":"            )"},{"type":"DELETE","lineNumber":69,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":72,"content":"        "},{"type":"DELETE","lineNumber":74,"oldContent":"        "},{"type":"MODIFY","lineNumber":83,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":86,"content":"/**","oldContent":"/**"},{"type":"DELETE","lineNumber":93,"oldContent":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"INSERT","lineNumber":94,"content":"): Offset {"},{"type":"MODIFY","lineNumber":163,"content":"    ","oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":173,"oldContent":"        style = Paint.Style.STROKE"},{"type":"DELETE","lineNumber":174,"oldContent":"        strokeWidth = 3f"},{"type":"DELETE","lineNumber":175,"oldContent":"    "},{"type":"DELETE","lineNumber":176,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":177,"oldContent":"        moveTo(0f, -size * 0.5f)"},{"type":"INSERT","lineNumber":173,"content":"private fun DrawScope.draw3DArrow("},{"type":"INSERT","lineNumber":174,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":175,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":176,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":177,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"MODIFY","lineNumber":236,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":239,"oldContent":"    }"},{"type":"DELETE","lineNumber":241,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":243,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":241,"content":"    }"},{"type":"DELETE","lineNumber":245,"oldContent":"    "},{"type":"DELETE","lineNumber":247,"oldContent":"    // Zeichne Umriss"},{"type":"DELETE","lineNumber":250,"oldContent":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":252,"oldContent":"    "},{"type":"DELETE","lineNumber":255,"oldContent":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"DELETE","lineNumber":257,"oldContent":"    val highlightPaint = Paint().apply {"},{"type":"DELETE","lineNumber":260,"oldContent":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"INSERT","lineNumber":254,"content":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":255,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":256,"content":"    "},{"type":"INSERT","lineNumber":257,"content":"    // Zeichne Umriss"},{"type":"INSERT","lineNumber":258,"content":"    canvas.drawPath(arrowPath, strokePaint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":259,"content":"    "},{"type":"INSERT","lineNumber":260,"content":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"INSERT","lineNumber":261,"content":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":262,"content":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"INSERT","lineNumber":265,"content":"    }"},{"type":"DELETE","lineNumber":271,"oldContent":"    }"},{"type":"DELETE","lineNumber":279,"oldContent":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence"},{"type":"MODIFY","lineNumber":281,"content":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence","oldContent":" */"},{"type":"INSERT","lineNumber":282,"content":" */"},{"type":"DELETE","lineNumber":291,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":292,"content":"/**"},{"type":"INSERT","lineNumber":293,"content":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"INSERT","lineNumber":294,"content":" */"},{"type":"INSERT","lineNumber":295,"content":"@Composable"},{"type":"DELETE","lineNumber":295,"oldContent":"/**"},{"type":"DELETE","lineNumber":298,"oldContent":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"DELETE","lineNumber":301,"oldContent":" */"},{"type":"DELETE","lineNumber":303,"oldContent":"            while (true) {"},{"type":"DELETE","lineNumber":305,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":308,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":310,"oldContent":"            }"},{"type":"DELETE","lineNumber":312,"oldContent":"        }"},{"type":"DELETE","lineNumber":313,"oldContent":"    }"},{"type":"DELETE","lineNumber":314,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":315,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"INSERT","lineNumber":308,"content":"    // Animation für pulsierenden Effekt"},{"type":"INSERT","lineNumber":309,"content":"    LaunchedEffect(bestMatch) {"},{"type":"INSERT","lineNumber":310,"content":"        if (bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":311,"content":"            while (true) {"},{"type":"INSERT","lineNumber":312,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"INSERT","lineNumber":313,"content":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":317,"oldContent":"            screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":"    "},{"type":"INSERT","lineNumber":318,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"MODIFY","lineNumber":327,"content":"            Offset(screenWidth / 2, screenHeight / 2)","oldContent":"            PointF(screenWidth / 2, screenHeight / 2)"},{"type":"INSERT","lineNumber":328,"content":"        }"},{"type":"DELETE","lineNumber":330,"oldContent":"        }"},{"type":"DELETE","lineNumber":342,"oldContent":"                    direction = arrowDirection,"},{"type":"MODIFY","lineNumber":344,"content":"                    direction = arrowDirection,","oldContent":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":345,"content":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":354,"content":"/**"},{"type":"DELETE","lineNumber":355,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":549,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":550,"oldContent":"    "},{"type":"DELETE","lineNumber":551,"oldContent":"        close()"},{"type":"INSERT","lineNumber":549,"content":"/**"},{"type":"INSERT","lineNumber":550,"content":" * Zeichnet eine einzelne Pfeil-Schicht"},{"type":"INSERT","lineNumber":551,"content":" */"},{"type":"MODIFY","lineNumber":564,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":570,"content":"        ","oldContent":"        "},{"type":"MODIFY","lineNumber":572,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)","oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":575,"oldContent":"        "},{"type":"DELETE","lineNumber":577,"oldContent":"    }"},{"type":"INSERT","lineNumber":576,"content":"        "},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"MODIFY","lineNumber":582,"content":"","oldContent":""},{"type":"DELETE","lineNumber":584,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":586,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":587,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":594,"content":"    )"},{"type":"INSERT","lineNumber":595,"content":"}"}]},{"timestamp":1754321481579,"changes":[{"type":"MODIFY","lineNumber":20,"content":"import androidx.compose.ui.platform.LocalContext","oldContent":"import androidx.compose.ui.unit.dp"},{"type":"INSERT","lineNumber":22,"content":"import androidx.compose.ui.unit.dp"},{"type":"DELETE","lineNumber":23,"oldContent":"import com.example.arwalking.FeatureMatchResult"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":29,"oldContent":" */"},{"type":"MODIFY","lineNumber":34,"content":"fun AR3DArrowOverlay(","oldContent":"fun AR3DArrowOverlay("},{"type":"MODIFY","lineNumber":44,"content":"    val context = LocalContext.current","oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"MODIFY","lineNumber":50,"content":"        // Berechne die Position des Pfeils basierend auf dem Landmark","oldContent":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"INSERT","lineNumber":60,"content":"        }"},{"type":"DELETE","lineNumber":61,"oldContent":"        "},{"type":"INSERT","lineNumber":82,"content":"        }"},{"type":"DELETE","lineNumber":83,"oldContent":"    }"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"DELETE","lineNumber":86,"oldContent":"/**"},{"type":"MODIFY","lineNumber":94,"content":"): Offset {","oldContent":"): Offset {"},{"type":"INSERT","lineNumber":107,"content":"    val x = landmark.position?.x?.toFloat() ?: 0f"},{"type":"INSERT","lineNumber":108,"content":"    val y = landmark.position?.y?.toFloat() ?: 0f"},{"type":"DELETE","lineNumber":108,"oldContent":"    val y = landmark.position.y.toFloat()"},{"type":"DELETE","lineNumber":109,"oldContent":"    "},{"type":"DELETE","lineNumber":166,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":167,"oldContent":"    }"},{"type":"DELETE","lineNumber":168,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":169,"oldContent":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":166,"content":"    "},{"type":"INSERT","lineNumber":167,"content":"    return (baseAngle + positionVariation) % 360f"},{"type":"INSERT","lineNumber":168,"content":"}"},{"type":"INSERT","lineNumber":169,"content":""},{"type":"DELETE","lineNumber":179,"oldContent":"        moveTo(0f, -size * 0.5f)"},{"type":"DELETE","lineNumber":180,"oldContent":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"DELETE","lineNumber":181,"oldContent":"        "},{"type":"INSERT","lineNumber":179,"content":"    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence"},{"type":"INSERT","lineNumber":180,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":181,"content":"    "},{"type":"INSERT","lineNumber":235,"content":"        close()"},{"type":"DELETE","lineNumber":236,"oldContent":"    }"},{"type":"MODIFY","lineNumber":241,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":249,"content":"    // Zeichne Schatten","oldContent":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":250,"content":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"INSERT","lineNumber":251,"content":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"INSERT","lineNumber":252,"content":"    )"},{"type":"INSERT","lineNumber":253,"content":"    "},{"type":"INSERT","lineNumber":254,"content":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":252,"oldContent":"    // Zeichne Schatten"},{"type":"DELETE","lineNumber":255,"oldContent":"    canvas.drawPath(shadowPath as androidx.compose.ui.graphics.Path,"},{"type":"DELETE","lineNumber":257,"oldContent":"        shadowPaint as androidx.compose.ui.graphics.Paint"},{"type":"DELETE","lineNumber":260,"oldContent":"    )"},{"type":"DELETE","lineNumber":262,"oldContent":"    "},{"type":"INSERT","lineNumber":280,"content":"/**"},{"type":"DELETE","lineNumber":282,"oldContent":"/**"},{"type":"MODIFY","lineNumber":292,"content":"/**","oldContent":"/**"},{"type":"DELETE","lineNumber":294,"oldContent":"fun Animated3DArrowOverlay("},{"type":"MODIFY","lineNumber":296,"content":"fun Animated3DArrowOverlay(","oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"INSERT","lineNumber":297,"content":"    matches: List<FeatureMatchResult>,"},{"type":"INSERT","lineNumber":306,"content":"    var animationProgress by remember { mutableStateOf(0f) }"},{"type":"INSERT","lineNumber":307,"content":"    "},{"type":"DELETE","lineNumber":308,"oldContent":"    var animationProgress by remember { mutableStateOf(0f) }"},{"type":"DELETE","lineNumber":311,"oldContent":"    "},{"type":"MODIFY","lineNumber":315,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"DELETE","lineNumber":318,"oldContent":"        }"},{"type":"INSERT","lineNumber":343,"content":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":345,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":383,"oldContent":"private fun DrawScope.drawLayered3DArrow("},{"type":"MODIFY","lineNumber":384,"content":"/**","oldContent":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"INSERT","lineNumber":385,"content":" * GLB-Model Loader für 3D-Pfeil"},{"type":"INSERT","lineNumber":386,"content":" * Lädt das arrow.glb Modell aus den Assets"},{"type":"INSERT","lineNumber":387,"content":" */"},{"type":"INSERT","lineNumber":388,"content":"class GLBArrowModel(private val context: Context) {"},{"type":"INSERT","lineNumber":389,"content":"    private var isLoaded = false"},{"type":"INSERT","lineNumber":390,"content":"    private var modelData: ByteArray? = null"},{"type":"INSERT","lineNumber":391,"content":"    "},{"type":"INSERT","lineNumber":392,"content":"    suspend fun loadModel(): Boolean {"},{"type":"INSERT","lineNumber":393,"content":"        return try {"},{"type":"INSERT","lineNumber":394,"content":"            val inputStream = context.assets.open(\"models/arrow.glb\")"},{"type":"INSERT","lineNumber":395,"content":"            modelData = inputStream.readBytes()"},{"type":"INSERT","lineNumber":396,"content":"            inputStream.close()"},{"type":"INSERT","lineNumber":397,"content":"            isLoaded = true"},{"type":"INSERT","lineNumber":398,"content":"            true"},{"type":"INSERT","lineNumber":399,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":400,"content":"            android.util.Log.e(\"GLBArrowModel\", \"Fehler beim Laden des GLB-Modells: ${e.message}\")"},{"type":"INSERT","lineNumber":401,"content":"            false"},{"type":"INSERT","lineNumber":402,"content":"        }"},{"type":"DELETE","lineNumber":387,"oldContent":"        "},{"type":"DELETE","lineNumber":388,"oldContent":"        // Zeichne mehrschichtigen 3D-Effekt"},{"type":"DELETE","lineNumber":389,"oldContent":"        canvas.rotate(orientation)"},{"type":"DELETE","lineNumber":390,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":392,"oldContent":"    val arrowSize = 80.dp.toPx() * confidence"},{"type":"DELETE","lineNumber":393,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":394,"oldContent":"    orientation: Float,"},{"type":"DELETE","lineNumber":395,"oldContent":"private fun DrawScope.drawEnhanced3DArrow("},{"type":"DELETE","lineNumber":396,"oldContent":" * Verbesserte 3D-Pfeil-Darstellung mit realistischeren Effekten"},{"type":"DELETE","lineNumber":397,"oldContent":""},{"type":"DELETE","lineNumber":398,"oldContent":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"INSERT","lineNumber":405,"content":"    fun isModelLoaded(): Boolean = isLoaded"},{"type":"DELETE","lineNumber":400,"oldContent":"    // Placeholder: In einer echten Implementierung würde hier"},{"type":"DELETE","lineNumber":401,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":402,"oldContent":"    orientation: Float,"},{"type":"DELETE","lineNumber":403,"oldContent":"private fun DrawScope.drawGLBArrow("},{"type":"DELETE","lineNumber":404,"oldContent":" * Zeichnet GLB-basierte 3D-Pfeil (Placeholder für echte GLB-Rendering)"},{"type":"INSERT","lineNumber":407,"content":"    fun getModelData(): ByteArray? = modelData"},{"type":"INSERT","lineNumber":408,"content":"}"},{"type":"DELETE","lineNumber":406,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"DELETE","lineNumber":407,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":408,"oldContent":"    "},{"type":"DELETE","lineNumber":409,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":412,"oldContent":""},{"type":"DELETE","lineNumber":413,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"DELETE","lineNumber":414,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":415,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":416,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":412,"content":"/**"},{"type":"INSERT","lineNumber":413,"content":" * Berechnet stabilisierte 3D-Position für Snapchat-Style AR"},{"type":"INSERT","lineNumber":414,"content":" */"},{"type":"INSERT","lineNumber":415,"content":"private fun calculateStabilized3DPosition("},{"type":"INSERT","lineNumber":416,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":417,"content":"    screenPosition: PointF?,"},{"type":"INSERT","lineNumber":418,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":419,"content":"    screenHeight: Float,"},{"type":"INSERT","lineNumber":420,"content":"    cameraRotation: Float,"},{"type":"INSERT","lineNumber":421,"content":"    deviceOrientation: Float"},{"type":"INSERT","lineNumber":422,"content":"): Offset {"},{"type":"DELETE","lineNumber":418,"oldContent":"        else -> 0f"},{"type":"DELETE","lineNumber":419,"oldContent":"        landmark.id.contains(\"elevator\") -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":420,"oldContent":"        landmark.id.contains(\"stairs\") -> 45f     // Diagonal nach oben"},{"type":"DELETE","lineNumber":421,"oldContent":"    val baseDirection = when {"},{"type":"DELETE","lineNumber":422,"oldContent":"): Float {"},{"type":"DELETE","lineNumber":423,"oldContent":"    "},{"type":"DELETE","lineNumber":456,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":457,"oldContent":" */"},{"type":"INSERT","lineNumber":456,"content":"    // Basis-Richtung basierend auf Landmark-Typ"},{"type":"INSERT","lineNumber":457,"content":"    val baseDirection = when {"},{"type":"DELETE","lineNumber":464,"oldContent":"    "},{"type":"DELETE","lineNumber":465,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":466,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":467,"oldContent":"    "},{"type":"INSERT","lineNumber":464,"content":"        landmark.name.contains(\"Entry\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":465,"content":"        landmark.name.contains(\"entrance\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"INSERT","lineNumber":466,"content":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":467,"content":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f     // Diagonal nach oben"},{"type":"INSERT","lineNumber":477,"content":"    "},{"type":"INSERT","lineNumber":478,"content":"    // Füge Confidence-basierte Variation hinzu"},{"type":"INSERT","lineNumber":479,"content":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"INSERT","lineNumber":480,"content":"    "},{"type":"INSERT","lineNumber":481,"content":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"DELETE","lineNumber":478,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":483,"content":""},{"type":"INSERT","lineNumber":484,"content":"/**"},{"type":"INSERT","lineNumber":485,"content":" * Zeichnet GLB-basierte 3D-Pfeil (Placeholder für echte GLB-Rendering)"},{"type":"INSERT","lineNumber":486,"content":" */"},{"type":"INSERT","lineNumber":487,"content":"private fun DrawScope.drawGLBArrow("},{"type":"INSERT","lineNumber":488,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":489,"content":"    orientation: Float,"},{"type":"INSERT","lineNumber":490,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":491,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":492,"content":") {"},{"type":"INSERT","lineNumber":493,"content":"    // Placeholder: In einer echten Implementierung würde hier"},{"type":"INSERT","lineNumber":494,"content":"    // das GLB-Modell mit einer 3D-Rendering-Engine gerendert"},{"type":"DELETE","lineNumber":480,"oldContent":"    }"},{"type":"DELETE","lineNumber":481,"oldContent":"        close()"},{"type":"DELETE","lineNumber":482,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":483,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":496,"content":"    // Für jetzt verwenden wir eine verbesserte 2D-Darstellung"},{"type":"INSERT","lineNumber":497,"content":"    drawEnhanced3DArrow(position, orientation, confidence, size)"},{"type":"DELETE","lineNumber":485,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":499,"content":""},{"type":"INSERT","lineNumber":500,"content":"/**"},{"type":"INSERT","lineNumber":501,"content":" * Verbesserte 3D-Pfeil-Darstellung mit realistischeren Effekten"},{"type":"INSERT","lineNumber":502,"content":" */"},{"type":"INSERT","lineNumber":503,"content":"private fun DrawScope.drawEnhanced3DArrow("},{"type":"INSERT","lineNumber":504,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":505,"content":"    orientation: Float,"},{"type":"INSERT","lineNumber":506,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":507,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":508,"content":") {"},{"type":"INSERT","lineNumber":509,"content":"    val arrowSize = 80.dp.toPx() * confidence"},{"type":"INSERT","lineNumber":510,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":511,"content":"    "},{"type":"INSERT","lineNumber":512,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":513,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":514,"content":"        canvas.translate(position.x, position.y)"},{"type":"INSERT","lineNumber":515,"content":"        canvas.rotate(orientation)"},{"type":"INSERT","lineNumber":517,"content":"        // Zeichne mehrschichtigen 3D-Effekt"},{"type":"INSERT","lineNumber":518,"content":"        drawLayered3DArrow(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":519,"content":"        "},{"type":"INSERT","lineNumber":520,"content":"        canvas.restore()"},{"type":"DELETE","lineNumber":488,"oldContent":"        close()"},{"type":"DELETE","lineNumber":489,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":490,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":491,"oldContent":"    "},{"type":"DELETE","lineNumber":492,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":494,"oldContent":"    )"},{"type":"DELETE","lineNumber":495,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":496,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":497,"oldContent":"        position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":498,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":499,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":500,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":501,"oldContent":"    return FeatureLandmark("},{"type":"DELETE","lineNumber":502,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: ProcessedLandmark): FeatureLandmark {"},{"type":"DELETE","lineNumber":503,"oldContent":" */"},{"type":"DELETE","lineNumber":504,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":505,"oldContent":"/**"},{"type":"DELETE","lineNumber":507,"oldContent":"}"},{"type":"DELETE","lineNumber":508,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":509,"oldContent":"        close()"},{"type":"DELETE","lineNumber":510,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":511,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":512,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":513,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":514,"oldContent":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":515,"oldContent":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"DELETE","lineNumber":516,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":517,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":518,"oldContent":"    }"},{"type":"DELETE","lineNumber":519,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":520,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":521,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":522,"oldContent":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":524,"content":"/**"},{"type":"INSERT","lineNumber":525,"content":" * Zeichnet mehrschichtigen 3D-Pfeil für realistischeren Effekt"},{"type":"INSERT","lineNumber":526,"content":" */"},{"type":"INSERT","lineNumber":527,"content":"private fun DrawScope.drawLayered3DArrow("},{"type":"INSERT","lineNumber":528,"content":"    canvas: android.graphics.Canvas,"},{"type":"INSERT","lineNumber":529,"content":"    size: Float,"},{"type":"INSERT","lineNumber":530,"content":"    color: Color,"},{"type":"INSERT","lineNumber":531,"content":"    confidence: Float"},{"type":"DELETE","lineNumber":524,"oldContent":"    offsetY: Float = 0f"},{"type":"DELETE","lineNumber":525,"oldContent":"    offsetX: Float = 0f,"},{"type":"DELETE","lineNumber":526,"oldContent":"}"},{"type":"DELETE","lineNumber":527,"oldContent":"    )"},{"type":"DELETE","lineNumber":528,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":529,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":530,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":531,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":532,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":533,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":534,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":535,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":533,"content":"    // Basis-Schatten (tiefste Schicht)"},{"type":"INSERT","lineNumber":534,"content":"    drawArrowLayer(canvas, size * 1.1f, Color.Black.copy(alpha = 0.3f), "},{"type":"INSERT","lineNumber":535,"content":"                  offsetX = size * 0.08f, offsetY = size * 0.08f)"},{"type":"INSERT","lineNumber":537,"content":"    // Mittlerer Schatten"},{"type":"INSERT","lineNumber":538,"content":"    drawArrowLayer(canvas, size * 1.05f, Color.Black.copy(alpha = 0.2f),"},{"type":"INSERT","lineNumber":539,"content":"                  offsetX = size * 0.04f, offsetY = size * 0.04f)"},{"type":"INSERT","lineNumber":540,"content":"    "},{"type":"INSERT","lineNumber":541,"content":"    // Hauptkörper"},{"type":"INSERT","lineNumber":542,"content":"    drawArrowLayer(canvas, size, color)"},{"type":"INSERT","lineNumber":543,"content":"    "},{"type":"INSERT","lineNumber":544,"content":"    // Glanz-Highlight (oberste Schicht)"},{"type":"INSERT","lineNumber":545,"content":"    drawArrowLayer(canvas, size * 0.8f, Color.White.copy(alpha = 0.3f * confidence),"},{"type":"INSERT","lineNumber":546,"content":"                  offsetX = -size * 0.02f, offsetY = -size * 0.02f)"},{"type":"INSERT","lineNumber":547,"content":"}"},{"type":"INSERT","lineNumber":548,"content":""},{"type":"INSERT","lineNumber":549,"content":"/**"},{"type":"INSERT","lineNumber":550,"content":" * Zeichnet eine einzelne Pfeil-Schicht"},{"type":"INSERT","lineNumber":551,"content":" */"},{"type":"INSERT","lineNumber":552,"content":"private fun drawArrowLayer("},{"type":"INSERT","lineNumber":553,"content":"    canvas: android.graphics.Canvas,"},{"type":"INSERT","lineNumber":554,"content":"    size: Float,"},{"type":"INSERT","lineNumber":555,"content":"    color: Color,"},{"type":"INSERT","lineNumber":556,"content":"    offsetX: Float = 0f,"},{"type":"INSERT","lineNumber":557,"content":"    offsetY: Float = 0f"},{"type":"INSERT","lineNumber":558,"content":") {"},{"type":"INSERT","lineNumber":559,"content":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":560,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":561,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":562,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":564,"content":"    "},{"type":"INSERT","lineNumber":565,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":566,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":567,"content":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"INSERT","lineNumber":568,"content":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":569,"content":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":571,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":572,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":573,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":574,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":577,"content":"        close()"},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"DELETE","lineNumber":542,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":543,"oldContent":" */"},{"type":"DELETE","lineNumber":544,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":545,"oldContent":"/**"},{"type":"INSERT","lineNumber":580,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":581,"content":"}"},{"type":"DELETE","lineNumber":547,"oldContent":"        close()"},{"type":"DELETE","lineNumber":548,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":550,"oldContent":" * Zeichnet eine einzelne Pfeil-Schicht"},{"type":"INSERT","lineNumber":584,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":552,"oldContent":"}"},{"type":"DELETE","lineNumber":553,"oldContent":"    )"},{"type":"DELETE","lineNumber":554,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":586,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":556,"oldContent":"    }"},{"type":"DELETE","lineNumber":557,"oldContent":"        "},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":589,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":591,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":592,"content":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":593,"content":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":594,"content":"    )"},{"type":"INSERT","lineNumber":595,"content":"}"}]},{"timestamp":1754321494498,"changes":[{"type":"INSERT","lineNumber":33,"content":"@Composable"},{"type":"DELETE","lineNumber":34,"oldContent":"fun AR3DArrowOverlay("},{"type":"MODIFY","lineNumber":42,"content":"    modifier: Modifier = Modifier","oldContent":"        "},{"type":"INSERT","lineNumber":49,"content":"        "},{"type":"DELETE","lineNumber":50,"oldContent":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"INSERT","lineNumber":93,"content":"    screenHeight: Float"},{"type":"DELETE","lineNumber":94,"oldContent":"): Offset {"},{"type":"MODIFY","lineNumber":109,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":165,"content":"    val positionVariation = ((landmark.position?.x ?: 0.0) % 10).toFloat() * 2f - 10f","oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":171,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":172,"oldContent":"        style = Paint.Style.STROKE"},{"type":"INSERT","lineNumber":171,"content":" * Zeichnet einen 3D-Pfeil auf dem Canvas"},{"type":"INSERT","lineNumber":172,"content":" */"},{"type":"MODIFY","lineNumber":178,"content":") {","oldContent":"        moveTo(0f, -size * 0.5f)"},{"type":"INSERT","lineNumber":240,"content":"        offset(size * 0.05f, size * 0.05f)"},{"type":"DELETE","lineNumber":241,"oldContent":"    }"},{"type":"MODIFY","lineNumber":248,"content":"    ","oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":251,"oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":253,"oldContent":"    "},{"type":"DELETE","lineNumber":256,"oldContent":"    // Zeichne Umriss"},{"type":"INSERT","lineNumber":255,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"INSERT","lineNumber":256,"content":"    "},{"type":"INSERT","lineNumber":257,"content":"    // Zeichne Umriss"},{"type":"INSERT","lineNumber":291,"content":""},{"type":"DELETE","lineNumber":292,"oldContent":"/**"},{"type":"INSERT","lineNumber":295,"content":"@Composable"},{"type":"DELETE","lineNumber":297,"oldContent":"@Composable"},{"type":"MODIFY","lineNumber":308,"content":"    // Animation für pulsierenden Effekt","oldContent":"    // Animation für pulsierenden Effekt"},{"type":"MODIFY","lineNumber":314,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":383,"content":""},{"type":"DELETE","lineNumber":385,"oldContent":"                        position = stabilizedPosition,"},{"type":"DELETE","lineNumber":387,"oldContent":"                    drawGLBArrow("},{"type":"DELETE","lineNumber":393,"oldContent":"        "},{"type":"DELETE","lineNumber":402,"oldContent":"    // Verwende besten getrackte Landmark"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"INSERT","lineNumber":404,"content":"    "},{"type":"DELETE","lineNumber":407,"oldContent":"    val trackingSystem = remember { ARTrackingSystem() }"},{"type":"INSERT","lineNumber":406,"content":"    "},{"type":"INSERT","lineNumber":411,"content":""},{"type":"DELETE","lineNumber":418,"oldContent":"    "},{"type":"DELETE","lineNumber":424,"oldContent":"/**"},{"type":"DELETE","lineNumber":425,"oldContent":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"DELETE","lineNumber":426,"oldContent":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":427,"oldContent":"        landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":428,"oldContent":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":429,"oldContent":"        landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f     // Diagonal nach oben"},{"type":"DELETE","lineNumber":430,"oldContent":"        landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":431,"oldContent":"        landmark.name.contains(\"entrance\", ignoreCase = true) -> 0f    // Geradeaus"},{"type":"DELETE","lineNumber":432,"oldContent":"        landmark.name.contains(\"Entry\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":433,"oldContent":"        // Allgemeine Typen basierend auf Namen"},{"type":"INSERT","lineNumber":423,"content":"    "},{"type":"INSERT","lineNumber":424,"content":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":425,"content":"        // Kompensiere Kamera- und Gerätebewegung für stabilere Positionierung"},{"type":"INSERT","lineNumber":426,"content":"        val stabilizedX = screenPosition.x + "},{"type":"INSERT","lineNumber":427,"content":"            sin(cameraRotation * PI / 180f).toFloat() * 10f"},{"type":"INSERT","lineNumber":428,"content":"        val stabilizedY = screenPosition.y + "},{"type":"INSERT","lineNumber":429,"content":"            cos(deviceOrientation * PI / 180f).toFloat() * 5f"},{"type":"DELETE","lineNumber":435,"oldContent":"        landmark.id == \"PT-1-697\" -> 0f     // Entry - geradeaus"},{"type":"DELETE","lineNumber":436,"oldContent":"        landmark.id == \"PT-1-566\" -> 0f     // Tür - geradeaus"},{"type":"DELETE","lineNumber":437,"oldContent":"        landmark.id == \"PT-1-86\" -> 270f    // Prof. Ludwig Büro - nach links"},{"type":"DELETE","lineNumber":438,"oldContent":"        // Spezifische Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":439,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":440,"oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"DELETE","lineNumber":441,"oldContent":" */"},{"type":"DELETE","lineNumber":442,"oldContent":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"DELETE","lineNumber":443,"oldContent":"/**"},{"type":"INSERT","lineNumber":431,"content":"        return Offset("},{"type":"INSERT","lineNumber":432,"content":"            x = stabilizedX.coerceIn(0f, screenWidth),"},{"type":"INSERT","lineNumber":433,"content":"            y = stabilizedY.coerceIn(0f, screenHeight)"},{"type":"INSERT","lineNumber":434,"content":"        )"},{"type":"INSERT","lineNumber":435,"content":"    }"},{"type":"DELETE","lineNumber":445,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":446,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"INSERT","lineNumber":437,"content":"    // Fallback: Verwende Landmark-Position mit verbesserter Berechnung"},{"type":"INSERT","lineNumber":438,"content":"    val normalizedX = (landmark.position.x.toFloat() % 100) / 100f"},{"type":"INSERT","lineNumber":439,"content":"    val normalizedY = (landmark.position.y.toFloat() % 100) / 100f"},{"type":"DELETE","lineNumber":448,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":449,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"INSERT","lineNumber":441,"content":"    return Offset("},{"type":"INSERT","lineNumber":442,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":443,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":444,"content":"    )"},{"type":"INSERT","lineNumber":445,"content":"}"},{"type":"INSERT","lineNumber":446,"content":""},{"type":"INSERT","lineNumber":447,"content":"/**"},{"type":"INSERT","lineNumber":448,"content":" * Berechnet sanfte Pfeil-Orientierung mit Smooth-Tracking"},{"type":"INSERT","lineNumber":449,"content":" */"},{"type":"DELETE","lineNumber":458,"oldContent":"    val confidenceVariation = (1f - confidence) * 10f * sin(System.currentTimeMillis() / 1000f)"},{"type":"DELETE","lineNumber":459,"oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"DELETE","lineNumber":460,"oldContent":"    "},{"type":"DELETE","lineNumber":461,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"DELETE","lineNumber":462,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":463,"oldContent":"    }"},{"type":"INSERT","lineNumber":458,"content":"        // Spezifische Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":459,"content":"        landmark.id == \"PT-1-86\" -> 270f    // Prof. Ludwig Büro - nach links"},{"type":"INSERT","lineNumber":460,"content":"        landmark.id == \"PT-1-566\" -> 0f     // Tür - geradeaus"},{"type":"INSERT","lineNumber":461,"content":"        landmark.id == \"PT-1-697\" -> 0f     // Entry - geradeaus"},{"type":"INSERT","lineNumber":462,"content":"        "},{"type":"INSERT","lineNumber":463,"content":"        // Allgemeine Typen basierend auf Namen"},{"type":"INSERT","lineNumber":470,"content":"        landmark.name.contains(\"office\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":471,"content":"        landmark.name.contains(\"Prof.\", ignoreCase = true) -> 270f    // Nach links"},{"type":"INSERT","lineNumber":472,"content":"        else -> 0f"},{"type":"DELETE","lineNumber":471,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":472,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":473,"oldContent":"    }"},{"type":"MODIFY","lineNumber":476,"content":"    val stabilizedDirection = baseDirection - cameraRotation","oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":478,"oldContent":"        "},{"type":"DELETE","lineNumber":481,"oldContent":"        close()"},{"type":"INSERT","lineNumber":482,"content":"}"},{"type":"DELETE","lineNumber":486,"oldContent":"    // Kompensiere Kamerabewegung für stabilere Orientierung"},{"type":"DELETE","lineNumber":489,"oldContent":"    )"},{"type":"DELETE","lineNumber":491,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":498,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: ProcessedLandmark): FeatureLandmark {"},{"type":"INSERT","lineNumber":495,"content":"    "},{"type":"INSERT","lineNumber":498,"content":"}"},{"type":"DELETE","lineNumber":510,"oldContent":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"INSERT","lineNumber":516,"content":"        "},{"type":"DELETE","lineNumber":524,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":"}"},{"type":"INSERT","lineNumber":523,"content":""},{"type":"INSERT","lineNumber":532,"content":") {"},{"type":"MODIFY","lineNumber":536,"content":"    ","oldContent":"/**"},{"type":"DELETE","lineNumber":538,"oldContent":""},{"type":"DELETE","lineNumber":540,"oldContent":"        close()"},{"type":"DELETE","lineNumber":542,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":544,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":546,"oldContent":"        "},{"type":"DELETE","lineNumber":552,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":556,"oldContent":"/**"},{"type":"DELETE","lineNumber":559,"oldContent":"}"},{"type":"DELETE","lineNumber":564,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":568,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":570,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":572,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":574,"oldContent":"}"},{"type":"DELETE","lineNumber":576,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":579,"oldContent":"        close()"},{"type":"DELETE","lineNumber":581,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":583,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":585,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":587,"oldContent":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":570,"content":"        "},{"type":"INSERT","lineNumber":571,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":572,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":573,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":574,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":575,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":576,"content":"        "},{"type":"INSERT","lineNumber":577,"content":"        close()"},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"INSERT","lineNumber":579,"content":"    "},{"type":"INSERT","lineNumber":580,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":581,"content":"}"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"/**"},{"type":"INSERT","lineNumber":584,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":585,"content":" */"},{"type":"INSERT","lineNumber":586,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":587,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":589,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":591,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":592,"content":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":593,"content":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":594,"content":"    )"},{"type":"INSERT","lineNumber":595,"content":"}"}]},{"timestamp":1754321502885,"changes":[{"type":"MODIFY","lineNumber":24,"content":"import com.example.arwalking.ARTrackingSystem","oldContent":"/**"},{"type":"INSERT","lineNumber":36,"content":"    isFeatureMappingEnabled: Boolean,"},{"type":"INSERT","lineNumber":37,"content":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":37,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":38,"oldContent":") {"},{"type":"MODIFY","lineNumber":108,"content":"    val y = landmark.position?.y?.toFloat() ?: 0f","oldContent":"    return angle % 360f"},{"type":"INSERT","lineNumber":253,"content":"    "},{"type":"INSERT","lineNumber":254,"content":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":255,"oldContent":"    "},{"type":"DELETE","lineNumber":257,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":307,"content":"    "},{"type":"DELETE","lineNumber":308,"oldContent":"    // Animation für pulsierenden Effekt"},{"type":"DELETE","lineNumber":400,"oldContent":"    }"},{"type":"DELETE","lineNumber":402,"oldContent":"    "},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"INSERT","lineNumber":406,"content":"    "},{"type":"MODIFY","lineNumber":411,"content":"","oldContent":"    // Füge Confidence-basierte Variation hinzu"},{"type":"MODIFY","lineNumber":423,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":430,"content":"        "},{"type":"DELETE","lineNumber":434,"oldContent":"    confidence: Float,"},{"type":"INSERT","lineNumber":436,"content":"    "},{"type":"DELETE","lineNumber":437,"oldContent":"    val normalizedX = (landmark.position.x.toFloat() % 100) / 100f"},{"type":"MODIFY","lineNumber":438,"content":"    val normalizedX = ((landmark.position?.x?.toFloat() ?: 0f) % 100) / 100f","oldContent":"    val normalizedY = (landmark.position.y.toFloat() % 100) / 100f"},{"type":"INSERT","lineNumber":439,"content":"    val normalizedY = ((landmark.position?.y?.toFloat() ?: 0f) % 100) / 100f"},{"type":"INSERT","lineNumber":440,"content":"    "},{"type":"DELETE","lineNumber":444,"oldContent":"}"},{"type":"DELETE","lineNumber":447,"oldContent":"    }"},{"type":"DELETE","lineNumber":454,"oldContent":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"DELETE","lineNumber":455,"oldContent":"}"},{"type":"INSERT","lineNumber":454,"content":"): Float {"},{"type":"INSERT","lineNumber":455,"content":"    "},{"type":"MODIFY","lineNumber":468,"content":"        landmark.name.contains(\"elevator\", ignoreCase = true) ||","oldContent":"    )"},{"type":"DELETE","lineNumber":471,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":474,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":473,"content":"    }"},{"type":"INSERT","lineNumber":474,"content":"    "},{"type":"DELETE","lineNumber":480,"oldContent":"}"},{"type":"INSERT","lineNumber":482,"content":"}"},{"type":"DELETE","lineNumber":491,"oldContent":"    "},{"type":"MODIFY","lineNumber":495,"content":"    ","oldContent":"}"},{"type":"INSERT","lineNumber":498,"content":"}"},{"type":"DELETE","lineNumber":512,"oldContent":"        "},{"type":"INSERT","lineNumber":516,"content":"        "},{"type":"DELETE","lineNumber":518,"oldContent":"    }"},{"type":"DELETE","lineNumber":520,"oldContent":"}"},{"type":"DELETE","lineNumber":522,"oldContent":""},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":"}"},{"type":"INSERT","lineNumber":523,"content":""},{"type":"MODIFY","lineNumber":532,"content":") {","oldContent":") {"},{"type":"INSERT","lineNumber":560,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":561,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":562,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":563,"content":"    }"},{"type":"INSERT","lineNumber":564,"content":"    "},{"type":"INSERT","lineNumber":565,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":566,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":567,"content":"        moveTo(offsetX, offsetY - size * 0.5f)"},{"type":"INSERT","lineNumber":568,"content":"        lineTo(offsetX + size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":569,"content":"        lineTo(offsetX + size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":562,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":565,"oldContent":"}"},{"type":"DELETE","lineNumber":568,"oldContent":"        confidence = 1.0f"},{"type":"DELETE","lineNumber":571,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":573,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":576,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":579,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":585,"content":" */"},{"type":"INSERT","lineNumber":586,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":587,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":589,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":591,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":592,"content":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":593,"content":"        confidence = 1.0f"},{"type":"INSERT","lineNumber":594,"content":"    )"},{"type":"INSERT","lineNumber":595,"content":"}"}]},{"timestamp":1754321553843,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"import android.graphics.Paint"},{"type":"INSERT","lineNumber":7,"content":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"MODIFY","lineNumber":38,"content":"    screenHeight: Float,","oldContent":"    screenHeight: Float,"},{"type":"MODIFY","lineNumber":170,"content":"/**","oldContent":"        strokeWidth = 3f"},{"type":"MODIFY","lineNumber":255,"content":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)","oldContent":"    canvas.drawPath(arrowPath as androidx.compose.ui.graphics.Path, paint as androidx.compose.ui.graphics.Paint)"},{"type":"DELETE","lineNumber":401,"oldContent":"    }"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"MODIFY","lineNumber":406,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":422,"content":"): Offset {"},{"type":"DELETE","lineNumber":423,"oldContent":"    "},{"type":"MODIFY","lineNumber":441,"content":"    return Offset(","oldContent":"    return Offset("},{"type":"MODIFY","lineNumber":445,"content":"}","oldContent":"private fun calculateSmoothArrowOrientation("},{"type":"MODIFY","lineNumber":473,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":482,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":495,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":498,"content":"}","oldContent":"}"},{"type":"MODIFY","lineNumber":516,"content":"        ","oldContent":"        "},{"type":"DELETE","lineNumber":519,"oldContent":"    }"},{"type":"INSERT","lineNumber":520,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"DELETE","lineNumber":523,"oldContent":"        canvas.restore()"},{"type":"INSERT","lineNumber":531,"content":"    confidence: Float"},{"type":"DELETE","lineNumber":532,"oldContent":") {"},{"type":"DELETE","lineNumber":557,"oldContent":"}"},{"type":"DELETE","lineNumber":558,"oldContent":"    )"},{"type":"DELETE","lineNumber":559,"oldContent":"        imageUrl = \"\","},{"type":"INSERT","lineNumber":557,"content":"    offsetY: Float = 0f"},{"type":"INSERT","lineNumber":558,"content":") {"},{"type":"INSERT","lineNumber":559,"content":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":561,"oldContent":"        "},{"type":"DELETE","lineNumber":563,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":566,"oldContent":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":568,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"DELETE","lineNumber":571,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":573,"oldContent":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":571,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":572,"content":"        lineTo(offsetX + size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":573,"content":"        lineTo(offsetX - size * 0.15f, offsetY + size * 0.3f)"},{"type":"INSERT","lineNumber":574,"content":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":575,"content":"        lineTo(offsetX - size * 0.3f, offsetY - size * 0.2f)"},{"type":"INSERT","lineNumber":576,"content":"        "},{"type":"DELETE","lineNumber":582,"oldContent":"    )"},{"type":"DELETE","lineNumber":583,"oldContent":"        imageUrl = \"\","},{"type":"DELETE","lineNumber":584,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":585,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":586,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":587,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":582,"content":""},{"type":"INSERT","lineNumber":583,"content":"/**"},{"type":"INSERT","lineNumber":584,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":589,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":587,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":588,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":589,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":590,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":591,"content":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":592,"content":"        imageUrl = \"\""},{"type":"INSERT","lineNumber":593,"content":"    )"},{"type":"INSERT","lineNumber":594,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/SystemValidator.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/SystemValidator.kt","baseContent":"package com.example.arwalking\n\nimport android.content.Context\nimport android.util.Log\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n\n/**\n * System-Validator zur Überprüfung der AR-Walking-Funktionalität\n */\nclass SystemValidator(private val context: Context) {\n    \n    private val TAG = \"SystemValidator\"\n    \n    /**\n     * Validiert das gesamte AR-Walking-System\n     */\n    fun validateSystem(routeViewModel: RouteViewModel) {\n        CoroutineScope(Dispatchers.IO).launch {\n            Log.i(TAG, \"=== AR-WALKING SYSTEM VALIDATION START ===\")\n            \n            // 1. Route-Loading validieren\n            validateRouteLoading(routeViewModel)\n            \n            // 2. Feature-Mapping validieren\n            validateFeatureMapping(routeViewModel)\n            \n            // 3. Landmark-Zuordnung validieren\n            validateLandmarkMapping(routeViewModel)\n            \n            // 4. Navigation-Schritte validieren\n            validateNavigationSteps(routeViewModel)\n            \n            Log.i(TAG, \"=== AR-WALKING SYSTEM VALIDATION END ===\")\n        }\n    }\n    \n    private fun validateRouteLoading(routeViewModel: RouteViewModel) {\n        Log.i(TAG, \"--- Validiere Route-Loading ---\")\n        \n        val route = routeViewModel.loadNavigationRoute(context)\n        if (route != null) {\n            Log.i(TAG, \"✓ Route erfolgreich geladen\")\n            Log.i(TAG, \"  Schritte: ${route.steps.size}\")\n            Log.i(TAG, \"  Startpunkt: ${routeViewModel.getCurrentStartPoint()}\")\n            Log.i(TAG, \"  Endpunkt: ${routeViewModel.getCurrentEndPoint()}\")\n        } else {\n            Log.e(TAG, \"✗ Route-Loading fehlgeschlagen\")\n        }\n    }\n    \n    private suspend fun validateFeatureMapping(routeViewModel: RouteViewModel) {\n        Log.i(TAG, \"--- Validiere Feature-Mapping ---\")\n        \n        routeViewModel.initializeStorage(context)\n        \n        // Warte kurz auf Initialisierung\n        kotlinx.coroutines.delay(1000)\n        \n        val landmarks = routeViewModel.getAvailableLandmarks()\n        if (landmarks.isNotEmpty()) {\n            Log.i(TAG, \"✓ Feature-Mapping initialisiert\")\n            Log.i(TAG, \"  Verfügbare Landmarks: ${landmarks.size}\")\n            landmarks.forEach { landmark ->\n                Log.i(TAG, \"    - ${landmark.name} (${landmark.id})\")\n            }\n        } else {\n            Log.e(TAG, \"✗ Feature-Mapping Initialisierung fehlgeschlagen\")\n        }\n    }\n    \n    private fun validateLandmarkMapping(routeViewModel: RouteViewModel) {\n        Log.i(TAG, \"--- Validiere Landmark-Zuordnung ---\")\n        \n        val steps = routeViewModel.getCurrentNavigationSteps()\n        val landmarks = routeViewModel.getAvailableLandmarks()\n        \n        var mappedSteps = 0\n        steps.forEach { step ->\n            val hasLandmarks = step.landmarks.isNotEmpty()\n            if (hasLandmarks) {\n                mappedSteps++\n                Log.i(TAG, \"✓ Schritt ${step.stepNumber}: ${step.landmarks.size} Landmarks\")\n                step.landmarks.forEach { landmarkId ->\n                    Log.i(TAG, \"    ✓ ${landmarkId}\")\n                }\n            } else {\n                Log.w(TAG, \"✗ Schritt ${step.stepNumber}: Keine Landmarks zugeordnet\")\n            }\n        }\n        \n        Log.i(TAG, \"Landmark-Zuordnung: $mappedSteps/${steps.size} Schritte haben Landmarks\")\n    }\n    \n    private fun validateNavigationSteps(routeViewModel: RouteViewModel) {\n        Log.i(TAG, \"--- Validiere Navigation-Schritte ---\")\n        \n        val steps = routeViewModel.getCurrentNavigationSteps()\n        if (steps.isNotEmpty()) {\n            Log.i(TAG, \"✓ Navigation-Schritte verfügbar: ${steps.size}\")\n            \n            steps.forEachIndexed { index, step ->\n                Log.i(TAG, \"  Schritt ${index + 1}:\")\n                Log.i(TAG, \"    Anweisung: ${step.instruction}\")\n                Log.i(TAG, \"    Gebäude: ${step.building}\")\n                Log.i(TAG, \"    Landmarks: ${step.landmarks.joinToString(\", \")}\")\n            }\n            \n            // Test der Schritt-Navigation\n            Log.i(TAG, \"--- Teste Schritt-Navigation ---\")\n            routeViewModel.setCurrentNavigationStep(1)\n            val currentStep = routeViewModel.getCurrentStep()\n            if (currentStep != null) {\n                Log.i(TAG, \"✓ Aktueller Schritt: ${currentStep.instruction}\")\n            } else {\n                Log.e(TAG, \"✗ Aktueller Schritt nicht verfügbar\")\n            }\n            \n        } else {\n            Log.e(TAG, \"✗ Keine Navigation-Schritte verfügbar\")\n        }\n    }\n    \n    /**\n     * Simuliert Feature-Matching für Testzwecke\n     */\n    fun simulateFeatureMatching(routeViewModel: RouteViewModel, landmarkId: String) {\n        Log.i(TAG, \"--- Simuliere Feature-Matching für $landmarkId ---\")\n        \n        val landmarks = routeViewModel.getAvailableLandmarks()\n        val testLandmark = landmarks.find { it.id == landmarkId }\n        \n        if (testLandmark != null) {\n            // Simuliere ein Match-Ergebnis\n            val mockMatch = FeatureMatchResult(\n                landmark = testLandmark,\n                matchCount = 25,\n                confidence = 0.85f,\n                distance = 2.5f,\n                screenPosition = android.graphics.PointF(400f, 300f)\n            )\n            \n            Log.i(TAG, \"✓ Simuliertes Match erstellt:\")\n            Log.i(TAG, \"    Landmark: ${mockMatch.landmark.name}\")\n            Log.i(TAG, \"    Confidence: ${mockMatch.confidence}\")\n            Log.i(TAG, \"    Matches: ${mockMatch.matchCount}\")\n            Log.i(TAG, \"    Position: (${mockMatch.screenPosition?.x}, ${mockMatch.screenPosition?.y})\")\n            \n        } else {\n            Log.e(TAG, \"✗ Landmark $landmarkId nicht gefunden\")\n        }\n    }\n}","baseTimestamp":1754319812272,"deltas":[{"timestamp":1754319826610,"changes":[{"type":"MODIFY","lineNumber":131,"content":"        val testLandmarkId = landmarks.find { it == landmarkId }","oldContent":"        val testLandmark = landmarks.find { it.id == landmarkId }"},{"type":"MODIFY","lineNumber":133,"content":"        if (testLandmarkId != null) {","oldContent":"        if (testLandmark != null) {"},{"type":"DELETE","lineNumber":136,"oldContent":"                landmark = testLandmark,"},{"type":"DELETE","lineNumber":137,"oldContent":"                matchCount = 25,"},{"type":"DELETE","lineNumber":138,"oldContent":"                confidence = 0.85f,"},{"type":"DELETE","lineNumber":139,"oldContent":"                distance = 2.5f,"},{"type":"DELETE","lineNumber":140,"oldContent":"                screenPosition = android.graphics.PointF(400f, 300f)"},{"type":"INSERT","lineNumber":136,"content":"                landmarkId = testLandmarkId,"},{"type":"INSERT","lineNumber":137,"content":"                confidence = 0.85f"},{"type":"DELETE","lineNumber":144,"oldContent":"            Log.i(TAG, \"    Landmark: ${mockMatch.landmark.name}\")"},{"type":"INSERT","lineNumber":141,"content":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"},{"type":"DELETE","lineNumber":146,"oldContent":"            Log.i(TAG, \"    Matches: ${mockMatch.matchCount}\")"},{"type":"DELETE","lineNumber":147,"oldContent":"            Log.i(TAG, \"    Position: (${mockMatch.screenPosition?.x}, ${mockMatch.screenPosition?.y})\")"}]},{"timestamp":1754320000644,"changes":[{"type":"DELETE","lineNumber":138,"oldContent":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"},{"type":"INSERT","lineNumber":141,"content":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"}]},{"timestamp":1754320161421,"changes":[{"type":"DELETE","lineNumber":111,"oldContent":"            routeViewModel.setCurrentNavigationStep(1)"},{"type":"DELETE","lineNumber":112,"oldContent":"            val currentStep = routeViewModel.getCurrentStep()"},{"type":"DELETE","lineNumber":113,"oldContent":"            if (currentStep != null) {"},{"type":"DELETE","lineNumber":114,"oldContent":"                Log.i(TAG, \"✓ Aktueller Schritt: ${currentStep.instruction}\")"},{"type":"DELETE","lineNumber":115,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":116,"oldContent":"                Log.e(TAG, \"✗ Aktueller Schritt nicht verfügbar\")"},{"type":"INSERT","lineNumber":111,"content":"            try {"},{"type":"INSERT","lineNumber":112,"content":"                routeViewModel.setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":113,"content":"                val currentStep = routeViewModel.getCurrentStep()"},{"type":"INSERT","lineNumber":114,"content":"                if (currentStep != null) {"},{"type":"INSERT","lineNumber":115,"content":"                    Log.i(TAG, \"✓ Aktueller Schritt: ${currentStep.instruction}\")"},{"type":"INSERT","lineNumber":116,"content":"                } else {"},{"type":"INSERT","lineNumber":117,"content":"                    Log.e(TAG, \"✗ Aktueller Schritt nicht verfügbar\")"},{"type":"INSERT","lineNumber":118,"content":"                }"},{"type":"INSERT","lineNumber":119,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":120,"content":"                Log.e(TAG, \"✗ Fehler beim Testen der Schritt-Navigation: ${e.message}\")"},{"type":"DELETE","lineNumber":140,"oldContent":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"},{"type":"INSERT","lineNumber":145,"content":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"}]},{"timestamp":1754320421499,"changes":[{"type":"DELETE","lineNumber":118,"oldContent":"            }"},{"type":"DELETE","lineNumber":120,"oldContent":"            "},{"type":"DELETE","lineNumber":122,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":121,"content":"            }"},{"type":"INSERT","lineNumber":122,"content":"            "},{"type":"INSERT","lineNumber":123,"content":"        } else {"},{"type":"MODIFY","lineNumber":135,"content":"        val testLandmark = landmarks.find { it.id == landmarkId }","oldContent":"        val testLandmarkId = landmarks.find { it == landmarkId }"},{"type":"INSERT","lineNumber":145,"content":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"},{"type":"DELETE","lineNumber":148,"oldContent":"            Log.i(TAG, \"    Landmark ID: ${mockMatch.landmarkId}\")"}]},{"timestamp":1754320427262,"changes":[{"type":"DELETE","lineNumber":119,"oldContent":"            }"},{"type":"INSERT","lineNumber":120,"content":"                Log.e(TAG, \"✗ Fehler beim Testen der Schritt-Navigation: ${e.message}\")"},{"type":"INSERT","lineNumber":121,"content":"            }"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.e(TAG, \"✗ Fehler beim Testen der Schritt-Navigation: ${e.message}\")"},{"type":"MODIFY","lineNumber":137,"content":"        if (testLandmark != null) {","oldContent":"        if (testLandmarkId != null) {"},{"type":"MODIFY","lineNumber":140,"content":"                landmarkId = testLandmark.id,","oldContent":"                landmarkId = testLandmarkId,"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/FeatureMatchOverlay.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/FeatureMatchOverlay.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.arwalking.FeatureMatchResult\nimport com.example.arwalking.R\n\n/**\n * Overlay-Komponente für die Anzeige von Feature-Match-Ergebnissen\n */\n@Composable\nfun FeatureMatchOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    modifier: Modifier = Modifier\n) {\n    // Nur anzeigen wenn Feature Mapping aktiviert ist und Matches vorhanden sind\n    AnimatedVisibility(\n        visible = isFeatureMappingEnabled && matches.isNotEmpty(),\n        enter = slideInFromTop() + fadeIn(),\n        exit = slideOutToTop() + fadeOut(),\n        modifier = modifier\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            // Header\n            Card(\n                colors = CardDefaults.cardColors(\n                    containerColor = Color.Black.copy(alpha = 0.7f)\n                ),\n                shape = RoundedCornerShape(12.dp)\n            ) {\n                Row(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(12.dp),\n                    verticalAlignment = Alignment.CenterVertically,\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Icon(\n                        painter = painterResource(id = R.drawable.location_searching),\n                        contentDescription = \"Feature Detection\",\n                        tint = Color(0xFF94AD0C),\n                        modifier = Modifier.size(20.dp)\n                    )\n                    \n                    Text(\n                        text = \"Erkannte Landmarks\",\n                        color = Color.White,\n                        fontSize = 14.sp,\n                        fontWeight = FontWeight.SemiBold\n                    )\n                    \n                    Spacer(modifier = Modifier.weight(1f))\n                    \n                    Text(\n                        text = \"${matches.size}\",\n                        color = Color(0xFF94AD0C),\n                        fontSize = 14.sp,\n                        fontWeight = FontWeight.Bold\n                    )\n                }\n            }\n            \n            // Match Results\n            matches.take(3).forEach { match ->\n                FeatureMatchCard(match = match)\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun FeatureMatchCard(\n    match: FeatureMatchResult,\n    modifier: Modifier = Modifier\n) {\n    val confidenceColor = getConfidenceColor(match.confidence)\n    val confidenceText = \"${(match.confidence * 100).toInt()}%\"\n    \n    Card(\n        modifier = modifier.fillMaxWidth(),\n        colors = CardDefaults.cardColors(\n            containerColor = Color.Black.copy(alpha = 0.6f)\n        ),\n        shape = RoundedCornerShape(8.dp)\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(12.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Confidence Indicator\n            Box(\n                modifier = Modifier\n                    .size(40.dp)\n                    .clip(RoundedCornerShape(8.dp))\n                    .background(confidenceColor.copy(alpha = 0.2f))\n                    .border(\n                        width = 2.dp,\n                        color = confidenceColor,\n                        shape = RoundedCornerShape(8.dp)\n                    ),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\n                    text = confidenceText,\n                    color = confidenceColor,\n                    fontSize = 10.sp,\n                    fontWeight = FontWeight.Bold,\n                    textAlign = TextAlign.Center\n                )\n            }\n            \n            // Landmark Info\n            Column(\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(\n                    text = match.landmark.name,\n                    color = Color.White,\n                    fontSize = 14.sp,\n                    fontWeight = FontWeight.SemiBold\n                )\n                \n                if (match.landmark.description.isNotEmpty()) {\n                    Text(\n                        text = match.landmark.description,\n                        color = Color.White.copy(alpha = 0.7f),\n                        fontSize = 12.sp,\n                        maxLines = 1\n                    )\n                }\n                \n                // Match Details\n                Row(\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Text(\n                        text = \"${match.matchCount} Features\",\n                        color = Color.White.copy(alpha = 0.6f),\n                        fontSize = 10.sp\n                    )\n                    \n                    match.distance?.let { distance ->\n                        Text(\n                            text = \"~${distance.toInt()}m\",\n                            color = Color.White.copy(alpha = 0.6f),\n                            fontSize = 10.sp\n                        )\n                    }\n                }\n            }\n            \n            // Status Icon\n            Icon(\n                painter = painterResource(\n                    id = when {\n                        match.confidence >= 0.8f -> R.drawable.star_filled\n                        match.confidence >= 0.6f -> R.drawable.star_outline\n                        else -> R.drawable.alert_circle\n                    }\n                ),\n                contentDescription = \"Match Quality\",\n                tint = confidenceColor,\n                modifier = Modifier.size(16.dp)\n            )\n        }\n    }\n}\n\n/**\n * Gibt die Farbe basierend auf der Confidence zurück\n */\nprivate fun getConfidenceColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.8f -> Color(0xFF4CAF50) // Grün - Sehr gut\n        confidence >= 0.6f -> Color(0xFFFF9800) // Orange - Gut\n        confidence >= 0.4f -> Color(0xFFFFEB3B) // Gelb - Okay\n        else -> Color(0xFFF44336) // Rot - Schlecht\n    }\n}\n\n/**\n * Debug-Overlay für Feature-Matching (nur in Debug-Builds)\n */\n@Composable\nfun FeatureMatchDebugOverlay(\n    matches: List<FeatureMatchResult>,\n    isVisible: Boolean,\n    modifier: Modifier = Modifier\n) {\n    AnimatedVisibility(\n        visible = isVisible && matches.isNotEmpty(),\n        enter = fadeIn(),\n        exit = fadeOut(),\n        modifier = modifier\n    ) {\n        Card(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = 0.8f)\n            ),\n            shape = RoundedCornerShape(8.dp)\n        ) {\n            Column(\n                modifier = Modifier.padding(12.dp)\n            ) {\n                Text(\n                    text = \"Feature Matching Debug\",\n                    color = Color.White,\n                    fontSize = 12.sp,\n                    fontWeight = FontWeight.Bold\n                )\n                \n                Spacer(modifier = Modifier.height(8.dp))\n                \n                matches.forEach { match ->\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        Text(\n                            text = match.landmark.id,\n                            color = Color.White.copy(alpha = 0.7f),\n                            fontSize = 10.sp,\n                            modifier = Modifier.weight(1f)\n                        )\n                        \n                        Text(\n                            text = \"${match.matchCount}\",\n                            color = Color.White.copy(alpha = 0.7f),\n                            fontSize = 10.sp\n                        )\n                        \n                        Text(\n                            text = String.format(\"%.2f\", match.confidence),\n                            color = getConfidenceColor(match.confidence),\n                            fontSize = 10.sp,\n                            fontWeight = FontWeight.Bold\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * Einfache Status-Anzeige für Feature Mapping\n */\n@Composable\nfun FeatureMappingStatusIndicator(\n    isEnabled: Boolean,\n    isProcessing: Boolean,\n    modifier: Modifier = Modifier\n) {\n    AnimatedVisibility(\n        visible = isEnabled,\n        enter = fadeIn(),\n        exit = fadeOut(),\n        modifier = modifier\n    ) {\n        Card(\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = 0.6f)\n            ),\n            shape = RoundedCornerShape(20.dp)\n        ) {\n            Row(\n                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.spacedBy(6.dp)\n            ) {\n                // Status Icon\n                Icon(\n                    painter = painterResource(\n                        id = if (isProcessing) R.drawable.location_searching else R.drawable.star_filled\n                    ),\n                    contentDescription = \"Feature Mapping Status\",\n                    tint = if (isProcessing) Color(0xFFFF9800) else Color(0xFF4CAF50),\n                    modifier = Modifier.size(12.dp)\n                )\n                \n                Text(\n                    text = if (isProcessing) \"Scanning...\" else \"Ready\",\n                    color = Color.White,\n                    fontSize = 10.sp,\n                    fontWeight = FontWeight.SemiBold\n                )\n            }\n        }\n    }\n}","baseTimestamp":1754057676975,"deltas":[{"timestamp":1754057683535,"changes":[{"type":"MODIFY","lineNumber":5,"content":"import androidx.compose.animation.slideInFromTop","oldContent":""},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.animation.slideOutToTop"}]},{"timestamp":1754057702839,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import androidx.compose.animation.slideInFromTop"},{"type":"MODIFY","lineNumber":5,"content":"import androidx.compose.animation.slideInVertically","oldContent":"import androidx.compose.animation.slideOutToTop"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.animation.slideOutVertically"},{"type":"DELETE","lineNumber":37,"oldContent":"        enter = slideInFromTop() + fadeIn(),"},{"type":"MODIFY","lineNumber":37,"content":"        enter = slideInVertically { -it } + fadeIn(),","oldContent":"        exit = slideOutToTop() + fadeOut(),"},{"type":"INSERT","lineNumber":38,"content":"        exit = slideOutVertically { -it } + fadeOut(),"}]},{"timestamp":1754206692873,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import androidx.compose.animation.slideOutVertically","oldContent":"import androidx.compose.animation.slideOutToTop"},{"type":"MODIFY","lineNumber":38,"content":"        exit = slideOutVertically { -it } + fadeOut(),","oldContent":"        exit = slideOutToTop() + fadeOut(),"},{"type":"MODIFY","lineNumber":275,"content":" * Erweiterte Status-Anzeige für Feature Mapping mit sofortiger Aktivierung","oldContent":" * Einfache Status-Anzeige für Feature Mapping"},{"type":"INSERT","lineNumber":283,"content":"    var showStartupAnimation by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":284,"content":"    "},{"type":"INSERT","lineNumber":285,"content":"    // Startup-Animation für 3 Sekunden anzeigen"},{"type":"INSERT","lineNumber":286,"content":"    LaunchedEffect(Unit) {"},{"type":"INSERT","lineNumber":287,"content":"        delay(3000)"},{"type":"INSERT","lineNumber":288,"content":"        showStartupAnimation = false"},{"type":"INSERT","lineNumber":289,"content":"    }"},{"type":"INSERT","lineNumber":290,"content":"    "},{"type":"DELETE","lineNumber":284,"oldContent":"        visible = isEnabled,"},{"type":"DELETE","lineNumber":285,"oldContent":"        enter = fadeIn(),"},{"type":"INSERT","lineNumber":292,"content":"        visible = true, // Immer sichtbar, um Startup-Status zu zeigen"},{"type":"INSERT","lineNumber":293,"content":"        enter = fadeIn() + slideInFromTop(),"},{"type":"DELETE","lineNumber":291,"oldContent":"                containerColor = Color.Black.copy(alpha = 0.6f)"},{"type":"INSERT","lineNumber":299,"content":"                containerColor = when {"},{"type":"INSERT","lineNumber":300,"content":"                    showStartupAnimation -> Color(0xFF2196F3).copy(alpha = 0.8f) // Blau für Startup"},{"type":"INSERT","lineNumber":301,"content":"                    isEnabled && isProcessing -> Color.Black.copy(alpha = 0.7f) // Schwarz für Processing"},{"type":"INSERT","lineNumber":302,"content":"                    isEnabled -> Color(0xFF4CAF50).copy(alpha = 0.7f) // Grün für Ready"},{"type":"INSERT","lineNumber":303,"content":"                    else -> Color(0xFFFF5722).copy(alpha = 0.7f) // Rot für Disabled"},{"type":"INSERT","lineNumber":304,"content":"                }"},{"type":"DELETE","lineNumber":293,"oldContent":"            shape = RoundedCornerShape(20.dp)"},{"type":"INSERT","lineNumber":306,"content":"            shape = RoundedCornerShape(20.dp),"},{"type":"INSERT","lineNumber":307,"content":"            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)"},{"type":"DELETE","lineNumber":300,"oldContent":"                // Status Icon"},{"type":"DELETE","lineNumber":301,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":302,"oldContent":"                    painter = painterResource("},{"type":"DELETE","lineNumber":303,"oldContent":"                        id = if (isProcessing) R.drawable.location_searching else R.drawable.star_filled"},{"type":"DELETE","lineNumber":304,"oldContent":"                    ),"},{"type":"DELETE","lineNumber":305,"oldContent":"                    contentDescription = \"Feature Mapping Status\","},{"type":"DELETE","lineNumber":306,"oldContent":"                    tint = if (isProcessing) Color(0xFFFF9800) else Color(0xFF4CAF50),"},{"type":"DELETE","lineNumber":307,"oldContent":"                    modifier = Modifier.size(12.dp)"},{"type":"DELETE","lineNumber":308,"oldContent":"                )"},{"type":"INSERT","lineNumber":314,"content":"                // Status Icon mit Animation"},{"type":"INSERT","lineNumber":315,"content":"                when {"},{"type":"INSERT","lineNumber":316,"content":"                    showStartupAnimation -> {"},{"type":"INSERT","lineNumber":317,"content":"                        val rotation by rememberInfiniteTransition(label = \"startup_rotation\").animateFloat("},{"type":"INSERT","lineNumber":318,"content":"                            initialValue = 0f,"},{"type":"INSERT","lineNumber":319,"content":"                            targetValue = 360f,"},{"type":"INSERT","lineNumber":320,"content":"                            animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":321,"content":"                                animation = tween(1000, easing = LinearEasing),"},{"type":"INSERT","lineNumber":322,"content":"                                repeatMode = RepeatMode.Restart"},{"type":"INSERT","lineNumber":323,"content":"                            ),"},{"type":"INSERT","lineNumber":324,"content":"                            label = \"startup_animation\""},{"type":"INSERT","lineNumber":325,"content":"                        )"},{"type":"INSERT","lineNumber":326,"content":"                        Icon("},{"type":"INSERT","lineNumber":327,"content":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"INSERT","lineNumber":328,"content":"                            contentDescription = \"Feature Mapping Starting\","},{"type":"INSERT","lineNumber":329,"content":"                            tint = Color.White,"},{"type":"INSERT","lineNumber":330,"content":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":331,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":332,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":333,"content":"                        )"},{"type":"INSERT","lineNumber":334,"content":"                    }"},{"type":"INSERT","lineNumber":335,"content":"                    isEnabled && isProcessing -> {"},{"type":"INSERT","lineNumber":336,"content":"                        val rotation by rememberInfiniteTransition(label = \"processing_rotation\").animateFloat("},{"type":"INSERT","lineNumber":337,"content":"                            initialValue = 0f,"},{"type":"INSERT","lineNumber":338,"content":"                            targetValue = 360f,"},{"type":"INSERT","lineNumber":339,"content":"                            animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":340,"content":"                                animation = tween(1500, easing = LinearEasing),"},{"type":"INSERT","lineNumber":341,"content":"                                repeatMode = RepeatMode.Restart"},{"type":"INSERT","lineNumber":342,"content":"                            ),"},{"type":"INSERT","lineNumber":343,"content":"                            label = \"processing_animation\""},{"type":"INSERT","lineNumber":344,"content":"                        )"},{"type":"INSERT","lineNumber":345,"content":"                        Icon("},{"type":"INSERT","lineNumber":346,"content":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"INSERT","lineNumber":347,"content":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"INSERT","lineNumber":348,"content":"                            tint = Color(0xFFFF9800),"},{"type":"INSERT","lineNumber":349,"content":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":350,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":351,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":352,"content":"                        )"},{"type":"INSERT","lineNumber":353,"content":"                    }"},{"type":"INSERT","lineNumber":354,"content":"                    isEnabled -> {"},{"type":"INSERT","lineNumber":355,"content":"                        Icon("},{"type":"INSERT","lineNumber":356,"content":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"INSERT","lineNumber":357,"content":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"INSERT","lineNumber":358,"content":"                            tint = Color.White,"},{"type":"INSERT","lineNumber":359,"content":"                            modifier = Modifier.size(12.dp)"},{"type":"INSERT","lineNumber":360,"content":"                        )"},{"type":"INSERT","lineNumber":361,"content":"                    }"},{"type":"INSERT","lineNumber":362,"content":"                    else -> {"},{"type":"INSERT","lineNumber":363,"content":"                        Icon("},{"type":"INSERT","lineNumber":364,"content":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"INSERT","lineNumber":365,"content":"                            contentDescription = \"Feature Mapping Disabled\","},{"type":"INSERT","lineNumber":366,"content":"                            tint = Color.White,"},{"type":"INSERT","lineNumber":367,"content":"                            modifier = Modifier.size(12.dp)"},{"type":"INSERT","lineNumber":368,"content":"                        )"},{"type":"INSERT","lineNumber":369,"content":"                    }"},{"type":"INSERT","lineNumber":370,"content":"                }"},{"type":"DELETE","lineNumber":311,"oldContent":"                    text = if (isProcessing) \"Scanning...\" else \"Ready\","},{"type":"INSERT","lineNumber":373,"content":"                    text = when {"},{"type":"INSERT","lineNumber":374,"content":"                        showStartupAnimation -> \"Aktiviere...\""},{"type":"INSERT","lineNumber":375,"content":"                        isEnabled && isProcessing -> \"Scanning...\""},{"type":"INSERT","lineNumber":376,"content":"                        isEnabled -> \"Aktiv\""},{"type":"INSERT","lineNumber":377,"content":"                        else -> \"Inaktiv\""},{"type":"INSERT","lineNumber":378,"content":"                    },"}]},{"timestamp":1754206701626,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.compose.animation.core.*"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.animation.slideInFromTop"},{"type":"DELETE","lineNumber":284,"oldContent":"    AnimatedVisibility("},{"type":"DELETE","lineNumber":288,"oldContent":"        exit = fadeOut(),"},{"type":"DELETE","lineNumber":290,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":292,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":294,"oldContent":"        Card("},{"type":"DELETE","lineNumber":296,"oldContent":"            colors = CardDefaults.cardColors("},{"type":"INSERT","lineNumber":293,"content":"    AnimatedVisibility("},{"type":"DELETE","lineNumber":298,"oldContent":"            ),"},{"type":"DELETE","lineNumber":300,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":301,"oldContent":"            Row("},{"type":"DELETE","lineNumber":302,"oldContent":"                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),"},{"type":"DELETE","lineNumber":303,"oldContent":"                verticalAlignment = Alignment.CenterVertically,"},{"type":"DELETE","lineNumber":304,"oldContent":"                horizontalArrangement = Arrangement.spacedBy(6.dp)"},{"type":"INSERT","lineNumber":296,"content":"        exit = fadeOut(),"},{"type":"INSERT","lineNumber":297,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":298,"content":"    ) {"},{"type":"INSERT","lineNumber":299,"content":"        Card("},{"type":"INSERT","lineNumber":300,"content":"            colors = CardDefaults.cardColors("},{"type":"MODIFY","lineNumber":307,"content":"            ),","oldContent":"            ) {"},{"type":"DELETE","lineNumber":314,"oldContent":"                "},{"type":"DELETE","lineNumber":315,"oldContent":"                Text("},{"type":"DELETE","lineNumber":316,"oldContent":"                    color = Color.White,"},{"type":"DELETE","lineNumber":317,"oldContent":"                    fontSize = 10.sp,"},{"type":"INSERT","lineNumber":310,"content":"        ) {"},{"type":"INSERT","lineNumber":311,"content":"            Row("},{"type":"INSERT","lineNumber":312,"content":"                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),"},{"type":"INSERT","lineNumber":313,"content":"                verticalAlignment = Alignment.CenterVertically,"},{"type":"INSERT","lineNumber":314,"content":"                horizontalArrangement = Arrangement.spacedBy(6.dp)"},{"type":"INSERT","lineNumber":315,"content":"            ) {"},{"type":"DELETE","lineNumber":319,"oldContent":"                    fontWeight = FontWeight.SemiBold"},{"type":"DELETE","lineNumber":321,"oldContent":"                )"},{"type":"DELETE","lineNumber":323,"oldContent":"            }"},{"type":"DELETE","lineNumber":325,"oldContent":"        }"},{"type":"DELETE","lineNumber":327,"oldContent":"    }"},{"type":"DELETE","lineNumber":329,"oldContent":"}"},{"type":"DELETE","lineNumber":331,"oldContent":"                    },"},{"type":"DELETE","lineNumber":333,"oldContent":"                        else -> \"Inaktiv\""},{"type":"DELETE","lineNumber":335,"oldContent":"                        isEnabled -> \"Aktiv\""},{"type":"DELETE","lineNumber":337,"oldContent":"                        isEnabled && isProcessing -> \"Scanning...\""},{"type":"DELETE","lineNumber":339,"oldContent":"                        showStartupAnimation -> \"Aktiviere...\""},{"type":"DELETE","lineNumber":341,"oldContent":"                    text = when {"},{"type":"DELETE","lineNumber":343,"oldContent":"                }"},{"type":"DELETE","lineNumber":345,"oldContent":"                    }"},{"type":"DELETE","lineNumber":347,"oldContent":"                        )"},{"type":"DELETE","lineNumber":349,"oldContent":"                            modifier = Modifier.size(12.dp)"},{"type":"DELETE","lineNumber":351,"oldContent":"                            tint = Color.White,"},{"type":"DELETE","lineNumber":353,"oldContent":"                            contentDescription = \"Feature Mapping Disabled\","},{"type":"DELETE","lineNumber":355,"oldContent":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"DELETE","lineNumber":357,"oldContent":"                        Icon("},{"type":"DELETE","lineNumber":359,"oldContent":"                    else -> {"},{"type":"DELETE","lineNumber":361,"oldContent":"                    }"},{"type":"DELETE","lineNumber":363,"oldContent":"                        )"},{"type":"DELETE","lineNumber":365,"oldContent":"                            modifier = Modifier.size(12.dp)"},{"type":"DELETE","lineNumber":367,"oldContent":"                            tint = Color.White,"},{"type":"DELETE","lineNumber":369,"oldContent":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"DELETE","lineNumber":371,"oldContent":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"DELETE","lineNumber":373,"oldContent":"                        Icon("},{"type":"DELETE","lineNumber":375,"oldContent":"                    isEnabled -> {"},{"type":"DELETE","lineNumber":377,"oldContent":"                    }"},{"type":"DELETE","lineNumber":379,"oldContent":"                        )"},{"type":"DELETE","lineNumber":381,"oldContent":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"DELETE","lineNumber":383,"oldContent":"                                .size(12.dp)"},{"type":"DELETE","lineNumber":385,"oldContent":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":351,"content":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":352,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":353,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":354,"content":"                        )"},{"type":"INSERT","lineNumber":355,"content":"                    }"},{"type":"INSERT","lineNumber":356,"content":"                    isEnabled -> {"},{"type":"INSERT","lineNumber":357,"content":"                        Icon("},{"type":"INSERT","lineNumber":358,"content":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"INSERT","lineNumber":359,"content":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"INSERT","lineNumber":360,"content":"                            tint = Color.White,"},{"type":"INSERT","lineNumber":361,"content":"                            modifier = Modifier.size(12.dp)"},{"type":"INSERT","lineNumber":362,"content":"                        )"},{"type":"INSERT","lineNumber":363,"content":"                    }"},{"type":"INSERT","lineNumber":364,"content":"                    else -> {"},{"type":"INSERT","lineNumber":365,"content":"                        Icon("},{"type":"INSERT","lineNumber":366,"content":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"INSERT","lineNumber":367,"content":"                            contentDescription = \"Feature Mapping Disabled\","},{"type":"INSERT","lineNumber":368,"content":"                            tint = Color.White,"},{"type":"INSERT","lineNumber":369,"content":"                            modifier = Modifier.size(12.dp)"},{"type":"INSERT","lineNumber":370,"content":"                        )"},{"type":"INSERT","lineNumber":371,"content":"                    }"},{"type":"INSERT","lineNumber":372,"content":"                }"},{"type":"INSERT","lineNumber":373,"content":"                "},{"type":"INSERT","lineNumber":374,"content":"                Text("},{"type":"INSERT","lineNumber":375,"content":"                    text = when {"},{"type":"INSERT","lineNumber":376,"content":"                        showStartupAnimation -> \"Aktiviere...\""},{"type":"INSERT","lineNumber":377,"content":"                        isEnabled && isProcessing -> \"Scanning...\""},{"type":"INSERT","lineNumber":378,"content":"                        isEnabled -> \"Aktiv\""},{"type":"INSERT","lineNumber":379,"content":"                        else -> \"Inaktiv\""},{"type":"INSERT","lineNumber":380,"content":"                    },"},{"type":"INSERT","lineNumber":381,"content":"                    color = Color.White,"},{"type":"INSERT","lineNumber":382,"content":"                    fontSize = 10.sp,"},{"type":"INSERT","lineNumber":383,"content":"                    fontWeight = FontWeight.SemiBold"},{"type":"INSERT","lineNumber":384,"content":"                )"},{"type":"INSERT","lineNumber":385,"content":"            }"},{"type":"INSERT","lineNumber":386,"content":"        }"},{"type":"INSERT","lineNumber":387,"content":"    }"},{"type":"INSERT","lineNumber":388,"content":"}"}]},{"timestamp":1754206706437,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import androidx.compose.animation.slideInVertically","oldContent":"import androidx.compose.animation.slideInVertically"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.ui.graphics.graphicsLayer"},{"type":"DELETE","lineNumber":291,"oldContent":"    AnimatedVisibility("},{"type":"INSERT","lineNumber":294,"content":"    AnimatedVisibility("},{"type":"INSERT","lineNumber":295,"content":"        visible = true, // Immer sichtbar, um Startup-Status zu zeigen"},{"type":"INSERT","lineNumber":296,"content":"        enter = fadeIn() + slideInFromTop(),"},{"type":"DELETE","lineNumber":296,"oldContent":"        visible = true, // Immer sichtbar, um Startup-Status zu zeigen"},{"type":"DELETE","lineNumber":299,"oldContent":"        enter = fadeIn() + slideInFromTop(),"},{"type":"DELETE","lineNumber":302,"oldContent":"            ) {"},{"type":"MODIFY","lineNumber":303,"content":"                    showStartupAnimation -> Color(0xFF2196F3).copy(alpha = 0.8f) // Blau für Startup","oldContent":"            ),"},{"type":"DELETE","lineNumber":306,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":308,"oldContent":"            Row("},{"type":"DELETE","lineNumber":310,"oldContent":"                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),"},{"type":"INSERT","lineNumber":308,"content":"            ),"},{"type":"DELETE","lineNumber":312,"oldContent":"                verticalAlignment = Alignment.CenterVertically,"},{"type":"INSERT","lineNumber":311,"content":"        ) {"},{"type":"INSERT","lineNumber":312,"content":"            Row("},{"type":"INSERT","lineNumber":313,"content":"                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),"},{"type":"INSERT","lineNumber":314,"content":"                verticalAlignment = Alignment.CenterVertically,"},{"type":"DELETE","lineNumber":333,"oldContent":"                            modifier = Modifier"},{"type":"DELETE","lineNumber":335,"oldContent":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":337,"content":"                    }"},{"type":"INSERT","lineNumber":338,"content":"                    isEnabled && isProcessing -> {"},{"type":"INSERT","lineNumber":339,"content":"                        val rotation by rememberInfiniteTransition(label = \"processing_rotation\").animateFloat("},{"type":"INSERT","lineNumber":340,"content":"                            initialValue = 0f,"},{"type":"INSERT","lineNumber":341,"content":"                            targetValue = 360f,"},{"type":"INSERT","lineNumber":342,"content":"                            animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":343,"content":"                                animation = tween(1500, easing = LinearEasing),"},{"type":"INSERT","lineNumber":344,"content":"                                repeatMode = RepeatMode.Restart"},{"type":"INSERT","lineNumber":345,"content":"                            ),"},{"type":"INSERT","lineNumber":346,"content":"                            label = \"processing_animation\""},{"type":"INSERT","lineNumber":347,"content":"                        )"},{"type":"INSERT","lineNumber":348,"content":"                        Icon("},{"type":"INSERT","lineNumber":349,"content":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"INSERT","lineNumber":350,"content":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"INSERT","lineNumber":351,"content":"                            tint = Color(0xFFFF9800),"},{"type":"INSERT","lineNumber":352,"content":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":353,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":355,"content":"                        )"},{"type":"DELETE","lineNumber":341,"oldContent":"                        )"},{"type":"DELETE","lineNumber":344,"oldContent":"                    }"},{"type":"DELETE","lineNumber":347,"oldContent":"                    isEnabled && isProcessing -> {"},{"type":"DELETE","lineNumber":350,"oldContent":"                        val rotation by rememberInfiniteTransition(label = \"processing_rotation\").animateFloat("},{"type":"DELETE","lineNumber":353,"oldContent":"                            initialValue = 0f,"},{"type":"DELETE","lineNumber":356,"oldContent":"                            targetValue = 360f,"},{"type":"DELETE","lineNumber":359,"oldContent":"                            animationSpec = infiniteRepeatable("},{"type":"DELETE","lineNumber":362,"oldContent":"                                animation = tween(1500, easing = LinearEasing),"},{"type":"DELETE","lineNumber":365,"oldContent":"                                repeatMode = RepeatMode.Restart"},{"type":"DELETE","lineNumber":368,"oldContent":"                            ),"},{"type":"DELETE","lineNumber":371,"oldContent":"                            label = \"processing_animation\""},{"type":"DELETE","lineNumber":374,"oldContent":"                        )"},{"type":"DELETE","lineNumber":377,"oldContent":"                        Icon("},{"type":"DELETE","lineNumber":380,"oldContent":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"DELETE","lineNumber":383,"oldContent":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"DELETE","lineNumber":386,"oldContent":"                            tint = Color(0xFFFF9800),"}]},{"timestamp":1754214510855,"changes":[{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.animation.slideInFromTop"},{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.animation.slideInVertically"},{"type":"INSERT","lineNumber":27,"content":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":295,"oldContent":"        exit = fadeOut(),"},{"type":"DELETE","lineNumber":297,"oldContent":"        modifier = modifier"},{"type":"INSERT","lineNumber":298,"content":"        exit = fadeOut(),"},{"type":"INSERT","lineNumber":299,"content":"        modifier = modifier"},{"type":"DELETE","lineNumber":307,"oldContent":"            ),"},{"type":"MODIFY","lineNumber":309,"content":"            ),","oldContent":"        ) {"},{"type":"INSERT","lineNumber":311,"content":"            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)"},{"type":"INSERT","lineNumber":312,"content":"        ) {"},{"type":"DELETE","lineNumber":313,"oldContent":"            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)"},{"type":"DELETE","lineNumber":336,"oldContent":"                    }"},{"type":"INSERT","lineNumber":338,"content":"                    }"},{"type":"DELETE","lineNumber":339,"oldContent":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"DELETE","lineNumber":341,"oldContent":"                    }"},{"type":"DELETE","lineNumber":343,"oldContent":"                    isEnabled -> {"},{"type":"DELETE","lineNumber":346,"oldContent":"                        Icon("},{"type":"DELETE","lineNumber":348,"oldContent":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"DELETE","lineNumber":351,"oldContent":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"DELETE","lineNumber":353,"oldContent":"                            tint = Color.White,"},{"type":"DELETE","lineNumber":356,"oldContent":"                            modifier = Modifier.size(12.dp)"},{"type":"DELETE","lineNumber":358,"oldContent":"                        )"},{"type":"DELETE","lineNumber":361,"oldContent":"                    }"},{"type":"DELETE","lineNumber":363,"oldContent":"                    else -> {"},{"type":"INSERT","lineNumber":355,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":356,"content":"                        )"},{"type":"INSERT","lineNumber":357,"content":"                    }"},{"type":"INSERT","lineNumber":358,"content":"                    isEnabled -> {"},{"type":"INSERT","lineNumber":360,"content":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"INSERT","lineNumber":361,"content":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"INSERT","lineNumber":362,"content":"                            tint = Color.White,"},{"type":"INSERT","lineNumber":363,"content":"                            modifier = Modifier.size(12.dp)"},{"type":"INSERT","lineNumber":365,"content":"                    }"},{"type":"INSERT","lineNumber":366,"content":"                    else -> {"},{"type":"INSERT","lineNumber":367,"content":"                        Icon("}]},{"timestamp":1754251740603,"changes":[{"type":"MODIFY","lineNumber":6,"content":"","oldContent":"import androidx.compose.animation.slideInFromTop"},{"type":"INSERT","lineNumber":288,"content":"    var stableProcessingState by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":296,"content":"    // Stabilisiere den Processing-Status um Flackern zu vermeiden"},{"type":"INSERT","lineNumber":297,"content":"    LaunchedEffect(isProcessing) {"},{"type":"INSERT","lineNumber":298,"content":"        if (isProcessing) {"},{"type":"INSERT","lineNumber":299,"content":"            stableProcessingState = true"},{"type":"INSERT","lineNumber":300,"content":"            delay(1000) // Mindestens 1 Sekunde anzeigen"},{"type":"INSERT","lineNumber":301,"content":"        } else {"},{"type":"INSERT","lineNumber":302,"content":"            delay(500) // Kurze Verzögerung bevor auf \"Ready\" gewechselt wird"},{"type":"INSERT","lineNumber":303,"content":"            stableProcessingState = false"},{"type":"INSERT","lineNumber":304,"content":"        }"},{"type":"INSERT","lineNumber":305,"content":"    }"},{"type":"INSERT","lineNumber":306,"content":"    "},{"type":"DELETE","lineNumber":296,"oldContent":"        visible = true, // Immer sichtbar, um Startup-Status zu zeigen"},{"type":"INSERT","lineNumber":308,"content":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"INSERT","lineNumber":309,"content":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"DELETE","lineNumber":298,"oldContent":"        enter = fadeIn() + slideInFromTop(),"},{"type":"DELETE","lineNumber":312,"oldContent":"            Row("},{"type":"INSERT","lineNumber":325,"content":"            Row("},{"type":"DELETE","lineNumber":349,"oldContent":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":362,"content":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"INSERT","lineNumber":363,"content":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"INSERT","lineNumber":364,"content":"                            tint = Color(0xFFFF9800),"},{"type":"INSERT","lineNumber":365,"content":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":366,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":367,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"DELETE","lineNumber":353,"oldContent":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"DELETE","lineNumber":355,"oldContent":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"INSERT","lineNumber":371,"content":"                        Icon("},{"type":"DELETE","lineNumber":357,"oldContent":"                            tint = Color(0xFFFF9800),"},{"type":"DELETE","lineNumber":360,"oldContent":"                            modifier = Modifier"},{"type":"DELETE","lineNumber":362,"oldContent":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":376,"content":"                        )"},{"type":"DELETE","lineNumber":364,"oldContent":"                        Icon("},{"type":"DELETE","lineNumber":366,"oldContent":"                        )"}]},{"timestamp":1754251746848,"changes":[{"type":"DELETE","lineNumber":296,"oldContent":"    AnimatedVisibility("},{"type":"DELETE","lineNumber":299,"oldContent":"        exit = fadeOut(),"},{"type":"DELETE","lineNumber":302,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":304,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":306,"oldContent":"        Card("},{"type":"DELETE","lineNumber":308,"oldContent":"            colors = CardDefaults.cardColors("},{"type":"DELETE","lineNumber":310,"oldContent":"                containerColor = when {"},{"type":"DELETE","lineNumber":312,"oldContent":"                    showStartupAnimation -> Color(0xFF2196F3).copy(alpha = 0.8f) // Blau für Startup"},{"type":"DELETE","lineNumber":314,"oldContent":"                    isEnabled && isProcessing -> Color.Black.copy(alpha = 0.7f) // Schwarz für Processing"},{"type":"INSERT","lineNumber":307,"content":"    AnimatedVisibility("},{"type":"INSERT","lineNumber":308,"content":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"INSERT","lineNumber":309,"content":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"INSERT","lineNumber":310,"content":"        exit = fadeOut(),"},{"type":"INSERT","lineNumber":311,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":312,"content":"    ) {"},{"type":"INSERT","lineNumber":313,"content":"        Card("},{"type":"INSERT","lineNumber":314,"content":"            colors = CardDefaults.cardColors("},{"type":"INSERT","lineNumber":315,"content":"                containerColor = when {"},{"type":"INSERT","lineNumber":316,"content":"                    showStartupAnimation -> Color(0xFF2196F3).copy(alpha = 0.8f) // Blau für Startup"},{"type":"INSERT","lineNumber":317,"content":"                    stableProcessingState -> Color.Black.copy(alpha = 0.7f) // Schwarz für Processing"},{"type":"DELETE","lineNumber":318,"oldContent":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"DELETE","lineNumber":320,"oldContent":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"INSERT","lineNumber":325,"content":"            Row("},{"type":"DELETE","lineNumber":336,"oldContent":"            Row("},{"type":"INSERT","lineNumber":362,"content":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"INSERT","lineNumber":363,"content":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"INSERT","lineNumber":364,"content":"                            tint = Color(0xFFFF9800),"},{"type":"INSERT","lineNumber":365,"content":"                            modifier = Modifier"},{"type":"INSERT","lineNumber":366,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":367,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":371,"content":"                        Icon("},{"type":"DELETE","lineNumber":369,"oldContent":"                            painter = painterResource(id = R.drawable.location_searching),"},{"type":"DELETE","lineNumber":370,"oldContent":"                            contentDescription = \"Feature Mapping Processing\","},{"type":"INSERT","lineNumber":376,"content":"                        )"},{"type":"DELETE","lineNumber":372,"oldContent":"                            tint = Color(0xFFFF9800),"},{"type":"DELETE","lineNumber":373,"oldContent":"                            modifier = Modifier"},{"type":"DELETE","lineNumber":375,"oldContent":"                                .size(12.dp)"},{"type":"DELETE","lineNumber":376,"oldContent":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"DELETE","lineNumber":381,"oldContent":"                        Icon("},{"type":"DELETE","lineNumber":387,"oldContent":"                        )"}]},{"timestamp":1754251751626,"changes":[{"type":"DELETE","lineNumber":302,"oldContent":"    AnimatedVisibility("},{"type":"INSERT","lineNumber":303,"content":"            stableProcessingState = false"},{"type":"INSERT","lineNumber":304,"content":"        }"},{"type":"INSERT","lineNumber":305,"content":"    }"},{"type":"INSERT","lineNumber":306,"content":"    "},{"type":"INSERT","lineNumber":307,"content":"    AnimatedVisibility("},{"type":"DELETE","lineNumber":306,"oldContent":"            stableProcessingState = false"},{"type":"DELETE","lineNumber":309,"oldContent":"        }"},{"type":"DELETE","lineNumber":312,"oldContent":"    }"},{"type":"DELETE","lineNumber":315,"oldContent":"    "},{"type":"MODIFY","lineNumber":318,"content":"                    isEnabled -> Color(0xFF4CAF50).copy(alpha = 0.7f) // Grün für Ready","oldContent":"                    isEnabled -> Color(0xFF4CAF50).copy(alpha = 0.7f) // Grün für Ready"},{"type":"MODIFY","lineNumber":351,"content":"                    stableProcessingState -> {","oldContent":"                    isEnabled && isProcessing -> {"},{"type":"DELETE","lineNumber":363,"oldContent":"                        )"},{"type":"DELETE","lineNumber":365,"oldContent":"                    }"},{"type":"DELETE","lineNumber":367,"oldContent":"                    isEnabled -> {"},{"type":"DELETE","lineNumber":369,"oldContent":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"DELETE","lineNumber":371,"oldContent":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"INSERT","lineNumber":368,"content":"                        )"},{"type":"INSERT","lineNumber":369,"content":"                    }"},{"type":"INSERT","lineNumber":370,"content":"                    isEnabled -> {"},{"type":"INSERT","lineNumber":371,"content":"                        Icon("},{"type":"INSERT","lineNumber":372,"content":"                            painter = painterResource(id = R.drawable.star_filled),"},{"type":"INSERT","lineNumber":373,"content":"                            contentDescription = \"Feature Mapping Ready\","},{"type":"DELETE","lineNumber":375,"oldContent":"                        Icon("},{"type":"INSERT","lineNumber":376,"content":"                        )"},{"type":"DELETE","lineNumber":378,"oldContent":"                        )"}]},{"timestamp":1754251760101,"changes":[{"type":"MODIFY","lineNumber":303,"content":"            stableProcessingState = false","oldContent":"            stableProcessingState = false"},{"type":"DELETE","lineNumber":305,"oldContent":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"DELETE","lineNumber":307,"oldContent":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"INSERT","lineNumber":308,"content":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"INSERT","lineNumber":309,"content":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"INSERT","lineNumber":317,"content":"                    stableProcessingState -> Color.Black.copy(alpha = 0.7f) // Schwarz für Processing"},{"type":"DELETE","lineNumber":318,"oldContent":"                    isEnabled -> Color(0xFF4CAF50).copy(alpha = 0.7f) // Grün für Ready"},{"type":"DELETE","lineNumber":365,"oldContent":"                        )"},{"type":"INSERT","lineNumber":366,"content":"                                .size(12.dp)"},{"type":"INSERT","lineNumber":367,"content":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"INSERT","lineNumber":368,"content":"                        )"},{"type":"DELETE","lineNumber":369,"oldContent":"                                .size(12.dp)"},{"type":"DELETE","lineNumber":372,"oldContent":"                                .graphicsLayer { rotationZ = rotation }"},{"type":"MODIFY","lineNumber":391,"content":"                        stableProcessingState -> \"Scanning...\"","oldContent":"                        isEnabled && isProcessing -> \"Scanning...\""}]},{"timestamp":1754319863126,"changes":[{"type":"MODIFY","lineNumber":147,"content":"                    text = match.landmark?.name ?: match.landmarkId,","oldContent":"                    text = match.landmark.name,"},{"type":"DELETE","lineNumber":153,"oldContent":"                if (match.landmark.description.isNotEmpty()) {"},{"type":"DELETE","lineNumber":154,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":155,"oldContent":"                        text = match.landmark.description,"},{"type":"DELETE","lineNumber":156,"oldContent":"                        color = Color.White.copy(alpha = 0.7f),"},{"type":"DELETE","lineNumber":157,"oldContent":"                        fontSize = 12.sp,"},{"type":"DELETE","lineNumber":158,"oldContent":"                        maxLines = 1"},{"type":"DELETE","lineNumber":159,"oldContent":"                    )"},{"type":"DELETE","lineNumber":160,"oldContent":"                }"},{"type":"INSERT","lineNumber":153,"content":"                Text("},{"type":"INSERT","lineNumber":154,"content":"                    text = \"Landmark Match\","},{"type":"INSERT","lineNumber":155,"content":"                    color = Color.White.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":156,"content":"                    fontSize = 12.sp,"},{"type":"INSERT","lineNumber":157,"content":"                    maxLines = 1"},{"type":"INSERT","lineNumber":158,"content":"                )"},{"type":"DELETE","lineNumber":253,"oldContent":"                            text = match.landmark.id,"},{"type":"INSERT","lineNumber":251,"content":"                            text = match.landmark?.id ?: match.landmarkId,"},{"type":"INSERT","lineNumber":300,"content":"            delay(500) // Kurze Verzögerung bevor auf \"Ready\" gewechselt wird"},{"type":"DELETE","lineNumber":303,"oldContent":"            stableProcessingState = false"},{"type":"DELETE","lineNumber":306,"oldContent":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"DELETE","lineNumber":308,"oldContent":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"INSERT","lineNumber":306,"content":"        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist"},{"type":"INSERT","lineNumber":307,"content":"        enter = fadeIn() + slideInVertically { -it },"},{"type":"MODIFY","lineNumber":364,"content":"                                .size(12.dp)","oldContent":"                                .size(12.dp)"},{"type":"MODIFY","lineNumber":367,"content":"                    }","oldContent":"                    }"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/BuildingStructure.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/BuildingStructure.kt","baseContent":"package com.example.arwalking.data\n\nimport com.example.arwalking.FeatureLandmark\n\n/**\n * Datenstrukturen für die Organisation von Landmarks nach Gebäuden und Stockwerken\n */\n\ndata class BuildingFolder(\n    val id: String,\n    val name: String,\n    val shortName: String,\n    val floors: List<FloorFolder>,\n    val totalImages: Int = 0\n)\n\ndata class FloorFolder(\n    val id: String,\n    val name: String,\n    val floorNumber: Int,\n    val buildingId: String,\n    val landmarks: List<FeatureLandmark>,\n    val imageCount: Int = landmarks.size\n)\n\n/**\n * Vordefinierte Gebäudestruktur der Universität Regensburg\n */\nobject UniversityBuildings {\n    \n    fun getDefaultBuildingStructure(): List<BuildingFolder> {\n        return listOf(\n            BuildingFolder(\n                id = \"pt\",\n                name = \"Philosophie\",\n                shortName = \"PT\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"pt_eg\",\n                        name = \"Philosophie (PT) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"pt\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"pt_1og\",\n                        name = \"Philosophie (PT) 1. Obergeschoss\",\n                        floorNumber = 1,\n                        buildingId = \"pt\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"pt_2og\",\n                        name = \"Philosophie (PT) 2. Obergeschoss\",\n                        floorNumber = 2,\n                        buildingId = \"pt\",\n                        landmarks = emptyList()\n                    )\n                )\n            ),\n            BuildingFolder(\n                id = \"rw\",\n                name = \"Recht und Wirtschaft\",\n                shortName = \"RW\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"rw_eg\",\n                        name = \"Recht und Wirtschaft (RW) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"rw\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"rw_1og\",\n                        name = \"Recht und Wirtschaft (RW) 1. Obergeschoss\",\n                        floorNumber = 1,\n                        buildingId = \"rw\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"rw_2og\",\n                        name = \"Recht und Wirtschaft (RW) 2. Obergeschoss\",\n                        floorNumber = 2,\n                        buildingId = \"rw\",\n                        landmarks = emptyList()\n                    )\n                )\n            ),\n            BuildingFolder(\n                id = \"bio\",\n                name = \"Biologie und Vorklinische Medizin\",\n                shortName = \"BIO\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"bio_eg\",\n                        name = \"Biologie (BIO) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"bio\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"bio_1og\",\n                        name = \"Biologie (BIO) 1. Obergeschoss\",\n                        floorNumber = 1,\n                        buildingId = \"bio\",\n                        landmarks = emptyList()\n                    )\n                )\n            ),\n            BuildingFolder(\n                id = \"phy\",\n                name = \"Physik\",\n                shortName = \"PHY\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"phy_eg\",\n                        name = \"Physik (PHY) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"phy\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"phy_1og\",\n                        name = \"Physik (PHY) 1. Obergeschoss\",\n                        floorNumber = 1,\n                        buildingId = \"phy\",\n                        landmarks = emptyList()\n                    )\n                )\n            ),\n            BuildingFolder(\n                id = \"che\",\n                name = \"Chemie und Pharmazie\",\n                shortName = \"CHE\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"che_eg\",\n                        name = \"Chemie (CHE) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"che\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"che_1og\",\n                        name = \"Chemie (CHE) 1. Obergeschoss\",\n                        floorNumber = 1,\n                        buildingId = \"che\",\n                        landmarks = emptyList()\n                    )\n                )\n            ),\n            BuildingFolder(\n                id = \"mat\",\n                name = \"Mathematik\",\n                shortName = \"MAT\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"mat_eg\",\n                        name = \"Mathematik (MAT) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"mat\",\n                        landmarks = emptyList()\n                    ),\n                    FloorFolder(\n                        id = \"mat_1og\",\n                        name = \"Mathematik (MAT) 1. Obergeschoss\",\n                        floorNumber = 1,\n                        buildingId = \"mat\",\n                        landmarks = emptyList()\n                    )\n                )\n            ),\n            BuildingFolder(\n                id = \"zv\",\n                name = \"Zentralverwaltung\",\n                shortName = \"ZV\",\n                floors = listOf(\n                    FloorFolder(\n                        id = \"zv_eg\",\n                        name = \"Zentralverwaltung (ZV) Erdgeschoss\",\n                        floorNumber = 0,\n                        buildingId = \"zv\",\n                        landmarks = emptyList()\n                    )\n                )\n            )\n        )\n    }\n    \n    /**\n     * Ordnet ein Landmark basierend auf seiner Position einem Gebäude/Stockwerk zu\n     */\n    fun assignLandmarkToBuilding(landmark: FeatureLandmark): Pair<String, Int>? {\n        // Fallback: Versuche aus dem Namen zu extrahieren\n        return extractBuildingFromName(landmark.name)\n    }\n    \n    private fun extractBuildingFromName(name: String): Pair<String, Int>? {\n        val upperName = name.uppercase()\n        \n        // Extract floor information from name\n        val floor = when {\n            upperName.contains(\"1. OG\") || upperName.contains(\"1OG\") || upperName.contains(\"FIRST FLOOR\") -> 1\n            upperName.contains(\"2. OG\") || upperName.contains(\"2OG\") || upperName.contains(\"SECOND FLOOR\") -> 2\n            upperName.contains(\"3. OG\") || upperName.contains(\"3OG\") || upperName.contains(\"THIRD FLOOR\") -> 3\n            upperName.contains(\"ERDGESCHOSS\") || upperName.contains(\"EG\") || upperName.contains(\"GROUND FLOOR\") -> 0\n            else -> 0 // Default to ground floor\n        }\n        \n        val building = when {\n            upperName.contains(\"PT\") || upperName.contains(\"PHILOSOPHIE\") -> \"pt\"\n            upperName.contains(\"RW\") || upperName.contains(\"RECHT\") || upperName.contains(\"WIRTSCHAFT\") -> \"rw\"\n            upperName.contains(\"BIO\") || upperName.contains(\"BIOLOGIE\") -> \"bio\"\n            upperName.contains(\"PHY\") || upperName.contains(\"PHYSIK\") -> \"phy\"\n            upperName.contains(\"CHE\") || upperName.contains(\"CHEMIE\") -> \"che\"\n            upperName.contains(\"MAT\") || upperName.contains(\"MATHEMATIK\") -> \"mat\"\n            upperName.contains(\"ZV\") || upperName.contains(\"VERWALTUNG\") -> \"zv\"\n            else -> null\n        }\n        \n        return if (building != null) Pair(building, floor) else null\n    }\n}","baseTimestamp":1754321193867},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/LandmarkFeatureStorage.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/LandmarkFeatureStorage.kt","baseContent":"package com.example.arwalking\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.util.Log\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.withContext\nimport java.io.File\nimport java.io.FileInputStream\nimport java.io.FileOutputStream\nimport java.io.IOException\n\n/**\n * Storage Manager für Landmark-Features und Deskriptoren\n * Verwaltet lokale Speicherung von extrahierten Features\n */\nclass LandmarkFeatureStorage(private val context: Context) {\n    \n    private val TAG = \"LandmarkFeatureStorage\"\n    \n    // Storage-Verzeichnisse\n    private val featuresDir = File(context.filesDir, \"landmark_features\")\n    private val imagesDir = File(context.filesDir, \"landmark_images\")\n    private val cacheDir = File(context.cacheDir, \"processed_landmarks\")\n    \n    // JSON Serializer\n    private val gson = Gson()\n    \n    // In-Memory Cache für verarbeitete Landmarks\n    private val processedLandmarksCache = mutableMapOf<String, ProcessedLandmark>()\n    \n    init {\n        // Erstelle Verzeichnisse falls sie nicht existieren\n        featuresDir.mkdirs()\n        imagesDir.mkdirs()\n        cacheDir.mkdirs()\n        \n        Log.d(TAG, \"LandmarkFeatureStorage initialisiert\")\n        Log.d(TAG, \"Features Dir: ${featuresDir.absolutePath}\")\n        Log.d(TAG, \"Images Dir: ${imagesDir.absolutePath}\")\n    }\n    \n    /**\n     * Speichert extrahierte Features für ein Landmark\n     */\n    suspend fun saveLandmarkFeatures(\n        landmarkId: String,\n        landmark: FeatureLandmark,\n        features: LandmarkFeatures,\n        image: Bitmap\n    ): Boolean = withContext(Dispatchers.IO) {\n        \n        return@withContext try {\n            Log.d(TAG, \"Speichere Features für Landmark: $landmarkId\")\n            \n            // Speichere Landmark-Metadaten\n            val landmarkFile = File(featuresDir, \"$landmarkId.json\")\n            val landmarkJson = gson.toJson(landmark)\n            landmarkFile.writeText(landmarkJson)\n            \n            // Speichere Features\n            val featuresFile = File(featuresDir, \"${landmarkId}_features.json\")\n            val featuresJson = gson.toJson(features)\n            featuresFile.writeText(featuresJson)\n            \n            // Speichere Bild\n            val imageFile = File(imagesDir, \"$landmarkId.jpg\")\n            val outputStream = FileOutputStream(imageFile)\n            image.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)\n            outputStream.close()\n            \n            Log.d(TAG, \"Features erfolgreich gespeichert für: $landmarkId\")\n            true\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Speichern der Features für $landmarkId: ${e.message}\")\n            false\n        }\n    }\n    \n    /**\n     * Lädt gespeicherte Features für ein Landmark\n     */\n    suspend fun loadLandmarkFeatures(landmarkId: String): Pair<FeatureLandmark, LandmarkFeatures>? = \n        withContext(Dispatchers.IO) {\n        \n        return@withContext try {\n            val landmarkFile = File(featuresDir, \"$landmarkId.json\")\n            val featuresFile = File(featuresDir, \"${landmarkId}_features.json\")\n            \n            if (!landmarkFile.exists() || !featuresFile.exists()) {\n                Log.w(TAG, \"Features nicht gefunden für: $landmarkId\")\n                return@withContext null\n            }\n            \n            // Lade Landmark-Metadaten\n            val landmarkJson = landmarkFile.readText()\n            val landmark = gson.fromJson(landmarkJson, FeatureLandmark::class.java)\n            \n            // Lade Features\n            val featuresJson = featuresFile.readText()\n            val features = gson.fromJson(featuresJson, LandmarkFeatures::class.java)\n            \n            Log.d(TAG, \"Features geladen für: $landmarkId (${features.keypoints.size} Keypoints)\")\n            \n            Pair(landmark, features)\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der Features für $landmarkId: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Lädt das Bild für ein Landmark\n     */\n    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? = withContext(Dispatchers.IO) {\n        \n        return@withContext try {\n            val imageFile = File(imagesDir, \"$landmarkId.jpg\")\n            \n            if (!imageFile.exists()) {\n                Log.w(TAG, \"Bild nicht gefunden für: $landmarkId\")\n                return@withContext null\n            }\n            \n            val bitmap = BitmapFactory.decodeFile(imageFile.absolutePath)\n            Log.d(TAG, \"Bild geladen für: $landmarkId (${bitmap?.width}x${bitmap?.height})\")\n            \n            bitmap\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden des Bildes für $landmarkId: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Lädt alle verfügbaren Landmark-IDs\n     */\n    suspend fun getAvailableLandmarkIds(): List<String> = withContext(Dispatchers.IO) {\n        \n        return@withContext try {\n            featuresDir.listFiles { file ->\n                file.name.endsWith(\".json\") && !file.name.endsWith(\"_features.json\")\n            }?.map { file ->\n                file.nameWithoutExtension\n            } ?: emptyList()\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")\n            emptyList()\n        }\n    }\n    \n    /**\n     * Lädt alle verfügbaren Landmarks mit Features\n     */\n    suspend fun loadAllLandmarks(): List<ProcessedLandmark> = withContext(Dispatchers.IO) {\n        \n        val processedLandmarks = mutableListOf<ProcessedLandmark>()\n        \n        try {\n            val landmarkIds = getAvailableLandmarkIds()\n            Log.d(TAG, \"Lade ${landmarkIds.size} Landmarks...\")\n            \n            for (landmarkId in landmarkIds) {\n                val processedLandmark = loadSingleLandmark(landmarkId)\n                if (processedLandmark != null) {\n                    processedLandmarks.add(processedLandmark)\n                }\n            }\n            \n            Log.d(TAG, \"Insgesamt ${processedLandmarks.size} Landmarks geladen\")\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden aller Landmarks: ${e.message}\")\n        }\n        \n        return@withContext processedLandmarks\n    }\n    \n    /**\n     * Lädt nur die Landmarks, die in der angegebenen Route verwendet werden\n     */\n    suspend fun loadRouteSpecificLandmarks(route: Route): List<ProcessedLandmark> = withContext(Dispatchers.IO) {\n        \n        val processedLandmarks = mutableListOf<ProcessedLandmark>()\n        \n        try {\n            // Sammle alle Landmark-IDs aus der Route\n            val routeLandmarkIds = mutableSetOf<String>()\n            \n            for (pathItem in route.path) {\n                for (routePart in pathItem.routeParts) {\n                    for (landmark in routePart.landmarks) {\n                        routeLandmarkIds.add(landmark.id)\n                    }\n                }\n            }\n            \n            Log.d(TAG, \"Route benötigt ${routeLandmarkIds.size} spezifische Landmarks: ${routeLandmarkIds.joinToString(\", \")}\")\n            \n            // Lade nur die benötigten Landmarks\n            for (landmarkId in routeLandmarkIds) {\n                val processedLandmark = loadSingleLandmark(landmarkId)\n                if (processedLandmark != null) {\n                    processedLandmarks.add(processedLandmark)\n                    Log.d(TAG, \"Route-Landmark geladen: $landmarkId\")\n                } else {\n                    Log.w(TAG, \"Route-Landmark nicht gefunden: $landmarkId\")\n                }\n            }\n            \n            Log.d(TAG, \"Route-spezifische Landmarks geladen: ${processedLandmarks.size}/${routeLandmarkIds.size}\")\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\")\n        }\n        \n        return@withContext processedLandmarks\n    }\n    \n    /**\n     * Lädt ein einzelnes Landmark (mit Cache-Unterstützung)\n     */\n    private suspend fun loadSingleLandmark(landmarkId: String): ProcessedLandmark? {\n        \n        // Prüfe Cache zuerst\n        processedLandmarksCache[landmarkId]?.let { cached ->\n            return cached\n        }\n        \n        // Lade von Disk\n        val landmarkData = loadLandmarkFeatures(landmarkId)\n        val image = loadLandmarkImage(landmarkId)\n        \n        if (landmarkData != null && image != null) {\n            val (landmark, features) = landmarkData\n            \n            // Konvertiere zu ProcessedLandmark\n            val featureMatchingEngine = FeatureMatchingEngine()\n            val processedLandmark = featureMatchingEngine.processLandmarkFeatures(\n                landmark, features, image\n            )\n            \n            if (processedLandmark != null) {\n                processedLandmarksCache[landmarkId] = processedLandmark\n                return processedLandmark\n            }\n        }\n        \n        return null\n    }\n    \n    /**\n     * Importiert Landmarks aus dem Assets-Verzeichnis\n     */\n    suspend fun importLandmarksFromAssets(): Int = withContext(Dispatchers.IO) {\n        \n        var importedCount = 0\n        \n        try {\n            Log.d(TAG, \"Importiere Landmarks aus Assets...\")\n            \n            // Prüfe landmark_images Verzeichnis in Assets\n            val assetManager = context.assets\n            val landmarkImages = try {\n                assetManager.list(\"landmark_images\") ?: emptyArray()\n            } catch (e: IOException) {\n                Log.w(TAG, \"landmark_images Verzeichnis nicht in Assets gefunden\")\n                emptyArray()\n            }\n            \n            val featureMatchingEngine = FeatureMatchingEngine()\n            \n            for (imageName in landmarkImages) {\n                if (imageName.endsWith(\".jpg\") || imageName.endsWith(\".png\")) {\n                    try {\n                        val landmarkId = imageName.substringBeforeLast('.')\n                        \n                        // Prüfe ob bereits existiert\n                        if (File(featuresDir, \"$landmarkId.json\").exists()) {\n                            Log.d(TAG, \"Landmark bereits vorhanden: $landmarkId\")\n                            continue\n                        }\n                        \n                        // Lade Bild aus Assets\n                        val inputStream = assetManager.open(\"landmark_images/$imageName\")\n                        val bitmap = BitmapFactory.decodeStream(inputStream)\n                        inputStream.close()\n                        \n                        if (bitmap != null) {\n                            // Extrahiere Features\n                            val features = featureMatchingEngine.extractFeatures(bitmap)\n                            \n                            if (features != null) {\n                                // Erstelle Landmark-Objekt\n                                val landmark = FeatureLandmark(\n                                    id = landmarkId,\n                                    name = landmarkId.replace(\"_\", \" \").replaceFirstChar { it.uppercase() },\n                                    description = \"Imported from assets: $imageName\",\n                                    position = Position(0.0, 0.0, 0.0),\n                                    imageUrl = \"\",\n                                    localImagePath = imageName,\n                                    featureDescriptors = features.descriptors,\n                                    keypoints = features.keypoints.map { kp ->\n                                        KeypointData(\n                                            x = kp.x,\n                                            y = kp.y,\n                                            angle = kp.angle,\n                                            response = kp.response,\n                                            octave = kp.octave,\n                                            classId = kp.classId\n                                        )\n                                    }\n                                )\n                                \n                                // Speichere Landmark\n                                if (saveLandmarkFeatures(landmarkId, landmark, features, bitmap)) {\n                                    importedCount++\n                                    Log.d(TAG, \"Landmark importiert: $landmarkId (${features.keypoints.size} Features)\")\n                                }\n                            } else {\n                                Log.w(TAG, \"Keine Features extrahiert für: $imageName\")\n                            }\n                        } else {\n                            Log.w(TAG, \"Bild konnte nicht geladen werden: $imageName\")\n                        }\n                        \n                    } catch (e: Exception) {\n                        Log.e(TAG, \"Fehler beim Importieren von $imageName: ${e.message}\")\n                    }\n                }\n            }\n            \n            Log.d(TAG, \"Import abgeschlossen: $importedCount Landmarks importiert\")\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Import aus Assets: ${e.message}\")\n        }\n        \n        return@withContext importedCount\n    }\n    \n    /**\n     * Löscht ein Landmark und alle zugehörigen Dateien\n     */\n    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {\n        \n        return@withContext try {\n            val landmarkFile = File(featuresDir, \"$landmarkId.json\")\n            val featuresFile = File(featuresDir, \"${landmarkId}_features.json\")\n            val imageFile = File(imagesDir, \"$landmarkId.jpg\")\n            \n            var deleted = true\n            \n            if (landmarkFile.exists()) deleted = deleted && landmarkFile.delete()\n            if (featuresFile.exists()) deleted = deleted && featuresFile.delete()\n            if (imageFile.exists()) deleted = deleted && imageFile.delete()\n            \n            // Entferne aus Cache\n            processedLandmarksCache.remove(landmarkId)\n            \n            Log.d(TAG, \"Landmark gelöscht: $landmarkId\")\n            deleted\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Löschen von $landmarkId: ${e.message}\")\n            false\n        }\n    }\n    \n    /**\n     * Bereinigt Cache und temporäre Dateien\n     */\n    suspend fun cleanup(): Int = withContext(Dispatchers.IO) {\n        \n        var cleanedFiles = 0\n        \n        try {\n            // Bereinige Cache-Verzeichnis\n            cacheDir.listFiles()?.forEach { file ->\n                if (file.delete()) {\n                    cleanedFiles++\n                }\n            }\n            \n            // Bereinige In-Memory Cache\n            processedLandmarksCache.clear()\n            \n            Log.d(TAG, \"Cleanup abgeschlossen: $cleanedFiles Dateien bereinigt\")\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Cleanup: ${e.message}\")\n        }\n        \n        return@withContext cleanedFiles\n    }\n    \n    /**\n     * Gibt Storage-Statistiken zurück\n     */\n    suspend fun getStorageStats(): StorageStats = withContext(Dispatchers.IO) {\n        \n        return@withContext try {\n            val landmarkCount = getAvailableLandmarkIds().size\n            val totalSize = calculateDirectorySize(featuresDir) + calculateDirectorySize(imagesDir)\n            val cacheSize = calculateDirectorySize(cacheDir)\n            \n            StorageStats(\n                landmarkCount = landmarkCount,\n                totalSizeBytes = totalSize,\n                cacheSizeBytes = cacheSize,\n                cacheHitRate = if (processedLandmarksCache.isNotEmpty()) {\n                    (processedLandmarksCache.size.toFloat() / landmarkCount.toFloat()) * 100f\n                } else 0f\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Berechnen der Storage-Statistiken: ${e.message}\")\n            StorageStats(0, 0, 0, 0f)\n        }\n    }\n    \n    /**\n     * Berechnet die Größe eines Verzeichnisses\n     */\n    private fun calculateDirectorySize(directory: File): Long {\n        var size = 0L\n        \n        try {\n            directory.listFiles()?.forEach { file ->\n                size += if (file.isDirectory) {\n                    calculateDirectorySize(file)\n                } else {\n                    file.length()\n                }\n            }\n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Berechnen der Verzeichnisgröße: ${e.message}\")\n        }\n        \n        return size\n    }\n}\n\n/**\n * Storage-Statistiken\n */\ndata class StorageStats(\n    val landmarkCount: Int,\n    val totalSizeBytes: Long,\n    val cacheSizeBytes: Long,\n    val cacheHitRate: Float\n) {\n    fun getTotalSizeMB(): Float = totalSizeBytes / (1024f * 1024f)\n    fun getCacheSizeMB(): Float = cacheSizeBytes / (1024f * 1024f)\n}","baseTimestamp":1754259922704,"deltas":[{"timestamp":1754262225794,"changes":[{"type":"INSERT","lineNumber":8,"content":"// Route is defined in RouteData.kt - no explicit import needed since it's in the same package"}]},{"timestamp":1754321342628,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.content.Context"},{"type":"DELETE","lineNumber":3,"oldContent":"import android.graphics.Bitmap"},{"type":"DELETE","lineNumber":4,"oldContent":"import android.graphics.BitmapFactory"},{"type":"DELETE","lineNumber":5,"oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":6,"oldContent":"import com.google.gson.Gson"},{"type":"DELETE","lineNumber":7,"oldContent":"import com.google.gson.reflect.TypeToken"},{"type":"DELETE","lineNumber":8,"oldContent":"// Route is defined in RouteData.kt - no explicit import needed since it's in the same package"},{"type":"DELETE","lineNumber":9,"oldContent":"import kotlinx.coroutines.Dispatchers"},{"type":"DELETE","lineNumber":10,"oldContent":"import kotlinx.coroutines.withContext"},{"type":"DELETE","lineNumber":11,"oldContent":"import java.io.File"},{"type":"DELETE","lineNumber":12,"oldContent":"import java.io.FileInputStream"},{"type":"DELETE","lineNumber":13,"oldContent":"import java.io.FileOutputStream"},{"type":"DELETE","lineNumber":14,"oldContent":"import java.io.IOException"},{"type":"DELETE","lineNumber":15,"oldContent":""},{"type":"DELETE","lineNumber":16,"oldContent":"/**"},{"type":"DELETE","lineNumber":17,"oldContent":" * Storage Manager für Landmark-Features und Deskriptoren"},{"type":"DELETE","lineNumber":18,"oldContent":" * Verwaltet lokale Speicherung von extrahierten Features"},{"type":"DELETE","lineNumber":19,"oldContent":" */"},{"type":"DELETE","lineNumber":20,"oldContent":"class LandmarkFeatureStorage(private val context: Context) {"},{"type":"DELETE","lineNumber":21,"oldContent":"    "},{"type":"DELETE","lineNumber":22,"oldContent":"    private val TAG = \"LandmarkFeatureStorage\""},{"type":"DELETE","lineNumber":23,"oldContent":"    "},{"type":"DELETE","lineNumber":24,"oldContent":"    // Storage-Verzeichnisse"},{"type":"DELETE","lineNumber":25,"oldContent":"    private val featuresDir = File(context.filesDir, \"landmark_features\")"},{"type":"DELETE","lineNumber":26,"oldContent":"    private val imagesDir = File(context.filesDir, \"landmark_images\")"},{"type":"DELETE","lineNumber":27,"oldContent":"    private val cacheDir = File(context.cacheDir, \"processed_landmarks\")"},{"type":"DELETE","lineNumber":28,"oldContent":"    "},{"type":"DELETE","lineNumber":29,"oldContent":"    // JSON Serializer"},{"type":"DELETE","lineNumber":30,"oldContent":"    private val gson = Gson()"},{"type":"DELETE","lineNumber":31,"oldContent":"    "},{"type":"DELETE","lineNumber":32,"oldContent":"    // In-Memory Cache für verarbeitete Landmarks"},{"type":"DELETE","lineNumber":33,"oldContent":"    private val processedLandmarksCache = mutableMapOf<String, ProcessedLandmark>()"},{"type":"DELETE","lineNumber":34,"oldContent":"    "},{"type":"DELETE","lineNumber":35,"oldContent":"    init {"},{"type":"DELETE","lineNumber":36,"oldContent":"        // Erstelle Verzeichnisse falls sie nicht existieren"},{"type":"DELETE","lineNumber":37,"oldContent":"        featuresDir.mkdirs()"},{"type":"DELETE","lineNumber":38,"oldContent":"        imagesDir.mkdirs()"},{"type":"DELETE","lineNumber":39,"oldContent":"        cacheDir.mkdirs()"},{"type":"DELETE","lineNumber":40,"oldContent":"        "},{"type":"DELETE","lineNumber":41,"oldContent":"        Log.d(TAG, \"LandmarkFeatureStorage initialisiert\")"},{"type":"DELETE","lineNumber":42,"oldContent":"        Log.d(TAG, \"Features Dir: ${featuresDir.absolutePath}\")"},{"type":"DELETE","lineNumber":43,"oldContent":"        Log.d(TAG, \"Images Dir: ${imagesDir.absolutePath}\")"},{"type":"DELETE","lineNumber":44,"oldContent":"    }"},{"type":"DELETE","lineNumber":45,"oldContent":"    "},{"type":"DELETE","lineNumber":46,"oldContent":"    /**"},{"type":"DELETE","lineNumber":47,"oldContent":"     * Speichert extrahierte Features für ein Landmark"},{"type":"DELETE","lineNumber":48,"oldContent":"     */"},{"type":"DELETE","lineNumber":49,"oldContent":"    suspend fun saveLandmarkFeatures("},{"type":"DELETE","lineNumber":50,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":51,"oldContent":"        landmark: FeatureLandmark,"},{"type":"DELETE","lineNumber":52,"oldContent":"        features: LandmarkFeatures,"},{"type":"DELETE","lineNumber":53,"oldContent":"        image: Bitmap"},{"type":"DELETE","lineNumber":54,"oldContent":"    ): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":55,"oldContent":"        "},{"type":"DELETE","lineNumber":56,"oldContent":"        return@withContext try {"},{"type":"DELETE","lineNumber":57,"oldContent":"            Log.d(TAG, \"Speichere Features für Landmark: $landmarkId\")"},{"type":"DELETE","lineNumber":58,"oldContent":"            "},{"type":"DELETE","lineNumber":59,"oldContent":"            // Speichere Landmark-Metadaten"},{"type":"DELETE","lineNumber":60,"oldContent":"            val landmarkFile = File(featuresDir, \"$landmarkId.json\")"},{"type":"DELETE","lineNumber":61,"oldContent":"            val landmarkJson = gson.toJson(landmark)"},{"type":"DELETE","lineNumber":62,"oldContent":"            landmarkFile.writeText(landmarkJson)"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"DELETE","lineNumber":64,"oldContent":"            // Speichere Features"},{"type":"DELETE","lineNumber":65,"oldContent":"            val featuresFile = File(featuresDir, \"${landmarkId}_features.json\")"},{"type":"DELETE","lineNumber":66,"oldContent":"            val featuresJson = gson.toJson(features)"},{"type":"DELETE","lineNumber":67,"oldContent":"            featuresFile.writeText(featuresJson)"},{"type":"DELETE","lineNumber":68,"oldContent":"            "},{"type":"DELETE","lineNumber":69,"oldContent":"            // Speichere Bild"},{"type":"DELETE","lineNumber":70,"oldContent":"            val imageFile = File(imagesDir, \"$landmarkId.jpg\")"},{"type":"DELETE","lineNumber":71,"oldContent":"            val outputStream = FileOutputStream(imageFile)"},{"type":"DELETE","lineNumber":72,"oldContent":"            image.compress(Bitmap.CompressFormat.JPEG, 90, outputStream)"},{"type":"DELETE","lineNumber":73,"oldContent":"            outputStream.close()"},{"type":"DELETE","lineNumber":74,"oldContent":"            "},{"type":"DELETE","lineNumber":75,"oldContent":"            Log.d(TAG, \"Features erfolgreich gespeichert für: $landmarkId\")"},{"type":"DELETE","lineNumber":76,"oldContent":"            true"},{"type":"DELETE","lineNumber":77,"oldContent":"            "},{"type":"DELETE","lineNumber":78,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":79,"oldContent":"            Log.e(TAG, \"Fehler beim Speichern der Features für $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":80,"oldContent":"            false"},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":82,"oldContent":"    }"},{"type":"DELETE","lineNumber":83,"oldContent":"    "},{"type":"DELETE","lineNumber":84,"oldContent":"    /**"},{"type":"DELETE","lineNumber":85,"oldContent":"     * Lädt gespeicherte Features für ein Landmark"},{"type":"DELETE","lineNumber":86,"oldContent":"     */"},{"type":"DELETE","lineNumber":87,"oldContent":"    suspend fun loadLandmarkFeatures(landmarkId: String): Pair<FeatureLandmark, LandmarkFeatures>? = "},{"type":"DELETE","lineNumber":88,"oldContent":"        withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":89,"oldContent":"        "},{"type":"DELETE","lineNumber":90,"oldContent":"        return@withContext try {"},{"type":"DELETE","lineNumber":91,"oldContent":"            val landmarkFile = File(featuresDir, \"$landmarkId.json\")"},{"type":"DELETE","lineNumber":92,"oldContent":"            val featuresFile = File(featuresDir, \"${landmarkId}_features.json\")"},{"type":"DELETE","lineNumber":93,"oldContent":"            "},{"type":"DELETE","lineNumber":94,"oldContent":"            if (!landmarkFile.exists() || !featuresFile.exists()) {"},{"type":"DELETE","lineNumber":95,"oldContent":"                Log.w(TAG, \"Features nicht gefunden für: $landmarkId\")"},{"type":"DELETE","lineNumber":96,"oldContent":"                return@withContext null"},{"type":"DELETE","lineNumber":97,"oldContent":"            }"},{"type":"DELETE","lineNumber":98,"oldContent":"            "},{"type":"DELETE","lineNumber":99,"oldContent":"            // Lade Landmark-Metadaten"},{"type":"DELETE","lineNumber":100,"oldContent":"            val landmarkJson = landmarkFile.readText()"},{"type":"DELETE","lineNumber":101,"oldContent":"            val landmark = gson.fromJson(landmarkJson, FeatureLandmark::class.java)"},{"type":"DELETE","lineNumber":102,"oldContent":"            "},{"type":"DELETE","lineNumber":103,"oldContent":"            // Lade Features"},{"type":"DELETE","lineNumber":104,"oldContent":"            val featuresJson = featuresFile.readText()"},{"type":"DELETE","lineNumber":105,"oldContent":"            val features = gson.fromJson(featuresJson, LandmarkFeatures::class.java)"},{"type":"DELETE","lineNumber":106,"oldContent":"            "},{"type":"DELETE","lineNumber":107,"oldContent":"            Log.d(TAG, \"Features geladen für: $landmarkId (${features.keypoints.size} Keypoints)\")"},{"type":"DELETE","lineNumber":108,"oldContent":"            "},{"type":"DELETE","lineNumber":109,"oldContent":"            Pair(landmark, features)"},{"type":"DELETE","lineNumber":110,"oldContent":"            "},{"type":"DELETE","lineNumber":111,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":112,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Features für $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":113,"oldContent":"            null"},{"type":"DELETE","lineNumber":114,"oldContent":"        }"},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"DELETE","lineNumber":116,"oldContent":"    "},{"type":"DELETE","lineNumber":117,"oldContent":"    /**"},{"type":"DELETE","lineNumber":118,"oldContent":"     * Lädt das Bild für ein Landmark"},{"type":"DELETE","lineNumber":119,"oldContent":"     */"},{"type":"DELETE","lineNumber":120,"oldContent":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":121,"oldContent":"        "},{"type":"DELETE","lineNumber":122,"oldContent":"        return@withContext try {"},{"type":"DELETE","lineNumber":123,"oldContent":"            val imageFile = File(imagesDir, \"$landmarkId.jpg\")"},{"type":"DELETE","lineNumber":124,"oldContent":"            "},{"type":"DELETE","lineNumber":125,"oldContent":"            if (!imageFile.exists()) {"},{"type":"DELETE","lineNumber":126,"oldContent":"                Log.w(TAG, \"Bild nicht gefunden für: $landmarkId\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                return@withContext null"},{"type":"DELETE","lineNumber":128,"oldContent":"            }"},{"type":"DELETE","lineNumber":129,"oldContent":"            "},{"type":"DELETE","lineNumber":130,"oldContent":"            val bitmap = BitmapFactory.decodeFile(imageFile.absolutePath)"},{"type":"DELETE","lineNumber":131,"oldContent":"            Log.d(TAG, \"Bild geladen für: $landmarkId (${bitmap?.width}x${bitmap?.height})\")"},{"type":"DELETE","lineNumber":132,"oldContent":"            "},{"type":"DELETE","lineNumber":133,"oldContent":"            bitmap"},{"type":"DELETE","lineNumber":134,"oldContent":"            "},{"type":"DELETE","lineNumber":135,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":136,"oldContent":"            Log.e(TAG, \"Fehler beim Laden des Bildes für $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":137,"oldContent":"            null"},{"type":"DELETE","lineNumber":138,"oldContent":"        }"},{"type":"DELETE","lineNumber":139,"oldContent":"    }"},{"type":"DELETE","lineNumber":140,"oldContent":"    "},{"type":"DELETE","lineNumber":141,"oldContent":"    /**"},{"type":"DELETE","lineNumber":142,"oldContent":"     * Lädt alle verfügbaren Landmark-IDs"},{"type":"DELETE","lineNumber":143,"oldContent":"     */"},{"type":"DELETE","lineNumber":144,"oldContent":"    suspend fun getAvailableLandmarkIds(): List<String> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":146,"oldContent":"        return@withContext try {"},{"type":"DELETE","lineNumber":147,"oldContent":"            featuresDir.listFiles { file ->"},{"type":"DELETE","lineNumber":148,"oldContent":"                file.name.endsWith(\".json\") && !file.name.endsWith(\"_features.json\")"},{"type":"DELETE","lineNumber":149,"oldContent":"            }?.map { file ->"},{"type":"DELETE","lineNumber":150,"oldContent":"                file.nameWithoutExtension"},{"type":"DELETE","lineNumber":151,"oldContent":"            } ?: emptyList()"},{"type":"DELETE","lineNumber":152,"oldContent":"            "},{"type":"DELETE","lineNumber":153,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":154,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":155,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":156,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":"    }"},{"type":"DELETE","lineNumber":158,"oldContent":"    "},{"type":"DELETE","lineNumber":159,"oldContent":"    /**"},{"type":"DELETE","lineNumber":160,"oldContent":"     * Lädt alle verfügbaren Landmarks mit Features"},{"type":"DELETE","lineNumber":161,"oldContent":"     */"},{"type":"DELETE","lineNumber":162,"oldContent":"    suspend fun loadAllLandmarks(): List<ProcessedLandmark> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":163,"oldContent":"        "},{"type":"DELETE","lineNumber":164,"oldContent":"        val processedLandmarks = mutableListOf<ProcessedLandmark>()"},{"type":"DELETE","lineNumber":165,"oldContent":"        "},{"type":"DELETE","lineNumber":166,"oldContent":"        try {"},{"type":"DELETE","lineNumber":167,"oldContent":"            val landmarkIds = getAvailableLandmarkIds()"},{"type":"DELETE","lineNumber":168,"oldContent":"            Log.d(TAG, \"Lade ${landmarkIds.size} Landmarks...\")"},{"type":"DELETE","lineNumber":169,"oldContent":"            "},{"type":"DELETE","lineNumber":170,"oldContent":"            for (landmarkId in landmarkIds) {"},{"type":"DELETE","lineNumber":171,"oldContent":"                val processedLandmark = loadSingleLandmark(landmarkId)"},{"type":"DELETE","lineNumber":172,"oldContent":"                if (processedLandmark != null) {"},{"type":"DELETE","lineNumber":173,"oldContent":"                    processedLandmarks.add(processedLandmark)"},{"type":"DELETE","lineNumber":174,"oldContent":"                }"},{"type":"DELETE","lineNumber":175,"oldContent":"            }"},{"type":"DELETE","lineNumber":176,"oldContent":"            "},{"type":"DELETE","lineNumber":177,"oldContent":"            Log.d(TAG, \"Insgesamt ${processedLandmarks.size} Landmarks geladen\")"},{"type":"DELETE","lineNumber":178,"oldContent":"            "},{"type":"DELETE","lineNumber":179,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":180,"oldContent":"            Log.e(TAG, \"Fehler beim Laden aller Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":181,"oldContent":"        }"},{"type":"DELETE","lineNumber":182,"oldContent":"        "},{"type":"DELETE","lineNumber":183,"oldContent":"        return@withContext processedLandmarks"},{"type":"DELETE","lineNumber":184,"oldContent":"    }"},{"type":"DELETE","lineNumber":185,"oldContent":"    "},{"type":"DELETE","lineNumber":186,"oldContent":"    /**"},{"type":"DELETE","lineNumber":187,"oldContent":"     * Lädt nur die Landmarks, die in der angegebenen Route verwendet werden"},{"type":"DELETE","lineNumber":188,"oldContent":"     */"},{"type":"DELETE","lineNumber":189,"oldContent":"    suspend fun loadRouteSpecificLandmarks(route: Route): List<ProcessedLandmark> = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":190,"oldContent":"        "},{"type":"DELETE","lineNumber":191,"oldContent":"        val processedLandmarks = mutableListOf<ProcessedLandmark>()"},{"type":"DELETE","lineNumber":192,"oldContent":"        "},{"type":"DELETE","lineNumber":193,"oldContent":"        try {"},{"type":"DELETE","lineNumber":194,"oldContent":"            // Sammle alle Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":195,"oldContent":"            val routeLandmarkIds = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":196,"oldContent":"            "},{"type":"DELETE","lineNumber":197,"oldContent":"            for (pathItem in route.path) {"},{"type":"DELETE","lineNumber":198,"oldContent":"                for (routePart in pathItem.routeParts) {"},{"type":"DELETE","lineNumber":199,"oldContent":"                    for (landmark in routePart.landmarks) {"},{"type":"DELETE","lineNumber":200,"oldContent":"                        routeLandmarkIds.add(landmark.id)"},{"type":"DELETE","lineNumber":201,"oldContent":"                    }"},{"type":"DELETE","lineNumber":202,"oldContent":"                }"},{"type":"DELETE","lineNumber":203,"oldContent":"            }"},{"type":"DELETE","lineNumber":204,"oldContent":"            "},{"type":"DELETE","lineNumber":205,"oldContent":"            Log.d(TAG, \"Route benötigt ${routeLandmarkIds.size} spezifische Landmarks: ${routeLandmarkIds.joinToString(\", \")}\")"},{"type":"DELETE","lineNumber":206,"oldContent":"            "},{"type":"DELETE","lineNumber":207,"oldContent":"            // Lade nur die benötigten Landmarks"},{"type":"DELETE","lineNumber":208,"oldContent":"            for (landmarkId in routeLandmarkIds) {"},{"type":"DELETE","lineNumber":209,"oldContent":"                val processedLandmark = loadSingleLandmark(landmarkId)"},{"type":"DELETE","lineNumber":210,"oldContent":"                if (processedLandmark != null) {"},{"type":"DELETE","lineNumber":211,"oldContent":"                    processedLandmarks.add(processedLandmark)"},{"type":"DELETE","lineNumber":212,"oldContent":"                    Log.d(TAG, \"Route-Landmark geladen: $landmarkId\")"},{"type":"DELETE","lineNumber":213,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":214,"oldContent":"                    Log.w(TAG, \"Route-Landmark nicht gefunden: $landmarkId\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                }"},{"type":"DELETE","lineNumber":216,"oldContent":"            }"},{"type":"DELETE","lineNumber":217,"oldContent":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            Log.d(TAG, \"Route-spezifische Landmarks geladen: ${processedLandmarks.size}/${routeLandmarkIds.size}\")"},{"type":"DELETE","lineNumber":219,"oldContent":"            "},{"type":"DELETE","lineNumber":220,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":221,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":222,"oldContent":"        }"},{"type":"DELETE","lineNumber":223,"oldContent":"        "},{"type":"DELETE","lineNumber":224,"oldContent":"        return@withContext processedLandmarks"},{"type":"DELETE","lineNumber":225,"oldContent":"    }"},{"type":"DELETE","lineNumber":226,"oldContent":"    "},{"type":"DELETE","lineNumber":227,"oldContent":"    /**"},{"type":"DELETE","lineNumber":228,"oldContent":"     * Lädt ein einzelnes Landmark (mit Cache-Unterstützung)"},{"type":"DELETE","lineNumber":229,"oldContent":"     */"},{"type":"DELETE","lineNumber":230,"oldContent":"    private suspend fun loadSingleLandmark(landmarkId: String): ProcessedLandmark? {"},{"type":"DELETE","lineNumber":231,"oldContent":"        "},{"type":"DELETE","lineNumber":232,"oldContent":"        // Prüfe Cache zuerst"},{"type":"DELETE","lineNumber":233,"oldContent":"        processedLandmarksCache[landmarkId]?.let { cached ->"},{"type":"DELETE","lineNumber":234,"oldContent":"            return cached"},{"type":"DELETE","lineNumber":235,"oldContent":"        }"},{"type":"DELETE","lineNumber":236,"oldContent":"        "},{"type":"DELETE","lineNumber":237,"oldContent":"        // Lade von Disk"},{"type":"DELETE","lineNumber":238,"oldContent":"        val landmarkData = loadLandmarkFeatures(landmarkId)"},{"type":"DELETE","lineNumber":239,"oldContent":"        val image = loadLandmarkImage(landmarkId)"},{"type":"DELETE","lineNumber":240,"oldContent":"        "},{"type":"DELETE","lineNumber":241,"oldContent":"        if (landmarkData != null && image != null) {"},{"type":"DELETE","lineNumber":242,"oldContent":"            val (landmark, features) = landmarkData"},{"type":"DELETE","lineNumber":243,"oldContent":"            "},{"type":"DELETE","lineNumber":244,"oldContent":"            // Konvertiere zu ProcessedLandmark"},{"type":"DELETE","lineNumber":245,"oldContent":"            val featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":246,"oldContent":"            val processedLandmark = featureMatchingEngine.processLandmarkFeatures("},{"type":"DELETE","lineNumber":247,"oldContent":"                landmark, features, image"},{"type":"DELETE","lineNumber":248,"oldContent":"            )"},{"type":"DELETE","lineNumber":249,"oldContent":"            "},{"type":"DELETE","lineNumber":250,"oldContent":"            if (processedLandmark != null) {"},{"type":"DELETE","lineNumber":251,"oldContent":"                processedLandmarksCache[landmarkId] = processedLandmark"},{"type":"DELETE","lineNumber":252,"oldContent":"                return processedLandmark"},{"type":"DELETE","lineNumber":253,"oldContent":"            }"},{"type":"DELETE","lineNumber":254,"oldContent":"        }"},{"type":"DELETE","lineNumber":255,"oldContent":"        "},{"type":"DELETE","lineNumber":256,"oldContent":"        return null"},{"type":"DELETE","lineNumber":257,"oldContent":"    }"},{"type":"DELETE","lineNumber":258,"oldContent":"    "},{"type":"DELETE","lineNumber":259,"oldContent":"    /**"},{"type":"DELETE","lineNumber":260,"oldContent":"     * Importiert Landmarks aus dem Assets-Verzeichnis"},{"type":"DELETE","lineNumber":261,"oldContent":"     */"},{"type":"DELETE","lineNumber":262,"oldContent":"    suspend fun importLandmarksFromAssets(): Int = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":263,"oldContent":"        "},{"type":"DELETE","lineNumber":264,"oldContent":"        var importedCount = 0"},{"type":"DELETE","lineNumber":265,"oldContent":"        "},{"type":"DELETE","lineNumber":266,"oldContent":"        try {"},{"type":"DELETE","lineNumber":267,"oldContent":"            Log.d(TAG, \"Importiere Landmarks aus Assets...\")"},{"type":"DELETE","lineNumber":268,"oldContent":"            "},{"type":"DELETE","lineNumber":269,"oldContent":"            // Prüfe landmark_images Verzeichnis in Assets"},{"type":"DELETE","lineNumber":270,"oldContent":"            val assetManager = context.assets"},{"type":"DELETE","lineNumber":271,"oldContent":"            val landmarkImages = try {"},{"type":"DELETE","lineNumber":272,"oldContent":"                assetManager.list(\"landmark_images\") ?: emptyArray()"},{"type":"DELETE","lineNumber":273,"oldContent":"            } catch (e: IOException) {"},{"type":"DELETE","lineNumber":274,"oldContent":"                Log.w(TAG, \"landmark_images Verzeichnis nicht in Assets gefunden\")"},{"type":"DELETE","lineNumber":275,"oldContent":"                emptyArray()"},{"type":"DELETE","lineNumber":276,"oldContent":"            }"},{"type":"DELETE","lineNumber":277,"oldContent":"            "},{"type":"DELETE","lineNumber":278,"oldContent":"            val featureMatchingEngine = FeatureMatchingEngine()"},{"type":"DELETE","lineNumber":279,"oldContent":"            "},{"type":"DELETE","lineNumber":280,"oldContent":"            for (imageName in landmarkImages) {"},{"type":"DELETE","lineNumber":281,"oldContent":"                if (imageName.endsWith(\".jpg\") || imageName.endsWith(\".png\")) {"},{"type":"DELETE","lineNumber":282,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":283,"oldContent":"                        val landmarkId = imageName.substringBeforeLast('.')"},{"type":"DELETE","lineNumber":284,"oldContent":"                        "},{"type":"DELETE","lineNumber":285,"oldContent":"                        // Prüfe ob bereits existiert"},{"type":"DELETE","lineNumber":286,"oldContent":"                        if (File(featuresDir, \"$landmarkId.json\").exists()) {"},{"type":"DELETE","lineNumber":287,"oldContent":"                            Log.d(TAG, \"Landmark bereits vorhanden: $landmarkId\")"},{"type":"DELETE","lineNumber":288,"oldContent":"                            continue"},{"type":"DELETE","lineNumber":289,"oldContent":"                        }"},{"type":"DELETE","lineNumber":290,"oldContent":"                        "},{"type":"DELETE","lineNumber":291,"oldContent":"                        // Lade Bild aus Assets"},{"type":"DELETE","lineNumber":292,"oldContent":"                        val inputStream = assetManager.open(\"landmark_images/$imageName\")"},{"type":"DELETE","lineNumber":293,"oldContent":"                        val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"DELETE","lineNumber":294,"oldContent":"                        inputStream.close()"},{"type":"DELETE","lineNumber":295,"oldContent":"                        "},{"type":"DELETE","lineNumber":296,"oldContent":"                        if (bitmap != null) {"},{"type":"DELETE","lineNumber":297,"oldContent":"                            // Extrahiere Features"},{"type":"DELETE","lineNumber":298,"oldContent":"                            val features = featureMatchingEngine.extractFeatures(bitmap)"},{"type":"DELETE","lineNumber":299,"oldContent":"                            "},{"type":"DELETE","lineNumber":300,"oldContent":"                            if (features != null) {"},{"type":"DELETE","lineNumber":301,"oldContent":"                                // Erstelle Landmark-Objekt"},{"type":"DELETE","lineNumber":302,"oldContent":"                                val landmark = FeatureLandmark("},{"type":"DELETE","lineNumber":303,"oldContent":"                                    id = landmarkId,"},{"type":"DELETE","lineNumber":304,"oldContent":"                                    name = landmarkId.replace(\"_\", \" \").replaceFirstChar { it.uppercase() },"},{"type":"DELETE","lineNumber":305,"oldContent":"                                    description = \"Imported from assets: $imageName\","},{"type":"DELETE","lineNumber":306,"oldContent":"                                    position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":307,"oldContent":"                                    imageUrl = \"\","},{"type":"DELETE","lineNumber":308,"oldContent":"                                    localImagePath = imageName,"},{"type":"DELETE","lineNumber":309,"oldContent":"                                    featureDescriptors = features.descriptors,"},{"type":"DELETE","lineNumber":310,"oldContent":"                                    keypoints = features.keypoints.map { kp ->"},{"type":"DELETE","lineNumber":311,"oldContent":"                                        KeypointData("},{"type":"DELETE","lineNumber":312,"oldContent":"                                            x = kp.x,"},{"type":"DELETE","lineNumber":313,"oldContent":"                                            y = kp.y,"},{"type":"DELETE","lineNumber":314,"oldContent":"                                            angle = kp.angle,"},{"type":"DELETE","lineNumber":315,"oldContent":"                                            response = kp.response,"},{"type":"DELETE","lineNumber":316,"oldContent":"                                            octave = kp.octave,"},{"type":"DELETE","lineNumber":317,"oldContent":"                                            classId = kp.classId"},{"type":"DELETE","lineNumber":318,"oldContent":"                                        )"},{"type":"DELETE","lineNumber":319,"oldContent":"                                    }"},{"type":"DELETE","lineNumber":320,"oldContent":"                                )"},{"type":"DELETE","lineNumber":321,"oldContent":"                                "},{"type":"DELETE","lineNumber":322,"oldContent":"                                // Speichere Landmark"},{"type":"DELETE","lineNumber":323,"oldContent":"                                if (saveLandmarkFeatures(landmarkId, landmark, features, bitmap)) {"},{"type":"DELETE","lineNumber":324,"oldContent":"                                    importedCount++"},{"type":"DELETE","lineNumber":325,"oldContent":"                                    Log.d(TAG, \"Landmark importiert: $landmarkId (${features.keypoints.size} Features)\")"},{"type":"DELETE","lineNumber":326,"oldContent":"                                }"},{"type":"DELETE","lineNumber":327,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":328,"oldContent":"                                Log.w(TAG, \"Keine Features extrahiert für: $imageName\")"},{"type":"DELETE","lineNumber":329,"oldContent":"                            }"},{"type":"DELETE","lineNumber":330,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":331,"oldContent":"                            Log.w(TAG, \"Bild konnte nicht geladen werden: $imageName\")"},{"type":"DELETE","lineNumber":332,"oldContent":"                        }"},{"type":"DELETE","lineNumber":333,"oldContent":"                        "},{"type":"DELETE","lineNumber":334,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":335,"oldContent":"                        Log.e(TAG, \"Fehler beim Importieren von $imageName: ${e.message}\")"},{"type":"DELETE","lineNumber":336,"oldContent":"                    }"},{"type":"DELETE","lineNumber":337,"oldContent":"                }"},{"type":"DELETE","lineNumber":338,"oldContent":"            }"},{"type":"DELETE","lineNumber":339,"oldContent":"            "},{"type":"DELETE","lineNumber":340,"oldContent":"            Log.d(TAG, \"Import abgeschlossen: $importedCount Landmarks importiert\")"},{"type":"DELETE","lineNumber":341,"oldContent":"            "},{"type":"DELETE","lineNumber":342,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":343,"oldContent":"            Log.e(TAG, \"Fehler beim Import aus Assets: ${e.message}\")"},{"type":"DELETE","lineNumber":344,"oldContent":"        }"},{"type":"DELETE","lineNumber":345,"oldContent":"        "},{"type":"DELETE","lineNumber":346,"oldContent":"        return@withContext importedCount"},{"type":"DELETE","lineNumber":347,"oldContent":"    }"},{"type":"DELETE","lineNumber":348,"oldContent":"    "},{"type":"DELETE","lineNumber":349,"oldContent":"    /**"},{"type":"DELETE","lineNumber":350,"oldContent":"     * Löscht ein Landmark und alle zugehörigen Dateien"},{"type":"DELETE","lineNumber":351,"oldContent":"     */"},{"type":"DELETE","lineNumber":352,"oldContent":"    suspend fun deleteLandmark(landmarkId: String): Boolean = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":353,"oldContent":"        "},{"type":"DELETE","lineNumber":354,"oldContent":"        return@withContext try {"},{"type":"DELETE","lineNumber":355,"oldContent":"            val landmarkFile = File(featuresDir, \"$landmarkId.json\")"},{"type":"DELETE","lineNumber":356,"oldContent":"            val featuresFile = File(featuresDir, \"${landmarkId}_features.json\")"},{"type":"DELETE","lineNumber":357,"oldContent":"            val imageFile = File(imagesDir, \"$landmarkId.jpg\")"},{"type":"DELETE","lineNumber":358,"oldContent":"            "},{"type":"DELETE","lineNumber":359,"oldContent":"            var deleted = true"},{"type":"DELETE","lineNumber":360,"oldContent":"            "},{"type":"DELETE","lineNumber":361,"oldContent":"            if (landmarkFile.exists()) deleted = deleted && landmarkFile.delete()"},{"type":"DELETE","lineNumber":362,"oldContent":"            if (featuresFile.exists()) deleted = deleted && featuresFile.delete()"},{"type":"DELETE","lineNumber":363,"oldContent":"            if (imageFile.exists()) deleted = deleted && imageFile.delete()"},{"type":"DELETE","lineNumber":364,"oldContent":"            "},{"type":"DELETE","lineNumber":365,"oldContent":"            // Entferne aus Cache"},{"type":"DELETE","lineNumber":366,"oldContent":"            processedLandmarksCache.remove(landmarkId)"},{"type":"DELETE","lineNumber":367,"oldContent":"            "},{"type":"DELETE","lineNumber":368,"oldContent":"            Log.d(TAG, \"Landmark gelöscht: $landmarkId\")"},{"type":"DELETE","lineNumber":369,"oldContent":"            deleted"},{"type":"DELETE","lineNumber":370,"oldContent":"            "},{"type":"DELETE","lineNumber":371,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":372,"oldContent":"            Log.e(TAG, \"Fehler beim Löschen von $landmarkId: ${e.message}\")"},{"type":"DELETE","lineNumber":373,"oldContent":"            false"},{"type":"DELETE","lineNumber":374,"oldContent":"        }"},{"type":"DELETE","lineNumber":375,"oldContent":"    }"},{"type":"DELETE","lineNumber":376,"oldContent":"    "},{"type":"DELETE","lineNumber":377,"oldContent":"    /**"},{"type":"DELETE","lineNumber":378,"oldContent":"     * Bereinigt Cache und temporäre Dateien"},{"type":"DELETE","lineNumber":379,"oldContent":"     */"},{"type":"DELETE","lineNumber":380,"oldContent":"    suspend fun cleanup(): Int = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":381,"oldContent":"        "},{"type":"DELETE","lineNumber":382,"oldContent":"        var cleanedFiles = 0"},{"type":"DELETE","lineNumber":383,"oldContent":"        "},{"type":"DELETE","lineNumber":384,"oldContent":"        try {"},{"type":"DELETE","lineNumber":385,"oldContent":"            // Bereinige Cache-Verzeichnis"},{"type":"DELETE","lineNumber":386,"oldContent":"            cacheDir.listFiles()?.forEach { file ->"},{"type":"DELETE","lineNumber":387,"oldContent":"                if (file.delete()) {"},{"type":"DELETE","lineNumber":388,"oldContent":"                    cleanedFiles++"},{"type":"DELETE","lineNumber":389,"oldContent":"                }"},{"type":"DELETE","lineNumber":390,"oldContent":"            }"},{"type":"DELETE","lineNumber":391,"oldContent":"            "},{"type":"DELETE","lineNumber":392,"oldContent":"            // Bereinige In-Memory Cache"},{"type":"DELETE","lineNumber":393,"oldContent":"            processedLandmarksCache.clear()"},{"type":"DELETE","lineNumber":394,"oldContent":"            "},{"type":"DELETE","lineNumber":395,"oldContent":"            Log.d(TAG, \"Cleanup abgeschlossen: $cleanedFiles Dateien bereinigt\")"},{"type":"DELETE","lineNumber":396,"oldContent":"            "},{"type":"DELETE","lineNumber":397,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":398,"oldContent":"            Log.e(TAG, \"Fehler beim Cleanup: ${e.message}\")"},{"type":"DELETE","lineNumber":399,"oldContent":"        }"},{"type":"DELETE","lineNumber":400,"oldContent":"        "},{"type":"DELETE","lineNumber":401,"oldContent":"        return@withContext cleanedFiles"},{"type":"DELETE","lineNumber":402,"oldContent":"    }"},{"type":"DELETE","lineNumber":403,"oldContent":"    "},{"type":"DELETE","lineNumber":404,"oldContent":"    /**"},{"type":"DELETE","lineNumber":405,"oldContent":"     * Gibt Storage-Statistiken zurück"},{"type":"DELETE","lineNumber":406,"oldContent":"     */"},{"type":"DELETE","lineNumber":407,"oldContent":"    suspend fun getStorageStats(): StorageStats = withContext(Dispatchers.IO) {"},{"type":"DELETE","lineNumber":408,"oldContent":"        "},{"type":"DELETE","lineNumber":409,"oldContent":"        return@withContext try {"},{"type":"DELETE","lineNumber":410,"oldContent":"            val landmarkCount = getAvailableLandmarkIds().size"},{"type":"DELETE","lineNumber":411,"oldContent":"            val totalSize = calculateDirectorySize(featuresDir) + calculateDirectorySize(imagesDir)"},{"type":"DELETE","lineNumber":412,"oldContent":"            val cacheSize = calculateDirectorySize(cacheDir)"},{"type":"DELETE","lineNumber":413,"oldContent":"            "},{"type":"DELETE","lineNumber":414,"oldContent":"            StorageStats("},{"type":"DELETE","lineNumber":415,"oldContent":"                landmarkCount = landmarkCount,"},{"type":"DELETE","lineNumber":416,"oldContent":"                totalSizeBytes = totalSize,"},{"type":"DELETE","lineNumber":417,"oldContent":"                cacheSizeBytes = cacheSize,"},{"type":"DELETE","lineNumber":418,"oldContent":"                cacheHitRate = if (processedLandmarksCache.isNotEmpty()) {"},{"type":"DELETE","lineNumber":419,"oldContent":"                    (processedLandmarksCache.size.toFloat() / landmarkCount.toFloat()) * 100f"},{"type":"DELETE","lineNumber":420,"oldContent":"                } else 0f"},{"type":"DELETE","lineNumber":421,"oldContent":"            )"},{"type":"DELETE","lineNumber":422,"oldContent":"            "},{"type":"DELETE","lineNumber":423,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":424,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Storage-Statistiken: ${e.message}\")"},{"type":"DELETE","lineNumber":425,"oldContent":"            StorageStats(0, 0, 0, 0f)"},{"type":"DELETE","lineNumber":426,"oldContent":"        }"},{"type":"DELETE","lineNumber":427,"oldContent":"    }"},{"type":"DELETE","lineNumber":428,"oldContent":"    "},{"type":"DELETE","lineNumber":429,"oldContent":"    /**"},{"type":"DELETE","lineNumber":430,"oldContent":"     * Berechnet die Größe eines Verzeichnisses"},{"type":"DELETE","lineNumber":431,"oldContent":"     */"},{"type":"DELETE","lineNumber":432,"oldContent":"    private fun calculateDirectorySize(directory: File): Long {"},{"type":"DELETE","lineNumber":433,"oldContent":"        var size = 0L"},{"type":"DELETE","lineNumber":434,"oldContent":"        "},{"type":"DELETE","lineNumber":435,"oldContent":"        try {"},{"type":"DELETE","lineNumber":436,"oldContent":"            directory.listFiles()?.forEach { file ->"},{"type":"DELETE","lineNumber":437,"oldContent":"                size += if (file.isDirectory) {"},{"type":"DELETE","lineNumber":438,"oldContent":"                    calculateDirectorySize(file)"},{"type":"DELETE","lineNumber":439,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":440,"oldContent":"                    file.length()"},{"type":"DELETE","lineNumber":441,"oldContent":"                }"},{"type":"DELETE","lineNumber":442,"oldContent":"            }"},{"type":"DELETE","lineNumber":443,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":444,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Verzeichnisgröße: ${e.message}\")"},{"type":"DELETE","lineNumber":445,"oldContent":"        }"},{"type":"DELETE","lineNumber":446,"oldContent":"        "},{"type":"DELETE","lineNumber":447,"oldContent":"        return size"},{"type":"DELETE","lineNumber":448,"oldContent":"    }"},{"type":"DELETE","lineNumber":449,"oldContent":"}"},{"type":"DELETE","lineNumber":450,"oldContent":""},{"type":"DELETE","lineNumber":451,"oldContent":"/**"},{"type":"DELETE","lineNumber":452,"oldContent":" * Storage-Statistiken"},{"type":"DELETE","lineNumber":453,"oldContent":" */"},{"type":"DELETE","lineNumber":454,"oldContent":"data class StorageStats("},{"type":"DELETE","lineNumber":455,"oldContent":"    val landmarkCount: Int,"},{"type":"DELETE","lineNumber":456,"oldContent":"    val totalSizeBytes: Long,"},{"type":"DELETE","lineNumber":457,"oldContent":"    val cacheSizeBytes: Long,"},{"type":"DELETE","lineNumber":458,"oldContent":"    val cacheHitRate: Float"},{"type":"DELETE","lineNumber":459,"oldContent":") {"},{"type":"DELETE","lineNumber":460,"oldContent":"    fun getTotalSizeMB(): Float = totalSizeBytes / (1024f * 1024f)"},{"type":"DELETE","lineNumber":461,"oldContent":"    fun getCacheSizeMB(): Float = cacheSizeBytes / (1024f * 1024f)"},{"type":"DELETE","lineNumber":462,"oldContent":"}"},{"type":"INSERT","lineNumber":2,"content":"// Diese Datei wurde entfernt - Klassen sind jetzt in FeatureMatchingEngine.kt definiert"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/ARTrackingSystem.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/ARTrackingSystem.kt","baseContent":"package com.example.arwalking\n\n// Diese Datei wurde entfernt - ARTrackingSystem ist jetzt in FeatureMatchingEngine.kt definiert","baseTimestamp":1754321349663},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureNavigationRoute.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureNavigationRoute.kt","baseContent":"package com.example.arwalking\n\n/**\n * Datenklassen für Feature-Navigation\n */\ndata class FeatureNavigationRoute(\n    val id: String,\n    val name: String,\n    val steps: List<FeatureNavigationStep>\n)\n\ndata class FeatureNavigationStep(\n    val stepNumber: Int,\n    val instruction: String,\n    val landmarks: List<FeatureLandmark>,\n    val expectedFeatures: List<String> = emptyList()\n)\n\n// FeatureMatchResult ist in FeatureMatchingEngine.kt definiert","baseTimestamp":1754321357963},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureLandmark.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureLandmark.kt","baseContent":"package com.example.arwalking\n\n/**\n * Datenklasse für Feature-Landmarks\n */\ndata class FeatureLandmark(\n    val id: String,\n    val name: String,\n    val description: String = \"\",\n    val building: String = \"\",\n    val floor: Int = 0,\n    val position: LandmarkPosition? = null,\n    val imageUrl: String? = null,\n    val features: List<String> = emptyList()\n)\n\n// Position ist in NavigationRoute.kt definiert\ntypealias LandmarkPosition = Position","baseTimestamp":1754321374495},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/OpenCvCameraActivity.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/OpenCvCameraActivity.kt","baseContent":"package com.example.arwalking\n\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.SurfaceView\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.lifecycleScope\nimport kotlinx.coroutines.launch\nimport org.opencv.android.*\nimport org.opencv.core.*\nimport org.opencv.features2d.BFMatcher\nimport org.opencv.features2d.Features2d\nimport org.opencv.features2d.ORB\nimport org.opencv.imgproc.Imgproc\nimport org.opencv.android.Utils\nimport org.opencv.core.Mat\nimport org.opencv.core.MatOfDMatch\nimport org.opencv.core.MatOfKeyPoint\n\nclass OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {\n\n    private lateinit var openCvCameraView: JavaCameraView\n    private lateinit var referenceImage: Mat\n    private lateinit var orb: ORB\n    private lateinit var referenceDescriptors: Mat\n    private lateinit var referenceKeypoints: MatOfKeyPoint\n    \n    // Feature-Mapping Integration\n    private lateinit var routeViewModel: RouteViewModel\n    private lateinit var matchInfoText: TextView\n    private lateinit var captureButton: Button\n    private var currentFrame: Mat? = null\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        OpenCVLoader.initDebug()\n\n        setContentView(R.layout.activity_opencv_camera)\n\n        // Views initialisieren\n        openCvCameraView = findViewById(R.id.camera_view)\n        matchInfoText = findViewById(R.id.match_info_text)\n        captureButton = findViewById(R.id.capture_button)\n        \n        openCvCameraView.visibility = SurfaceView.VISIBLE\n        openCvCameraView.setCvCameraViewListener(this)\n        openCvCameraView.enableView()\n\n        // ViewModel initialisieren\n        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]\n        \n        // Feature-Mapping initialisieren\n        routeViewModel.initializeFeatureMapping(this, useRealServer = false)\n        \n        // Feature-Navigation für aktuelles Gebäude laden\n        val building = intent.getStringExtra(\"building\") ?: \"default_building\"\n        val floor = intent.getIntExtra(\"floor\", 0)\n        routeViewModel.loadFeatureNavigationRoute(this, building, floor)\n        \n        // UI Setup\n        setupUI()\n        observeFeatureMatches()\n\n        loadReferenceImage()\n    }\n\n    private fun loadReferenceImage() {\n        val bitmap = BitmapFactory.decodeResource(resources, R.drawable.object_reference)\n        referenceImage = Mat()\n        Utils.bitmapToMat(bitmap, referenceImage)\n        Imgproc.cvtColor(referenceImage, referenceImage, Imgproc.COLOR_RGBA2GRAY)\n\n        orb = ORB.create()\n        referenceKeypoints = MatOfKeyPoint()\n        referenceDescriptors = Mat()\n        orb.detectAndCompute(referenceImage, Mat(), referenceKeypoints, referenceDescriptors)\n    }\n\n    override fun onCameraViewStarted(width: Int, height: Int) {}\n\n    override fun onCameraViewStopped() {}\n\n    override fun onCameraFrame(inputFrame: CameraBridgeViewBase.CvCameraViewFrame?): Mat {\n        val frame = inputFrame!!.gray()\n        val keypoints = MatOfKeyPoint()\n        val descriptors = Mat()\n\n        orb.detectAndCompute(frame, Mat(), keypoints, descriptors)\n\n        val bf = BFMatcher.create(Core.NORM_HAMMING, true)\n        val matches = MatOfDMatch()\n\n        if (!descriptors.empty() && !referenceDescriptors.empty()) {\n            bf.match(referenceDescriptors, descriptors, matches)\n        }\n\n        val output = Mat()\n        Features2d.drawMatches(referenceImage, referenceKeypoints, frame, keypoints, matches, output)\n\n        return output\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        openCvCameraView.disableView()\n    }\n}\n","baseTimestamp":1754044905359,"deltas":[{"timestamp":1754047252653,"changes":[{"type":"INSERT","lineNumber":50,"content":"        navInfoButton = findViewById(R.id.nav_info_button)"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"INSERT","lineNumber":81,"content":""},{"type":"DELETE","lineNumber":91,"oldContent":"            orb = ORB.create()"},{"type":"INSERT","lineNumber":93,"content":"            referenceDescriptors = Mat()"},{"type":"INSERT","lineNumber":94,"content":"            orb = ORB.create()"},{"type":"DELETE","lineNumber":95,"oldContent":"            referenceDescriptors = Mat()"},{"type":"DELETE","lineNumber":97,"oldContent":"        val frame = inputFrame!!.gray()"},{"type":"DELETE","lineNumber":99,"oldContent":"        currentFrame = frame.clone() // Für Feature-Mapping speichern"},{"type":"DELETE","lineNumber":102,"oldContent":"        // Feature-Mapping verarbeiten"},{"type":"INSERT","lineNumber":103,"content":"        val frame = inputFrame!!.gray()"},{"type":"INSERT","lineNumber":104,"content":"        currentFrame = frame.clone() // Für Feature-Mapping speichern"},{"type":"INSERT","lineNumber":105,"content":"        "},{"type":"INSERT","lineNumber":106,"content":"        // Feature-Mapping verarbeiten"},{"type":"DELETE","lineNumber":108,"oldContent":"        "},{"type":"INSERT","lineNumber":113,"content":""},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"INSERT","lineNumber":129,"content":"        }"},{"type":"DELETE","lineNumber":130,"oldContent":"        }"},{"type":"DELETE","lineNumber":174,"oldContent":"        }"},{"type":"MODIFY","lineNumber":177,"content":"                    }","oldContent":"    }"},{"type":"INSERT","lineNumber":178,"content":"                }"},{"type":"INSERT","lineNumber":179,"content":"            }"},{"type":"INSERT","lineNumber":180,"content":"            "},{"type":"INSERT","lineNumber":181,"content":"            matchInfoText.text = matchText"},{"type":"INSERT","lineNumber":182,"content":"            matchInfoText.visibility = View.VISIBLE"},{"type":"INSERT","lineNumber":183,"content":"        }"},{"type":"INSERT","lineNumber":184,"content":"    }"},{"type":"DELETE","lineNumber":180,"oldContent":"                    }"},{"type":"DELETE","lineNumber":183,"oldContent":"                }"},{"type":"DELETE","lineNumber":185,"oldContent":"            }"},{"type":"DELETE","lineNumber":188,"oldContent":"            "},{"type":"DELETE","lineNumber":191,"oldContent":"            matchInfoText.text = matchText"},{"type":"DELETE","lineNumber":193,"oldContent":"            matchInfoText.visibility = View.VISIBLE"},{"type":"DELETE","lineNumber":195,"oldContent":"                    routeViewModel.currentMatches.value.firstOrNull()?.let { bestMatch ->"},{"type":"INSERT","lineNumber":197,"content":"                    routeViewModel.currentMatches.value.firstOrNull()?.let { bestMatch ->"}]},{"timestamp":1754047258264,"changes":[{"type":"MODIFY","lineNumber":95,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":101,"oldContent":"        val frame = inputFrame!!.gray()"},{"type":"MODIFY","lineNumber":103,"content":"        val frame = inputFrame!!.gray()","oldContent":"        currentFrame = frame.clone() // Für Feature-Mapping speichern"},{"type":"INSERT","lineNumber":104,"content":"        currentFrame = frame.clone() // Für Feature-Mapping speichern"},{"type":"MODIFY","lineNumber":107,"content":"        routeViewModel.processFrameForFeatureMatching(frame)","oldContent":"        routeViewModel.processFrameForFeatureMatching(frame)"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"MODIFY","lineNumber":130,"content":"    }","oldContent":"    }"},{"type":"INSERT","lineNumber":144,"content":"        "},{"type":"INSERT","lineNumber":145,"content":"        navInfoButton.setOnClickListener {"},{"type":"INSERT","lineNumber":146,"content":"            showNavigationInfo()"},{"type":"INSERT","lineNumber":147,"content":"        }"},{"type":"DELETE","lineNumber":176,"oldContent":"    }"},{"type":"INSERT","lineNumber":180,"content":"                        append(\"\\n• ${match.landmark.name} (${(match.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":179,"oldContent":"    "},{"type":"DELETE","lineNumber":181,"oldContent":"    /**"},{"type":"DELETE","lineNumber":184,"oldContent":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"DELETE","lineNumber":186,"oldContent":"     */"},{"type":"INSERT","lineNumber":189,"content":"    "},{"type":"INSERT","lineNumber":190,"content":"    /**"},{"type":"INSERT","lineNumber":191,"content":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"INSERT","lineNumber":192,"content":"     */"}]},{"timestamp":1754047268110,"changes":[{"type":"INSERT","lineNumber":94,"content":"            orb = ORB.create()"},{"type":"DELETE","lineNumber":95,"oldContent":"        }"},{"type":"INSERT","lineNumber":102,"content":"    override fun onCameraFrame(inputFrame: CameraBridgeViewBase.CvCameraViewFrame?): Mat {"},{"type":"DELETE","lineNumber":104,"oldContent":"    override fun onCameraFrame(inputFrame: CameraBridgeViewBase.CvCameraViewFrame?): Mat {"},{"type":"INSERT","lineNumber":106,"content":"        // Feature-Mapping verarbeiten"},{"type":"DELETE","lineNumber":107,"oldContent":"        routeViewModel.processFrameForFeatureMatching(frame)"},{"type":"INSERT","lineNumber":129,"content":"        }"},{"type":"DELETE","lineNumber":130,"oldContent":"    }"},{"type":"DELETE","lineNumber":145,"oldContent":"    }"},{"type":"DELETE","lineNumber":147,"oldContent":"    "},{"type":"DELETE","lineNumber":149,"oldContent":"    /**"},{"type":"INSERT","lineNumber":148,"content":"    }"},{"type":"INSERT","lineNumber":149,"content":"    "},{"type":"INSERT","lineNumber":150,"content":"    /**"},{"type":"INSERT","lineNumber":180,"content":"                        append(\"\\n• ${match.landmark.name} (${(match.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":182,"oldContent":"                        append(\"\\n• ${match.landmark.name} (${(match.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":190,"oldContent":"    private fun captureTrainingImage() {"},{"type":"DELETE","lineNumber":192,"oldContent":"        currentFrame?.let { frame ->"},{"type":"DELETE","lineNumber":194,"oldContent":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":193,"content":"    private fun captureTrainingImage() {"},{"type":"INSERT","lineNumber":194,"content":"        currentFrame?.let { frame ->"},{"type":"INSERT","lineNumber":195,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":234,"content":"    "},{"type":"INSERT","lineNumber":235,"content":"    /**"},{"type":"INSERT","lineNumber":236,"content":"     * Zeigt Navigation-Informationen an"},{"type":"INSERT","lineNumber":237,"content":"     */"},{"type":"INSERT","lineNumber":238,"content":"    private fun showNavigationInfo() {"},{"type":"INSERT","lineNumber":239,"content":"        lifecycleScope.launch {"},{"type":"INSERT","lineNumber":240,"content":"            routeViewModel.featureNavigationRoute.value?.let { route ->"},{"type":"INSERT","lineNumber":241,"content":"                val info = buildString {"},{"type":"INSERT","lineNumber":242,"content":"                    append(\"Navigation Route:\\n\")"},{"type":"INSERT","lineNumber":243,"content":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"INSERT","lineNumber":244,"content":"                    append(\"Schritte: ${route.steps.size}\\n\\n\")"},{"type":"INSERT","lineNumber":245,"content":"                    "},{"type":"INSERT","lineNumber":246,"content":"                    route.steps.take(3).forEach { step ->"},{"type":"INSERT","lineNumber":247,"content":"                        append(\"${step.stepNumber}. ${step.instruction}\\n\")"},{"type":"INSERT","lineNumber":248,"content":"                    }"},{"type":"INSERT","lineNumber":249,"content":"                    "},{"type":"INSERT","lineNumber":250,"content":"                    if (route.steps.size > 3) {"},{"type":"INSERT","lineNumber":251,"content":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":252,"content":"                    }"},{"type":"INSERT","lineNumber":253,"content":"                }"},{"type":"INSERT","lineNumber":254,"content":"                "},{"type":"INSERT","lineNumber":255,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":256,"content":"                    matchInfoText.text = info"},{"type":"INSERT","lineNumber":257,"content":"                }"},{"type":"INSERT","lineNumber":258,"content":"            } ?: run {"},{"type":"INSERT","lineNumber":259,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":260,"content":"                    matchInfoText.text = \"Keine Navigation verfügbar\""},{"type":"INSERT","lineNumber":261,"content":"                }"},{"type":"INSERT","lineNumber":262,"content":"            }"},{"type":"INSERT","lineNumber":263,"content":"        }"},{"type":"INSERT","lineNumber":264,"content":"    }"}]},{"timestamp":1754053779363,"changes":[{"type":"MODIFY","lineNumber":147,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":148,"content":"    }"},{"type":"DELETE","lineNumber":150,"oldContent":"        }"},{"type":"DELETE","lineNumber":191,"oldContent":"    private fun captureTrainingImage() {"},{"type":"INSERT","lineNumber":192,"content":"     */"},{"type":"INSERT","lineNumber":193,"content":"    private fun captureTrainingImage() {"},{"type":"DELETE","lineNumber":195,"oldContent":"     */"},{"type":"DELETE","lineNumber":235,"oldContent":"}"},{"type":"DELETE","lineNumber":237,"oldContent":""},{"type":"DELETE","lineNumber":239,"oldContent":"    }"},{"type":"DELETE","lineNumber":241,"oldContent":"        }"},{"type":"DELETE","lineNumber":243,"oldContent":"            }"},{"type":"DELETE","lineNumber":245,"oldContent":"                }"},{"type":"DELETE","lineNumber":247,"oldContent":"                    matchInfoText.text = \"Keine Navigation verfügbar\""},{"type":"DELETE","lineNumber":249,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":251,"oldContent":"            } ?: run {"},{"type":"DELETE","lineNumber":253,"oldContent":"                }"},{"type":"DELETE","lineNumber":255,"oldContent":"                    matchInfoText.text = info"},{"type":"DELETE","lineNumber":257,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":259,"oldContent":"                "},{"type":"DELETE","lineNumber":261,"oldContent":"                }"},{"type":"DELETE","lineNumber":263,"oldContent":"                    }"},{"type":"DELETE","lineNumber":265,"oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":251,"content":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":252,"content":"                    }"},{"type":"INSERT","lineNumber":253,"content":"                }"},{"type":"INSERT","lineNumber":254,"content":"                "},{"type":"INSERT","lineNumber":255,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":256,"content":"                    matchInfoText.text = info"},{"type":"INSERT","lineNumber":257,"content":"                }"},{"type":"INSERT","lineNumber":258,"content":"            } ?: run {"},{"type":"INSERT","lineNumber":259,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":260,"content":"                    matchInfoText.text = \"Keine Navigation verfügbar\""},{"type":"INSERT","lineNumber":261,"content":"                }"},{"type":"INSERT","lineNumber":262,"content":"            }"},{"type":"INSERT","lineNumber":263,"content":"        }"},{"type":"INSERT","lineNumber":264,"content":"    }"},{"type":"INSERT","lineNumber":265,"content":"}"},{"type":"INSERT","lineNumber":266,"content":""}]},{"timestamp":1754054685793,"changes":[{"type":"MODIFY","lineNumber":146,"content":"            showNavigationInfo()","oldContent":"    }"},{"type":"MODIFY","lineNumber":192,"content":"     */","oldContent":"     */"},{"type":"INSERT","lineNumber":243,"content":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"INSERT","lineNumber":244,"content":"                    append(\"Schritte: ${route.steps.size}\\n\\n\")"},{"type":"INSERT","lineNumber":245,"content":"                    "},{"type":"INSERT","lineNumber":246,"content":"                    route.steps.take(3).forEach { step ->"},{"type":"INSERT","lineNumber":247,"content":"                        append(\"${step.stepNumber}. ${step.instruction}\\n\")"},{"type":"INSERT","lineNumber":248,"content":"                    }"},{"type":"INSERT","lineNumber":249,"content":"                    "},{"type":"INSERT","lineNumber":250,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":245,"oldContent":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"DELETE","lineNumber":248,"oldContent":"                    append(\"Schritte: ${route.steps.size}\\n\\n\")"},{"type":"DELETE","lineNumber":251,"oldContent":"                    "},{"type":"DELETE","lineNumber":254,"oldContent":"                    route.steps.take(3).forEach { step ->"},{"type":"DELETE","lineNumber":257,"oldContent":"                        append(\"${step.stepNumber}. ${step.instruction}\\n\")"},{"type":"DELETE","lineNumber":260,"oldContent":"                    }"},{"type":"DELETE","lineNumber":263,"oldContent":"                    "},{"type":"DELETE","lineNumber":266,"oldContent":"                    if (route.steps.size > 3) {"}]},{"timestamp":1754054726160,"changes":[{"type":"MODIFY","lineNumber":60,"content":"        routeViewModel.initializeFeatureMapping(this)","oldContent":"        routeViewModel.initializeFeatureMapping(this, useRealServer = false)"},{"type":"INSERT","lineNumber":191,"content":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"DELETE","lineNumber":192,"oldContent":"     */"},{"type":"DELETE","lineNumber":244,"oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"DELETE","lineNumber":246,"oldContent":"                    }"},{"type":"DELETE","lineNumber":249,"oldContent":"                }"},{"type":"DELETE","lineNumber":251,"oldContent":"                "},{"type":"DELETE","lineNumber":254,"oldContent":"                runOnUiThread {"},{"type":"INSERT","lineNumber":251,"content":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":252,"content":"                    }"},{"type":"INSERT","lineNumber":253,"content":"                }"},{"type":"INSERT","lineNumber":254,"content":"                "},{"type":"INSERT","lineNumber":255,"content":"                runOnUiThread {"}]},{"timestamp":1754057013469,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"import android.graphics.BitmapFactory"},{"type":"DELETE","lineNumber":16,"oldContent":"import org.opencv.features2d.BFMatcher"},{"type":"DELETE","lineNumber":17,"oldContent":"import org.opencv.features2d.Features2d"},{"type":"DELETE","lineNumber":18,"oldContent":"import org.opencv.features2d.ORB"},{"type":"DELETE","lineNumber":19,"oldContent":"import org.opencv.imgproc.Imgproc"},{"type":"DELETE","lineNumber":21,"oldContent":"import org.opencv.core.Mat"},{"type":"DELETE","lineNumber":22,"oldContent":"import org.opencv.core.MatOfDMatch"},{"type":"DELETE","lineNumber":23,"oldContent":"import org.opencv.core.MatOfKeyPoint"},{"type":"DELETE","lineNumber":28,"oldContent":"    private lateinit var referenceImage: Mat"},{"type":"DELETE","lineNumber":29,"oldContent":"    private lateinit var orb: ORB"},{"type":"DELETE","lineNumber":30,"oldContent":"    private lateinit var referenceDescriptors: Mat"},{"type":"DELETE","lineNumber":31,"oldContent":"    private lateinit var referenceKeypoints: MatOfKeyPoint"},{"type":"INSERT","lineNumber":236,"content":"                    }"},{"type":"INSERT","lineNumber":237,"content":"                    "},{"type":"INSERT","lineNumber":238,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":250,"oldContent":"                    }"},{"type":"DELETE","lineNumber":252,"oldContent":"                    "},{"type":"DELETE","lineNumber":255,"oldContent":"                    if (route.steps.size > 3) {"}]},{"timestamp":1754057022963,"changes":[{"type":"DELETE","lineNumber":58,"oldContent":""},{"type":"DELETE","lineNumber":59,"oldContent":"        loadReferenceImage()"},{"type":"DELETE","lineNumber":62,"oldContent":"    private fun loadReferenceImage() {"},{"type":"DELETE","lineNumber":63,"oldContent":"        try {"},{"type":"DELETE","lineNumber":64,"oldContent":"            // Versuche Referenzbild zu laden (falls vorhanden)"},{"type":"DELETE","lineNumber":65,"oldContent":"            val bitmap = BitmapFactory.decodeResource(resources, android.R.drawable.ic_menu_camera)"},{"type":"DELETE","lineNumber":66,"oldContent":"            referenceImage = Mat()"},{"type":"DELETE","lineNumber":67,"oldContent":"            Utils.bitmapToMat(bitmap, referenceImage)"},{"type":"DELETE","lineNumber":68,"oldContent":"            Imgproc.cvtColor(referenceImage, referenceImage, Imgproc.COLOR_RGBA2GRAY)"},{"type":"DELETE","lineNumber":69,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"            orb = ORB.create()"},{"type":"DELETE","lineNumber":71,"oldContent":"            referenceKeypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":72,"oldContent":"            referenceDescriptors = Mat()"},{"type":"DELETE","lineNumber":73,"oldContent":"            orb.detectAndCompute(referenceImage, Mat(), referenceKeypoints, referenceDescriptors)"},{"type":"DELETE","lineNumber":74,"oldContent":"            "},{"type":"DELETE","lineNumber":75,"oldContent":"            Log.d(\"OpenCvCamera\", \"Referenzbild geladen\")"},{"type":"DELETE","lineNumber":76,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":77,"oldContent":"            Log.w(\"OpenCvCamera\", \"Kein Referenzbild verfügbar: ${e.message}\")"},{"type":"DELETE","lineNumber":78,"oldContent":"            // Erstelle leere Matrizen als Fallback"},{"type":"DELETE","lineNumber":79,"oldContent":"            referenceImage = Mat()"},{"type":"DELETE","lineNumber":80,"oldContent":"            referenceKeypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":81,"oldContent":"            referenceDescriptors = Mat()"},{"type":"DELETE","lineNumber":82,"oldContent":"            orb = ORB.create()"},{"type":"DELETE","lineNumber":83,"oldContent":"        }"},{"type":"DELETE","lineNumber":84,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":""},{"type":"DELETE","lineNumber":224,"oldContent":"                    }"},{"type":"DELETE","lineNumber":226,"oldContent":"                    "},{"type":"DELETE","lineNumber":228,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"INSERT","lineNumber":210,"content":"                    }"},{"type":"INSERT","lineNumber":211,"content":"                    "},{"type":"INSERT","lineNumber":212,"content":"                    if (route.steps.size > 3) {"}]},{"timestamp":1754057034433,"changes":[{"type":"DELETE","lineNumber":71,"oldContent":"        // Original Feature-Matching (für Referenz-Bild) - nur wenn Referenzbild vorhanden"},{"type":"DELETE","lineNumber":72,"oldContent":"        if (!referenceImage.empty() && !referenceDescriptors.empty()) {"},{"type":"DELETE","lineNumber":73,"oldContent":"            val keypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":74,"oldContent":"            val descriptors = Mat()"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":76,"oldContent":"            orb.detectAndCompute(frame, Mat(), keypoints, descriptors)"},{"type":"DELETE","lineNumber":77,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"            val bf = BFMatcher.create(Core.NORM_HAMMING, true)"},{"type":"DELETE","lineNumber":79,"oldContent":"            val matches = MatOfDMatch()"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"            if (!descriptors.empty()) {"},{"type":"DELETE","lineNumber":82,"oldContent":"                bf.match(referenceDescriptors, descriptors, matches)"},{"type":"DELETE","lineNumber":83,"oldContent":"            }"},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"DELETE","lineNumber":85,"oldContent":"            val output = Mat()"},{"type":"DELETE","lineNumber":86,"oldContent":"            Features2d.drawMatches(referenceImage, referenceKeypoints, frame, keypoints, matches, output)"},{"type":"DELETE","lineNumber":87,"oldContent":"            return output"},{"type":"DELETE","lineNumber":88,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":89,"oldContent":"            // Kein Referenzbild - nur Kamera-Frame zurückgeben"},{"type":"DELETE","lineNumber":90,"oldContent":"            return frame"},{"type":"DELETE","lineNumber":91,"oldContent":"        }"},{"type":"INSERT","lineNumber":71,"content":"        // Nur Kamera-Frame zurückgeben"},{"type":"INSERT","lineNumber":72,"content":"        return frame"},{"type":"DELETE","lineNumber":184,"oldContent":"                    }"},{"type":"DELETE","lineNumber":186,"oldContent":"                    "},{"type":"DELETE","lineNumber":188,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"INSERT","lineNumber":191,"content":"                    }"},{"type":"INSERT","lineNumber":192,"content":"                    "},{"type":"INSERT","lineNumber":193,"content":"                    if (route.steps.size > 3) {"}]},{"timestamp":1754165872143,"changes":[{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.ui.platform.ComposeView"},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.runtime.*"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.runtime.livedata.observeAsState"},{"type":"INSERT","lineNumber":19,"content":"import com.example.arwalking.components.ARInfoIsland"},{"type":"INSERT","lineNumber":20,"content":"import com.example.arwalking.components.ARScanStatus"},{"type":"INSERT","lineNumber":21,"content":"import com.example.arwalking.components.ExpandedARInfoIsland"},{"type":"INSERT","lineNumber":22,"content":"import com.example.arwalking.components.rememberARScanStatus"},{"type":"INSERT","lineNumber":33,"content":"    private lateinit var arInfoComposeView: ComposeView"},{"type":"INSERT","lineNumber":35,"content":"    "},{"type":"INSERT","lineNumber":36,"content":"    // AR Status State"},{"type":"INSERT","lineNumber":37,"content":"    private var isARInitialized by mutableStateOf(false)"},{"type":"INSERT","lineNumber":38,"content":"    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())"},{"type":"DELETE","lineNumber":145,"oldContent":"                        routeViewModel.uploadTrainingImage("},{"type":"INSERT","lineNumber":157,"content":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":147,"oldContent":"                            bitmap = bitmap"},{"type":"INSERT","lineNumber":159,"content":"                            bitmap = bitmap,"},{"type":"INSERT","lineNumber":160,"content":"                            landmarkName = bestMatch.landmark.name,"},{"type":"INSERT","lineNumber":161,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":169,"oldContent":"                    }"},{"type":"DELETE","lineNumber":171,"oldContent":"                    "},{"type":"DELETE","lineNumber":173,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"INSERT","lineNumber":205,"content":"                    }"},{"type":"INSERT","lineNumber":206,"content":"                    "},{"type":"INSERT","lineNumber":207,"content":"                    if (route.steps.size > 3) {"}]},{"timestamp":1754165884860,"changes":[{"type":"DELETE","lineNumber":17,"oldContent":""},{"type":"DELETE","lineNumber":19,"oldContent":"class OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":23,"oldContent":"    private lateinit var openCvCameraView: JavaCameraView"},{"type":"DELETE","lineNumber":25,"oldContent":"    "},{"type":"DELETE","lineNumber":27,"oldContent":"    // Feature-Mapping Integration"},{"type":"INSERT","lineNumber":23,"content":""},{"type":"INSERT","lineNumber":24,"content":"class OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"INSERT","lineNumber":26,"content":"    private lateinit var openCvCameraView: JavaCameraView"},{"type":"INSERT","lineNumber":27,"content":"    "},{"type":"INSERT","lineNumber":28,"content":"    // Feature-Mapping Integration"},{"type":"INSERT","lineNumber":33,"content":"    private lateinit var arInfoComposeView: ComposeView"},{"type":"INSERT","lineNumber":35,"content":"    "},{"type":"INSERT","lineNumber":36,"content":"    // AR Status State"},{"type":"INSERT","lineNumber":37,"content":"    private var isARInitialized by mutableStateOf(false)"},{"type":"INSERT","lineNumber":38,"content":"    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())"},{"type":"DELETE","lineNumber":40,"oldContent":"    private lateinit var arInfoComposeView: ComposeView"},{"type":"DELETE","lineNumber":43,"oldContent":"    "},{"type":"DELETE","lineNumber":45,"oldContent":"    // AR Status State"},{"type":"DELETE","lineNumber":47,"oldContent":"    private var isARInitialized by mutableStateOf(false)"},{"type":"DELETE","lineNumber":49,"oldContent":"    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())"},{"type":"INSERT","lineNumber":52,"content":"        // AR Info Island ComposeView erstellen und hinzufügen"},{"type":"INSERT","lineNumber":53,"content":"        arInfoComposeView = ComposeView(this).apply {"},{"type":"INSERT","lineNumber":54,"content":"            setContent {"},{"type":"INSERT","lineNumber":55,"content":"                ARInfoIslandOverlay()"},{"type":"INSERT","lineNumber":56,"content":"            }"},{"type":"INSERT","lineNumber":57,"content":"        }"},{"type":"INSERT","lineNumber":58,"content":"        "},{"type":"INSERT","lineNumber":59,"content":"        // ComposeView zum Layout hinzufügen"},{"type":"INSERT","lineNumber":60,"content":"        val rootLayout = findViewById<android.widget.RelativeLayout>(android.R.id.content)"},{"type":"INSERT","lineNumber":61,"content":"        val layoutParams = android.widget.RelativeLayout.LayoutParams("},{"type":"INSERT","lineNumber":62,"content":"            android.widget.RelativeLayout.LayoutParams.MATCH_PARENT,"},{"type":"INSERT","lineNumber":63,"content":"            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT"},{"type":"INSERT","lineNumber":64,"content":"        ).apply {"},{"type":"INSERT","lineNumber":65,"content":"            addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP)"},{"type":"INSERT","lineNumber":66,"content":"            topMargin = 60 // Platz für Status Bar"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"INSERT","lineNumber":68,"content":"        rootLayout.addView(arInfoComposeView, layoutParams)"},{"type":"INSERT","lineNumber":69,"content":"        "},{"type":"INSERT","lineNumber":80,"content":"        // AR als initialisiert markieren nach kurzer Verzögerung"},{"type":"INSERT","lineNumber":81,"content":"        lifecycleScope.launch {"},{"type":"INSERT","lineNumber":82,"content":"            kotlinx.coroutines.delay(2000)"},{"type":"INSERT","lineNumber":83,"content":"            isARInitialized = true"},{"type":"INSERT","lineNumber":84,"content":"        }"},{"type":"INSERT","lineNumber":85,"content":"        "},{"type":"INSERT","lineNumber":181,"content":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"INSERT","lineNumber":183,"content":"                            bitmap = bitmap,"},{"type":"INSERT","lineNumber":184,"content":"                            landmarkName = bestMatch.landmark.name,"},{"type":"INSERT","lineNumber":185,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":167,"oldContent":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":170,"oldContent":"                            bitmap = bitmap,"},{"type":"DELETE","lineNumber":172,"oldContent":"                            landmarkName = bestMatch.landmark.name,"},{"type":"DELETE","lineNumber":174,"oldContent":"                            description = bestMatch.landmark.description"},{"type":"INSERT","lineNumber":229,"content":"                    }"},{"type":"INSERT","lineNumber":230,"content":"                    "},{"type":"INSERT","lineNumber":231,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":216,"oldContent":"                    }"},{"type":"DELETE","lineNumber":218,"oldContent":"                    "},{"type":"DELETE","lineNumber":220,"oldContent":"                    if (route.steps.size > 3) {"}]},{"timestamp":1754165899605,"changes":[{"type":"INSERT","lineNumber":20,"content":"import com.example.arwalking.components.ARScanStatus"},{"type":"INSERT","lineNumber":21,"content":"import com.example.arwalking.components.ExpandedARInfoIsland"},{"type":"INSERT","lineNumber":22,"content":"import com.example.arwalking.components.rememberARScanStatus"},{"type":"DELETE","lineNumber":22,"oldContent":"import com.example.arwalking.components.ARScanStatus"},{"type":"DELETE","lineNumber":25,"oldContent":"import com.example.arwalking.components.ExpandedARInfoIsland"},{"type":"DELETE","lineNumber":28,"oldContent":"import com.example.arwalking.components.rememberARScanStatus"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"    override fun onCreate(savedInstanceState: Bundle?) {"},{"type":"DELETE","lineNumber":39,"oldContent":"        super.onCreate(savedInstanceState)"},{"type":"DELETE","lineNumber":41,"oldContent":"        OpenCVLoader.initDebug()"},{"type":"INSERT","lineNumber":40,"content":"    override fun onCreate(savedInstanceState: Bundle?) {"},{"type":"INSERT","lineNumber":41,"content":"        super.onCreate(savedInstanceState)"},{"type":"INSERT","lineNumber":42,"content":"        OpenCVLoader.initDebug()"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"DELETE","lineNumber":53,"oldContent":"        openCvCameraView.visibility = SurfaceView.VISIBLE"},{"type":"DELETE","lineNumber":55,"oldContent":"        openCvCameraView.setCvCameraViewListener(this)"},{"type":"DELETE","lineNumber":57,"oldContent":"        openCvCameraView.enableView()"},{"type":"DELETE","lineNumber":59,"oldContent":""},{"type":"DELETE","lineNumber":61,"oldContent":"        // ViewModel initialisieren"},{"type":"DELETE","lineNumber":63,"oldContent":"        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"DELETE","lineNumber":65,"oldContent":"        "},{"type":"DELETE","lineNumber":67,"oldContent":"        // Feature-Mapping initialisieren"},{"type":"DELETE","lineNumber":69,"oldContent":"        routeViewModel.initializeFeatureMapping(this)"},{"type":"DELETE","lineNumber":71,"oldContent":"        "},{"type":"DELETE","lineNumber":73,"oldContent":"        // Feature-Navigation für aktuelles Gebäude laden"},{"type":"DELETE","lineNumber":75,"oldContent":"        val building = intent.getStringExtra(\"building\") ?: \"default_building\""},{"type":"DELETE","lineNumber":77,"oldContent":"        val floor = intent.getIntExtra(\"floor\", 0)"},{"type":"DELETE","lineNumber":79,"oldContent":"        routeViewModel.loadFeatureNavigationRoute(this, building, floor)"},{"type":"INSERT","lineNumber":67,"content":"        }"},{"type":"INSERT","lineNumber":68,"content":"        rootLayout.addView(arInfoComposeView, layoutParams)"},{"type":"INSERT","lineNumber":70,"content":"        openCvCameraView.visibility = SurfaceView.VISIBLE"},{"type":"INSERT","lineNumber":71,"content":"        openCvCameraView.setCvCameraViewListener(this)"},{"type":"INSERT","lineNumber":72,"content":"        openCvCameraView.enableView()"},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":74,"content":"        // ViewModel initialisieren"},{"type":"INSERT","lineNumber":75,"content":"        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":76,"content":"        "},{"type":"INSERT","lineNumber":77,"content":"        // Feature-Mapping initialisieren"},{"type":"INSERT","lineNumber":78,"content":"        routeViewModel.initializeFeatureMapping(this)"},{"type":"INSERT","lineNumber":79,"content":"        "},{"type":"INSERT","lineNumber":80,"content":"        // AR als initialisiert markieren nach kurzer Verzögerung"},{"type":"INSERT","lineNumber":81,"content":"        lifecycleScope.launch {"},{"type":"INSERT","lineNumber":82,"content":"            kotlinx.coroutines.delay(2000)"},{"type":"INSERT","lineNumber":83,"content":"            isARInitialized = true"},{"type":"INSERT","lineNumber":85,"content":"        "},{"type":"INSERT","lineNumber":86,"content":"        // Feature-Navigation für aktuelles Gebäude laden"},{"type":"INSERT","lineNumber":87,"content":"        val building = intent.getStringExtra(\"building\") ?: \"default_building\""},{"type":"INSERT","lineNumber":88,"content":"        val floor = intent.getIntExtra(\"floor\", 0)"},{"type":"INSERT","lineNumber":89,"content":"        routeViewModel.loadFeatureNavigationRoute(this, building, floor)"},{"type":"INSERT","lineNumber":90,"content":"        "},{"type":"DELETE","lineNumber":84,"oldContent":"        rootLayout.addView(arInfoComposeView, layoutParams)"},{"type":"DELETE","lineNumber":86,"oldContent":"        "},{"type":"DELETE","lineNumber":98,"oldContent":"        // AR als initialisiert markieren nach kurzer Verzögerung"},{"type":"DELETE","lineNumber":100,"oldContent":"        lifecycleScope.launch {"},{"type":"DELETE","lineNumber":102,"oldContent":"            kotlinx.coroutines.delay(2000)"},{"type":"DELETE","lineNumber":104,"oldContent":"            isARInitialized = true"},{"type":"DELETE","lineNumber":106,"oldContent":"        }"},{"type":"DELETE","lineNumber":108,"oldContent":"        "},{"type":"INSERT","lineNumber":143,"content":"     * AR Info Island Overlay Composable"},{"type":"INSERT","lineNumber":144,"content":"     */"},{"type":"INSERT","lineNumber":145,"content":"    @Composable"},{"type":"INSERT","lineNumber":146,"content":"    private fun ARInfoIslandOverlay() {"},{"type":"INSERT","lineNumber":147,"content":"        val matches by routeViewModel.currentMatches.observeAsState(emptyList())"},{"type":"INSERT","lineNumber":148,"content":"        "},{"type":"INSERT","lineNumber":149,"content":"        // Update current matches state"},{"type":"INSERT","lineNumber":150,"content":"        LaunchedEffect(matches) {"},{"type":"INSERT","lineNumber":151,"content":"            currentMatches = matches"},{"type":"INSERT","lineNumber":152,"content":"        }"},{"type":"INSERT","lineNumber":153,"content":"        "},{"type":"INSERT","lineNumber":154,"content":"        val landmarkCount = matches.size"},{"type":"INSERT","lineNumber":155,"content":"        val bestConfidence = matches.maxOfOrNull { it.confidence } ?: 0f"},{"type":"INSERT","lineNumber":156,"content":"        val isTracking = matches.isNotEmpty()"},{"type":"INSERT","lineNumber":157,"content":"        "},{"type":"INSERT","lineNumber":158,"content":"        // Automatischer AR-Status basierend auf aktuellen Bedingungen"},{"type":"INSERT","lineNumber":159,"content":"        val arStatus = rememberARScanStatus("},{"type":"INSERT","lineNumber":160,"content":"            isInitialized = isARInitialized,"},{"type":"INSERT","lineNumber":161,"content":"            landmarkCount = landmarkCount,"},{"type":"INSERT","lineNumber":162,"content":"            bestConfidence = bestConfidence,"},{"type":"INSERT","lineNumber":163,"content":"            isTracking = isTracking"},{"type":"INSERT","lineNumber":164,"content":"        )"},{"type":"INSERT","lineNumber":165,"content":"        "},{"type":"INSERT","lineNumber":166,"content":"        // Erweiterte Info Island mit mehr Details"},{"type":"INSERT","lineNumber":167,"content":"        ExpandedARInfoIsland("},{"type":"INSERT","lineNumber":168,"content":"            scanStatus = arStatus,"},{"type":"INSERT","lineNumber":169,"content":"            landmarkCount = landmarkCount,"},{"type":"INSERT","lineNumber":170,"content":"            confidence = bestConfidence,"},{"type":"INSERT","lineNumber":171,"content":"            isVisible = true"},{"type":"INSERT","lineNumber":172,"content":"        )"},{"type":"INSERT","lineNumber":173,"content":"    }"},{"type":"INSERT","lineNumber":174,"content":""},{"type":"INSERT","lineNumber":175,"content":"    /**"},{"type":"INSERT","lineNumber":179,"content":"        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden"},{"type":"INSERT","lineNumber":180,"content":"        matchInfoText.visibility = View.GONE"},{"type":"INSERT","lineNumber":181,"content":"        "},{"type":"DELETE","lineNumber":147,"oldContent":"            matchInfoText.text = \"Keine Landmarks erkannt\""},{"type":"DELETE","lineNumber":148,"oldContent":"            matchInfoText.visibility = View.VISIBLE"},{"type":"INSERT","lineNumber":183,"content":"            Log.d(\"OpenCvCamera\", \"Keine Landmarks erkannt\")"},{"type":"DELETE","lineNumber":151,"oldContent":"            val matchText = buildString {"},{"type":"DELETE","lineNumber":152,"oldContent":"                append(\"Erkannt: ${bestMatch.landmark.name}\\n\")"},{"type":"DELETE","lineNumber":153,"oldContent":"                append(\"Vertrauen: ${(bestMatch.confidence * 100).toInt()}%\\n\")"},{"type":"DELETE","lineNumber":154,"oldContent":"                append(\"Matches: ${bestMatch.matchCount}\")"},{"type":"DELETE","lineNumber":155,"oldContent":"                "},{"type":"DELETE","lineNumber":156,"oldContent":"                if (matches.size > 1) {"},{"type":"DELETE","lineNumber":157,"oldContent":"                    append(\"\\n\\nAlternativen:\")"},{"type":"DELETE","lineNumber":158,"oldContent":"                    matches.drop(1).take(2).forEach { match ->"},{"type":"DELETE","lineNumber":159,"oldContent":"                        append(\"\\n• ${match.landmark.name} (${(match.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":160,"oldContent":"                    }"},{"type":"DELETE","lineNumber":161,"oldContent":"                }"},{"type":"DELETE","lineNumber":162,"oldContent":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"            "},{"type":"DELETE","lineNumber":164,"oldContent":"            matchInfoText.text = matchText"},{"type":"DELETE","lineNumber":165,"oldContent":"            matchInfoText.visibility = View.VISIBLE"},{"type":"INSERT","lineNumber":186,"content":"            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark.name} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":202,"content":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"INSERT","lineNumber":204,"content":"                            bitmap = bitmap,"},{"type":"INSERT","lineNumber":205,"content":"                            landmarkName = bestMatch.landmark.name,"},{"type":"INSERT","lineNumber":206,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":201,"oldContent":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":204,"oldContent":"                            bitmap = bitmap,"},{"type":"DELETE","lineNumber":206,"oldContent":"                            landmarkName = bestMatch.landmark.name,"},{"type":"DELETE","lineNumber":208,"oldContent":"                            description = bestMatch.landmark.description"},{"type":"INSERT","lineNumber":250,"content":"                    }"},{"type":"INSERT","lineNumber":251,"content":"                    "},{"type":"INSERT","lineNumber":252,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":245,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":246,"oldContent":"                    "},{"type":"DELETE","lineNumber":247,"oldContent":"                    }"}]},{"timestamp":1754165943651,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"MODIFY","lineNumber":23,"content":"import com.example.arwalking.ui.theme.ArWalkingTheme","oldContent":"class OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {"},{"type":"INSERT","lineNumber":25,"content":"class OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {"},{"type":"INSERT","lineNumber":26,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":"    override fun onCreate(savedInstanceState: Bundle?) {"},{"type":"INSERT","lineNumber":39,"content":"    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"    override fun onCreate(savedInstanceState: Bundle?) {"},{"type":"DELETE","lineNumber":41,"oldContent":"    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"INSERT","lineNumber":61,"content":"        val rootLayout = findViewById<android.widget.RelativeLayout>(android.R.id.content)"},{"type":"INSERT","lineNumber":62,"content":"        val layoutParams = android.widget.RelativeLayout.LayoutParams("},{"type":"INSERT","lineNumber":63,"content":"            android.widget.RelativeLayout.LayoutParams.MATCH_PARENT,"},{"type":"INSERT","lineNumber":64,"content":"            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT"},{"type":"INSERT","lineNumber":65,"content":"        ).apply {"},{"type":"INSERT","lineNumber":66,"content":"            addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP)"},{"type":"INSERT","lineNumber":67,"content":"            topMargin = 60 // Platz für Status Bar"},{"type":"DELETE","lineNumber":62,"oldContent":"        val rootLayout = findViewById<android.widget.RelativeLayout>(android.R.id.content)"},{"type":"INSERT","lineNumber":70,"content":"        "},{"type":"DELETE","lineNumber":64,"oldContent":"        val layoutParams = android.widget.RelativeLayout.LayoutParams("},{"type":"DELETE","lineNumber":67,"oldContent":"            android.widget.RelativeLayout.LayoutParams.MATCH_PARENT,"},{"type":"DELETE","lineNumber":70,"oldContent":"            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT"},{"type":"DELETE","lineNumber":73,"oldContent":"        ).apply {"},{"type":"DELETE","lineNumber":76,"oldContent":"            addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP)"},{"type":"DELETE","lineNumber":79,"oldContent":"            topMargin = 60 // Platz für Status Bar"},{"type":"DELETE","lineNumber":81,"oldContent":"        "},{"type":"DELETE","lineNumber":83,"oldContent":"        }"},{"type":"MODIFY","lineNumber":85,"content":"        }","oldContent":"        // UI Setup"},{"type":"DELETE","lineNumber":87,"oldContent":"        setupUI()"},{"type":"DELETE","lineNumber":90,"oldContent":"        observeFeatureMatches()"},{"type":"DELETE","lineNumber":92,"oldContent":"    }"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"INSERT","lineNumber":92,"content":"        // UI Setup"},{"type":"INSERT","lineNumber":93,"content":"        setupUI()"},{"type":"INSERT","lineNumber":94,"content":"        observeFeatureMatches()"},{"type":"INSERT","lineNumber":95,"content":"    }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":144,"oldContent":"     * Aktualisiert Match-Informationen in der UI"},{"type":"DELETE","lineNumber":146,"oldContent":"     */"},{"type":"DELETE","lineNumber":148,"oldContent":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"DELETE","lineNumber":150,"oldContent":"        if (matches.isEmpty()) {"},{"type":"DELETE","lineNumber":154,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":156,"oldContent":"            val bestMatch = matches.first()"},{"type":"DELETE","lineNumber":173,"oldContent":"        }"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"DELETE","lineNumber":177,"oldContent":"    "},{"type":"DELETE","lineNumber":179,"oldContent":"    /**"},{"type":"DELETE","lineNumber":181,"oldContent":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"DELETE","lineNumber":183,"oldContent":"     */"},{"type":"DELETE","lineNumber":185,"oldContent":"    private fun captureTrainingImage() {"},{"type":"DELETE","lineNumber":187,"oldContent":"        currentFrame?.let { frame ->"},{"type":"DELETE","lineNumber":189,"oldContent":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":177,"content":"     * Aktualisiert Match-Informationen in der UI"},{"type":"INSERT","lineNumber":178,"content":"     */"},{"type":"INSERT","lineNumber":179,"content":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"INSERT","lineNumber":180,"content":"        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden"},{"type":"INSERT","lineNumber":181,"content":"        matchInfoText.visibility = View.GONE"},{"type":"INSERT","lineNumber":182,"content":"        "},{"type":"INSERT","lineNumber":183,"content":"        if (matches.isEmpty()) {"},{"type":"INSERT","lineNumber":184,"content":"            Log.d(\"OpenCvCamera\", \"Keine Landmarks erkannt\")"},{"type":"INSERT","lineNumber":185,"content":"        } else {"},{"type":"INSERT","lineNumber":186,"content":"            val bestMatch = matches.first()"},{"type":"INSERT","lineNumber":187,"content":"            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark.name} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":188,"content":"        }"},{"type":"INSERT","lineNumber":189,"content":"    }"},{"type":"INSERT","lineNumber":190,"content":"    "},{"type":"INSERT","lineNumber":191,"content":"    /**"},{"type":"INSERT","lineNumber":192,"content":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"INSERT","lineNumber":193,"content":"     */"},{"type":"INSERT","lineNumber":194,"content":"    private fun captureTrainingImage() {"},{"type":"INSERT","lineNumber":195,"content":"        currentFrame?.let { frame ->"},{"type":"INSERT","lineNumber":196,"content":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":195,"oldContent":"        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden"},{"type":"DELETE","lineNumber":197,"oldContent":"        matchInfoText.visibility = View.GONE"},{"type":"DELETE","lineNumber":199,"oldContent":"        "},{"type":"INSERT","lineNumber":203,"content":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"INSERT","lineNumber":205,"content":"                            bitmap = bitmap,"},{"type":"INSERT","lineNumber":206,"content":"                            landmarkName = bestMatch.landmark.name,"},{"type":"INSERT","lineNumber":207,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":202,"oldContent":"            Log.d(\"OpenCvCamera\", \"Keine Landmarks erkannt\")"},{"type":"DELETE","lineNumber":206,"oldContent":"            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark.name} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":222,"oldContent":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":225,"oldContent":"                            bitmap = bitmap,"},{"type":"DELETE","lineNumber":226,"oldContent":"                            landmarkName = bestMatch.landmark.name,"},{"type":"DELETE","lineNumber":228,"oldContent":"                            description = bestMatch.landmark.description"},{"type":"INSERT","lineNumber":251,"content":"                    }"},{"type":"INSERT","lineNumber":252,"content":"                    "},{"type":"INSERT","lineNumber":253,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":266,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":267,"oldContent":"                    "},{"type":"DELETE","lineNumber":268,"oldContent":"                    }"}]},{"timestamp":1754165948835,"changes":[{"type":"MODIFY","lineNumber":23,"content":"import com.example.arwalking.ui.theme.ArWalkingTheme","oldContent":"import com.example.arwalking.ui.theme.ArWalkingTheme"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"DELETE","lineNumber":26,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"        super.onCreate(savedInstanceState)"},{"type":"MODIFY","lineNumber":42,"content":"        super.onCreate(savedInstanceState)","oldContent":"        OpenCVLoader.initDebug()"},{"type":"INSERT","lineNumber":43,"content":"        OpenCVLoader.initDebug()"},{"type":"MODIFY","lineNumber":56,"content":"                ArWalkingTheme {","oldContent":"                ARInfoIslandOverlay()"},{"type":"INSERT","lineNumber":57,"content":"                    ARInfoIslandOverlay()"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"DELETE","lineNumber":61,"oldContent":"        }"},{"type":"DELETE","lineNumber":63,"oldContent":"        rootLayout.addView(arInfoComposeView, layoutParams)"},{"type":"DELETE","lineNumber":66,"oldContent":"        openCvCameraView.visibility = SurfaceView.VISIBLE"},{"type":"DELETE","lineNumber":69,"oldContent":"        openCvCameraView.setCvCameraViewListener(this)"},{"type":"DELETE","lineNumber":71,"oldContent":"        openCvCameraView.enableView()"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"INSERT","lineNumber":71,"content":"        rootLayout.addView(arInfoComposeView, layoutParams)"},{"type":"INSERT","lineNumber":72,"content":"        "},{"type":"INSERT","lineNumber":73,"content":"        openCvCameraView.visibility = SurfaceView.VISIBLE"},{"type":"INSERT","lineNumber":74,"content":"        openCvCameraView.setCvCameraViewListener(this)"},{"type":"INSERT","lineNumber":75,"content":"        openCvCameraView.enableView()"},{"type":"DELETE","lineNumber":75,"oldContent":"        "},{"type":"INSERT","lineNumber":92,"content":"        routeViewModel.loadFeatureNavigationRoute(this, building, floor)"},{"type":"INSERT","lineNumber":93,"content":"        "},{"type":"DELETE","lineNumber":92,"oldContent":"        routeViewModel.loadFeatureNavigationRoute(this, building, floor)"},{"type":"DELETE","lineNumber":95,"oldContent":"        "},{"type":"INSERT","lineNumber":172,"content":"            landmarkCount = landmarkCount,"},{"type":"INSERT","lineNumber":173,"content":"            confidence = bestConfidence,"},{"type":"INSERT","lineNumber":174,"content":"            isVisible = true"},{"type":"INSERT","lineNumber":175,"content":"        )"},{"type":"INSERT","lineNumber":176,"content":"    }"},{"type":"INSERT","lineNumber":177,"content":""},{"type":"INSERT","lineNumber":178,"content":"    /**"},{"type":"DELETE","lineNumber":172,"oldContent":"            landmarkCount = landmarkCount,"},{"type":"DELETE","lineNumber":175,"oldContent":"            confidence = bestConfidence,"},{"type":"DELETE","lineNumber":178,"oldContent":"            isVisible = true"},{"type":"DELETE","lineNumber":181,"oldContent":"        )"},{"type":"DELETE","lineNumber":184,"oldContent":"    }"},{"type":"DELETE","lineNumber":187,"oldContent":""},{"type":"DELETE","lineNumber":191,"oldContent":"    /**"},{"type":"DELETE","lineNumber":192,"oldContent":"                try {"},{"type":"DELETE","lineNumber":194,"oldContent":"                    // Frame zu Bitmap konvertieren"},{"type":"DELETE","lineNumber":196,"oldContent":"                    val bitmap = matToBitmap(frame)"},{"type":"DELETE","lineNumber":198,"oldContent":"                    "},{"type":"INSERT","lineNumber":199,"content":"                try {"},{"type":"INSERT","lineNumber":200,"content":"                    // Frame zu Bitmap konvertieren"},{"type":"INSERT","lineNumber":201,"content":"                    val bitmap = matToBitmap(frame)"},{"type":"INSERT","lineNumber":202,"content":"                    "},{"type":"INSERT","lineNumber":205,"content":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"INSERT","lineNumber":207,"content":"                            bitmap = bitmap,"},{"type":"INSERT","lineNumber":208,"content":"                            landmarkName = bestMatch.landmark.name,"},{"type":"INSERT","lineNumber":209,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":205,"oldContent":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":208,"oldContent":"                            bitmap = bitmap,"},{"type":"DELETE","lineNumber":210,"oldContent":"                            landmarkName = bestMatch.landmark.name,"},{"type":"DELETE","lineNumber":211,"oldContent":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":251,"oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"DELETE","lineNumber":253,"oldContent":"                    }"},{"type":"DELETE","lineNumber":255,"oldContent":"                }"},{"type":"INSERT","lineNumber":256,"content":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":257,"content":"                    }"},{"type":"INSERT","lineNumber":258,"content":"                }"}]},{"timestamp":1754166426554,"changes":[{"type":"DELETE","lineNumber":22,"oldContent":"import com.example.arwalking.ui.theme.ArWalkingTheme"},{"type":"MODIFY","lineNumber":22,"content":"import com.example.arwalking.components.rememberARScanStatus","oldContent":"import com.example.arwalking.ui.theme.ArWalkingTheme"},{"type":"INSERT","lineNumber":23,"content":"import com.example.arwalking.ui.theme.Theme"},{"type":"INSERT","lineNumber":41,"content":"    override fun onCreate(savedInstanceState: Bundle?) {"},{"type":"DELETE","lineNumber":43,"oldContent":"    override fun onCreate(savedInstanceState: Bundle?) {"},{"type":"MODIFY","lineNumber":59,"content":"            }","oldContent":"            }"},{"type":"DELETE","lineNumber":68,"oldContent":"        }"},{"type":"INSERT","lineNumber":69,"content":"            topMargin = 60 // Platz für Status Bar"},{"type":"INSERT","lineNumber":70,"content":"        }"},{"type":"DELETE","lineNumber":72,"oldContent":"            topMargin = 60 // Platz für Status Bar"},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"MODIFY","lineNumber":76,"content":"","oldContent":"        // ViewModel initialisieren"},{"type":"INSERT","lineNumber":77,"content":"        // ViewModel initialisieren"},{"type":"DELETE","lineNumber":92,"oldContent":"        // UI Setup"},{"type":"DELETE","lineNumber":93,"oldContent":"        setupUI()"},{"type":"INSERT","lineNumber":94,"content":"        // UI Setup"},{"type":"INSERT","lineNumber":95,"content":"        setupUI()"},{"type":"DELETE","lineNumber":172,"oldContent":"     * Aktualisiert Match-Informationen in der UI"},{"type":"DELETE","lineNumber":173,"oldContent":"     */"},{"type":"DELETE","lineNumber":176,"oldContent":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"DELETE","lineNumber":178,"oldContent":"        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden"},{"type":"DELETE","lineNumber":181,"oldContent":"        matchInfoText.visibility = View.GONE"},{"type":"DELETE","lineNumber":183,"oldContent":"        "},{"type":"INSERT","lineNumber":179,"content":"     * Aktualisiert Match-Informationen in der UI"},{"type":"INSERT","lineNumber":180,"content":"     */"},{"type":"INSERT","lineNumber":181,"content":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"INSERT","lineNumber":182,"content":"        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden"},{"type":"INSERT","lineNumber":183,"content":"        matchInfoText.visibility = View.GONE"},{"type":"INSERT","lineNumber":184,"content":"        "},{"type":"DELETE","lineNumber":197,"oldContent":"                try {"},{"type":"MODIFY","lineNumber":199,"content":"                try {","oldContent":"                    // Frame zu Bitmap konvertieren"},{"type":"INSERT","lineNumber":200,"content":"                    // Frame zu Bitmap konvertieren"},{"type":"MODIFY","lineNumber":203,"content":"                    // Aktuell bestes Match als Ziel-Landmark verwenden","oldContent":"                    // Aktuell bestes Match als Ziel-Landmark verwenden"},{"type":"DELETE","lineNumber":205,"oldContent":"                            landmarkId = bestMatch.landmark.id,"},{"type":"DELETE","lineNumber":206,"oldContent":"                        )"},{"type":"DELETE","lineNumber":208,"oldContent":"                        "},{"type":"INSERT","lineNumber":206,"content":"                            landmarkId = bestMatch.landmark.id,"},{"type":"MODIFY","lineNumber":210,"content":"                        )","oldContent":"                        runOnUiThread {"},{"type":"INSERT","lineNumber":211,"content":"                        "},{"type":"INSERT","lineNumber":212,"content":"                        runOnUiThread {"},{"type":"MODIFY","lineNumber":256,"content":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")","oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"MODIFY","lineNumber":259,"content":"                ","oldContent":"                "}]},{"timestamp":1754166430966,"changes":[{"type":"MODIFY","lineNumber":23,"content":"import com.example.arwalking.ui.theme.Theme","oldContent":"import com.example.arwalking.ui.theme.ArWalkingTheme"},{"type":"INSERT","lineNumber":58,"content":"                }"},{"type":"DELETE","lineNumber":59,"oldContent":"            }"},{"type":"MODIFY","lineNumber":69,"content":"            topMargin = 60 // Platz für Status Bar","oldContent":"            topMargin = 60 // Platz für Status Bar"},{"type":"INSERT","lineNumber":75,"content":"        openCvCameraView.enableView()"},{"type":"DELETE","lineNumber":77,"oldContent":"        openCvCameraView.enableView()"},{"type":"DELETE","lineNumber":92,"oldContent":"        // UI Setup"},{"type":"MODIFY","lineNumber":94,"content":"        // UI Setup","oldContent":"        setupUI()"},{"type":"INSERT","lineNumber":95,"content":"        setupUI()"},{"type":"DELETE","lineNumber":175,"oldContent":"     * Aktualisiert Match-Informationen in der UI"},{"type":"MODIFY","lineNumber":177,"content":"","oldContent":"     */"},{"type":"INSERT","lineNumber":178,"content":"    /**"},{"type":"INSERT","lineNumber":179,"content":"     * Aktualisiert Match-Informationen in der UI"},{"type":"INSERT","lineNumber":180,"content":"     */"},{"type":"DELETE","lineNumber":181,"oldContent":""},{"type":"DELETE","lineNumber":184,"oldContent":"    /**"},{"type":"INSERT","lineNumber":198,"content":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":200,"oldContent":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":202,"content":"                    "},{"type":"DELETE","lineNumber":203,"oldContent":"                    // Aktuell bestes Match als Ziel-Landmark verwenden"},{"type":"MODIFY","lineNumber":206,"content":"                            landmarkId = bestMatch.landmark.id,","oldContent":"                            landmarkId = bestMatch.landmark.id,"},{"type":"INSERT","lineNumber":208,"content":"                            landmarkName = bestMatch.landmark.name,"},{"type":"INSERT","lineNumber":209,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":210,"oldContent":"                            landmarkName = bestMatch.landmark.name,"},{"type":"DELETE","lineNumber":212,"oldContent":"                            description = bestMatch.landmark.description"},{"type":"INSERT","lineNumber":255,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":256,"oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":258,"content":"                }"},{"type":"DELETE","lineNumber":259,"oldContent":"                "}]},{"timestamp":1754166447629,"changes":[{"type":"DELETE","lineNumber":23,"oldContent":"import com.example.arwalking.ui.theme.Theme"},{"type":"INSERT","lineNumber":24,"content":""},{"type":"INSERT","lineNumber":68,"content":"            addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP)"},{"type":"DELETE","lineNumber":69,"oldContent":"            topMargin = 60 // Platz für Status Bar"},{"type":"INSERT","lineNumber":93,"content":"        "},{"type":"DELETE","lineNumber":95,"oldContent":"        "},{"type":"DELETE","lineNumber":115,"oldContent":"        return bitmap"},{"type":"DELETE","lineNumber":116,"oldContent":"        Utils.matToBitmap(mat, bitmap)"},{"type":"DELETE","lineNumber":117,"oldContent":"        val bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888)"},{"type":"INSERT","lineNumber":115,"content":"        super.onDestroy()"},{"type":"INSERT","lineNumber":116,"content":"        openCvCameraView.disableView()"},{"type":"INSERT","lineNumber":117,"content":"    }"},{"type":"INSERT","lineNumber":176,"content":"    }"},{"type":"DELETE","lineNumber":178,"oldContent":"    }"},{"type":"MODIFY","lineNumber":181,"content":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {","oldContent":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"INSERT","lineNumber":205,"content":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":206,"oldContent":"                            landmarkId = bestMatch.landmark.id,"},{"type":"MODIFY","lineNumber":210,"content":"                        )","oldContent":"                        )"},{"type":"DELETE","lineNumber":228,"oldContent":"        Utils.matToBitmap(mat, bitmap)"},{"type":"DELETE","lineNumber":229,"oldContent":"        val bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888)"},{"type":"INSERT","lineNumber":228,"content":"        }"},{"type":"INSERT","lineNumber":229,"content":"    }"},{"type":"DELETE","lineNumber":232,"oldContent":""},{"type":"DELETE","lineNumber":233,"oldContent":"    }"},{"type":"INSERT","lineNumber":232,"content":"     * Konvertiert OpenCV Mat zu Android Bitmap"},{"type":"INSERT","lineNumber":233,"content":"     */"},{"type":"INSERT","lineNumber":234,"content":"    private fun matToBitmap(mat: Mat): Bitmap {"},{"type":"INSERT","lineNumber":235,"content":"        val bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888)"},{"type":"DELETE","lineNumber":235,"oldContent":"        Utils.matToBitmap(mat, bitmap)"},{"type":"INSERT","lineNumber":237,"content":"        return bitmap"},{"type":"DELETE","lineNumber":237,"oldContent":"        }"},{"type":"DELETE","lineNumber":238,"oldContent":"            }"},{"type":"DELETE","lineNumber":270,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":271,"oldContent":"                    "},{"type":"INSERT","lineNumber":270,"content":"}"},{"type":"INSERT","lineNumber":271,"content":""}]},{"timestamp":1754231211119,"changes":[{"type":"MODIFY","lineNumber":18,"content":"import androidx.compose.runtime.collectAsState","oldContent":"import androidx.compose.runtime.livedata.observeAsState"},{"type":"INSERT","lineNumber":23,"content":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"MODIFY","lineNumber":57,"content":"                ARWalkingTheme {","oldContent":"                ArWalkingTheme {"},{"type":"MODIFY","lineNumber":82,"content":"        routeViewModel.initializeStorage(this)","oldContent":"        routeViewModel.initializeFeatureMapping(this)"},{"type":"DELETE","lineNumber":118,"oldContent":"        Utils.matToBitmap(mat, bitmap)"},{"type":"DELETE","lineNumber":119,"oldContent":"    private fun matToBitmap(mat: Mat): Bitmap {"},{"type":"DELETE","lineNumber":120,"oldContent":"     * Konvertiert OpenCV Mat zu Android Bitmap"},{"type":"DELETE","lineNumber":122,"oldContent":"                }"},{"type":"DELETE","lineNumber":123,"oldContent":"                        matchInfoText.text = \"Fehler beim Erfassen des Bildes\""},{"type":"DELETE","lineNumber":124,"oldContent":"                    Log.e(\"OpenCvCamera\", \"Fehler beim Erfassen des Trainings-Bildes: ${e.message}\")"},{"type":"DELETE","lineNumber":125,"oldContent":"                    "},{"type":"INSERT","lineNumber":120,"content":"    /**"},{"type":"INSERT","lineNumber":121,"content":"     * UI Setup für Feature-Mapping"},{"type":"INSERT","lineNumber":122,"content":"     */"},{"type":"INSERT","lineNumber":123,"content":"    private fun setupUI() {"},{"type":"INSERT","lineNumber":124,"content":"        captureButton.setOnClickListener {"},{"type":"INSERT","lineNumber":125,"content":"            captureTrainingImage()"},{"type":"INSERT","lineNumber":126,"content":"        }"},{"type":"DELETE","lineNumber":133,"oldContent":"                        runOnUiThread {"},{"type":"DELETE","lineNumber":134,"oldContent":"                        )"},{"type":"DELETE","lineNumber":135,"oldContent":"                            landmarkId = bestMatch.landmark.id,"},{"type":"DELETE","lineNumber":136,"oldContent":"                    routeViewModel.currentMatches.value.firstOrNull()?.let { bestMatch ->"},{"type":"DELETE","lineNumber":137,"oldContent":"                    "},{"type":"DELETE","lineNumber":138,"oldContent":"                    // Frame zu Bitmap konvertieren"},{"type":"DELETE","lineNumber":139,"oldContent":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":140,"oldContent":"    private fun captureTrainingImage() {"},{"type":"DELETE","lineNumber":141,"oldContent":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"INSERT","lineNumber":134,"content":"     * Beobachtet Feature-Matches vom ViewModel"},{"type":"INSERT","lineNumber":135,"content":"     */"},{"type":"INSERT","lineNumber":136,"content":"    private fun observeFeatureMatches() {"},{"type":"INSERT","lineNumber":137,"content":"        lifecycleScope.launch {"},{"type":"INSERT","lineNumber":138,"content":"            routeViewModel.currentMatches.collect { matches ->"},{"type":"INSERT","lineNumber":139,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":140,"content":"                    updateMatchInfo(matches)"},{"type":"INSERT","lineNumber":141,"content":"                }"},{"type":"INSERT","lineNumber":142,"content":"            }"},{"type":"INSERT","lineNumber":143,"content":"        }"},{"type":"DELETE","lineNumber":143,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"}"},{"type":"MODIFY","lineNumber":145,"content":"    ","oldContent":"    }"},{"type":"INSERT","lineNumber":146,"content":"    /**"},{"type":"MODIFY","lineNumber":151,"content":"        val matches by routeViewModel.currentMatches.collectAsState()","oldContent":"        val matches by routeViewModel.currentMatches.observeAsState(emptyList())"},{"type":"MODIFY","lineNumber":159,"content":"        val bestConfidence = matches.maxOfOrNull { match -> match.confidence } ?: 0f","oldContent":"        val bestConfidence = matches.maxOfOrNull { it.confidence } ?: 0f"},{"type":"INSERT","lineNumber":181,"content":"     */"},{"type":"DELETE","lineNumber":181,"oldContent":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"DELETE","lineNumber":203,"oldContent":"                    matchInfoText.text = info"},{"type":"MODIFY","lineNumber":204,"content":"                    // Aktuell bestes Match als Ziel-Landmark verwenden","oldContent":"                runOnUiThread {"},{"type":"INSERT","lineNumber":205,"content":"                    routeViewModel.currentMatches.value.firstOrNull()?.let { bestMatch ->"},{"type":"INSERT","lineNumber":207,"content":"                            context = this@OpenCvCameraActivity,"},{"type":"INSERT","lineNumber":211,"content":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":210,"oldContent":"                        )"},{"type":"INSERT","lineNumber":215,"content":"                            matchInfoText.text = \"Trainings-Bild für ${bestMatch.landmark.name} gesendet!\""},{"type":"INSERT","lineNumber":216,"content":"                        }"},{"type":"INSERT","lineNumber":217,"content":"                    } ?: run {"},{"type":"INSERT","lineNumber":218,"content":"                        runOnUiThread {"},{"type":"INSERT","lineNumber":219,"content":"                            matchInfoText.text = \"Kein Landmark zum Trainieren erkannt\""},{"type":"INSERT","lineNumber":220,"content":"                        }"},{"type":"DELETE","lineNumber":214,"oldContent":"                        append(\"${step.stepNumber}. ${step.instruction}\\n\")"},{"type":"DELETE","lineNumber":215,"oldContent":"                    route.steps.take(3).forEach { step ->"},{"type":"DELETE","lineNumber":217,"oldContent":"                    append(\"Schritte: ${route.steps.size}\\n\\n\")"},{"type":"DELETE","lineNumber":218,"oldContent":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"DELETE","lineNumber":219,"oldContent":"                    append(\"Navigation Route:\\n\")"},{"type":"DELETE","lineNumber":220,"oldContent":"                val info = buildString {"},{"type":"DELETE","lineNumber":221,"oldContent":"            routeViewModel.featureNavigationRoute.value?.let { route ->"},{"type":"DELETE","lineNumber":222,"oldContent":"        lifecycleScope.launch {"},{"type":"DELETE","lineNumber":223,"oldContent":"    private fun showNavigationInfo() {"},{"type":"DELETE","lineNumber":224,"oldContent":"     */"},{"type":"DELETE","lineNumber":225,"oldContent":"     * Zeigt Navigation-Informationen an"},{"type":"DELETE","lineNumber":226,"oldContent":"    /**"},{"type":"DELETE","lineNumber":227,"oldContent":"    "},{"type":"INSERT","lineNumber":223,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":224,"content":"                    Log.e(\"OpenCvCamera\", \"Fehler beim Erfassen des Trainings-Bildes: ${e.message}\")"},{"type":"INSERT","lineNumber":225,"content":"                    runOnUiThread {"},{"type":"INSERT","lineNumber":226,"content":"                        matchInfoText.text = \"Fehler beim Erfassen des Bildes\""},{"type":"INSERT","lineNumber":227,"content":"                    }"},{"type":"INSERT","lineNumber":228,"content":"                }"},{"type":"INSERT","lineNumber":229,"content":"            }"},{"type":"DELETE","lineNumber":230,"oldContent":"    }"},{"type":"DELETE","lineNumber":231,"oldContent":"        }"},{"type":"INSERT","lineNumber":232,"content":"    "},{"type":"INSERT","lineNumber":233,"content":"    /**"},{"type":"DELETE","lineNumber":235,"oldContent":"                    matchInfoText.text = \"Keine Navigation verfügbar\""},{"type":"DELETE","lineNumber":237,"oldContent":"            } ?: run {"},{"type":"INSERT","lineNumber":238,"content":"        Utils.matToBitmap(mat, bitmap)"},{"type":"DELETE","lineNumber":239,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":240,"oldContent":"                }"},{"type":"DELETE","lineNumber":241,"oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"DELETE","lineNumber":242,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"INSERT","lineNumber":240,"content":"    }"},{"type":"INSERT","lineNumber":241,"content":"    "},{"type":"INSERT","lineNumber":242,"content":"    /**"},{"type":"INSERT","lineNumber":243,"content":"     * Zeigt Navigation-Informationen an"},{"type":"INSERT","lineNumber":244,"content":"     */"},{"type":"INSERT","lineNumber":245,"content":"    private fun showNavigationInfo() {"},{"type":"INSERT","lineNumber":246,"content":"        lifecycleScope.launch {"},{"type":"INSERT","lineNumber":247,"content":"            routeViewModel.featureNavigationRoute.value?.let { route ->"},{"type":"INSERT","lineNumber":248,"content":"                val info = buildString {"},{"type":"INSERT","lineNumber":249,"content":"                    append(\"Navigation Route:\\n\")"},{"type":"INSERT","lineNumber":250,"content":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"INSERT","lineNumber":251,"content":"                    append(\"Schritte: ${route.steps.size}\\n\\n\")"},{"type":"DELETE","lineNumber":244,"oldContent":"                    }"},{"type":"DELETE","lineNumber":245,"oldContent":"                        append(\"${step.stepNumber}. ${step.instruction}\\n\")"},{"type":"DELETE","lineNumber":247,"oldContent":"                    "},{"type":"DELETE","lineNumber":248,"oldContent":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"DELETE","lineNumber":249,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":250,"oldContent":"                }"},{"type":"INSERT","lineNumber":254,"content":"                        append(\"${step.stepNumber}. ${step.instruction}\\n\")"},{"type":"DELETE","lineNumber":252,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":253,"oldContent":"                    }"},{"type":"DELETE","lineNumber":259,"oldContent":"                    "},{"type":"DELETE","lineNumber":260,"oldContent":"                    }"},{"type":"DELETE","lineNumber":261,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":262,"oldContent":"                    "},{"type":"DELETE","lineNumber":263,"oldContent":"                    }"},{"type":"DELETE","lineNumber":264,"oldContent":""},{"type":"INSERT","lineNumber":261,"content":"                "},{"type":"INSERT","lineNumber":262,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":263,"content":"                    matchInfoText.text = info"},{"type":"INSERT","lineNumber":264,"content":"                }"},{"type":"INSERT","lineNumber":265,"content":"            } ?: run {"},{"type":"INSERT","lineNumber":266,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":267,"content":"                    matchInfoText.text = \"Keine Navigation verfügbar\""},{"type":"INSERT","lineNumber":268,"content":"                }"},{"type":"INSERT","lineNumber":269,"content":"            }"},{"type":"INSERT","lineNumber":270,"content":"        }"},{"type":"INSERT","lineNumber":271,"content":"    }"},{"type":"INSERT","lineNumber":273,"content":""}]},{"timestamp":1754232011722,"changes":[{"type":"DELETE","lineNumber":57,"oldContent":"                ArWalkingTheme {"},{"type":"INSERT","lineNumber":58,"content":"                    ARInfoIslandOverlay()"},{"type":"DELETE","lineNumber":82,"oldContent":"        routeViewModel.initializeFeatureMapping(this)"},{"type":"INSERT","lineNumber":83,"content":"        "},{"type":"INSERT","lineNumber":119,"content":"    "},{"type":"DELETE","lineNumber":121,"oldContent":"                append(\"Erkannt: ${bestMatch.landmark.name}\\n\")"},{"type":"DELETE","lineNumber":143,"oldContent":"    "},{"type":"INSERT","lineNumber":144,"content":"    }"},{"type":"DELETE","lineNumber":151,"oldContent":"        val matches by routeViewModel.currentMatches.observeAsState(emptyList())"},{"type":"INSERT","lineNumber":152,"content":"        "},{"type":"MODIFY","lineNumber":160,"content":"        val isTracking = matches.isNotEmpty()","oldContent":"        val bestConfidence = matches.maxOfOrNull { it.confidence } ?: 0f"},{"type":"MODIFY","lineNumber":182,"content":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {","oldContent":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"DELETE","lineNumber":206,"oldContent":"                        routeViewModel.uploadTrainingImageToServer("},{"type":"DELETE","lineNumber":207,"oldContent":"                            landmarkId = bestMatch.landmark.id,"},{"type":"INSERT","lineNumber":206,"content":"                        // Speichere Trainings-Bild lokal"},{"type":"INSERT","lineNumber":207,"content":"                        routeViewModel.addLandmark("},{"type":"INSERT","lineNumber":210,"content":"                            landmarkId = bestMatch.landmark.id,"},{"type":"DELETE","lineNumber":211,"oldContent":"                        )"},{"type":"INSERT","lineNumber":213,"content":"                        )"},{"type":"DELETE","lineNumber":215,"oldContent":"}"},{"type":"DELETE","lineNumber":218,"oldContent":"            }"},{"type":"INSERT","lineNumber":222,"content":"                    }"},{"type":"INSERT","lineNumber":223,"content":"                    "},{"type":"DELETE","lineNumber":229,"oldContent":"        }"},{"type":"INSERT","lineNumber":231,"content":"        }"},{"type":"DELETE","lineNumber":233,"oldContent":"     * Konvertiert OpenCV Mat zu Android Bitmap"},{"type":"INSERT","lineNumber":235,"content":"     * Konvertiert OpenCV Mat zu Android Bitmap"},{"type":"DELETE","lineNumber":244,"oldContent":"                    "},{"type":"DELETE","lineNumber":248,"oldContent":"                    "},{"type":"DELETE","lineNumber":254,"oldContent":"                    if (route.steps.size > 3) {"},{"type":"INSERT","lineNumber":253,"content":"                    "},{"type":"INSERT","lineNumber":254,"content":"                    route.steps.take(3).forEach { step ->"},{"type":"MODIFY","lineNumber":256,"content":"                    }","oldContent":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":257,"content":"                    "},{"type":"INSERT","lineNumber":259,"content":"                        append(\"... und ${route.steps.size - 3} weitere Schritte\")"},{"type":"INSERT","lineNumber":260,"content":"                    }"},{"type":"DELETE","lineNumber":259,"oldContent":""},{"type":"DELETE","lineNumber":260,"oldContent":"}"},{"type":"INSERT","lineNumber":268,"content":"                    matchInfoText.text = \"Keine Navigation verfügbar\""},{"type":"INSERT","lineNumber":269,"content":"                }"},{"type":"INSERT","lineNumber":270,"content":"            }"},{"type":"INSERT","lineNumber":271,"content":"        }"},{"type":"INSERT","lineNumber":272,"content":"    }"},{"type":"INSERT","lineNumber":273,"content":"}"},{"type":"INSERT","lineNumber":274,"content":""}]},{"timestamp":1754321570638,"changes":[{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.foundation.layout.padding"},{"type":"INSERT","lineNumber":22,"content":"import androidx.compose.ui.Alignment"},{"type":"INSERT","lineNumber":23,"content":"import androidx.compose.ui.Modifier"},{"type":"INSERT","lineNumber":24,"content":"import androidx.compose.ui.unit.dp"},{"type":"INSERT","lineNumber":25,"content":"import com.example.arwalking.FeatureMatchResult"},{"type":"INSERT","lineNumber":26,"content":"import com.example.arwalking.RouteViewModel"},{"type":"INSERT","lineNumber":30,"content":"import com.example.arwalking.components.SnapchatStyleAR3DArrow"},{"type":"INSERT","lineNumber":31,"content":"import com.example.arwalking.components.LandmarkDebugOverlay"},{"type":"INSERT","lineNumber":32,"content":"import com.example.arwalking.components.CompactLandmarkDebugInfo"},{"type":"INSERT","lineNumber":52,"content":"    "},{"type":"INSERT","lineNumber":53,"content":"    // Kamera-Parameter für AR-Tracking"},{"type":"INSERT","lineNumber":54,"content":"    private var screenWidth = 0f"},{"type":"INSERT","lineNumber":55,"content":"    private var screenHeight = 0f"},{"type":"INSERT","lineNumber":56,"content":"    private var cameraRotation = 0f"},{"type":"INSERT","lineNumber":57,"content":"    private var deviceOrientation = 0f"},{"type":"DELETE","lineNumber":57,"oldContent":"                    ARInfoIslandOverlay()"},{"type":"INSERT","lineNumber":75,"content":"                    AROverlayContent()"},{"type":"DELETE","lineNumber":82,"oldContent":"        "},{"type":"INSERT","lineNumber":100,"content":"        "},{"type":"DELETE","lineNumber":100,"oldContent":"    override fun onCameraViewStarted(width: Int, height: Int) {}"},{"type":"INSERT","lineNumber":117,"content":"    override fun onCameraViewStarted(width: Int, height: Int) {"},{"type":"INSERT","lineNumber":118,"content":"        screenWidth = width.toFloat()"},{"type":"INSERT","lineNumber":119,"content":"        screenHeight = height.toFloat()"},{"type":"INSERT","lineNumber":120,"content":"        Log.d(\"OpenCvCamera\", \"Kamera gestartet: ${width}x${height}\")"},{"type":"INSERT","lineNumber":121,"content":"    }"},{"type":"DELETE","lineNumber":109,"oldContent":""},{"type":"DELETE","lineNumber":110,"oldContent":"        val output = Mat()"},{"type":"INSERT","lineNumber":130,"content":"        routeViewModel.processFrameForFeatureMatching(frame)"},{"type":"INSERT","lineNumber":131,"content":"        "},{"type":"DELETE","lineNumber":115,"oldContent":"                    routeViewModel.currentMatches.value.firstOrNull()?.let { bestMatch ->"},{"type":"INSERT","lineNumber":136,"content":"    override fun onDestroy() {"},{"type":"DELETE","lineNumber":124,"oldContent":"        captureButton.setOnClickListener {"},{"type":"DELETE","lineNumber":125,"oldContent":"            captureTrainingImage()"},{"type":"DELETE","lineNumber":126,"oldContent":"        }"},{"type":"INSERT","lineNumber":145,"content":"        // Training functionality removed"},{"type":"DELETE","lineNumber":143,"oldContent":"    }"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"DELETE","lineNumber":147,"oldContent":"     * AR Info Island Overlay Composable"},{"type":"INSERT","lineNumber":166,"content":"     * Vollständiges AR Overlay mit Info Island, 3D-Pfeil und Debug-Info"},{"type":"DELETE","lineNumber":150,"oldContent":"    private fun ARInfoIslandOverlay() {"},{"type":"DELETE","lineNumber":151,"oldContent":"        "},{"type":"INSERT","lineNumber":169,"content":"    private fun AROverlayContent() {"},{"type":"INSERT","lineNumber":171,"content":"        val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()"},{"type":"INSERT","lineNumber":172,"content":"        val currentStep by routeViewModel.currentNavigationStep.collectAsState()"},{"type":"INSERT","lineNumber":173,"content":"        "},{"type":"INSERT","lineNumber":174,"content":"        // Debug-Informationen für Landmark-Loading"},{"type":"INSERT","lineNumber":175,"content":"        var requiredLandmarkIds by remember { mutableStateOf<List<String>>(emptyList()) }"},{"type":"INSERT","lineNumber":176,"content":"        var loadedLandmarkIds by remember { mutableStateOf<List<String>>(emptyList()) }"},{"type":"INSERT","lineNumber":177,"content":"        var showDebugOverlay by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":178,"content":"        "},{"type":"INSERT","lineNumber":184,"content":"        // Update debug info"},{"type":"INSERT","lineNumber":185,"content":"        LaunchedEffect(Unit) {"},{"type":"INSERT","lineNumber":186,"content":"            requiredLandmarkIds = routeViewModel.getRequiredLandmarkIds()"},{"type":"INSERT","lineNumber":187,"content":"            loadedLandmarkIds = routeViewModel.getCurrentlyLoadedLandmarkIds()"},{"type":"INSERT","lineNumber":188,"content":"        }"},{"type":"INSERT","lineNumber":189,"content":"        "},{"type":"DELETE","lineNumber":159,"oldContent":"        val bestConfidence = matches.maxOfOrNull { it.confidence } ?: 0f"},{"type":"INSERT","lineNumber":191,"content":"        val bestConfidence = matches.maxOfOrNull { match -> match.confidence } ?: 0f"},{"type":"DELETE","lineNumber":170,"oldContent":"        // Erweiterte Info Island mit mehr Details"},{"type":"DELETE","lineNumber":171,"oldContent":"        ExpandedARInfoIsland("},{"type":"DELETE","lineNumber":172,"oldContent":"            scanStatus = arStatus,"},{"type":"DELETE","lineNumber":173,"oldContent":"            landmarkCount = landmarkCount,"},{"type":"DELETE","lineNumber":174,"oldContent":"            confidence = bestConfidence,"},{"type":"DELETE","lineNumber":175,"oldContent":"            isVisible = true"},{"type":"DELETE","lineNumber":176,"oldContent":"        )"},{"type":"INSERT","lineNumber":202,"content":"        // Vollbild-Container für AR-Overlays"},{"type":"INSERT","lineNumber":203,"content":"        Box(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":204,"content":"            "},{"type":"INSERT","lineNumber":205,"content":"            // 3D-Pfeil Overlay (Hintergrund)"},{"type":"INSERT","lineNumber":206,"content":"            if (screenWidth > 0 && screenHeight > 0) {"},{"type":"INSERT","lineNumber":207,"content":"                SnapchatStyleAR3DArrow("},{"type":"INSERT","lineNumber":208,"content":"                    matches = matches,"},{"type":"INSERT","lineNumber":209,"content":"                    isFeatureMappingEnabled = isFeatureMappingEnabled,"},{"type":"INSERT","lineNumber":210,"content":"                    screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":211,"content":"                    screenHeight = screenHeight,"},{"type":"INSERT","lineNumber":212,"content":"                    cameraRotation = cameraRotation,"},{"type":"INSERT","lineNumber":213,"content":"                    deviceOrientation = deviceOrientation,"},{"type":"INSERT","lineNumber":214,"content":"                    modifier = Modifier.fillMaxSize()"},{"type":"INSERT","lineNumber":215,"content":"                )"},{"type":"INSERT","lineNumber":216,"content":"            }"},{"type":"INSERT","lineNumber":217,"content":"            "},{"type":"INSERT","lineNumber":218,"content":"            // Info Island (Vordergrund, oben)"},{"type":"INSERT","lineNumber":219,"content":"            ExpandedARInfoIsland("},{"type":"INSERT","lineNumber":220,"content":"                scanStatus = arStatus,"},{"type":"INSERT","lineNumber":221,"content":"                landmarkCount = landmarkCount,"},{"type":"INSERT","lineNumber":222,"content":"                confidence = bestConfidence,"},{"type":"INSERT","lineNumber":223,"content":"                isVisible = true,"},{"type":"INSERT","lineNumber":224,"content":"                modifier = Modifier.align(Alignment.TopCenter)"},{"type":"INSERT","lineNumber":225,"content":"            )"},{"type":"INSERT","lineNumber":226,"content":"            "},{"type":"INSERT","lineNumber":227,"content":"            // Kompakte Debug-Info (oben rechts)"},{"type":"INSERT","lineNumber":228,"content":"            val matchingCount = requiredLandmarkIds.intersect(loadedLandmarkIds.toSet()).size"},{"type":"INSERT","lineNumber":229,"content":"            CompactLandmarkDebugInfo("},{"type":"INSERT","lineNumber":230,"content":"                requiredCount = requiredLandmarkIds.size,"},{"type":"INSERT","lineNumber":231,"content":"                loadedCount = loadedLandmarkIds.size,"},{"type":"INSERT","lineNumber":232,"content":"                matchingCount = matchingCount,"},{"type":"INSERT","lineNumber":233,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":234,"content":"                    .align(Alignment.TopEnd)"},{"type":"INSERT","lineNumber":235,"content":"                    .padding(16.dp)"},{"type":"INSERT","lineNumber":236,"content":"            )"},{"type":"INSERT","lineNumber":237,"content":"            "},{"type":"INSERT","lineNumber":238,"content":"            // Vollständige Debug-Info (unten, nur bei Bedarf)"},{"type":"INSERT","lineNumber":239,"content":"            if (showDebugOverlay) {"},{"type":"INSERT","lineNumber":240,"content":"                LandmarkDebugOverlay("},{"type":"INSERT","lineNumber":241,"content":"                    requiredLandmarkIds = requiredLandmarkIds,"},{"type":"INSERT","lineNumber":242,"content":"                    loadedLandmarkIds = loadedLandmarkIds,"},{"type":"INSERT","lineNumber":243,"content":"                    isVisible = showDebugOverlay,"},{"type":"INSERT","lineNumber":244,"content":"                    modifier = Modifier.align(Alignment.BottomCenter)"},{"type":"INSERT","lineNumber":245,"content":"                )"},{"type":"INSERT","lineNumber":246,"content":"            }"},{"type":"INSERT","lineNumber":247,"content":"        }"},{"type":"INSERT","lineNumber":252,"content":"     */"},{"type":"DELETE","lineNumber":182,"oldContent":"    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {"},{"type":"DELETE","lineNumber":190,"oldContent":"            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark.name} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":261,"content":"            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark?.name ?: \"Unknown\"} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":194,"oldContent":"    /**"},{"type":"DELETE","lineNumber":195,"oldContent":"     * Erfasst Trainings-Bild für aktuelles Landmark"},{"type":"DELETE","lineNumber":196,"oldContent":"     */"},{"type":"DELETE","lineNumber":197,"oldContent":"    private fun captureTrainingImage() {"},{"type":"DELETE","lineNumber":198,"oldContent":"        currentFrame?.let { frame ->"},{"type":"DELETE","lineNumber":199,"oldContent":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":200,"oldContent":"                try {"},{"type":"DELETE","lineNumber":201,"oldContent":"                    // Frame zu Bitmap konvertieren"},{"type":"DELETE","lineNumber":202,"oldContent":"                    val bitmap = matToBitmap(frame)"},{"type":"DELETE","lineNumber":203,"oldContent":"                    "},{"type":"DELETE","lineNumber":204,"oldContent":"                    // Aktuell bestes Match als Ziel-Landmark verwenden"},{"type":"DELETE","lineNumber":205,"oldContent":"                    routeViewModel.currentMatches.value.firstOrNull()?.let { bestMatch ->"},{"type":"DELETE","lineNumber":206,"oldContent":"                        // Speichere Trainings-Bild lokal"},{"type":"DELETE","lineNumber":207,"oldContent":"                        routeViewModel.addLandmark("},{"type":"DELETE","lineNumber":208,"oldContent":"                            context = this@OpenCvCameraActivity,"},{"type":"DELETE","lineNumber":209,"oldContent":"                            bitmap = bitmap,"},{"type":"DELETE","lineNumber":210,"oldContent":"                            landmarkId = bestMatch.landmark.id,"},{"type":"DELETE","lineNumber":211,"oldContent":"                            landmarkName = bestMatch.landmark.name,"},{"type":"DELETE","lineNumber":212,"oldContent":"                            description = bestMatch.landmark.description"},{"type":"DELETE","lineNumber":213,"oldContent":"                        )"},{"type":"DELETE","lineNumber":214,"oldContent":"                        "},{"type":"DELETE","lineNumber":215,"oldContent":"                        runOnUiThread {"},{"type":"DELETE","lineNumber":216,"oldContent":"                            matchInfoText.text = \"Trainings-Bild für ${bestMatch.landmark.name} gesendet!\""},{"type":"DELETE","lineNumber":217,"oldContent":"                        }"},{"type":"DELETE","lineNumber":218,"oldContent":"                    } ?: run {"},{"type":"DELETE","lineNumber":219,"oldContent":"                        runOnUiThread {"},{"type":"DELETE","lineNumber":220,"oldContent":"                            matchInfoText.text = \"Kein Landmark zum Trainieren erkannt\""},{"type":"DELETE","lineNumber":221,"oldContent":"                    }"},{"type":"DELETE","lineNumber":222,"oldContent":"                        }"},{"type":"DELETE","lineNumber":223,"oldContent":"                    "},{"type":"DELETE","lineNumber":224,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":225,"oldContent":"                    Log.e(\"OpenCvCamera\", \"Fehler beim Erfassen des Trainings-Bildes: ${e.message}\")"},{"type":"DELETE","lineNumber":226,"oldContent":"                    runOnUiThread {"},{"type":"DELETE","lineNumber":227,"oldContent":"                        matchInfoText.text = \"Fehler beim Erfassen des Bildes\""},{"type":"DELETE","lineNumber":228,"oldContent":"                    }"},{"type":"DELETE","lineNumber":229,"oldContent":"                }"},{"type":"DELETE","lineNumber":230,"oldContent":"            }"},{"type":"DELETE","lineNumber":231,"oldContent":"        }"},{"type":"DELETE","lineNumber":232,"oldContent":"    }"},{"type":"INSERT","lineNumber":265,"content":""},{"type":"DELETE","lineNumber":250,"oldContent":"                    append(\"Navigation Route:\\n\")"},{"type":"DELETE","lineNumber":251,"oldContent":"                    append(\"Gesamtlänge: ${route.totalLength.toInt()}m\\n\")"},{"type":"DELETE","lineNumber":252,"oldContent":"                    "},{"type":"INSERT","lineNumber":283,"content":"                    append(\"Navigation Route: ${route.name}\\n\")"},{"type":"INSERT","lineNumber":285,"content":"                    "},{"type":"DELETE","lineNumber":258,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":259,"oldContent":"                "},{"type":"INSERT","lineNumber":290,"content":"                    if (route.steps.size > 3) {"},{"type":"DELETE","lineNumber":262,"oldContent":"    }"},{"type":"DELETE","lineNumber":263,"oldContent":"        }"},{"type":"DELETE","lineNumber":264,"oldContent":"            }"},{"type":"INSERT","lineNumber":294,"content":"                "},{"type":"INSERT","lineNumber":295,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":296,"content":"                    matchInfoText.text = info"},{"type":"INSERT","lineNumber":297,"content":"                }"},{"type":"INSERT","lineNumber":298,"content":"            } ?: run {"},{"type":"INSERT","lineNumber":299,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":301,"content":"                }"},{"type":"INSERT","lineNumber":302,"content":"            }"},{"type":"INSERT","lineNumber":303,"content":"        }"},{"type":"INSERT","lineNumber":304,"content":"    }"},{"type":"INSERT","lineNumber":305,"content":"}"},{"type":"INSERT","lineNumber":306,"content":""}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ARScanStatus.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ARScanStatus.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\n\nenum class ARScanState {\n    SCANNING,\n    FOUND,\n    LOST,\n    IDLE\n}\n\n@Composable\nfun rememberARScanStatus(): ARScanState {\n    var scanState by remember { mutableStateOf(ARScanState.SCANNING) }\n    \n    // Simulate scanning behavior\n    LaunchedEffect(Unit) {\n        kotlinx.coroutines.delay(2000)\n        scanState = ARScanState.FOUND\n        kotlinx.coroutines.delay(3000)\n        scanState = ARScanState.LOST\n        kotlinx.coroutines.delay(1000)\n        scanState = ARScanState.SCANNING\n    }\n    \n    return scanState\n}\n\n@Composable\nfun ARScanStatus(\n    scanState: ARScanState,\n    modifier: Modifier = Modifier\n) {\n    val (backgroundColor, textColor, statusText) = when (scanState) {\n        ARScanState.SCANNING -> Triple(\n            Color.Blue.copy(alpha = 0.8f),\n            Color.White,\n            \"Scanning...\"\n        )\n        ARScanState.FOUND -> Triple(\n            Color.Green.copy(alpha = 0.8f),\n            Color.White,\n            \"Landmark Found\"\n        )\n        ARScanState.LOST -> Triple(\n            Color(0xFFFF9800).copy(alpha = 0.8f),\n            Color.White,\n            \"Landmark Lost\"\n        )\n        ARScanState.IDLE -> Triple(\n            Color.Gray.copy(alpha = 0.8f),\n            Color.White,\n            \"Ready\"\n        )\n    }\n    \n    Box(\n        modifier = modifier\n            .background(\n                color = backgroundColor,\n                shape = RoundedCornerShape(8.dp)\n            )\n            .padding(horizontal = 12.dp, vertical = 6.dp)\n    ) {\n        Text(\n            text = statusText,\n            color = textColor,\n            fontSize = 12.sp,\n            fontWeight = FontWeight.Medium\n        )\n    }\n}","baseTimestamp":1754322204999},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/Animated3DArrowOverlay.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/Animated3DArrowOverlay.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.core.*\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.*\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.drawscope.rotate\nimport androidx.compose.ui.unit.dp\nimport kotlin.math.*\n\n@Composable\nfun Animated3DArrowOverlay(\n    direction: Float = 0f, // Direction in degrees\n    distance: Float = 100f, // Distance to target\n    modifier: Modifier = Modifier\n) {\n    // Animation for pulsing effect\n    val infiniteTransition = rememberInfiniteTransition(label = \"arrow_animation\")\n    val pulseScale by infiniteTransition.animateFloat(\n        initialValue = 0.8f,\n        targetValue = 1.2f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(1000, easing = EaseInOutSine),\n            repeatMode = RepeatMode.Reverse\n        ),\n        label = \"pulse_scale\"\n    )\n    \n    // Animation for rotation\n    val rotationAnimation by infiniteTransition.animateFloat(\n        initialValue = 0f,\n        targetValue = 360f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(4000, easing = LinearEasing),\n            repeatMode = RepeatMode.Restart\n        ),\n        label = \"rotation\"\n    )\n    \n    Canvas(\n        modifier = modifier.fillMaxSize()\n    ) {\n        val centerX = size.width / 2\n        val centerY = size.height / 2\n        val center = Offset(centerX, centerY)\n        \n        // Draw 3D-style arrow\n        draw3DArrow(\n            center = center,\n            direction = direction,\n            scale = pulseScale,\n            rotation = rotationAnimation,\n            distance = distance\n        )\n    }\n}\n\nprivate fun DrawScope.draw3DArrow(\n    center: Offset,\n    direction: Float,\n    scale: Float,\n    rotation: Float,\n    distance: Float\n) {\n    val arrowSize = 60.dp.toPx() * scale\n    val arrowColor = Color(0xFF4CAF50)\n    val shadowColor = Color.Black.copy(alpha = 0.3f)\n    \n    rotate(degrees = direction + rotation, pivot = center) {\n        // Draw shadow (offset slightly)\n        val shadowOffset = Offset(center.x + 4, center.y + 4)\n        drawArrowShape(shadowOffset, arrowSize, shadowColor)\n        \n        // Draw main arrow\n        drawArrowShape(center, arrowSize, arrowColor)\n        \n        // Draw highlight for 3D effect\n        val highlightColor = arrowColor.copy(alpha = 0.7f)\n        drawArrowShape(\n            center = Offset(center.x - 2, center.y - 2),\n            size = arrowSize * 0.8f,\n            color = highlightColor\n        )\n    }\n    \n    // Draw distance indicator\n    if (distance > 0) {\n        val distanceText = \"${distance.toInt()}m\"\n        // Note: In a real implementation, you'd use drawText with proper text measurement\n        // For now, we'll draw a simple indicator circle\n        drawCircle(\n            color = Color.White.copy(alpha = 0.8f),\n            radius = 20.dp.toPx(),\n            center = Offset(center.x, center.y + arrowSize + 40.dp.toPx())\n        )\n    }\n}\n\nprivate fun DrawScope.drawArrowShape(\n    center: Offset,\n    size: Float,\n    color: Color\n) {\n    val path = Path().apply {\n        // Arrow head\n        moveTo(center.x, center.y - size / 2)\n        lineTo(center.x - size / 4, center.y - size / 4)\n        lineTo(center.x - size / 8, center.y - size / 4)\n        \n        // Arrow body\n        lineTo(center.x - size / 8, center.y + size / 2)\n        lineTo(center.x + size / 8, center.y + size / 2)\n        lineTo(center.x + size / 8, center.y - size / 4)\n        lineTo(center.x + size / 4, center.y - size / 4)\n        \n        close()\n    }\n    \n    drawPath(\n        path = path,\n        color = color\n    )\n}","baseTimestamp":1754322210452},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/FeatureMappingStatusIndicator.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/FeatureMappingStatusIndicator.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.core.*\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\n\nenum class FeatureMappingStatus {\n    DISABLED,\n    INITIALIZING,\n    ACTIVE,\n    PROCESSING,\n    ERROR\n}\n\n@Composable\nfun FeatureMappingStatusIndicator(\n    status: FeatureMappingStatus,\n    matchCount: Int = 0,\n    modifier: Modifier = Modifier\n) {\n    val (backgroundColor, indicatorColor, statusText) = when (status) {\n        FeatureMappingStatus.DISABLED -> Triple(\n            Color.Gray.copy(alpha = 0.8f),\n            Color.Gray,\n            \"Feature Mapping Disabled\"\n        )\n        FeatureMappingStatus.INITIALIZING -> Triple(\n            Color.Blue.copy(alpha = 0.8f),\n            Color.Blue,\n            \"Initializing...\"\n        )\n        FeatureMappingStatus.ACTIVE -> Triple(\n            Color.Green.copy(alpha = 0.8f),\n            Color.Green,\n            \"Active ($matchCount matches)\"\n        )\n        FeatureMappingStatus.PROCESSING -> Triple(\n            Color(0xFFFF9800).copy(alpha = 0.8f),\n            Color(0xFFFF9800),\n            \"Processing...\"\n        )\n        FeatureMappingStatus.ERROR -> Triple(\n            Color.Red.copy(alpha = 0.8f),\n            Color.Red,\n            \"Error\"\n        )\n    }\n    \n    // Pulsing animation for active states\n    val infiniteTransition = rememberInfiniteTransition(label = \"status_animation\")\n    val pulseAlpha by infiniteTransition.animateFloat(\n        initialValue = 0.5f,\n        targetValue = 1.0f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(1000, easing = EaseInOutSine),\n            repeatMode = RepeatMode.Reverse\n        ),\n        label = \"pulse_alpha\"\n    )\n    \n    Row(\n        modifier = modifier\n            .background(\n                color = backgroundColor,\n                shape = RoundedCornerShape(12.dp)\n            )\n            .padding(horizontal = 12.dp, vertical = 8.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.spacedBy(8.dp)\n    ) {\n        // Status indicator dot\n        Box(\n            modifier = Modifier\n                .size(8.dp)\n                .clip(CircleShape)\n                .background(\n                    color = if (status == FeatureMappingStatus.ACTIVE || status == FeatureMappingStatus.PROCESSING) {\n                        indicatorColor.copy(alpha = pulseAlpha)\n                    } else {\n                        indicatorColor\n                    }\n                )\n        )\n        \n        // Status text\n        Text(\n            text = statusText,\n            color = Color.White,\n            fontSize = 11.sp,\n            fontWeight = FontWeight.Medium\n        )\n    }\n}","baseTimestamp":1754322215533,"deltas":[{"timestamp":1754322240432,"changes":[{"type":"MODIFY","lineNumber":31,"content":"    val (backgroundColorValue, indicatorColor, statusText) = when (status) {","oldContent":"    val (backgroundColor, indicatorColor, statusText) = when (status) {"}]},{"timestamp":1754322246679,"changes":[{"type":"MODIFY","lineNumber":74,"content":"                color = backgroundColorValue,","oldContent":"                color = backgroundColor,"}]}]}}}