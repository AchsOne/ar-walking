{"snapshots":{"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/MainActivity.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/MainActivity.kt","baseContent":"package com.example.arwalking\n\nimport androidx.activity.result.ActivityResultLauncher\nimport androidx.core.content.ContextCompat\nimport androidx.activity.result.contract.ActivityResultContracts\nimport android.provider.MediaStore\nimport android.Manifest\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.material3.MaterialTheme\nimport com.example.arwalking.screens.CameraNavigation\nimport androidx.compose.material3.Surface\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.CompositionLocalProvider\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport com.example.arwalking.screens.HomeScreen\nimport com.example.arwalking.screens.LocalNavController\nimport com.example.arwalking.ui.theme.ARWalkingTheme\nimport java.net.URLDecoder\nimport java.nio.charset.StandardCharsets\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.lifecycle.ViewModelProvider\n// OpenCV imports entfernt für Stub-Implementation\n\nclass MainActivity : ComponentActivity() {\n\n    private lateinit var routeViewModel: RouteViewModel\n\n\n    private val cameraPermissionLauncher: ActivityResultLauncher<String> =\n        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->\n            if (granted) {\n                openCamera()\n            }\n        }\n\n    private fun openCamera() {\n        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\n        if (intent.resolveActivity(packageManager) != null) {\n            startActivity(intent)\n        }\n    }\n\n    private fun checkCameraAndLaunch() {\n        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) ==\n            PackageManager.PERMISSION_GRANTED\n        ) {\n            openCamera()\n        } else {\n            cameraPermissionLauncher.launch(Manifest.permission.CAMERA)\n        }\n    }\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // OpenCV initialisieren (Stub für lokale Entwicklung)\n        try {\n            // Simuliere OpenCV Initialisierung\n            Log.i(\"MainActivity\", \"OpenCV Stub loaded successfully\")\n        } catch (e: Exception) {\n            Log.e(\"MainActivity\", \"OpenCV Stub initialization failed: ${e.message}\")\n            Toast.makeText(this, \"OpenCV initialization failed!\", Toast.LENGTH_LONG).show()\n            return\n        }\n\n\n\n\n        // ViewModel erstellen\n        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]\n\n        enableEdgeToEdge()\n        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt\n        setContent {\n            ARWalkingTheme {\n                Surface(\n                    modifier = Modifier.fillMaxSize(),\n                    color = MaterialTheme.colorScheme.background\n                ) {\n                    ARWalkingApp()\n                }\n            }\n        }\n        val navigationRoute = routeViewModel.loadNavigationRoute(this)\n        if (navigationRoute != null) {\n            // Objekt ist bereit für weitere Verwendung\n            routeViewModel.logNavigationRoute(navigationRoute)\n            // weitere verwendung von navigationRoute....\n\n\n        } else {\n            Log.e(\"MainActivity\", \"Fehler beim Laden der Route\")\n        }\n    }\n}\n\n@Composable\nfun ARWalkingApp() {\n    val navController = rememberNavController()\n\n    CompositionLocalProvider(LocalNavController provides navController) {\n        NavHost(\n            navController = navController,\n            startDestination = \"home\"\n        ) {\n            composable(\"home\") {\n                HomeScreen(navController = navController)\n            }\n            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->\n                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\"\n                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\"\n                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())\n                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())\n                CameraNavigation(\n                    destination = destination,\n                    startLocation = startLocation\n                )\n            }\n            composable(\"open_cv_camera_activity\") {\n                OpenCvCameraActivity();\n            }\n\n            // Hier können später weitere Screens hinzugefügt werden:\n            // composable(\"ar_view\") { ARScreen(navController = navController) }\n            // composable(\"settings\") { SettingsScreen(navController = navController) }\n        }\n    }\n}\n\n@Preview(showBackground = true)\n@Composable\nprivate fun ARWalkingAppPreview() {\n    ARWalkingTheme {\n        ARWalkingApp()\n    }\n}","baseTimestamp":1754049441966,"deltas":[{"timestamp":1754313796183,"changes":[{"type":"DELETE","lineNumber":68,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"DELETE","lineNumber":70,"oldContent":"            // Simuliere OpenCV Initialisierung"},{"type":"DELETE","lineNumber":71,"oldContent":"            Log.i(\"MainActivity\", \"OpenCV Stub loaded successfully\")"},{"type":"DELETE","lineNumber":72,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":73,"oldContent":"            Log.e(\"MainActivity\", \"OpenCV Stub initialization failed: ${e.message}\")"},{"type":"DELETE","lineNumber":74,"oldContent":"            Toast.makeText(this, \"OpenCV initialization failed!\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":75,"oldContent":"            return"},{"type":"DELETE","lineNumber":76,"oldContent":"        }"},{"type":"INSERT","lineNumber":69,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":"            // ViewModel erstellen"},{"type":"INSERT","lineNumber":72,"content":"            routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":74,"content":"            enableEdgeToEdge()"},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"INSERT","lineNumber":76,"content":"            // UI zuerst setzen"},{"type":"INSERT","lineNumber":77,"content":"            setContent {"},{"type":"INSERT","lineNumber":78,"content":"                ARWalkingTheme {"},{"type":"INSERT","lineNumber":79,"content":"                    Surface("},{"type":"INSERT","lineNumber":80,"content":"                        modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":81,"content":"                        color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":82,"content":"                    ) {"},{"type":"INSERT","lineNumber":83,"content":"                        ARWalkingApp()"},{"type":"INSERT","lineNumber":84,"content":"                    }"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"            // Initialisierung asynchron durchführen"},{"type":"INSERT","lineNumber":89,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":81,"oldContent":"        // ViewModel erstellen"},{"type":"DELETE","lineNumber":82,"oldContent":"        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":91,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":92,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":93,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":94,"content":"        }"},{"type":"INSERT","lineNumber":95,"content":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"        // Sofort Feature Mapping initialisieren"},{"type":"DELETE","lineNumber":85,"oldContent":"        Log.i(\"MainActivity\", \"Initialisiere Feature Mapping beim App-Start...\")"},{"type":"DELETE","lineNumber":86,"oldContent":"        routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":97,"content":"    private fun initializeAppAsync() {"},{"type":"INSERT","lineNumber":98,"content":"        try {"},{"type":"INSERT","lineNumber":99,"content":"            Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"INSERT","lineNumber":100,"content":"            "},{"type":"INSERT","lineNumber":101,"content":"            // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":102,"content":"            routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":88,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":89,"oldContent":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"DELETE","lineNumber":90,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":91,"oldContent":"            ARWalkingTheme {"},{"type":"DELETE","lineNumber":92,"oldContent":"                Surface("},{"type":"DELETE","lineNumber":93,"oldContent":"                    modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":94,"oldContent":"                    color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":95,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":96,"oldContent":"                    ARWalkingApp()"},{"type":"INSERT","lineNumber":104,"content":"            // Route laden (asynchron)"},{"type":"INSERT","lineNumber":105,"content":"            val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"INSERT","lineNumber":106,"content":"            if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":107,"content":"                routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":108,"content":"                routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":109,"content":"                "},{"type":"INSERT","lineNumber":110,"content":"                // System-Validierung nur im Debug-Modus"},{"type":"INSERT","lineNumber":111,"content":"                if (BuildConfig.DEBUG) {"},{"type":"INSERT","lineNumber":112,"content":"                    try {"},{"type":"INSERT","lineNumber":113,"content":"                        val systemValidator = SystemValidator(this)"},{"type":"INSERT","lineNumber":114,"content":"                        systemValidator.validateSystem(routeViewModel)"},{"type":"INSERT","lineNumber":115,"content":"                        systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"INSERT","lineNumber":116,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":117,"content":"                        Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":118,"content":"                    }"},{"type":"INSERT","lineNumber":120,"content":"            } else {"},{"type":"INSERT","lineNumber":121,"content":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":100,"oldContent":"        val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":101,"oldContent":"        if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":102,"oldContent":"            // Objekt ist bereit für weitere Verwendung"},{"type":"DELETE","lineNumber":103,"oldContent":"            routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":105,"oldContent":"            // Feature Mapping ist bereits initialisiert, aktiviere es sofort"},{"type":"DELETE","lineNumber":106,"oldContent":"            routeViewModel.enableStorageSystemImmediately(this)"},{"type":"DELETE","lineNumber":107,"oldContent":"            "},{"type":"DELETE","lineNumber":108,"oldContent":"            // System-Validierung durchführen (nur im Debug-Modus)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":111,"oldContent":"                systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                // Simuliere Feature-Matching für Testzwecke"},{"type":"DELETE","lineNumber":114,"oldContent":"                systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":115,"oldContent":"            }"},{"type":"DELETE","lineNumber":116,"oldContent":"            "},{"type":"DELETE","lineNumber":117,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":118,"oldContent":"            Log.e(\"MainActivity\", \"Fehler beim Laden der Route\")"},{"type":"INSERT","lineNumber":124,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":125,"content":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":127,"oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":128,"oldContent":"        NavHost("},{"type":"DELETE","lineNumber":129,"oldContent":"            navController = navController,"},{"type":"DELETE","lineNumber":130,"oldContent":"            startDestination = \"home\""},{"type":"DELETE","lineNumber":131,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":132,"oldContent":"            composable(\"home\") {"},{"type":"DELETE","lineNumber":133,"oldContent":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":134,"content":"    try {"},{"type":"INSERT","lineNumber":135,"content":"        CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":136,"content":"            NavHost("},{"type":"INSERT","lineNumber":137,"content":"                navController = navController,"},{"type":"INSERT","lineNumber":138,"content":"                startDestination = \"home\""},{"type":"INSERT","lineNumber":139,"content":"            ) {"},{"type":"INSERT","lineNumber":140,"content":"                composable(\"home\") {"},{"type":"INSERT","lineNumber":141,"content":"                    try {"},{"type":"INSERT","lineNumber":142,"content":"                        HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":143,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":144,"content":"                        Log.e(\"ARWalkingApp\", \"Error in HomeScreen: ${e.message}\", e)"},{"type":"INSERT","lineNumber":145,"content":"                        // Fallback UI"},{"type":"INSERT","lineNumber":146,"content":"                        Box("},{"type":"INSERT","lineNumber":147,"content":"                            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":148,"content":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":149,"content":"                        ) {"},{"type":"INSERT","lineNumber":150,"content":"                            Text("},{"type":"INSERT","lineNumber":151,"content":"                                text = \"ArWalking\\nLoading...\","},{"type":"INSERT","lineNumber":152,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":153,"content":"                                style = MaterialTheme.typography.headlineMedium"},{"type":"INSERT","lineNumber":154,"content":"                            )"},{"type":"INSERT","lineNumber":155,"content":"                        }"},{"type":"INSERT","lineNumber":156,"content":"                    }"},{"type":"INSERT","lineNumber":157,"content":"                }"},{"type":"INSERT","lineNumber":158,"content":"                composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":159,"content":"                    try {"},{"type":"INSERT","lineNumber":160,"content":"                        val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":161,"content":"                        val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":162,"content":"                        val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":163,"content":"                        val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":164,"content":"                        CameraNavigation("},{"type":"INSERT","lineNumber":165,"content":"                            destination = destination,"},{"type":"INSERT","lineNumber":166,"content":"                            startLocation = startLocation"},{"type":"INSERT","lineNumber":167,"content":"                        )"},{"type":"INSERT","lineNumber":168,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":169,"content":"                        Log.e(\"ARWalkingApp\", \"Error in CameraNavigation: ${e.message}\", e)"},{"type":"INSERT","lineNumber":170,"content":"                        // Fallback UI"},{"type":"INSERT","lineNumber":171,"content":"                        Box("},{"type":"INSERT","lineNumber":172,"content":"                            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":173,"content":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":174,"content":"                        ) {"},{"type":"INSERT","lineNumber":175,"content":"                            Text("},{"type":"INSERT","lineNumber":176,"content":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":177,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":178,"content":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"INSERT","lineNumber":179,"content":"                            )"},{"type":"INSERT","lineNumber":180,"content":"                        }"},{"type":"INSERT","lineNumber":181,"content":"                    }"},{"type":"INSERT","lineNumber":182,"content":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":136,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":137,"oldContent":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":138,"oldContent":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":139,"oldContent":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":140,"oldContent":"                CameraNavigation("},{"type":"DELETE","lineNumber":141,"oldContent":"                    destination = destination,"},{"type":"DELETE","lineNumber":142,"oldContent":"                    startLocation = startLocation"},{"type":"DELETE","lineNumber":143,"oldContent":"                )"},{"type":"DELETE","lineNumber":144,"oldContent":"            }"},{"type":"DELETE","lineNumber":145,"oldContent":""},{"type":"DELETE","lineNumber":147,"oldContent":""},{"type":"DELETE","lineNumber":148,"oldContent":""},{"type":"DELETE","lineNumber":149,"oldContent":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"DELETE","lineNumber":150,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"DELETE","lineNumber":151,"oldContent":"@Preview(showBackground = true)"},{"type":"DELETE","lineNumber":152,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":153,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"INSERT","lineNumber":185,"content":"    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":186,"content":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"INSERT","lineNumber":187,"content":"        // Minimal fallback UI"},{"type":"INSERT","lineNumber":188,"content":"        Box("},{"type":"INSERT","lineNumber":189,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":190,"content":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":191,"content":"        ) {"},{"type":"INSERT","lineNumber":192,"content":"            Text("},{"type":"INSERT","lineNumber":193,"content":"                text = \"ArWalking\\nStarting...\","},{"type":"INSERT","lineNumber":194,"content":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"INSERT","lineNumber":195,"content":"            )"},{"type":"INSERT","lineNumber":198,"content":"}"}]},{"timestamp":1754313804477,"changes":[{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":68,"oldContent":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":75,"content":""},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"DELETE","lineNumber":82,"oldContent":""},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"INSERT","lineNumber":92,"content":""},{"type":"INSERT","lineNumber":98,"content":""},{"type":"DELETE","lineNumber":99,"oldContent":"                }"},{"type":"DELETE","lineNumber":101,"oldContent":"            }"},{"type":"INSERT","lineNumber":105,"content":""},{"type":"DELETE","lineNumber":107,"oldContent":"            "},{"type":"MODIFY","lineNumber":121,"content":"                }","oldContent":"        }"},{"type":"MODIFY","lineNumber":124,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":125,"content":"            "},{"type":"INSERT","lineNumber":126,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":127,"content":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"INSERT","lineNumber":128,"content":"        }"},{"type":"INSERT","lineNumber":129,"content":"    }"},{"type":"DELETE","lineNumber":129,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":131,"oldContent":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":135,"oldContent":"            }"},{"type":"DELETE","lineNumber":148,"oldContent":"        }"},{"type":"DELETE","lineNumber":157,"oldContent":"}"},{"type":"DELETE","lineNumber":159,"oldContent":""},{"type":"DELETE","lineNumber":161,"oldContent":"}"},{"type":"DELETE","lineNumber":163,"oldContent":"            )"},{"type":"DELETE","lineNumber":165,"oldContent":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"DELETE","lineNumber":167,"oldContent":"                text = \"ArWalking\\nStarting...\","},{"type":"DELETE","lineNumber":169,"oldContent":"            Text("},{"type":"DELETE","lineNumber":171,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":173,"oldContent":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":175,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":177,"oldContent":"        Box("},{"type":"DELETE","lineNumber":179,"oldContent":"        // Minimal fallback UI"},{"type":"DELETE","lineNumber":181,"oldContent":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"DELETE","lineNumber":183,"oldContent":"    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":185,"oldContent":"                }"},{"type":"DELETE","lineNumber":187,"oldContent":"                    }"},{"type":"DELETE","lineNumber":189,"oldContent":"                        }"},{"type":"DELETE","lineNumber":191,"oldContent":"                            )"},{"type":"DELETE","lineNumber":193,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":195,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":197,"oldContent":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":178,"content":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"INSERT","lineNumber":179,"content":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"INSERT","lineNumber":180,"content":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"INSERT","lineNumber":181,"content":"                            )"},{"type":"INSERT","lineNumber":182,"content":"                        }"},{"type":"INSERT","lineNumber":183,"content":"                    }"},{"type":"INSERT","lineNumber":184,"content":"                }"},{"type":"INSERT","lineNumber":185,"content":"            }"},{"type":"INSERT","lineNumber":186,"content":"        }"},{"type":"INSERT","lineNumber":187,"content":"    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":188,"content":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"INSERT","lineNumber":189,"content":"        // Minimal fallback UI"},{"type":"INSERT","lineNumber":190,"content":"        Box("},{"type":"INSERT","lineNumber":191,"content":"            modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":192,"content":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"INSERT","lineNumber":193,"content":"        ) {"},{"type":"INSERT","lineNumber":194,"content":"            Text("},{"type":"INSERT","lineNumber":195,"content":"                text = \"ArWalking\\nStarting...\","},{"type":"INSERT","lineNumber":196,"content":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"INSERT","lineNumber":197,"content":"            )"},{"type":"INSERT","lineNumber":198,"content":"        }"},{"type":"INSERT","lineNumber":199,"content":"    }"},{"type":"INSERT","lineNumber":200,"content":"}"},{"type":"INSERT","lineNumber":201,"content":""},{"type":"INSERT","lineNumber":202,"content":"@Preview(showBackground = true)"},{"type":"INSERT","lineNumber":203,"content":"@Composable"},{"type":"INSERT","lineNumber":204,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":205,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":206,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":207,"content":"    }"},{"type":"INSERT","lineNumber":208,"content":"}"}]},{"timestamp":1754313833862,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import com.example.arwalking.screens.CameraNavigation","oldContent":"import com.example.arwalking.screens.CameraNavigation"},{"type":"DELETE","lineNumber":71,"oldContent":"            // ViewModel erstellen"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"            // ViewModel erstellen"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"MODIFY","lineNumber":92,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":105,"content":"","oldContent":""},{"type":"INSERT","lineNumber":120,"content":"                    }"},{"type":"DELETE","lineNumber":121,"oldContent":"        }"},{"type":"INSERT","lineNumber":123,"content":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":125,"oldContent":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":127,"oldContent":"}"},{"type":"DELETE","lineNumber":129,"oldContent":""},{"type":"DELETE","lineNumber":131,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":130,"content":"}"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"@Composable"},{"type":"DELETE","lineNumber":136,"oldContent":"    try {"},{"type":"DELETE","lineNumber":137,"oldContent":"        CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":138,"oldContent":"            NavHost("},{"type":"DELETE","lineNumber":139,"oldContent":"                navController = navController,"},{"type":"DELETE","lineNumber":140,"oldContent":"                startDestination = \"home\""},{"type":"DELETE","lineNumber":141,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":142,"oldContent":"                composable(\"home\") {"},{"type":"DELETE","lineNumber":143,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":144,"oldContent":"                        HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":145,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":146,"oldContent":"                        Log.e(\"ARWalkingApp\", \"Error in HomeScreen: ${e.message}\", e)"},{"type":"DELETE","lineNumber":147,"oldContent":"                        // Fallback UI"},{"type":"DELETE","lineNumber":148,"oldContent":"                        Box("},{"type":"DELETE","lineNumber":149,"oldContent":"                            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":150,"oldContent":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":151,"oldContent":"                        ) {"},{"type":"DELETE","lineNumber":152,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":153,"oldContent":"                                text = \"ArWalking\\nLoading...\","},{"type":"DELETE","lineNumber":154,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":155,"oldContent":"                                style = MaterialTheme.typography.headlineMedium"},{"type":"DELETE","lineNumber":156,"oldContent":"                            )"},{"type":"DELETE","lineNumber":157,"oldContent":"                        }"},{"type":"DELETE","lineNumber":158,"oldContent":"                    }"},{"type":"DELETE","lineNumber":159,"oldContent":"                }"},{"type":"DELETE","lineNumber":160,"oldContent":"                composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":161,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":162,"oldContent":"                        val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":163,"oldContent":"                        val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":164,"oldContent":"                        val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":165,"oldContent":"                        val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":166,"oldContent":"                        CameraNavigation("},{"type":"DELETE","lineNumber":167,"oldContent":"                                text = \"Navigation Error\\n${e.message}\","},{"type":"DELETE","lineNumber":168,"oldContent":"                            destination = destination,"},{"type":"DELETE","lineNumber":169,"oldContent":"                                textAlign = androidx.compose.ui.text.style.TextAlign.Center,"},{"type":"DELETE","lineNumber":170,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":171,"oldContent":"                            startLocation = startLocation"},{"type":"DELETE","lineNumber":172,"oldContent":"                            )"},{"type":"DELETE","lineNumber":173,"oldContent":"                        }"},{"type":"DELETE","lineNumber":174,"oldContent":"                        )"},{"type":"DELETE","lineNumber":175,"oldContent":"                    }"},{"type":"DELETE","lineNumber":176,"oldContent":"                }"},{"type":"DELETE","lineNumber":177,"oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":136,"content":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":137,"content":"        NavHost("},{"type":"INSERT","lineNumber":138,"content":"            navController = navController,"},{"type":"INSERT","lineNumber":139,"content":"            startDestination = \"home\""},{"type":"INSERT","lineNumber":140,"content":"        ) {"},{"type":"INSERT","lineNumber":141,"content":"            composable(\"home\") {"},{"type":"INSERT","lineNumber":142,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":144,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":145,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":146,"content":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":147,"content":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":148,"content":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":149,"content":"                CameraNavigation("},{"type":"INSERT","lineNumber":150,"content":"                    destination = destination,"},{"type":"INSERT","lineNumber":151,"content":"                    startLocation = startLocation"},{"type":"INSERT","lineNumber":152,"content":"                )"},{"type":"INSERT","lineNumber":153,"content":"            }"},{"type":"DELETE","lineNumber":180,"oldContent":"                        Log.e(\"ARWalkingApp\", \"Error in CameraNavigation: ${e.message}\", e)"},{"type":"DELETE","lineNumber":181,"oldContent":"    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":182,"oldContent":"        Log.e(\"ARWalkingApp\", \"Critical error in ARWalkingApp: ${e.message}\", e)"},{"type":"DELETE","lineNumber":183,"oldContent":"                        // Fallback UI"},{"type":"DELETE","lineNumber":184,"oldContent":"        // Minimal fallback UI"},{"type":"DELETE","lineNumber":185,"oldContent":"        Box("},{"type":"DELETE","lineNumber":186,"oldContent":"                        Box("},{"type":"DELETE","lineNumber":187,"oldContent":"            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":188,"oldContent":"            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":189,"oldContent":"                            modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":190,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":191,"oldContent":"            Text("},{"type":"DELETE","lineNumber":192,"oldContent":"                            contentAlignment = androidx.compose.ui.Alignment.Center"},{"type":"DELETE","lineNumber":193,"oldContent":"                text = \"ArWalking\\nStarting...\","},{"type":"DELETE","lineNumber":194,"oldContent":"                textAlign = androidx.compose.ui.text.style.TextAlign.Center"},{"type":"DELETE","lineNumber":195,"oldContent":"                        ) {"},{"type":"DELETE","lineNumber":196,"oldContent":"            )"},{"type":"DELETE","lineNumber":197,"oldContent":"        }"},{"type":"DELETE","lineNumber":198,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":201,"oldContent":"}"},{"type":"DELETE","lineNumber":202,"oldContent":"    }"},{"type":"DELETE","lineNumber":204,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":206,"oldContent":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":161,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":162,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":163,"content":"    }"},{"type":"INSERT","lineNumber":164,"content":"}"}]},{"timestamp":1754313847320,"changes":[{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.material3.Text"},{"type":"DELETE","lineNumber":17,"oldContent":"import com.example.arwalking.screens.CameraNavigation"},{"type":"INSERT","lineNumber":27,"content":"import com.example.arwalking.screens.SimpleHomeScreen"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"INSERT","lineNumber":73,"content":""},{"type":"INSERT","lineNumber":92,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"INSERT","lineNumber":105,"content":"            routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":128,"oldContent":"}"},{"type":"INSERT","lineNumber":130,"content":"    }"},{"type":"INSERT","lineNumber":131,"content":"}"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"INSERT","lineNumber":144,"content":"            }"},{"type":"INSERT","lineNumber":155,"content":"        }"},{"type":"INSERT","lineNumber":156,"content":"    }"},{"type":"INSERT","lineNumber":157,"content":"}"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"INSERT","lineNumber":159,"content":"@Preview(showBackground = true)"},{"type":"INSERT","lineNumber":160,"content":"@Composable"},{"type":"INSERT","lineNumber":161,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":157,"oldContent":"            }"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"DELETE","lineNumber":160,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":161,"oldContent":""}]},{"timestamp":1754313851782,"changes":[{"type":"MODIFY","lineNumber":93,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":106,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":132,"content":"","oldContent":""},{"type":"DELETE","lineNumber":143,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":143,"content":"                SimpleHomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":145,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":155,"oldContent":"    ARWalkingTheme {"},{"type":"DELETE","lineNumber":156,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":159,"oldContent":"    }"},{"type":"DELETE","lineNumber":161,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"@Preview(showBackground = true)"},{"type":"DELETE","lineNumber":167,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":168,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":162,"content":"    ARWalkingTheme {"},{"type":"INSERT","lineNumber":163,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":164,"content":"    }"},{"type":"INSERT","lineNumber":165,"content":"}"}]},{"timestamp":1754313907922,"changes":[{"type":"INSERT","lineNumber":92,"content":"            initializeAppAsync()"},{"type":"DELETE","lineNumber":93,"oldContent":""},{"type":"DELETE","lineNumber":101,"oldContent":"        try {"},{"type":"DELETE","lineNumber":102,"oldContent":"            Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":103,"oldContent":"            "},{"type":"DELETE","lineNumber":104,"oldContent":"            // Feature Mapping initialisieren (asynchron)"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":106,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"            // Route laden (asynchron)"},{"type":"DELETE","lineNumber":108,"oldContent":"            val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":109,"oldContent":"            if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":111,"oldContent":"                routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":101,"content":"        // Führe Initialisierung in einem separaten Thread aus"},{"type":"INSERT","lineNumber":102,"content":"        Thread {"},{"type":"INSERT","lineNumber":103,"content":"            try {"},{"type":"INSERT","lineNumber":104,"content":"                Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":113,"oldContent":"                // System-Validierung nur im Debug-Modus"},{"type":"DELETE","lineNumber":114,"oldContent":"                if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":115,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":116,"oldContent":"                        val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":117,"oldContent":"                        systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":118,"oldContent":"                        systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":119,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":120,"oldContent":"                        Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":106,"content":"                // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":107,"content":"                routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":109,"content":"                // Route laden (asynchron)"},{"type":"INSERT","lineNumber":110,"content":"                val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"INSERT","lineNumber":111,"content":"                if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":112,"content":"                    routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":113,"content":"                    routeViewModel.enableStorageSystemImmediately(this)"},{"type":"INSERT","lineNumber":114,"content":"                    "},{"type":"INSERT","lineNumber":115,"content":"                    // System-Validierung nur im Debug-Modus"},{"type":"INSERT","lineNumber":116,"content":"                    if (BuildConfig.DEBUG) {"},{"type":"INSERT","lineNumber":117,"content":"                        try {"},{"type":"INSERT","lineNumber":118,"content":"                            val systemValidator = SystemValidator(this)"},{"type":"INSERT","lineNumber":119,"content":"                            systemValidator.validateSystem(routeViewModel)"},{"type":"INSERT","lineNumber":120,"content":"                            systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"INSERT","lineNumber":121,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":122,"content":"                            Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"INSERT","lineNumber":123,"content":"                        }"},{"type":"INSERT","lineNumber":125,"content":"                } else {"},{"type":"INSERT","lineNumber":126,"content":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":123,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":124,"oldContent":"                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":128,"content":"                "},{"type":"INSERT","lineNumber":129,"content":"                Log.i(\"MainActivity\", \"Async initialization completed successfully\")"},{"type":"INSERT","lineNumber":130,"content":"                "},{"type":"INSERT","lineNumber":131,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":132,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":126,"oldContent":"            "},{"type":"DELETE","lineNumber":127,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":128,"oldContent":"            Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":129,"oldContent":"        }"},{"type":"INSERT","lineNumber":134,"content":"        }.start()"},{"type":"INSERT","lineNumber":136,"content":"}"},{"type":"DELETE","lineNumber":132,"oldContent":""},{"type":"DELETE","lineNumber":144,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":150,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":158,"oldContent":"    ARWalkingTheme {"},{"type":"DELETE","lineNumber":160,"oldContent":"        ARWalkingApp()"},{"type":"DELETE","lineNumber":162,"oldContent":"    }"},{"type":"DELETE","lineNumber":164,"oldContent":"}"},{"type":"DELETE","lineNumber":166,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":167,"oldContent":"                                style = MaterialTheme.typography.bodyLarge"},{"type":"DELETE","lineNumber":169,"oldContent":"                        }"},{"type":"DELETE","lineNumber":171,"oldContent":"                            )"}]},{"timestamp":1754313942558,"changes":[{"type":"INSERT","lineNumber":30,"content":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"DELETE","lineNumber":35,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":37,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":70,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"MODIFY","lineNumber":71,"content":"        try {","oldContent":"            // Simuliere OpenCV Initialisierung"},{"type":"MODIFY","lineNumber":101,"content":"        // Führe nur minimale Initialisierung durch, um Crashes zu vermeiden","oldContent":"        // Führe Initialisierung in einem separaten Thread aus"},{"type":"DELETE","lineNumber":104,"oldContent":"                Log.i(\"MainActivity\", \"Starting async initialization...\")"},{"type":"DELETE","lineNumber":105,"oldContent":"                // Feature Mapping initialisieren (asynchron)"},{"type":"INSERT","lineNumber":104,"content":"                Log.i(\"MainActivity\", \"Starting minimal async initialization...\")"},{"type":"INSERT","lineNumber":105,"content":"                "},{"type":"INSERT","lineNumber":106,"content":"                // Nur grundlegende Initialisierung"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"MODIFY","lineNumber":108,"content":"                ","oldContent":"                // Route laden (asynchron)"},{"type":"INSERT","lineNumber":109,"content":"                // Route laden ohne komplexe Validierung"},{"type":"DELETE","lineNumber":111,"oldContent":"                    routeViewModel.logNavigationRoute(navigationRoute)"},{"type":"DELETE","lineNumber":112,"oldContent":"                "},{"type":"DELETE","lineNumber":113,"oldContent":"                    routeViewModel.enableStorageSystemImmediately(this)"},{"type":"DELETE","lineNumber":114,"oldContent":"                    "},{"type":"DELETE","lineNumber":115,"oldContent":"                    // System-Validierung nur im Debug-Modus"},{"type":"DELETE","lineNumber":116,"oldContent":"                    if (BuildConfig.DEBUG) {"},{"type":"DELETE","lineNumber":117,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":118,"oldContent":"                            val systemValidator = SystemValidator(this)"},{"type":"DELETE","lineNumber":119,"oldContent":"                            systemValidator.validateSystem(routeViewModel)"},{"type":"DELETE","lineNumber":120,"oldContent":"                            systemValidator.simulateFeatureMatching(routeViewModel, \"prof_ludwig_office\")"},{"type":"DELETE","lineNumber":121,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    }"},{"type":"DELETE","lineNumber":123,"oldContent":"                            Log.w(\"MainActivity\", \"Debug validation failed: ${e.message}\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                }"},{"type":"DELETE","lineNumber":125,"oldContent":"                        }"},{"type":"INSERT","lineNumber":112,"content":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":127,"oldContent":"            }"},{"type":"INSERT","lineNumber":115,"content":"                }"},{"type":"DELETE","lineNumber":130,"oldContent":"                Log.i(\"MainActivity\", \"Async initialization completed successfully\")"},{"type":"INSERT","lineNumber":117,"content":"                Log.i(\"MainActivity\", \"Minimal initialization completed\")"},{"type":"DELETE","lineNumber":132,"oldContent":"    }"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":121,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":122,"content":"            }"},{"type":"INSERT","lineNumber":124,"content":"    }"},{"type":"INSERT","lineNumber":125,"content":"}"},{"type":"INSERT","lineNumber":126,"content":""},{"type":"INSERT","lineNumber":127,"content":"@Composable"},{"type":"DELETE","lineNumber":140,"oldContent":"}"},{"type":"INSERT","lineNumber":139,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":154,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":159,"content":"}"}]},{"timestamp":1754314349840,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":"import com.example.arwalking.screens.SimpleHomeScreen"},{"type":"INSERT","lineNumber":112,"content":"                } else {"},{"type":"INSERT","lineNumber":113,"content":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":117,"content":"                "},{"type":"INSERT","lineNumber":118,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":119,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"INSERT","lineNumber":122,"content":"        }.start()"},{"type":"DELETE","lineNumber":120,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":123,"oldContent":"                "},{"type":"DELETE","lineNumber":124,"oldContent":"                "},{"type":"DELETE","lineNumber":125,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":126,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":127,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":129,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":138,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":148,"oldContent":"}"},{"type":"INSERT","lineNumber":156,"content":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":157,"content":"    }"},{"type":"INSERT","lineNumber":158,"content":"}"}]},{"timestamp":1754314354775,"changes":[{"type":"MODIFY","lineNumber":35,"content":"import com.example.arwalking.BuildConfig","oldContent":""},{"type":"INSERT","lineNumber":37,"content":""},{"type":"DELETE","lineNumber":69,"oldContent":"        // OpenCV initialisieren (Stub für lokale Entwicklung)"},{"type":"MODIFY","lineNumber":112,"content":"                } else {","oldContent":"                } else {"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":118,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":119,"content":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":119,"oldContent":"                "},{"type":"INSERT","lineNumber":122,"content":"        }.start()"},{"type":"DELETE","lineNumber":121,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":126,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":136,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"MODIFY","lineNumber":136,"content":"                HomeScreen(navController = navController)","oldContent":"                SimpleHomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":138,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"MODIFY","lineNumber":155,"content":"    ARWalkingTheme {","oldContent":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":156,"content":"        ARWalkingApp()"}]},{"timestamp":1754315896736,"changes":[{"type":"DELETE","lineNumber":73,"oldContent":"            // ViewModel erstellen"},{"type":"DELETE","lineNumber":74,"oldContent":"            routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":78,"oldContent":"            // UI zuerst setzen"},{"type":"INSERT","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":90,"oldContent":"            // Initialisierung asynchron durchführen"},{"type":"INSERT","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":109,"content":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":112,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":118,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":120,"oldContent":"            }"},{"type":"DELETE","lineNumber":122,"oldContent":"    }"},{"type":"INSERT","lineNumber":118,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":119,"content":"            }"},{"type":"INSERT","lineNumber":121,"content":"    }"},{"type":"DELETE","lineNumber":127,"oldContent":"                )"},{"type":"INSERT","lineNumber":125,"content":"fun ARWalkingApp() {"},{"type":"MODIFY","lineNumber":136,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->","oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":154,"oldContent":"        ARWalkingApp()"},{"type":"INSERT","lineNumber":152,"content":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754315910963,"changes":[{"type":"DELETE","lineNumber":73,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":84,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":90,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":103,"oldContent":"                // Nur grundlegende Initialisierung"},{"type":"MODIFY","lineNumber":103,"content":"                // ViewModel sicher erstellen","oldContent":"                routeViewModel.initializeStorage(this)"},{"type":"INSERT","lineNumber":104,"content":"                runOnUiThread {"},{"type":"INSERT","lineNumber":105,"content":"                    try {"},{"type":"INSERT","lineNumber":106,"content":"                        routeViewModel = ViewModelProvider(this@MainActivity)[RouteViewModel::class.java]"},{"type":"INSERT","lineNumber":107,"content":"                        Log.i(\"MainActivity\", \"RouteViewModel created successfully\")"},{"type":"INSERT","lineNumber":108,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":109,"content":"                        Log.e(\"MainActivity\", \"Error creating RouteViewModel: ${e.message}\", e)"},{"type":"INSERT","lineNumber":110,"content":"                    }"},{"type":"INSERT","lineNumber":111,"content":"                }"},{"type":"DELETE","lineNumber":106,"oldContent":"                // Route laden ohne komplexe Validierung"},{"type":"DELETE","lineNumber":107,"oldContent":"                    Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":108,"oldContent":"                val navigationRoute = routeViewModel.loadNavigationRoute(this)"},{"type":"DELETE","lineNumber":109,"oldContent":"                if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":110,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":111,"oldContent":"                    Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":113,"content":"                // Kurz warten, dann weitere Initialisierung"},{"type":"INSERT","lineNumber":114,"content":"                Thread.sleep(500)"},{"type":"INSERT","lineNumber":115,"content":"                "},{"type":"INSERT","lineNumber":116,"content":"                // Nur wenn ViewModel erfolgreich erstellt wurde"},{"type":"INSERT","lineNumber":117,"content":"                if (::routeViewModel.isInitialized) {"},{"type":"INSERT","lineNumber":118,"content":"                    try {"},{"type":"INSERT","lineNumber":119,"content":"                        routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":120,"content":"                        Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"INSERT","lineNumber":121,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":122,"content":"                        Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":123,"content":"                    }"},{"type":"INSERT","lineNumber":124,"content":"                    "},{"type":"INSERT","lineNumber":125,"content":"                    try {"},{"type":"INSERT","lineNumber":126,"content":"                        val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":127,"content":"                        if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":128,"content":"                            Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"INSERT","lineNumber":129,"content":"                        } else {"},{"type":"INSERT","lineNumber":130,"content":"                            Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":131,"content":"                        }"},{"type":"INSERT","lineNumber":132,"content":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":133,"content":"                        Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":134,"content":"                    }"},{"type":"DELETE","lineNumber":116,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":117,"oldContent":"            }"},{"type":"DELETE","lineNumber":119,"oldContent":"    }"},{"type":"INSERT","lineNumber":141,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":142,"content":"            }"},{"type":"INSERT","lineNumber":144,"content":"    }"},{"type":"DELETE","lineNumber":123,"oldContent":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":148,"content":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":134,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":135,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":157,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":159,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":150,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":175,"content":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754321611460,"changes":[{"type":"MODIFY","lineNumber":75,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung","oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"MODIFY","lineNumber":87,"content":"            // ViewModel und andere Initialisierung später und sicher","oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"MODIFY","lineNumber":93,"content":"            // App trotzdem weiter laufen lassen","oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"MODIFY","lineNumber":104,"content":"                runOnUiThread {","oldContent":"                routeViewModel.initializeStorage(this)"},{"type":"DELETE","lineNumber":106,"oldContent":"                "},{"type":"INSERT","lineNumber":108,"content":"                        "},{"type":"INSERT","lineNumber":109,"content":"                        // Initialisierung direkt nach ViewModel-Erstellung"},{"type":"INSERT","lineNumber":110,"content":"                        try {"},{"type":"INSERT","lineNumber":111,"content":"                            routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":112,"content":"                            Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"INSERT","lineNumber":113,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":114,"content":"                            Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":115,"content":"                        }"},{"type":"INSERT","lineNumber":116,"content":"                        "},{"type":"INSERT","lineNumber":117,"content":"                        try {"},{"type":"INSERT","lineNumber":118,"content":"                            val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":119,"content":"                            if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":120,"content":"                                Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"INSERT","lineNumber":121,"content":"                            } else {"},{"type":"INSERT","lineNumber":122,"content":"                                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"INSERT","lineNumber":123,"content":"                            }"},{"type":"INSERT","lineNumber":124,"content":"                        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":125,"content":"                            Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":126,"content":"                        }"},{"type":"INSERT","lineNumber":127,"content":"                        "},{"type":"DELETE","lineNumber":113,"oldContent":"                }"},{"type":"DELETE","lineNumber":114,"oldContent":"                // Kurz warten, dann weitere Initialisierung"},{"type":"DELETE","lineNumber":116,"oldContent":"                Thread.sleep(500)"},{"type":"DELETE","lineNumber":119,"oldContent":"                "},{"type":"DELETE","lineNumber":120,"oldContent":"                // Nur wenn ViewModel erfolgreich erstellt wurde"},{"type":"DELETE","lineNumber":121,"oldContent":"                if (::routeViewModel.isInitialized) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":124,"oldContent":"                        routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":125,"oldContent":"                        Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"DELETE","lineNumber":127,"oldContent":"                    } catch (e: Exception) {"},{"type":"INSERT","lineNumber":137,"content":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"INSERT","lineNumber":138,"content":"            }"},{"type":"DELETE","lineNumber":129,"oldContent":"                        Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":140,"content":"    }"},{"type":"DELETE","lineNumber":131,"oldContent":"                    }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    "},{"type":"DELETE","lineNumber":134,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":136,"oldContent":"                        val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":137,"oldContent":"                    startLocation = startLocation"},{"type":"DELETE","lineNumber":138,"oldContent":"                        if (navigationRoute != null) {"},{"type":"INSERT","lineNumber":144,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":145,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":140,"oldContent":"                            Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":142,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":144,"oldContent":"                            Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":146,"oldContent":"                        }"},{"type":"DELETE","lineNumber":148,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":150,"oldContent":"                        Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":152,"oldContent":"                    }"},{"type":"INSERT","lineNumber":153,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":155,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":158,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":160,"oldContent":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"DELETE","lineNumber":168,"oldContent":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":171,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":177,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":178,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":179,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"}]},{"timestamp":1754325118914,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.activity.viewModels"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.material3.Text"},{"type":"MODIFY","lineNumber":33,"content":"import androidx.lifecycle.lifecycleScope","oldContent":"import androidx.lifecycle.ViewModelProvider"},{"type":"MODIFY","lineNumber":39,"content":"    private val routeViewModel: RouteViewModel by viewModels()","oldContent":"    private lateinit var routeViewModel: RouteViewModel"},{"type":"INSERT","lineNumber":73,"content":"            "},{"type":"DELETE","lineNumber":75,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":85,"content":""},{"type":"DELETE","lineNumber":87,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":88,"oldContent":"            initializeAppAsync()"},{"type":"INSERT","lineNumber":87,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":88,"content":"                try {"},{"type":"INSERT","lineNumber":89,"content":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":90,"content":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":91,"content":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"INSERT","lineNumber":92,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":93,"content":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"INSERT","lineNumber":94,"content":"                    Toast.makeText("},{"type":"INSERT","lineNumber":95,"content":"                        this@MainActivity,"},{"type":"INSERT","lineNumber":96,"content":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"INSERT","lineNumber":97,"content":"                        Toast.LENGTH_LONG"},{"type":"INSERT","lineNumber":98,"content":"                    ).show()"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":"            }"},{"type":"INSERT","lineNumber":104,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":93,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":97,"oldContent":"    private fun initializeAppAsync() {"},{"type":"DELETE","lineNumber":98,"oldContent":"        // Führe nur minimale Initialisierung durch, um Crashes zu vermeiden"},{"type":"DELETE","lineNumber":99,"oldContent":"        Thread {"},{"type":"DELETE","lineNumber":100,"oldContent":"            try {"},{"type":"DELETE","lineNumber":101,"oldContent":"                Log.i(\"MainActivity\", \"Starting minimal async initialization...\")"},{"type":"DELETE","lineNumber":102,"oldContent":"                "},{"type":"DELETE","lineNumber":103,"oldContent":"                // ViewModel sicher erstellen"},{"type":"DELETE","lineNumber":104,"oldContent":"                runOnUiThread {"},{"type":"DELETE","lineNumber":105,"oldContent":"                    try {"},{"type":"DELETE","lineNumber":106,"oldContent":"                        routeViewModel = ViewModelProvider(this@MainActivity)[RouteViewModel::class.java]"},{"type":"DELETE","lineNumber":107,"oldContent":"                        "},{"type":"DELETE","lineNumber":108,"oldContent":"                        Log.i(\"MainActivity\", \"RouteViewModel created successfully\")"},{"type":"DELETE","lineNumber":109,"oldContent":"                        // Initialisierung direkt nach ViewModel-Erstellung"},{"type":"DELETE","lineNumber":110,"oldContent":"                    } catch (e: Exception) {"},{"type":"DELETE","lineNumber":111,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":112,"oldContent":"                        Log.e(\"MainActivity\", \"Error creating RouteViewModel: ${e.message}\", e)"},{"type":"DELETE","lineNumber":113,"oldContent":"                            routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":114,"oldContent":"                    }"},{"type":"DELETE","lineNumber":115,"oldContent":"                            Log.i(\"MainActivity\", \"Storage initialized\")"},{"type":"DELETE","lineNumber":116,"oldContent":"                }"},{"type":"DELETE","lineNumber":117,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":118,"oldContent":"                            Log.e(\"MainActivity\", \"Storage initialization failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":119,"oldContent":"                        }"},{"type":"DELETE","lineNumber":120,"oldContent":"                "},{"type":"DELETE","lineNumber":121,"oldContent":"                        "},{"type":"DELETE","lineNumber":122,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":123,"oldContent":"                Log.i(\"MainActivity\", \"Minimal initialization completed\")"},{"type":"DELETE","lineNumber":124,"oldContent":"                            val navigationRoute = routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":125,"oldContent":"                "},{"type":"DELETE","lineNumber":126,"oldContent":"                            if (navigationRoute != null) {"},{"type":"DELETE","lineNumber":127,"oldContent":"                                Log.i(\"MainActivity\", \"Navigation route loaded successfully\")"},{"type":"DELETE","lineNumber":128,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":129,"oldContent":"                                Log.w(\"MainActivity\", \"Navigation route could not be loaded\")"},{"type":"DELETE","lineNumber":130,"oldContent":"                            }"},{"type":"DELETE","lineNumber":131,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":132,"oldContent":"                        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":133,"oldContent":"                            Log.e(\"MainActivity\", \"Route loading failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":134,"oldContent":"                        }"},{"type":"DELETE","lineNumber":135,"oldContent":"                Log.e(\"MainActivity\", \"Error in async initialization: ${e.message}\", e)"},{"type":"DELETE","lineNumber":136,"oldContent":"                        "},{"type":"DELETE","lineNumber":137,"oldContent":"        }.start()"},{"type":"DELETE","lineNumber":141,"oldContent":"                // App sollte trotzdem funktionieren, auch wenn Initialisierung fehlschlägt"},{"type":"DELETE","lineNumber":142,"oldContent":"            }"},{"type":"INSERT","lineNumber":112,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":113,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":144,"oldContent":"    }"},{"type":"DELETE","lineNumber":147,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":148,"oldContent":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":155,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":124,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":169,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":139,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":175,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":143,"content":"}"},{"type":"INSERT","lineNumber":144,"content":""}]},{"timestamp":1754325169405,"changes":[{"type":"INSERT","lineNumber":32,"content":"import android.widget.Toast"},{"type":"DELETE","lineNumber":33,"oldContent":"import androidx.lifecycle.ViewModelProvider"},{"type":"INSERT","lineNumber":35,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":36,"content":""},{"type":"INSERT","lineNumber":40,"content":""},{"type":"DELETE","lineNumber":39,"oldContent":"    private lateinit var routeViewModel: RouteViewModel"},{"type":"DELETE","lineNumber":72,"oldContent":"            "},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"DELETE","lineNumber":84,"oldContent":""},{"type":"INSERT","lineNumber":87,"content":""},{"type":"DELETE","lineNumber":90,"oldContent":""},{"type":"DELETE","lineNumber":92,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":94,"oldContent":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":96,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":99,"oldContent":"        }"},{"type":"DELETE","lineNumber":101,"oldContent":"    }"},{"type":"MODIFY","lineNumber":103,"content":"","oldContent":""},{"type":"INSERT","lineNumber":104,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":105,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":109,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":110,"oldContent":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":111,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":107,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":108,"content":"        }"},{"type":"INSERT","lineNumber":109,"content":"    }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"DELETE","lineNumber":113,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":116,"oldContent":"}"},{"type":"DELETE","lineNumber":117,"oldContent":"                )"},{"type":"INSERT","lineNumber":114,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":115,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":126,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":141,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":145,"content":"}"},{"type":"INSERT","lineNumber":146,"content":""}]},{"timestamp":1754325258704,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.activity.viewModels"},{"type":"DELETE","lineNumber":27,"oldContent":""},{"type":"DELETE","lineNumber":31,"oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":32,"oldContent":"import android.widget.Toast"},{"type":"DELETE","lineNumber":33,"oldContent":"import androidx.lifecycle.lifecycleScope"},{"type":"DELETE","lineNumber":34,"oldContent":"import com.example.arwalking.BuildConfig"},{"type":"DELETE","lineNumber":35,"oldContent":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":36,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":38,"oldContent":""},{"type":"DELETE","lineNumber":40,"oldContent":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"DELETE","lineNumber":42,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":""},{"type":"DELETE","lineNumber":71,"oldContent":"        try {"},{"type":"DELETE","lineNumber":72,"oldContent":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"DELETE","lineNumber":73,"oldContent":""},{"type":"DELETE","lineNumber":74,"oldContent":"            enableEdgeToEdge()"},{"type":"DELETE","lineNumber":75,"oldContent":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"DELETE","lineNumber":76,"oldContent":"            "},{"type":"DELETE","lineNumber":77,"oldContent":"            setContent {"},{"type":"DELETE","lineNumber":78,"oldContent":"                ARWalkingTheme {"},{"type":"DELETE","lineNumber":79,"oldContent":"                    Surface("},{"type":"DELETE","lineNumber":80,"oldContent":"                        modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":81,"oldContent":"                        color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":82,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":83,"oldContent":"                        ARWalkingApp()"},{"type":"DELETE","lineNumber":84,"oldContent":"                    }"},{"type":"INSERT","lineNumber":58,"content":"        enableEdgeToEdge()"},{"type":"INSERT","lineNumber":59,"content":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"INSERT","lineNumber":60,"content":"        setContent {"},{"type":"INSERT","lineNumber":61,"content":"            ARWalkingTheme {"},{"type":"INSERT","lineNumber":62,"content":"                Surface("},{"type":"INSERT","lineNumber":63,"content":"                    modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":64,"content":"                    color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":65,"content":"                ) {"},{"type":"INSERT","lineNumber":66,"content":"                    ARWalkingApp()"},{"type":"DELETE","lineNumber":87,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":90,"oldContent":"                try {"},{"type":"DELETE","lineNumber":91,"oldContent":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":92,"oldContent":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":93,"oldContent":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"DELETE","lineNumber":94,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":95,"oldContent":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"DELETE","lineNumber":96,"oldContent":"                    Toast.makeText("},{"type":"DELETE","lineNumber":97,"oldContent":"                        this@MainActivity,"},{"type":"DELETE","lineNumber":98,"oldContent":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"DELETE","lineNumber":99,"oldContent":""},{"type":"DELETE","lineNumber":100,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":101,"oldContent":"                        Toast.LENGTH_LONG"},{"type":"DELETE","lineNumber":102,"oldContent":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":103,"oldContent":"                    ).show()"},{"type":"DELETE","lineNumber":104,"oldContent":"                }"},{"type":"DELETE","lineNumber":105,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"DELETE","lineNumber":106,"oldContent":"            }"},{"type":"DELETE","lineNumber":108,"oldContent":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":110,"oldContent":""},{"type":"DELETE","lineNumber":112,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":114,"oldContent":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":74,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":75,"content":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":124,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":86,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"INSERT","lineNumber":97,"content":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"INSERT","lineNumber":98,"content":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":140,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":105,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":146,"oldContent":""}]},{"timestamp":1754325423282,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.activity.viewModels"},{"type":"INSERT","lineNumber":27,"content":""},{"type":"INSERT","lineNumber":31,"content":"import android.util.Log"},{"type":"INSERT","lineNumber":32,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":33,"content":"import androidx.lifecycle.lifecycleScope"},{"type":"INSERT","lineNumber":34,"content":"import com.example.arwalking.BuildConfig"},{"type":"INSERT","lineNumber":35,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":39,"content":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":""},{"type":"DELETE","lineNumber":46,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":48,"oldContent":"        // Entferne checkCameraAndLaunch() - wird über Navigation gehandhabt"},{"type":"DELETE","lineNumber":50,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":52,"oldContent":"            ARWalkingTheme {"},{"type":"DELETE","lineNumber":54,"oldContent":"                Surface("},{"type":"DELETE","lineNumber":56,"oldContent":"                    modifier = Modifier.fillMaxSize(),"},{"type":"DELETE","lineNumber":58,"oldContent":"                    color = MaterialTheme.colorScheme.background"},{"type":"DELETE","lineNumber":60,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":62,"oldContent":"                    ARWalkingApp()"},{"type":"DELETE","lineNumber":67,"oldContent":"fun ARWalkingApp() {"},{"type":"MODIFY","lineNumber":68,"content":"","oldContent":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":69,"content":"        try {"},{"type":"INSERT","lineNumber":70,"content":"            Log.i(\"MainActivity\", \"Starting MainActivity...\")"},{"type":"INSERT","lineNumber":71,"content":""},{"type":"INSERT","lineNumber":72,"content":"            enableEdgeToEdge()"},{"type":"INSERT","lineNumber":73,"content":"            "},{"type":"INSERT","lineNumber":74,"content":"            // UI zuerst setzen - ohne ViewModel Initialisierung"},{"type":"INSERT","lineNumber":75,"content":"            setContent {"},{"type":"INSERT","lineNumber":76,"content":"                ARWalkingTheme {"},{"type":"INSERT","lineNumber":77,"content":"                    Surface("},{"type":"INSERT","lineNumber":78,"content":"                        modifier = Modifier.fillMaxSize(),"},{"type":"INSERT","lineNumber":79,"content":"                        color = MaterialTheme.colorScheme.background"},{"type":"INSERT","lineNumber":80,"content":"                    ) {"},{"type":"INSERT","lineNumber":81,"content":"                        ARWalkingApp()"},{"type":"INSERT","lineNumber":82,"content":"                    }"},{"type":"DELETE","lineNumber":70,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":73,"oldContent":"            // Hier können später weitere Screens hinzugefügt werden:"},{"type":"DELETE","lineNumber":74,"oldContent":"            // composable(\"ar_view\") { ARScreen(navController = navController) }"},{"type":"DELETE","lineNumber":75,"oldContent":"            // composable(\"settings\") { SettingsScreen(navController = navController) }"},{"type":"DELETE","lineNumber":76,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":86,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":87,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":88,"content":"                try {"},{"type":"INSERT","lineNumber":89,"content":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":90,"content":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":91,"content":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"INSERT","lineNumber":92,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":93,"content":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"INSERT","lineNumber":94,"content":"                    Toast.makeText("},{"type":"INSERT","lineNumber":95,"content":"                        this@MainActivity,"},{"type":"INSERT","lineNumber":96,"content":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"INSERT","lineNumber":97,"content":"                        Toast.LENGTH_LONG"},{"type":"INSERT","lineNumber":98,"content":"                    ).show()"},{"type":"INSERT","lineNumber":99,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":"            }"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"INSERT","lineNumber":102,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":103,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":104,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":105,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":108,"content":""},{"type":"INSERT","lineNumber":112,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":113,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":124,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":139,"content":"private fun ARWalkingAppPreview() {"},{"type":"INSERT","lineNumber":144,"content":""}]},{"timestamp":1754325467157,"changes":[{"type":"MODIFY","lineNumber":28,"content":"import com.example.arwalking.ui.theme.ARWalkingTheme","oldContent":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"INSERT","lineNumber":31,"content":"import android.util.Log"},{"type":"INSERT","lineNumber":32,"content":"import android.widget.Toast"},{"type":"INSERT","lineNumber":33,"content":"import androidx.lifecycle.lifecycleScope"},{"type":"INSERT","lineNumber":34,"content":"import com.example.arwalking.BuildConfig"},{"type":"INSERT","lineNumber":35,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":37,"content":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"DELETE","lineNumber":33,"oldContent":"import android.util.Log"},{"type":"DELETE","lineNumber":35,"oldContent":"import android.widget.Toast"},{"type":"INSERT","lineNumber":41,"content":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":""},{"type":"DELETE","lineNumber":37,"oldContent":"import androidx.lifecycle.lifecycleScope"},{"type":"DELETE","lineNumber":39,"oldContent":"import com.example.arwalking.BuildConfig"},{"type":"DELETE","lineNumber":41,"oldContent":"// OpenCV imports entfernt für Stub-Implementation"},{"type":"DELETE","lineNumber":46,"oldContent":"    private val routeViewModel: RouteViewModel by viewModels()"},{"type":"DELETE","lineNumber":48,"oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"                }"},{"type":"DELETE","lineNumber":73,"oldContent":"            }"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"        }"},{"type":"DELETE","lineNumber":83,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":"}"},{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":89,"content":"            lifecycleScope.launch {"},{"type":"INSERT","lineNumber":90,"content":"                try {"},{"type":"INSERT","lineNumber":91,"content":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"INSERT","lineNumber":92,"content":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"INSERT","lineNumber":93,"content":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"INSERT","lineNumber":94,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":95,"content":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"INSERT","lineNumber":96,"content":"                    Toast.makeText("},{"type":"INSERT","lineNumber":97,"content":"                        this@MainActivity,"},{"type":"INSERT","lineNumber":98,"content":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"INSERT","lineNumber":99,"content":"                        Toast.LENGTH_LONG"},{"type":"INSERT","lineNumber":100,"content":"                    ).show()"},{"type":"INSERT","lineNumber":101,"content":"                }"},{"type":"INSERT","lineNumber":102,"content":"            }"},{"type":"INSERT","lineNumber":103,"content":""},{"type":"INSERT","lineNumber":104,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":105,"content":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"INSERT","lineNumber":106,"content":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"INSERT","lineNumber":107,"content":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":108,"content":"        }"},{"type":"INSERT","lineNumber":109,"content":"    }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"INSERT","lineNumber":111,"content":"}"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"@Composable"},{"type":"INSERT","lineNumber":114,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":115,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"DELETE","lineNumber":95,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":97,"oldContent":"            lifecycleScope.launch {"},{"type":"DELETE","lineNumber":99,"oldContent":"                try {"},{"type":"DELETE","lineNumber":101,"oldContent":"                    routeViewModel.initializeStorage(this@MainActivity)"},{"type":"DELETE","lineNumber":103,"oldContent":"                    routeViewModel.loadNavigationRoute(this@MainActivity)"},{"type":"DELETE","lineNumber":105,"oldContent":"                    Log.i(\"MainActivity\", \"Initialization completed\")"},{"type":"DELETE","lineNumber":107,"oldContent":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":126,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":109,"oldContent":"                    Log.e(\"MainActivity\", \"Initialization failed: ${'$'}{e.message}\", e)"},{"type":"DELETE","lineNumber":111,"oldContent":"                    Toast.makeText("},{"type":"DELETE","lineNumber":113,"oldContent":"                        this@MainActivity,"},{"type":"DELETE","lineNumber":115,"oldContent":"                        \"App initialization failed: ${'$'}{e.message}\","},{"type":"DELETE","lineNumber":117,"oldContent":"                        Toast.LENGTH_LONG"},{"type":"DELETE","lineNumber":119,"oldContent":"                    ).show()"},{"type":"DELETE","lineNumber":121,"oldContent":"                }"},{"type":"DELETE","lineNumber":123,"oldContent":"            }"},{"type":"DELETE","lineNumber":125,"oldContent":""},{"type":"DELETE","lineNumber":127,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":129,"oldContent":"            Log.e(\"MainActivity\", \"Error in onCreate: ${e.message}\", e)"},{"type":"DELETE","lineNumber":131,"oldContent":"            Toast.makeText(this, \"App initialization failed: ${e.message}\", Toast.LENGTH_LONG).show()"},{"type":"DELETE","lineNumber":133,"oldContent":"            // App trotzdem weiter laufen lassen"},{"type":"INSERT","lineNumber":141,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":137,"oldContent":""},{"type":"DELETE","lineNumber":141,"oldContent":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":142,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":143,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"DELETE","lineNumber":144,"oldContent":"    val navController = rememberNavController()"}]},{"timestamp":1754576037804,"changes":[{"type":"INSERT","lineNumber":27,"content":""},{"type":"DELETE","lineNumber":28,"oldContent":"import com.example.arwalking.ui.theme.ARWalkingTheme"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"DELETE","lineNumber":34,"oldContent":"class MainActivity : ComponentActivity() {"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"    private val cameraPermissionLauncher: ActivityResultLauncher<String> ="},{"type":"INSERT","lineNumber":36,"content":""},{"type":"DELETE","lineNumber":42,"oldContent":"        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->"},{"type":"DELETE","lineNumber":43,"oldContent":"            if (granted) {"},{"type":"INSERT","lineNumber":39,"content":"class MainActivity : ComponentActivity() {"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"DELETE","lineNumber":46,"oldContent":"                openCamera()"},{"type":"INSERT","lineNumber":44,"content":"    private val cameraPermissionLauncher: ActivityResultLauncher<String> ="},{"type":"INSERT","lineNumber":45,"content":"        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->"},{"type":"INSERT","lineNumber":46,"content":"            if (granted) {"},{"type":"INSERT","lineNumber":47,"content":"                openCamera()"},{"type":"INSERT","lineNumber":82,"content":"                    ) {"},{"type":"INSERT","lineNumber":83,"content":"                        ARWalkingApp()"},{"type":"INSERT","lineNumber":84,"content":"                    }"},{"type":"DELETE","lineNumber":84,"oldContent":"                    ) {"},{"type":"INSERT","lineNumber":87,"content":""},{"type":"DELETE","lineNumber":86,"oldContent":"                        ARWalkingApp()"},{"type":"DELETE","lineNumber":89,"oldContent":"                    }"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":95,"oldContent":"        NavHost("},{"type":"DELETE","lineNumber":97,"oldContent":"            navController = navController,"},{"type":"DELETE","lineNumber":100,"oldContent":"            startDestination = \"home\""},{"type":"DELETE","lineNumber":103,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":106,"oldContent":"            composable(\"home\") {"},{"type":"DELETE","lineNumber":109,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":112,"oldContent":"            }"},{"type":"DELETE","lineNumber":115,"oldContent":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"DELETE","lineNumber":118,"oldContent":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"DELETE","lineNumber":121,"oldContent":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":124,"oldContent":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":127,"oldContent":"                CameraNavigation("},{"type":"INSERT","lineNumber":117,"content":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":118,"content":"        NavHost("},{"type":"INSERT","lineNumber":119,"content":"            navController = navController,"},{"type":"INSERT","lineNumber":120,"content":"            startDestination = \"camera_navigation/Bibliothek/Haupteingang\" // Direkt zur Kamera für Testing"},{"type":"INSERT","lineNumber":121,"content":"        ) {"},{"type":"INSERT","lineNumber":122,"content":"            composable(\"home\") {"},{"type":"INSERT","lineNumber":123,"content":"                HomeScreen(navController = navController)"},{"type":"INSERT","lineNumber":124,"content":"            }"},{"type":"INSERT","lineNumber":125,"content":"            composable(\"camera_navigation/{destination}/{startLocation}\") { backStackEntry ->"},{"type":"INSERT","lineNumber":126,"content":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":127,"content":"                val encodedStartLocation = backStackEntry.arguments?.getString(\"startLocation\") ?: \"Unbekannter Start\""},{"type":"INSERT","lineNumber":128,"content":"                val destination = URLDecoder.decode(encodedDestination, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":129,"content":"                val startLocation = URLDecoder.decode(encodedStartLocation, StandardCharsets.UTF_8.toString())"},{"type":"INSERT","lineNumber":130,"content":"                CameraNavigation("},{"type":"DELETE","lineNumber":135,"oldContent":"                val encodedDestination = backStackEntry.arguments?.getString(\"destination\") ?: \"Unbekanntes Ziel\""},{"type":"INSERT","lineNumber":141,"content":"private fun ARWalkingAppPreview() {"},{"type":"DELETE","lineNumber":146,"oldContent":"private fun ARWalkingAppPreview() {"}]},{"timestamp":1754576321022,"changes":[{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":37,"oldContent":"class MainActivity : ComponentActivity() {"},{"type":"DELETE","lineNumber":41,"oldContent":"    private val cameraPermissionLauncher: ActivityResultLauncher<String> ="},{"type":"INSERT","lineNumber":39,"content":"class MainActivity : ComponentActivity() {"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"MODIFY","lineNumber":43,"content":"","oldContent":"        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->"},{"type":"INSERT","lineNumber":44,"content":"    private val cameraPermissionLauncher: ActivityResultLauncher<String> ="},{"type":"INSERT","lineNumber":45,"content":"        registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted ->"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"                }"},{"type":"DELETE","lineNumber":85,"oldContent":"            }"},{"type":"DELETE","lineNumber":87,"oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":85,"content":"                }"},{"type":"INSERT","lineNumber":86,"content":"            }"},{"type":"INSERT","lineNumber":88,"content":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"DELETE","lineNumber":108,"oldContent":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"DELETE","lineNumber":110,"oldContent":"        NavHost("},{"type":"DELETE","lineNumber":111,"oldContent":"            navController = navController,"},{"type":"DELETE","lineNumber":113,"oldContent":"            startDestination = \"camera_navigation/Bibliothek/Haupteingang\" // Direkt zur Kamera für Testing"},{"type":"INSERT","lineNumber":111,"content":"}"},{"type":"INSERT","lineNumber":112,"content":""},{"type":"INSERT","lineNumber":113,"content":"@Composable"},{"type":"INSERT","lineNumber":114,"content":"fun ARWalkingApp() {"},{"type":"INSERT","lineNumber":115,"content":"    val navController = rememberNavController()"},{"type":"INSERT","lineNumber":116,"content":""},{"type":"INSERT","lineNumber":117,"content":"    CompositionLocalProvider(LocalNavController provides navController) {"},{"type":"INSERT","lineNumber":118,"content":"        NavHost("},{"type":"INSERT","lineNumber":119,"content":"            navController = navController,"},{"type":"INSERT","lineNumber":120,"content":"            startDestination = \"home\" // Zurück zu normal"},{"type":"DELETE","lineNumber":117,"oldContent":"}"},{"type":"DELETE","lineNumber":119,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":124,"oldContent":"fun ARWalkingApp() {"},{"type":"DELETE","lineNumber":127,"oldContent":"    val navController = rememberNavController()"},{"type":"DELETE","lineNumber":129,"oldContent":""}]},{"timestamp":1754577467417,"changes":[{"type":"DELETE","lineNumber":37,"oldContent":"class MainActivity : ComponentActivity() {"},{"type":"INSERT","lineNumber":39,"content":"class MainActivity : ComponentActivity() {"},{"type":"MODIFY","lineNumber":44,"content":"    private val cameraPermissionLauncher: ActivityResultLauncher<String> =","oldContent":"    private val cameraPermissionLauncher: ActivityResultLauncher<String> ="},{"type":"INSERT","lineNumber":84,"content":"                    }"},{"type":"DELETE","lineNumber":86,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":88,"content":"            // ViewModel und andere Initialisierung später und sicher","oldContent":"            // ViewModel und andere Initialisierung später und sicher"},{"type":"INSERT","lineNumber":109,"content":"    }"},{"type":"INSERT","lineNumber":110,"content":""},{"type":"DELETE","lineNumber":111,"oldContent":"    }"},{"type":"DELETE","lineNumber":114,"oldContent":""},{"type":"DELETE","lineNumber":116,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":118,"oldContent":"            composable(\"home\") {"},{"type":"DELETE","lineNumber":121,"oldContent":"                HomeScreen(navController = navController)"},{"type":"DELETE","lineNumber":123,"oldContent":"            startDestination = \"home\" // Zurück zu normal"},{"type":"INSERT","lineNumber":120,"content":"            startDestination = \"camera_navigation/Bibliothek/Haupteingang\" // Direkt zur Kamera für Feature-Matching Test"},{"type":"INSERT","lineNumber":121,"content":"        ) {"},{"type":"INSERT","lineNumber":122,"content":"            composable(\"home\") {"},{"type":"INSERT","lineNumber":123,"content":"                HomeScreen(navController = navController)"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/res/drawable/logo.xml":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/res/drawable/logo.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<vector xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:width=\"280dp\"\n    android:height=\"80dp\"\n    android:viewportWidth=\"280\"\n    android:viewportHeight=\"80\">\n    \n    <!-- Background -->\n    <path\n        android:fillColor=\"#FFFFFF\"\n        android:pathData=\"M10,10 L270,10 A10,10 0 0,1 280,20 L280,60 A10,10 0 0,1 270,70 L10,70 A10,10 0 0,1 0,60 L0,20 A10,10 0 0,1 10,10 Z\" />\n    \n    <!-- AR Text -->\n    <path\n        android:fillColor=\"#1E3A8A\"\n        android:pathData=\"M20,25 L35,25 L40,40 L45,25 L60,25 L50,55 L30,55 Z M30,35 L40,35 L35,45 Z\" />\n    \n    <!-- Walking Text -->\n    <path\n        android:fillColor=\"#3B82F6\"\n        android:pathData=\"M80,25 L95,25 L100,40 L105,25 L120,25 L125,55 L110,55 L108,45 L102,45 L100,55 L85,55 Z\n                         M140,25 L155,25 L160,40 L165,25 L180,25 L175,55 L160,55 L158,45 L152,45 L150,55 L135,55 Z\n                         M200,25 L215,25 L220,40 L225,25 L240,25 L235,55 L220,55 L218,45 L212,45 L210,55 L195,55 Z\" />\n</vector>","baseTimestamp":1754311537394,"deltas":[{"timestamp":1754314507563,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>"},{"type":"DELETE","lineNumber":2,"oldContent":"    android:width=\"280dp\""},{"type":"DELETE","lineNumber":3,"oldContent":"    android:height=\"80dp\""},{"type":"DELETE","lineNumber":4,"oldContent":"    android:viewportWidth=\"280\""},{"type":"DELETE","lineNumber":5,"oldContent":"    android:viewportHeight=\"80\">"},{"type":"DELETE","lineNumber":6,"oldContent":"    "},{"type":"DELETE","lineNumber":7,"oldContent":"    <!-- Background -->"},{"type":"DELETE","lineNumber":8,"oldContent":"    <path"},{"type":"DELETE","lineNumber":9,"oldContent":"        android:fillColor=\"#FFFFFF\""},{"type":"DELETE","lineNumber":10,"oldContent":"        android:pathData=\"M10,10 L270,10 A10,10 0 0,1 280,20 L280,60 A10,10 0 0,1 270,70 L10,70 A10,10 0 0,1 0,60 L0,20 A10,10 0 0,1 10,10 Z\" />"},{"type":"DELETE","lineNumber":11,"oldContent":"    "},{"type":"DELETE","lineNumber":12,"oldContent":"    <!-- AR Text -->"},{"type":"DELETE","lineNumber":13,"oldContent":"    <path"},{"type":"DELETE","lineNumber":14,"oldContent":"        android:fillColor=\"#1E3A8A\""},{"type":"DELETE","lineNumber":15,"oldContent":"        android:pathData=\"M20,25 L35,25 L40,40 L45,25 L60,25 L50,55 L30,55 Z M30,35 L40,35 L35,45 Z\" />"},{"type":"DELETE","lineNumber":16,"oldContent":"    "},{"type":"DELETE","lineNumber":17,"oldContent":"    <!-- Walking Text -->"},{"type":"DELETE","lineNumber":18,"oldContent":"    <path"},{"type":"DELETE","lineNumber":19,"oldContent":"        android:fillColor=\"#3B82F6\""},{"type":"DELETE","lineNumber":20,"oldContent":"        android:pathData=\"M80,25 L95,25 L100,40 L105,25 L120,25 L125,55 L110,55 L108,45 L102,45 L100,55 L85,55 Z"},{"type":"DELETE","lineNumber":21,"oldContent":"                         M140,25 L155,25 L160,40 L165,25 L180,25 L175,55 L160,55 L158,45 L152,45 L150,55 L135,55 Z"},{"type":"DELETE","lineNumber":22,"oldContent":"                         M200,25 L215,25 L220,40 L225,25 L240,25 L235,55 L220,55 L218,45 L212,45 L210,55 L195,55 Z\" />"},{"type":"INSERT","lineNumber":1,"content":"    android:width=\"201dp\""},{"type":"INSERT","lineNumber":2,"content":"    android:height=\"75dp\""},{"type":"INSERT","lineNumber":3,"content":"    android:viewportWidth=\"201\""},{"type":"INSERT","lineNumber":4,"content":"    android:viewportHeight=\"75\">"},{"type":"INSERT","lineNumber":5,"content":"  <path"},{"type":"INSERT","lineNumber":6,"content":"      android:pathData=\"M0,0h201v75h-201z\""},{"type":"INSERT","lineNumber":7,"content":"      android:fillColor=\"url(#pattern0_8_8)\"/>"},{"type":"INSERT","lineNumber":8,"content":"  <path"},{"type":"INSERT","lineNumber":9,"content":"      android:pathData=\"M60.19,37L68.67,14.6H74.06L82.67,37H77.34L75.6,32.2H67.07L65.38,37H60.19ZM68.19,28.2H74.45L71.28,19.78L68.19,28.2ZM85.61,37V14.6H94.49C96.11,14.6 97.53,14.87 98.73,15.42C99.95,15.95 100.88,16.72 101.53,17.74C102.19,18.75 102.52,19.96 102.52,21.37C102.52,22.48 102.3,23.45 101.87,24.3C101.43,25.13 100.83,25.82 100.06,26.38C99.3,26.93 98.43,27.33 97.43,27.58L103.71,37H98.06L92.67,28.49H90.35V37H85.61ZM90.35,24.66H93.87C95.08,24.66 96.03,24.42 96.71,23.93C97.41,23.43 97.75,22.67 97.75,21.66C97.75,20.61 97.43,19.83 96.79,19.3C96.17,18.78 95.24,18.52 94.03,18.52H90.35V24.66Z\""},{"type":"INSERT","lineNumber":10,"content":"      android:fillColor=\"#94AD0B\"/>"},{"type":"INSERT","lineNumber":12,"content":""}]},{"timestamp":1754314633077,"changes":[{"type":"MODIFY","lineNumber":1,"content":"    android:width=\"201dp\"","oldContent":"    android:width=\"201dp\""},{"type":"MODIFY","lineNumber":7,"content":"      android:fillColor=\"#FFFFFF\"/>","oldContent":"      android:fillColor=\"url(#pattern0_8_8)\"/>"},{"type":"MODIFY","lineNumber":12,"content":"","oldContent":""}]},{"timestamp":1754326070400,"changes":[{"type":"INSERT","lineNumber":0,"content":"<vector xmlns:android=\"http://schemas.android.com/apk/res/android\""},{"type":"DELETE","lineNumber":1,"oldContent":"    android:width=\"201dp\""},{"type":"MODIFY","lineNumber":7,"content":"      android:fillColor=\"url(#pattern0_8_8)\"/>","oldContent":"      android:fillColor=\"#FFFFFF\"/>"},{"type":"INSERT","lineNumber":11,"content":"</vector>"},{"type":"DELETE","lineNumber":12,"oldContent":""}]},{"timestamp":1754326121659,"changes":[{"type":"MODIFY","lineNumber":7,"content":"","oldContent":"      android:fillColor=\"url(#pattern0_8_8)\"/>"},{"type":"INSERT","lineNumber":8,"content":"    "}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ARInfoIsland.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ARInfoIsland.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.core.*\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.CameraAlt\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.CheckCircle\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.delay\n\n/**\n * AR Info Island - Semitransparente UI-Komponente im Apple Dynamic Island Style\n * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation\n */\n@Composable\nfun ARInfoIsland(\n    scanStatus: ARScanStatus,\n    modifier: Modifier = Modifier,\n    isVisible: Boolean = true\n) {\n    if (!isVisible) return\n    \n    // Animation für das Ein-/Ausblenden\n    val alpha by animateFloatAsState(\n        targetValue = if (isVisible) 0.85f else 0f,\n        animationSpec = tween(durationMillis = 300),\n        label = \"island_alpha\"\n    )\n    \n    // Pulsierender Effekt für bestimmte Status\n    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")\n    val pulseAlpha by pulseAnimation.animateFloat(\n        initialValue = 0.7f,\n        targetValue = 1f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(1000, easing = EaseInOut),\n            repeatMode = RepeatMode.Reverse\n        ),\n        label = \"pulse_alpha\"\n    )\n    \n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .padding(horizontal = 24.dp, vertical = 12.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Card(\n            modifier = Modifier\n                .clip(RoundedCornerShape(25.dp))\n                .blur(radius = 0.5.dp), // Subtiler Blur-Effekt\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = alpha)\n            ),\n            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\n        ) {\n            Row(\n                modifier = Modifier\n                    .padding(horizontal = 16.dp, vertical = 12.dp),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.spacedBy(12.dp)\n            ) {\n                // Status Icon mit Animation\n                val iconAlpha = if (scanStatus.shouldPulse) pulseAlpha else 1f\n                Icon(\n                    imageVector = scanStatus.icon,\n                    contentDescription = null,\n                    tint = scanStatus.color.copy(alpha = iconAlpha),\n                    modifier = Modifier.size(20.dp)\n                )\n                \n                // Status Text\n                Text(\n                    text = scanStatus.message,\n                    color = Color.White.copy(alpha = 0.9f),\n                    fontSize = 14.sp,\n                    fontWeight = FontWeight.Medium,\n                    textAlign = TextAlign.Center,\n                    maxLines = 1\n                )\n                \n                // Optionaler Fortschrittsindikator\n                if (scanStatus.showProgress) {\n                    CircularProgressIndicator(\n                        modifier = Modifier.size(16.dp),\n                        color = scanStatus.color,\n                        strokeWidth = 2.dp\n                    )\n                }\n            }\n        }\n    }\n}\n\n/**\n * Erweiterte AR Info Island mit mehr Informationen\n */\n@Composable\nfun ExpandedARInfoIsland(\n    scanStatus: ARScanStatus,\n    landmarkCount: Int = 0,\n    confidence: Float = 0f,\n    modifier: Modifier = Modifier,\n    isVisible: Boolean = true\n) {\n    if (!isVisible) return\n    \n    val alpha by animateFloatAsState(\n        targetValue = if (isVisible) 0.85f else 0f,\n        animationSpec = tween(durationMillis = 300),\n        label = \"expanded_island_alpha\"\n    )\n    \n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .padding(horizontal = 20.dp, vertical = 8.dp),\n        contentAlignment = Alignment.Center\n    ) {\n        Card(\n            modifier = Modifier\n                .clip(RoundedCornerShape(20.dp))\n                .blur(radius = 0.5.dp),\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = alpha)\n            ),\n            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\n        ) {\n            Column(\n                modifier = Modifier.padding(16.dp),\n                horizontalAlignment = Alignment.CenterHorizontally,\n                verticalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n                // Hauptstatus\n                Row(\n                    verticalAlignment = Alignment.CenterVertically,\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Icon(\n                        imageVector = scanStatus.icon,\n                        contentDescription = null,\n                        tint = scanStatus.color,\n                        modifier = Modifier.size(18.dp)\n                    )\n                    \n                    Text(\n                        text = scanStatus.message,\n                        color = Color.White.copy(alpha = 0.9f),\n                        fontSize = 14.sp,\n                        fontWeight = FontWeight.Medium\n                    )\n                }\n                \n                // Zusätzliche Informationen\n                if (landmarkCount > 0 || confidence > 0f) {\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.SpaceEvenly\n                    ) {\n                        if (landmarkCount > 0) {\n                            InfoChip(\n                                label = \"Landmarks\",\n                                value = landmarkCount.toString(),\n                                color = Color.Blue\n                            )\n                        }\n                        \n                        if (confidence > 0f) {\n                            InfoChip(\n                                label = \"Genauigkeit\",\n                                value = \"${(confidence * 100).toInt()}%\",\n                                color = getConfidenceColor(confidence)\n                            )\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun InfoChip(\n    label: String,\n    value: String,\n    color: Color,\n    modifier: Modifier = Modifier\n) {\n    Row(\n        modifier = modifier\n            .background(\n                color = color.copy(alpha = 0.2f),\n                shape = RoundedCornerShape(12.dp)\n            )\n            .padding(horizontal = 8.dp, vertical = 4.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.spacedBy(4.dp)\n    ) {\n        Text(\n            text = label,\n            color = Color.White.copy(alpha = 0.7f),\n            fontSize = 10.sp\n        )\n        Text(\n            text = value,\n            color = color,\n            fontSize = 12.sp,\n            fontWeight = FontWeight.Bold\n        )\n    }\n}\n\n/**\n * AR Scan Status Datenklasse\n */\ndata class ARScanStatus(\n    val message: String,\n    val icon: ImageVector,\n    val color: Color,\n    val shouldPulse: Boolean = false,\n    val showProgress: Boolean = false\n) {\n    companion object {\n        val INITIALIZING = ARScanStatus(\n            message = \"AR wird initialisiert...\",\n            icon = Icons.Default.CameraAlt,\n            color = Color.Blue,\n            showProgress = true\n        )\n        \n        val SCANNING = ARScanStatus(\n            message = \"Suche nach Landmarks...\",\n            icon = Icons.Default.Search,\n            color = Color.Yellow,\n            shouldPulse = true\n        )\n        \n        val LANDMARK_FOUND = ARScanStatus(\n            message = \"Landmark erkannt\",\n            icon = Icons.Default.CheckCircle,\n            color = Color.Green\n        )\n        \n        val MOVE_CAMERA = ARScanStatus(\n            message = \"Bewege Kamera langsam\",\n            icon = Icons.Default.CameraAlt,\n            color = Color(0xFFFF9800),\n            shouldPulse = true\n        )\n        \n        val LOW_CONFIDENCE = ARScanStatus(\n            message = \"Bessere Beleuchtung benötigt\",\n            icon = Icons.Default.Warning,\n            color = Color.Red,\n            shouldPulse = true\n        )\n        \n        val TRACKING_LOST = ARScanStatus(\n            message = \"Tracking verloren\",\n            icon = Icons.Default.Warning,\n            color = Color.Red\n        )\n        \n        fun custom(message: String, color: Color = Color.White) = ARScanStatus(\n            message = message,\n            icon = Icons.Default.CameraAlt,\n            color = color\n        )\n    }\n}\n\n/**\n * Bestimmt die Farbe basierend auf der Confidence\n */\nprivate fun getConfidenceColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.8f -> Color.Green\n        confidence >= 0.6f -> Color.Yellow\n        confidence >= 0.4f -> Color(0xFFFF9800)\n        else -> Color.Red\n    }\n}\n\n/**\n * Hook für automatische Status-Updates basierend auf AR-Zustand\n */\n@Composable\nfun rememberARScanStatus(\n    isInitialized: Boolean,\n    landmarkCount: Int,\n    bestConfidence: Float,\n    isTracking: Boolean\n): ARScanStatus {\n    var currentStatus by remember { mutableStateOf(ARScanStatus.INITIALIZING) }\n    \n    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, isTracking) {\n        currentStatus = when {\n            !isInitialized -> ARScanStatus.INITIALIZING\n            !isTracking -> ARScanStatus.TRACKING_LOST\n            landmarkCount == 0 -> ARScanStatus.SCANNING\n            bestConfidence < 0.4f -> ARScanStatus.LOW_CONFIDENCE\n            bestConfidence < 0.7f -> ARScanStatus.MOVE_CAMERA\n            else -> ARScanStatus.LANDMARK_FOUND\n        }\n    }\n    \n    return currentStatus\n}","baseTimestamp":1754250915530,"deltas":[{"timestamp":1754306762077,"changes":[{"type":"INSERT","lineNumber":26,"content":" * Status-Enum für AR-Scanning"},{"type":"INSERT","lineNumber":27,"content":" */"},{"type":"INSERT","lineNumber":28,"content":"enum class ARScanStatus {"},{"type":"INSERT","lineNumber":29,"content":"    INITIALIZING,   // System wird initialisiert"},{"type":"INSERT","lineNumber":30,"content":"    SCANNING,       // Sucht nach Landmarks"},{"type":"INSERT","lineNumber":31,"content":"    TRACKING,       // Landmark wird getrackt"},{"type":"INSERT","lineNumber":32,"content":"    LOST,          // Tracking verloren"},{"type":"INSERT","lineNumber":33,"content":"    NAVIGATING     // Navigation aktiv"},{"type":"INSERT","lineNumber":34,"content":"}"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"/**"},{"type":"INSERT","lineNumber":37,"content":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":38,"content":" */"},{"type":"INSERT","lineNumber":39,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":40,"content":"    ARScanStatus.SCANNING, ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":41,"content":"    else -> false"},{"type":"INSERT","lineNumber":42,"content":"}"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"private fun ARScanStatus.getIcon(): ImageVector = when (this) {"},{"type":"INSERT","lineNumber":45,"content":"    ARScanStatus.INITIALIZING -> Icons.Default.CameraAlt"},{"type":"INSERT","lineNumber":46,"content":"    ARScanStatus.SCANNING -> Icons.Default.Search"},{"type":"INSERT","lineNumber":47,"content":"    ARScanStatus.TRACKING -> Icons.Default.CheckCircle"},{"type":"INSERT","lineNumber":48,"content":"    ARScanStatus.LOST -> Icons.Default.Warning"},{"type":"INSERT","lineNumber":49,"content":"    ARScanStatus.NAVIGATING -> Icons.Default.CheckCircle"},{"type":"INSERT","lineNumber":50,"content":"}"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"private fun ARScanStatus.getColor(): Color = when (this) {"},{"type":"INSERT","lineNumber":53,"content":"    ARScanStatus.INITIALIZING -> Color.Blue"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.SCANNING -> Color.Yellow"},{"type":"INSERT","lineNumber":55,"content":"    ARScanStatus.TRACKING -> Color.Green"},{"type":"INSERT","lineNumber":56,"content":"    ARScanStatus.LOST -> Color.Red"},{"type":"INSERT","lineNumber":57,"content":"    ARScanStatus.NAVIGATING -> Color.Green"},{"type":"INSERT","lineNumber":58,"content":"}"},{"type":"INSERT","lineNumber":59,"content":""},{"type":"INSERT","lineNumber":60,"content":"private fun ARScanStatus.getMessage(): String = when (this) {"},{"type":"INSERT","lineNumber":61,"content":"    ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\""},{"type":"INSERT","lineNumber":62,"content":"    ARScanStatus.SCANNING -> \"Suche nach Landmarks...\""},{"type":"INSERT","lineNumber":63,"content":"    ARScanStatus.TRACKING -> \"Landmark erkannt\""},{"type":"INSERT","lineNumber":64,"content":"    ARScanStatus.LOST -> \"Landmark verloren\""},{"type":"INSERT","lineNumber":65,"content":"    ARScanStatus.NAVIGATING -> \"Navigation aktiv\""},{"type":"INSERT","lineNumber":66,"content":"}"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":69,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":70,"content":"    else -> false"},{"type":"INSERT","lineNumber":71,"content":"}"},{"type":"INSERT","lineNumber":72,"content":""},{"type":"INSERT","lineNumber":73,"content":"/**"},{"type":"DELETE","lineNumber":78,"oldContent":"                val iconAlpha = if (scanStatus.shouldPulse) pulseAlpha else 1f"},{"type":"INSERT","lineNumber":126,"content":"                val iconAlpha = if (scanStatus.shouldPulse()) pulseAlpha else 1f"},{"type":"DELETE","lineNumber":80,"oldContent":"                    imageVector = scanStatus.icon,"},{"type":"INSERT","lineNumber":128,"content":"                    imageVector = scanStatus.getIcon(),"},{"type":"DELETE","lineNumber":82,"oldContent":"                    tint = scanStatus.color.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":130,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":88,"oldContent":"                    text = scanStatus.message,"},{"type":"INSERT","lineNumber":136,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":97,"oldContent":"                if (scanStatus.showProgress) {"},{"type":"INSERT","lineNumber":145,"content":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":100,"oldContent":"                        color = scanStatus.color,"},{"type":"INSERT","lineNumber":148,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":109,"oldContent":"/**"},{"type":"DELETE","lineNumber":110,"oldContent":" * Erweiterte AR Info Island mit mehr Informationen"},{"type":"DELETE","lineNumber":111,"oldContent":" */"},{"type":"DELETE","lineNumber":112,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":113,"oldContent":"fun ExpandedARInfoIsland("},{"type":"DELETE","lineNumber":114,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":115,"oldContent":"    landmarkCount: Int = 0,"},{"type":"DELETE","lineNumber":116,"oldContent":"    confidence: Float = 0f,"},{"type":"DELETE","lineNumber":117,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":118,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":119,"oldContent":") {"},{"type":"DELETE","lineNumber":120,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":121,"oldContent":"    "},{"type":"DELETE","lineNumber":122,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":123,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":124,"oldContent":"        animationSpec = tween(durationMillis = 300),"},{"type":"DELETE","lineNumber":125,"oldContent":"        label = \"expanded_island_alpha\""},{"type":"DELETE","lineNumber":126,"oldContent":"    )"},{"type":"DELETE","lineNumber":127,"oldContent":"    "},{"type":"DELETE","lineNumber":128,"oldContent":"    Box("},{"type":"DELETE","lineNumber":129,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":130,"oldContent":"            .fillMaxWidth()"},{"type":"DELETE","lineNumber":131,"oldContent":"            .padding(horizontal = 20.dp, vertical = 8.dp),"},{"type":"DELETE","lineNumber":132,"oldContent":"        contentAlignment = Alignment.Center"},{"type":"DELETE","lineNumber":133,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":134,"oldContent":"        Card("},{"type":"DELETE","lineNumber":135,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":136,"oldContent":"                .clip(RoundedCornerShape(20.dp))"},{"type":"DELETE","lineNumber":137,"oldContent":"                .blur(radius = 0.5.dp),"},{"type":"DELETE","lineNumber":138,"oldContent":"            colors = CardDefaults.cardColors("},{"type":"DELETE","lineNumber":139,"oldContent":"                containerColor = Color.Black.copy(alpha = alpha)"},{"type":"DELETE","lineNumber":140,"oldContent":"            ),"},{"type":"DELETE","lineNumber":141,"oldContent":"            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)"},{"type":"DELETE","lineNumber":142,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":143,"oldContent":"            Column("},{"type":"DELETE","lineNumber":144,"oldContent":"                modifier = Modifier.padding(16.dp),"},{"type":"DELETE","lineNumber":145,"oldContent":"                horizontalAlignment = Alignment.CenterHorizontally,"},{"type":"DELETE","lineNumber":146,"oldContent":"                verticalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"DELETE","lineNumber":147,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":148,"oldContent":"                // Hauptstatus"},{"type":"DELETE","lineNumber":149,"oldContent":"                Row("},{"type":"DELETE","lineNumber":150,"oldContent":"                    verticalAlignment = Alignment.CenterVertically,"},{"type":"DELETE","lineNumber":151,"oldContent":"                    horizontalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"DELETE","lineNumber":152,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                    Icon("},{"type":"DELETE","lineNumber":154,"oldContent":"                        imageVector = scanStatus.icon,"},{"type":"DELETE","lineNumber":155,"oldContent":"                        contentDescription = null,"},{"type":"DELETE","lineNumber":156,"oldContent":"                        tint = scanStatus.color,"},{"type":"DELETE","lineNumber":157,"oldContent":"                        modifier = Modifier.size(18.dp)"},{"type":"DELETE","lineNumber":158,"oldContent":"                    )"},{"type":"DELETE","lineNumber":159,"oldContent":"                    "},{"type":"DELETE","lineNumber":160,"oldContent":"                    Text("},{"type":"DELETE","lineNumber":161,"oldContent":"                        text = scanStatus.message,"},{"type":"DELETE","lineNumber":162,"oldContent":"                        color = Color.White.copy(alpha = 0.9f),"},{"type":"DELETE","lineNumber":163,"oldContent":"                        fontSize = 14.sp,"},{"type":"DELETE","lineNumber":164,"oldContent":"                        fontWeight = FontWeight.Medium"},{"type":"DELETE","lineNumber":165,"oldContent":"                    )"},{"type":"DELETE","lineNumber":166,"oldContent":"                }"},{"type":"DELETE","lineNumber":167,"oldContent":"                "},{"type":"DELETE","lineNumber":168,"oldContent":"                // Zusätzliche Informationen"},{"type":"DELETE","lineNumber":169,"oldContent":"                if (landmarkCount > 0 || confidence > 0f) {"},{"type":"DELETE","lineNumber":170,"oldContent":"                    Row("},{"type":"DELETE","lineNumber":171,"oldContent":"                        modifier = Modifier.fillMaxWidth(),"},{"type":"DELETE","lineNumber":172,"oldContent":"                        horizontalArrangement = Arrangement.SpaceEvenly"},{"type":"DELETE","lineNumber":173,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":174,"oldContent":"                        if (landmarkCount > 0) {"},{"type":"DELETE","lineNumber":175,"oldContent":"                            InfoChip("},{"type":"DELETE","lineNumber":176,"oldContent":"                                label = \"Landmarks\","},{"type":"DELETE","lineNumber":177,"oldContent":"                                value = landmarkCount.toString(),"},{"type":"DELETE","lineNumber":178,"oldContent":"                                color = Color.Blue"},{"type":"DELETE","lineNumber":179,"oldContent":"                            )"},{"type":"DELETE","lineNumber":180,"oldContent":"                        }"},{"type":"DELETE","lineNumber":181,"oldContent":"                        "},{"type":"DELETE","lineNumber":182,"oldContent":"                        if (confidence > 0f) {"},{"type":"DELETE","lineNumber":183,"oldContent":"                            InfoChip("},{"type":"DELETE","lineNumber":184,"oldContent":"                                label = \"Genauigkeit\","},{"type":"DELETE","lineNumber":185,"oldContent":"                                value = \"${(confidence * 100).toInt()}%\","},{"type":"DELETE","lineNumber":186,"oldContent":"                                color = getConfidenceColor(confidence)"},{"type":"DELETE","lineNumber":187,"oldContent":"                            )"},{"type":"DELETE","lineNumber":188,"oldContent":"                        }"},{"type":"DELETE","lineNumber":189,"oldContent":"                    }"},{"type":"DELETE","lineNumber":190,"oldContent":"                }"},{"type":"DELETE","lineNumber":191,"oldContent":"            }"},{"type":"DELETE","lineNumber":192,"oldContent":"        }"},{"type":"DELETE","lineNumber":193,"oldContent":"    }"},{"type":"DELETE","lineNumber":194,"oldContent":"}"},{"type":"DELETE","lineNumber":196,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":197,"oldContent":"private fun InfoChip("},{"type":"DELETE","lineNumber":198,"oldContent":"    label: String,"},{"type":"DELETE","lineNumber":199,"oldContent":"    value: String,"},{"type":"DELETE","lineNumber":200,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":201,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":202,"oldContent":") {"},{"type":"DELETE","lineNumber":203,"oldContent":"    Row("},{"type":"DELETE","lineNumber":204,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":205,"oldContent":"            .background("},{"type":"DELETE","lineNumber":206,"oldContent":"                color = color.copy(alpha = 0.2f),"},{"type":"DELETE","lineNumber":207,"oldContent":"                shape = RoundedCornerShape(12.dp)"},{"type":"DELETE","lineNumber":208,"oldContent":"            )"},{"type":"DELETE","lineNumber":209,"oldContent":"            .padding(horizontal = 8.dp, vertical = 4.dp),"},{"type":"DELETE","lineNumber":210,"oldContent":"        verticalAlignment = Alignment.CenterVertically,"},{"type":"DELETE","lineNumber":211,"oldContent":"        horizontalArrangement = Arrangement.spacedBy(4.dp)"},{"type":"DELETE","lineNumber":212,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":213,"oldContent":"        Text("},{"type":"DELETE","lineNumber":214,"oldContent":"            text = label,"},{"type":"DELETE","lineNumber":215,"oldContent":"            color = Color.White.copy(alpha = 0.7f),"},{"type":"DELETE","lineNumber":216,"oldContent":"            fontSize = 10.sp"},{"type":"DELETE","lineNumber":217,"oldContent":"        )"},{"type":"DELETE","lineNumber":218,"oldContent":"        Text("},{"type":"DELETE","lineNumber":219,"oldContent":"            text = value,"},{"type":"DELETE","lineNumber":220,"oldContent":"            color = color,"},{"type":"DELETE","lineNumber":221,"oldContent":"            fontSize = 12.sp,"},{"type":"DELETE","lineNumber":222,"oldContent":"            fontWeight = FontWeight.Bold"},{"type":"DELETE","lineNumber":223,"oldContent":"        )"},{"type":"DELETE","lineNumber":224,"oldContent":"    }"},{"type":"DELETE","lineNumber":225,"oldContent":"}"},{"type":"DELETE","lineNumber":228,"oldContent":" * AR Scan Status Datenklasse"},{"type":"DELETE","lineNumber":229,"oldContent":" */"},{"type":"DELETE","lineNumber":230,"oldContent":"data class ARScanStatus("},{"type":"DELETE","lineNumber":231,"oldContent":"    val message: String,"},{"type":"DELETE","lineNumber":232,"oldContent":"    val icon: ImageVector,"},{"type":"DELETE","lineNumber":233,"oldContent":"    val color: Color,"},{"type":"DELETE","lineNumber":234,"oldContent":"    val shouldPulse: Boolean = false,"},{"type":"DELETE","lineNumber":235,"oldContent":"    val showProgress: Boolean = false"},{"type":"DELETE","lineNumber":236,"oldContent":") {"},{"type":"DELETE","lineNumber":237,"oldContent":"    companion object {"},{"type":"DELETE","lineNumber":238,"oldContent":"        val INITIALIZING = ARScanStatus("},{"type":"DELETE","lineNumber":239,"oldContent":"            message = \"AR wird initialisiert...\","},{"type":"DELETE","lineNumber":240,"oldContent":"            icon = Icons.Default.CameraAlt,"},{"type":"DELETE","lineNumber":241,"oldContent":"            color = Color.Blue,"},{"type":"DELETE","lineNumber":242,"oldContent":"            showProgress = true"},{"type":"DELETE","lineNumber":243,"oldContent":"        )"},{"type":"DELETE","lineNumber":244,"oldContent":"        "},{"type":"DELETE","lineNumber":245,"oldContent":"        val SCANNING = ARScanStatus("},{"type":"DELETE","lineNumber":246,"oldContent":"            message = \"Suche nach Landmarks...\","},{"type":"DELETE","lineNumber":247,"oldContent":"            icon = Icons.Default.Search,"},{"type":"DELETE","lineNumber":248,"oldContent":"            color = Color.Yellow,"},{"type":"DELETE","lineNumber":249,"oldContent":"            shouldPulse = true"},{"type":"DELETE","lineNumber":250,"oldContent":"        )"},{"type":"DELETE","lineNumber":251,"oldContent":"        "},{"type":"DELETE","lineNumber":252,"oldContent":"        val LANDMARK_FOUND = ARScanStatus("},{"type":"DELETE","lineNumber":253,"oldContent":"            message = \"Landmark erkannt\","},{"type":"DELETE","lineNumber":254,"oldContent":"            icon = Icons.Default.CheckCircle,"},{"type":"DELETE","lineNumber":255,"oldContent":"            color = Color.Green"},{"type":"DELETE","lineNumber":256,"oldContent":"        )"},{"type":"DELETE","lineNumber":257,"oldContent":"        "},{"type":"DELETE","lineNumber":258,"oldContent":"        val MOVE_CAMERA = ARScanStatus("},{"type":"DELETE","lineNumber":259,"oldContent":"            message = \"Bewege Kamera langsam\","},{"type":"DELETE","lineNumber":260,"oldContent":"            icon = Icons.Default.CameraAlt,"},{"type":"DELETE","lineNumber":261,"oldContent":"            color = Color(0xFFFF9800),"},{"type":"DELETE","lineNumber":262,"oldContent":"            shouldPulse = true"},{"type":"DELETE","lineNumber":263,"oldContent":"        )"},{"type":"DELETE","lineNumber":264,"oldContent":"        "},{"type":"DELETE","lineNumber":265,"oldContent":"        val LOW_CONFIDENCE = ARScanStatus("},{"type":"DELETE","lineNumber":266,"oldContent":"            message = \"Bessere Beleuchtung benötigt\","},{"type":"DELETE","lineNumber":267,"oldContent":"            icon = Icons.Default.Warning,"},{"type":"DELETE","lineNumber":268,"oldContent":"            color = Color.Red,"},{"type":"DELETE","lineNumber":269,"oldContent":"            shouldPulse = true"},{"type":"DELETE","lineNumber":270,"oldContent":"        )"},{"type":"DELETE","lineNumber":271,"oldContent":"        "},{"type":"DELETE","lineNumber":272,"oldContent":"        val TRACKING_LOST = ARScanStatus("},{"type":"DELETE","lineNumber":273,"oldContent":"            message = \"Tracking verloren\","},{"type":"DELETE","lineNumber":274,"oldContent":"            icon = Icons.Default.Warning,"},{"type":"DELETE","lineNumber":275,"oldContent":"            color = Color.Red"},{"type":"DELETE","lineNumber":276,"oldContent":"        )"},{"type":"DELETE","lineNumber":277,"oldContent":"        "},{"type":"DELETE","lineNumber":278,"oldContent":"        fun custom(message: String, color: Color = Color.White) = ARScanStatus("},{"type":"DELETE","lineNumber":279,"oldContent":"            message = message,"},{"type":"DELETE","lineNumber":280,"oldContent":"            icon = Icons.Default.CameraAlt,"},{"type":"DELETE","lineNumber":281,"oldContent":"            color = color"},{"type":"DELETE","lineNumber":282,"oldContent":"        )"},{"type":"DELETE","lineNumber":283,"oldContent":"    }"},{"type":"DELETE","lineNumber":284,"oldContent":"}"},{"type":"DELETE","lineNumber":285,"oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"/**"},{"type":"INSERT","lineNumber":182,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":183,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":310,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, isTracking) {"},{"type":"INSERT","lineNumber":185,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":186,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":187,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":188,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":189,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":190,"content":"        } else {"},{"type":"INSERT","lineNumber":191,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":192,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":193,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":194,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":195,"content":"            }"},{"type":"INSERT","lineNumber":196,"content":"        }"},{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":313,"oldContent":"            !isTracking -> ARScanStatus.TRACKING_LOST"},{"type":"INSERT","lineNumber":202,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":315,"oldContent":"            bestConfidence < 0.4f -> ARScanStatus.LOW_CONFIDENCE"},{"type":"DELETE","lineNumber":316,"oldContent":"            bestConfidence < 0.7f -> ARScanStatus.MOVE_CAMERA"},{"type":"DELETE","lineNumber":317,"oldContent":"            else -> ARScanStatus.LANDMARK_FOUND"},{"type":"INSERT","lineNumber":204,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":205,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":206,"content":"            else -> ARScanStatus.SCANNING"}]},{"timestamp":1754314675801,"changes":[{"type":"DELETE","lineNumber":27,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Apple Dynamic Island Style"},{"type":"DELETE","lineNumber":29,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":31,"oldContent":" */"},{"type":"DELETE","lineNumber":33,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":35,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":37,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":39,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":41,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":43,"oldContent":") {"},{"type":"DELETE","lineNumber":45,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":47,"oldContent":"    "},{"type":"DELETE","lineNumber":49,"oldContent":"    // Animation für das Ein-/Ausblenden"},{"type":"DELETE","lineNumber":51,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":53,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":55,"oldContent":"        animationSpec = tween(durationMillis = 300),"},{"type":"DELETE","lineNumber":57,"oldContent":"        label = \"island_alpha\""},{"type":"DELETE","lineNumber":59,"oldContent":"    )"},{"type":"DELETE","lineNumber":61,"oldContent":"    "},{"type":"DELETE","lineNumber":63,"oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"DELETE","lineNumber":65,"oldContent":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"DELETE","lineNumber":67,"oldContent":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"DELETE","lineNumber":69,"oldContent":"        initialValue = 0.7f,"},{"type":"DELETE","lineNumber":71,"oldContent":"        targetValue = 1f,"},{"type":"DELETE","lineNumber":73,"oldContent":"        animationSpec = infiniteRepeatable("},{"type":"DELETE","lineNumber":75,"oldContent":"            animation = tween(1000, easing = EaseInOut),"},{"type":"DELETE","lineNumber":77,"oldContent":"            repeatMode = RepeatMode.Reverse"},{"type":"DELETE","lineNumber":79,"oldContent":"        ),"},{"type":"DELETE","lineNumber":81,"oldContent":"        label = \"pulse_alpha\""},{"type":"DELETE","lineNumber":83,"oldContent":"    )"},{"type":"DELETE","lineNumber":85,"oldContent":"    "},{"type":"DELETE","lineNumber":87,"oldContent":"    Box("},{"type":"DELETE","lineNumber":89,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":91,"oldContent":"            .fillMaxWidth()"},{"type":"DELETE","lineNumber":93,"oldContent":"            .padding(horizontal = 24.dp, vertical = 12.dp),"},{"type":"DELETE","lineNumber":95,"oldContent":"        contentAlignment = Alignment.Center"},{"type":"DELETE","lineNumber":97,"oldContent":"    ) {"},{"type":"DELETE","lineNumber":99,"oldContent":"        Card("},{"type":"DELETE","lineNumber":101,"oldContent":"            modifier = Modifier"},{"type":"DELETE","lineNumber":103,"oldContent":"                .clip(RoundedCornerShape(25.dp))"},{"type":"DELETE","lineNumber":105,"oldContent":"                .blur(radius = 0.5.dp), // Subtiler Blur-Effekt"},{"type":"DELETE","lineNumber":107,"oldContent":"            colors = CardDefaults.cardColors("},{"type":"DELETE","lineNumber":109,"oldContent":"                containerColor = Color.Black.copy(alpha = alpha)"},{"type":"DELETE","lineNumber":111,"oldContent":"            ),"},{"type":"DELETE","lineNumber":113,"oldContent":"            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)"},{"type":"DELETE","lineNumber":115,"oldContent":"        ) {"},{"type":"DELETE","lineNumber":117,"oldContent":"            Row("},{"type":"DELETE","lineNumber":119,"oldContent":"                modifier = Modifier"},{"type":"INSERT","lineNumber":74,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":75,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":76,"content":" */"},{"type":"INSERT","lineNumber":77,"content":"@Composable"},{"type":"INSERT","lineNumber":78,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":79,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":80,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":81,"content":"    isVisible: Boolean = true"},{"type":"INSERT","lineNumber":82,"content":") {"},{"type":"INSERT","lineNumber":83,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":84,"content":"    "},{"type":"INSERT","lineNumber":85,"content":"    // Animation für das Ein-/Ausblenden"},{"type":"INSERT","lineNumber":86,"content":"    val alpha by animateFloatAsState("},{"type":"INSERT","lineNumber":87,"content":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"INSERT","lineNumber":88,"content":"        animationSpec = tween(durationMillis = 300),"},{"type":"INSERT","lineNumber":89,"content":"        label = \"island_alpha\""},{"type":"INSERT","lineNumber":90,"content":"    )"},{"type":"INSERT","lineNumber":91,"content":"    "},{"type":"INSERT","lineNumber":92,"content":"    // Pulsierender Effekt für bestimmte Status"},{"type":"INSERT","lineNumber":93,"content":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"INSERT","lineNumber":94,"content":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"INSERT","lineNumber":95,"content":"        initialValue = 0.7f,"},{"type":"INSERT","lineNumber":96,"content":"        targetValue = 1f,"},{"type":"INSERT","lineNumber":97,"content":"        animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":98,"content":"            animation = tween(1000, easing = EaseInOut),"},{"type":"INSERT","lineNumber":99,"content":"            repeatMode = RepeatMode.Reverse"},{"type":"INSERT","lineNumber":100,"content":"        ),"},{"type":"INSERT","lineNumber":101,"content":"        label = \"pulse_alpha\""},{"type":"INSERT","lineNumber":102,"content":"    )"},{"type":"INSERT","lineNumber":103,"content":"    "},{"type":"INSERT","lineNumber":104,"content":"    Box("},{"type":"INSERT","lineNumber":105,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":106,"content":"            .fillMaxWidth()"},{"type":"INSERT","lineNumber":107,"content":"            .padding(horizontal = 24.dp, vertical = 12.dp),"},{"type":"INSERT","lineNumber":108,"content":"        contentAlignment = Alignment.Center"},{"type":"INSERT","lineNumber":109,"content":"    ) {"},{"type":"INSERT","lineNumber":110,"content":"        Card("},{"type":"INSERT","lineNumber":111,"content":"            modifier = Modifier"},{"type":"INSERT","lineNumber":112,"content":"                .clip(RoundedCornerShape(25.dp))"},{"type":"INSERT","lineNumber":113,"content":"                .blur(radius = 0.5.dp), // Subtiler Blur-Effekt"},{"type":"INSERT","lineNumber":114,"content":"            colors = CardDefaults.cardColors("},{"type":"INSERT","lineNumber":115,"content":"                containerColor = Color.Black.copy(alpha = alpha)"},{"type":"INSERT","lineNumber":116,"content":"            ),"},{"type":"INSERT","lineNumber":117,"content":"            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)"},{"type":"INSERT","lineNumber":118,"content":"        ) {"},{"type":"INSERT","lineNumber":119,"content":"            Row("},{"type":"INSERT","lineNumber":120,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":126,"content":"                val iconAlpha = if (scanStatus.shouldPulse()) pulseAlpha else 1f"},{"type":"INSERT","lineNumber":128,"content":"                    imageVector = scanStatus.getIcon(),"},{"type":"INSERT","lineNumber":130,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":136,"content":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":145,"content":"                if (scanStatus.showProgress()) {"},{"type":"INSERT","lineNumber":148,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":151,"oldContent":"                val iconAlpha = if (scanStatus.shouldPulse()) pulseAlpha else 1f"},{"type":"DELETE","lineNumber":152,"oldContent":"                    imageVector = scanStatus.getIcon(),"},{"type":"DELETE","lineNumber":153,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":154,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":155,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":156,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":157,"oldContent":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"DELETE","lineNumber":158,"oldContent":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":159,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":160,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":161,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":162,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":163,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":164,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":165,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":166,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":167,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":168,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":169,"oldContent":"            }"},{"type":"DELETE","lineNumber":171,"oldContent":"        }"},{"type":"DELETE","lineNumber":172,"oldContent":"    }"},{"type":"DELETE","lineNumber":173,"oldContent":"    "},{"type":"DELETE","lineNumber":174,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":175,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":176,"oldContent":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"DELETE","lineNumber":177,"oldContent":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"DELETE","lineNumber":178,"oldContent":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":182,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":183,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"INSERT","lineNumber":185,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":186,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":187,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":188,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":189,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":190,"content":"        } else {"},{"type":"INSERT","lineNumber":191,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":192,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":193,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":194,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":195,"content":"            }"},{"type":"INSERT","lineNumber":196,"content":"        }"},{"type":"INSERT","lineNumber":197,"content":"    }"},{"type":"INSERT","lineNumber":198,"content":"    "},{"type":"INSERT","lineNumber":199,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"INSERT","lineNumber":202,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":204,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":205,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":206,"content":"            else -> ARScanStatus.SCANNING"}]},{"timestamp":1754326761386,"changes":[{"type":"DELETE","lineNumber":6,"oldContent":"import androidx.compose.material.icons.Icons"},{"type":"DELETE","lineNumber":7,"oldContent":"import androidx.compose.material.icons.filled.CameraAlt"},{"type":"DELETE","lineNumber":8,"oldContent":"import androidx.compose.material.icons.filled.Search"},{"type":"DELETE","lineNumber":9,"oldContent":"import androidx.compose.material.icons.filled.CheckCircle"},{"type":"DELETE","lineNumber":10,"oldContent":"import androidx.compose.material.icons.filled.Warning"},{"type":"INSERT","lineNumber":6,"content":"import androidx.compose.ui.res.painterResource"},{"type":"INSERT","lineNumber":7,"content":"import com.example.arwalking.R"},{"type":"DELETE","lineNumber":44,"oldContent":"private fun ARScanStatus.getIcon(): ImageVector = when (this) {"},{"type":"DELETE","lineNumber":45,"oldContent":"    ARScanStatus.INITIALIZING -> Icons.Default.CameraAlt"},{"type":"DELETE","lineNumber":46,"oldContent":"    ARScanStatus.SCANNING -> Icons.Default.Search"},{"type":"DELETE","lineNumber":47,"oldContent":"    ARScanStatus.TRACKING -> Icons.Default.CheckCircle"},{"type":"DELETE","lineNumber":48,"oldContent":"    ARScanStatus.LOST -> Icons.Default.Warning"},{"type":"DELETE","lineNumber":49,"oldContent":"    ARScanStatus.NAVIGATING -> Icons.Default.CheckCircle"},{"type":"DELETE","lineNumber":50,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":41,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":42,"content":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":43,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":44,"content":"    ARScanStatus.TRACKING -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":45,"content":"    ARScanStatus.LOST -> R.drawable.alert_circle"},{"type":"INSERT","lineNumber":46,"content":"    ARScanStatus.NAVIGATING -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"private fun ARScanStatus.getColor(): Color = when (this) {"},{"type":"INSERT","lineNumber":50,"content":"    ARScanStatus.INITIALIZING -> Color.Blue"},{"type":"INSERT","lineNumber":51,"content":"    ARScanStatus.SCANNING -> Color.Yellow"},{"type":"INSERT","lineNumber":52,"content":"    ARScanStatus.TRACKING -> Color.Green"},{"type":"INSERT","lineNumber":53,"content":"    ARScanStatus.LOST -> Color.Red"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.NAVIGATING -> Color.Green"},{"type":"INSERT","lineNumber":55,"content":"}"},{"type":"INSERT","lineNumber":56,"content":""},{"type":"INSERT","lineNumber":57,"content":"private fun ARScanStatus.getMessage(): String = when (this) {"},{"type":"INSERT","lineNumber":58,"content":"    ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\""},{"type":"INSERT","lineNumber":59,"content":"    ARScanStatus.SCANNING -> \"Suche nach Landmarks...\""},{"type":"INSERT","lineNumber":60,"content":"    ARScanStatus.TRACKING -> \"Landmark erkannt\""},{"type":"INSERT","lineNumber":61,"content":"    ARScanStatus.LOST -> \"Landmark verloren\""},{"type":"INSERT","lineNumber":62,"content":"    ARScanStatus.NAVIGATING -> \"Navigation aktiv\""},{"type":"INSERT","lineNumber":63,"content":"}"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":66,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":67,"content":"    else -> false"},{"type":"INSERT","lineNumber":68,"content":"}"},{"type":"INSERT","lineNumber":69,"content":""},{"type":"INSERT","lineNumber":70,"content":"/**"},{"type":"INSERT","lineNumber":71,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":"private fun ARScanStatus.getColor(): Color = when (this) {"},{"type":"DELETE","lineNumber":60,"oldContent":"    ARScanStatus.INITIALIZING -> Color.Blue"},{"type":"DELETE","lineNumber":63,"oldContent":"    ARScanStatus.SCANNING -> Color.Yellow"},{"type":"DELETE","lineNumber":66,"oldContent":"    ARScanStatus.TRACKING -> Color.Green"},{"type":"DELETE","lineNumber":69,"oldContent":"    ARScanStatus.LOST -> Color.Red"},{"type":"DELETE","lineNumber":72,"oldContent":"    ARScanStatus.NAVIGATING -> Color.Green"},{"type":"DELETE","lineNumber":75,"oldContent":"}"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"private fun ARScanStatus.getMessage(): String = when (this) {"},{"type":"DELETE","lineNumber":84,"oldContent":"    ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\""},{"type":"DELETE","lineNumber":87,"oldContent":"    ARScanStatus.SCANNING -> \"Suche nach Landmarks...\""},{"type":"DELETE","lineNumber":90,"oldContent":"    ARScanStatus.TRACKING -> \"Landmark erkannt\""},{"type":"DELETE","lineNumber":93,"oldContent":"    ARScanStatus.LOST -> \"Landmark verloren\""},{"type":"DELETE","lineNumber":96,"oldContent":"    ARScanStatus.NAVIGATING -> \"Navigation aktiv\""},{"type":"DELETE","lineNumber":99,"oldContent":"}"},{"type":"DELETE","lineNumber":102,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":108,"oldContent":"    ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":111,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":114,"oldContent":"}"},{"type":"DELETE","lineNumber":117,"oldContent":""},{"type":"DELETE","lineNumber":120,"oldContent":"/**"},{"type":"DELETE","lineNumber":128,"oldContent":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":126,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":127,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"MODIFY","lineNumber":133,"content":"                    text = scanStatus.getMessage(),","oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":139,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":142,"content":"                if (scanStatus.showProgress()) {"},{"type":"INSERT","lineNumber":145,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":149,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":161,"oldContent":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"DELETE","lineNumber":163,"oldContent":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":166,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":168,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":170,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":172,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":174,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":176,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":178,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":180,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":182,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":184,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":186,"oldContent":"            }"},{"type":"DELETE","lineNumber":188,"oldContent":"        }"},{"type":"DELETE","lineNumber":190,"oldContent":"    }"},{"type":"DELETE","lineNumber":192,"oldContent":"    "},{"type":"DELETE","lineNumber":194,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":198,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":179,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":180,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"DELETE","lineNumber":201,"oldContent":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":182,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":183,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":184,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":185,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":186,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":187,"content":"        } else {"},{"type":"INSERT","lineNumber":188,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":189,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":190,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":191,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":192,"content":"            }"},{"type":"INSERT","lineNumber":193,"content":"        }"},{"type":"INSERT","lineNumber":194,"content":"    }"},{"type":"INSERT","lineNumber":195,"content":"    "},{"type":"INSERT","lineNumber":196,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":203,"oldContent":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"DELETE","lineNumber":205,"oldContent":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":199,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":201,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":202,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":203,"content":"            else -> ARScanStatus.SCANNING"}]},{"timestamp":1754329203308,"changes":[{"type":"DELETE","lineNumber":38,"oldContent":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":40,"oldContent":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":42,"oldContent":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":41,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":42,"content":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":43,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":47,"content":"}"},{"type":"DELETE","lineNumber":51,"oldContent":"}"},{"type":"DELETE","lineNumber":53,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":55,"oldContent":" */"},{"type":"DELETE","lineNumber":58,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":60,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":63,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":65,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":68,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":70,"oldContent":") {"},{"type":"DELETE","lineNumber":73,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":75,"oldContent":"    "},{"type":"DELETE","lineNumber":78,"oldContent":"    // Animation für das Ein-/Ausblenden"},{"type":"DELETE","lineNumber":80,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":83,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"INSERT","lineNumber":72,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":73,"content":" */"},{"type":"INSERT","lineNumber":74,"content":"@Composable"},{"type":"INSERT","lineNumber":75,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":76,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":77,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":78,"content":"    isVisible: Boolean = true"},{"type":"INSERT","lineNumber":79,"content":") {"},{"type":"INSERT","lineNumber":80,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":81,"content":"    "},{"type":"INSERT","lineNumber":82,"content":"    // Animation für das Ein-/Ausblenden"},{"type":"INSERT","lineNumber":83,"content":"    val alpha by animateFloatAsState("},{"type":"INSERT","lineNumber":84,"content":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":123,"oldContent":"                    contentDescription = null,"},{"type":"DELETE","lineNumber":125,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":127,"oldContent":"                    imageVector = scanStatus.getIcon(),"},{"type":"INSERT","lineNumber":125,"content":"                    painter = painterResource(id = scanStatus.getIconResource()),"},{"type":"INSERT","lineNumber":126,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":127,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":130,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":131,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":130,"content":"                "},{"type":"INSERT","lineNumber":133,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":139,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"MODIFY","lineNumber":142,"content":"                if (scanStatus.showProgress()) {","oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":145,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":167,"oldContent":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"MODIFY","lineNumber":169,"content":" * Hook für automatische Status-Updates basierend auf AR-Zustand","oldContent":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"INSERT","lineNumber":170,"content":" */"},{"type":"INSERT","lineNumber":171,"content":"@Composable"},{"type":"INSERT","lineNumber":172,"content":"fun rememberARScanStatus("},{"type":"INSERT","lineNumber":173,"content":"    isInitialized: Boolean,"},{"type":"INSERT","lineNumber":174,"content":"    landmarkCount: Int,"},{"type":"INSERT","lineNumber":175,"content":"    bestConfidence: Float,"},{"type":"INSERT","lineNumber":176,"content":"    isTracking: Boolean"},{"type":"INSERT","lineNumber":177,"content":"): ARScanStatus {"},{"type":"INSERT","lineNumber":178,"content":"    var currentStatus by remember { mutableStateOf(ARScanStatus.INITIALIZING) }"},{"type":"INSERT","lineNumber":179,"content":"    var stableTrackingState by remember { mutableStateOf(true) }"},{"type":"INSERT","lineNumber":180,"content":"    var lastTrackingTime by remember { mutableStateOf(System.currentTimeMillis()) }"},{"type":"INSERT","lineNumber":181,"content":"    "},{"type":"DELETE","lineNumber":173,"oldContent":" * Hook für automatische Status-Updates basierend auf AR-Zustand"},{"type":"DELETE","lineNumber":176,"oldContent":" */"},{"type":"DELETE","lineNumber":179,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":182,"oldContent":"fun rememberARScanStatus("},{"type":"DELETE","lineNumber":185,"oldContent":"    isInitialized: Boolean,"},{"type":"DELETE","lineNumber":188,"oldContent":"    landmarkCount: Int,"},{"type":"DELETE","lineNumber":191,"oldContent":"    bestConfidence: Float,"},{"type":"DELETE","lineNumber":193,"oldContent":"    isTracking: Boolean"},{"type":"DELETE","lineNumber":194,"oldContent":"): ARScanStatus {"},{"type":"INSERT","lineNumber":197,"content":"        currentStatus = when {"},{"type":"INSERT","lineNumber":198,"content":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"DELETE","lineNumber":196,"oldContent":"    var currentStatus by remember { mutableStateOf(ARScanStatus.INITIALIZING) }"},{"type":"DELETE","lineNumber":197,"oldContent":"    "},{"type":"INSERT","lineNumber":200,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":200,"oldContent":"        currentStatus = when {"},{"type":"DELETE","lineNumber":202,"oldContent":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"DELETE","lineNumber":203,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754330139631,"changes":[{"type":"INSERT","lineNumber":34,"content":" * Enum für verschiedene Navigationsaktionen"},{"type":"INSERT","lineNumber":35,"content":" */"},{"type":"INSERT","lineNumber":36,"content":"enum class NavigationAction {"},{"type":"INSERT","lineNumber":37,"content":"    STRAIGHT,       // Geradeaus gehen"},{"type":"INSERT","lineNumber":38,"content":"    TURN_LEFT,      // Links abbiegen"},{"type":"INSERT","lineNumber":39,"content":"    TURN_RIGHT,     // Rechts abbiegen"},{"type":"INSERT","lineNumber":40,"content":"    THROUGH_DOOR,   // Durch Tür gehen"},{"type":"INSERT","lineNumber":41,"content":"    UNKNOWN         // Unbekannte Aktion"},{"type":"INSERT","lineNumber":42,"content":"}"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"/**"},{"type":"DELETE","lineNumber":39,"oldContent":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":76,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":77,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":78,"content":"    else -> false"},{"type":"INSERT","lineNumber":79,"content":"}"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"/**"},{"type":"INSERT","lineNumber":82,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":83,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":68,"oldContent":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":71,"oldContent":"    ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":73,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":76,"oldContent":"}"},{"type":"DELETE","lineNumber":79,"oldContent":""},{"type":"DELETE","lineNumber":81,"oldContent":"/**"},{"type":"DELETE","lineNumber":84,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":135,"content":"                Icon("},{"type":"DELETE","lineNumber":126,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":132,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":144,"content":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":152,"content":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":142,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":144,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":156,"content":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":179,"content":"/**"},{"type":"DELETE","lineNumber":170,"oldContent":"/**"},{"type":"DELETE","lineNumber":172,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":174,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":177,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":179,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":182,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":184,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":187,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":193,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":194,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":195,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":196,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":197,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":198,"content":"        } else {"},{"type":"INSERT","lineNumber":199,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":197,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":210,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":211,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":202,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754330148124,"changes":[{"type":"DELETE","lineNumber":35,"oldContent":" * Helper functions für ARScanStatus enum"},{"type":"DELETE","lineNumber":37,"oldContent":" */"},{"type":"DELETE","lineNumber":39,"oldContent":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":41,"oldContent":"    ARScanStatus.SCANNING, ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":43,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":46,"oldContent":"}"},{"type":"DELETE","lineNumber":48,"oldContent":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":50,"oldContent":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":45,"content":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":46,"content":" */"},{"type":"INSERT","lineNumber":47,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":48,"content":"    ARScanStatus.SCANNING, ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":49,"content":"    else -> false"},{"type":"INSERT","lineNumber":50,"content":"}"},{"type":"INSERT","lineNumber":51,"content":""},{"type":"INSERT","lineNumber":52,"content":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":53,"content":"    ARScanStatus.INITIALIZING -> R.drawable.location_searching"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":60,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"private fun ARScanStatus.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":76,"content":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":77,"content":"    ARScanStatus.INITIALIZING -> true"},{"type":"INSERT","lineNumber":78,"content":"    else -> false"},{"type":"INSERT","lineNumber":79,"content":"}"},{"type":"INSERT","lineNumber":80,"content":""},{"type":"INSERT","lineNumber":81,"content":"/**"},{"type":"INSERT","lineNumber":82,"content":" * Bestimmt die Navigationsaktion basierend auf der Anweisung"},{"type":"INSERT","lineNumber":84,"content":"private fun getNavigationAction(instruction: String): NavigationAction {"},{"type":"INSERT","lineNumber":85,"content":"    val lowerInstruction = instruction.lowercase()"},{"type":"INSERT","lineNumber":86,"content":"    return when {"},{"type":"INSERT","lineNumber":87,"content":"        lowerInstruction.contains(\"rechts\") || lowerInstruction.contains(\"right\") -> NavigationAction.TURN_RIGHT"},{"type":"INSERT","lineNumber":88,"content":"        lowerInstruction.contains(\"links\") || lowerInstruction.contains(\"left\") -> NavigationAction.TURN_LEFT"},{"type":"INSERT","lineNumber":89,"content":"        lowerInstruction.contains(\"tür\") || lowerInstruction.contains(\"door\") || "},{"type":"INSERT","lineNumber":90,"content":"        lowerInstruction.contains(\"eingang\") || lowerInstruction.contains(\"entrance\") ||"},{"type":"INSERT","lineNumber":91,"content":"        lowerInstruction.contains(\"durch\") || lowerInstruction.contains(\"through\") -> NavigationAction.THROUGH_DOOR"},{"type":"INSERT","lineNumber":92,"content":"        else -> NavigationAction.STRAIGHT"},{"type":"INSERT","lineNumber":93,"content":"    }"},{"type":"INSERT","lineNumber":94,"content":"}"},{"type":"INSERT","lineNumber":95,"content":""},{"type":"INSERT","lineNumber":96,"content":"/**"},{"type":"INSERT","lineNumber":97,"content":" * Gibt das passende Icon für die Navigationsaktion zurück"},{"type":"INSERT","lineNumber":98,"content":" */"},{"type":"INSERT","lineNumber":99,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":100,"content":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"INSERT","lineNumber":101,"content":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"INSERT","lineNumber":102,"content":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"INSERT","lineNumber":103,"content":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"INSERT","lineNumber":104,"content":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":105,"content":"}"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"/**"},{"type":"INSERT","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":109,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":110,"content":" */"},{"type":"DELETE","lineNumber":83,"oldContent":"private fun ARScanStatus.showProgress(): Boolean = when (this) {"},{"type":"DELETE","lineNumber":84,"oldContent":"    ARScanStatus.INITIALIZING -> true"},{"type":"DELETE","lineNumber":86,"oldContent":"    else -> false"},{"type":"DELETE","lineNumber":88,"oldContent":"}"},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"/**"},{"type":"DELETE","lineNumber":92,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":94,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":161,"content":"                Icon("},{"type":"INSERT","lineNumber":170,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":144,"oldContent":"                Icon("},{"type":"INSERT","lineNumber":178,"content":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":153,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":182,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":161,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":166,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":205,"content":"/**"},{"type":"DELETE","lineNumber":186,"oldContent":"/**"},{"type":"INSERT","lineNumber":219,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":220,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":221,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":222,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":223,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":224,"content":"        } else {"},{"type":"INSERT","lineNumber":225,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":197,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":199,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":201,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":203,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":205,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":206,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":208,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":236,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":237,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":218,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":219,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"}]},{"timestamp":1754330153813,"changes":[{"type":"DELETE","lineNumber":40,"oldContent":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":41,"content":"    UNKNOWN         // Unbekannte Aktion"},{"type":"INSERT","lineNumber":42,"content":"}"},{"type":"INSERT","lineNumber":43,"content":""},{"type":"INSERT","lineNumber":44,"content":"/**"},{"type":"INSERT","lineNumber":45,"content":" * Helper functions für ARScanStatus enum"},{"type":"DELETE","lineNumber":44,"oldContent":"    UNKNOWN         // Unbekannte Aktion"},{"type":"DELETE","lineNumber":48,"oldContent":"}"},{"type":"DELETE","lineNumber":50,"oldContent":""},{"type":"DELETE","lineNumber":52,"oldContent":"/**"},{"type":"MODIFY","lineNumber":55,"content":"    ARScanStatus.TRACKING -> R.drawable.navigation21","oldContent":"    ARScanStatus.TRACKING -> R.drawable.navigation21"},{"type":"DELETE","lineNumber":77,"oldContent":" */"},{"type":"DELETE","lineNumber":79,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":81,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":83,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":85,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":87,"oldContent":"    isVisible: Boolean = true"},{"type":"DELETE","lineNumber":89,"oldContent":") {"},{"type":"INSERT","lineNumber":83,"content":" */"},{"type":"DELETE","lineNumber":92,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":95,"oldContent":"    "},{"type":"DELETE","lineNumber":99,"oldContent":"    // Animation für das Ein-/Ausblenden"},{"type":"DELETE","lineNumber":103,"oldContent":"    val alpha by animateFloatAsState("},{"type":"DELETE","lineNumber":106,"oldContent":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"DELETE","lineNumber":108,"oldContent":"        animationSpec = tween(durationMillis = 300),"},{"type":"DELETE","lineNumber":110,"oldContent":"        label = \"island_alpha\""},{"type":"DELETE","lineNumber":112,"oldContent":"    )"},{"type":"DELETE","lineNumber":114,"oldContent":"    "},{"type":"DELETE","lineNumber":116,"oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"DELETE","lineNumber":118,"oldContent":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"DELETE","lineNumber":120,"oldContent":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"DELETE","lineNumber":122,"oldContent":"        initialValue = 0.7f,"},{"type":"DELETE","lineNumber":124,"oldContent":"        targetValue = 1f,"},{"type":"DELETE","lineNumber":126,"oldContent":"        animationSpec = infiniteRepeatable("},{"type":"DELETE","lineNumber":128,"oldContent":"            animation = tween(1000, easing = EaseInOut),"},{"type":"DELETE","lineNumber":130,"oldContent":"            repeatMode = RepeatMode.Reverse"},{"type":"DELETE","lineNumber":132,"oldContent":"        ),"},{"type":"DELETE","lineNumber":134,"oldContent":"        label = \"pulse_alpha\""},{"type":"INSERT","lineNumber":111,"content":"@Composable"},{"type":"INSERT","lineNumber":112,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":113,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":114,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":115,"content":"    isVisible: Boolean = true,"},{"type":"INSERT","lineNumber":116,"content":"    currentInstruction: String? = null"},{"type":"INSERT","lineNumber":117,"content":") {"},{"type":"INSERT","lineNumber":118,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":119,"content":"    "},{"type":"INSERT","lineNumber":120,"content":"    // Animation für das Ein-/Ausblenden"},{"type":"INSERT","lineNumber":121,"content":"    val alpha by animateFloatAsState("},{"type":"INSERT","lineNumber":122,"content":"        targetValue = if (isVisible) 0.85f else 0f,"},{"type":"INSERT","lineNumber":123,"content":"        animationSpec = tween(durationMillis = 300),"},{"type":"INSERT","lineNumber":124,"content":"        label = \"island_alpha\""},{"type":"INSERT","lineNumber":127,"content":"    // Pulsierender Effekt für bestimmte Status"},{"type":"INSERT","lineNumber":128,"content":"    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")"},{"type":"INSERT","lineNumber":129,"content":"    val pulseAlpha by pulseAnimation.animateFloat("},{"type":"INSERT","lineNumber":130,"content":"        initialValue = 0.7f,"},{"type":"INSERT","lineNumber":131,"content":"        targetValue = 1f,"},{"type":"INSERT","lineNumber":132,"content":"        animationSpec = infiniteRepeatable("},{"type":"INSERT","lineNumber":133,"content":"            animation = tween(1000, easing = EaseInOut),"},{"type":"INSERT","lineNumber":134,"content":"            repeatMode = RepeatMode.Reverse"},{"type":"INSERT","lineNumber":135,"content":"        ),"},{"type":"INSERT","lineNumber":136,"content":"        label = \"pulse_alpha\""},{"type":"INSERT","lineNumber":137,"content":"    )"},{"type":"INSERT","lineNumber":138,"content":"    "},{"type":"INSERT","lineNumber":162,"content":"                Icon("},{"type":"INSERT","lineNumber":171,"content":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":179,"content":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":183,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":185,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":193,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":202,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":206,"content":"/**"},{"type":"DELETE","lineNumber":207,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":220,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":221,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":222,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":223,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":224,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":225,"content":"        } else {"},{"type":"INSERT","lineNumber":226,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":226,"oldContent":"/**"},{"type":"INSERT","lineNumber":237,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":238,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":237,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":238,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":239,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":240,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":241,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":242,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":243,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":244,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":245,"oldContent":"        } else {"}]},{"timestamp":1754330161040,"changes":[{"type":"MODIFY","lineNumber":41,"content":"    UNKNOWN         // Unbekannte Aktion","oldContent":"    UNKNOWN         // Unbekannte Aktion"},{"type":"DELETE","lineNumber":43,"oldContent":" */"},{"type":"DELETE","lineNumber":45,"oldContent":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":46,"content":" */"},{"type":"INSERT","lineNumber":47,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":54,"content":"    ARScanStatus.SCANNING -> R.drawable.location_searching"},{"type":"DELETE","lineNumber":55,"oldContent":"    ARScanStatus.TRACKING -> R.drawable.navigation21"},{"type":"DELETE","lineNumber":80,"oldContent":" */"},{"type":"INSERT","lineNumber":83,"content":" */"},{"type":"DELETE","lineNumber":98,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":99,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":100,"content":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"INSERT","lineNumber":101,"content":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"INSERT","lineNumber":102,"content":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"INSERT","lineNumber":103,"content":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"INSERT","lineNumber":104,"content":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":105,"content":"}"},{"type":"INSERT","lineNumber":106,"content":""},{"type":"INSERT","lineNumber":107,"content":"/**"},{"type":"INSERT","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":109,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":110,"content":" */"},{"type":"INSERT","lineNumber":111,"content":"@Composable"},{"type":"DELETE","lineNumber":102,"oldContent":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":105,"oldContent":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"DELETE","lineNumber":108,"oldContent":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"DELETE","lineNumber":111,"oldContent":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"DELETE","lineNumber":114,"oldContent":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"DELETE","lineNumber":117,"oldContent":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"DELETE","lineNumber":119,"oldContent":"}"},{"type":"INSERT","lineNumber":125,"content":"    )"},{"type":"INSERT","lineNumber":126,"content":"    "},{"type":"DELETE","lineNumber":121,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":"/**"},{"type":"DELETE","lineNumber":127,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":130,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":133,"oldContent":" */"},{"type":"DELETE","lineNumber":136,"oldContent":"    )"},{"type":"DELETE","lineNumber":138,"oldContent":"    "},{"type":"MODIFY","lineNumber":160,"content":"                // Status Icon mit Animation - verwende Navigationsicon wenn verfügbar","oldContent":"                // Status Icon mit Animation"},{"type":"MODIFY","lineNumber":162,"content":"                val iconResource = if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {","oldContent":"                    painter = painterResource(id = scanStatus.getIconResource()),"},{"type":"INSERT","lineNumber":163,"content":"                    getNavigationAction(currentInstruction).getIconResource()"},{"type":"INSERT","lineNumber":164,"content":"                } else {"},{"type":"INSERT","lineNumber":165,"content":"                    scanStatus.getIconResource()"},{"type":"INSERT","lineNumber":166,"content":"                }"},{"type":"INSERT","lineNumber":167,"content":"                "},{"type":"INSERT","lineNumber":169,"content":"                    painter = painterResource(id = iconResource),"},{"type":"INSERT","lineNumber":177,"content":"                    text = scanStatus.getMessage(),"},{"type":"DELETE","lineNumber":173,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":185,"content":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":182,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":189,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":187,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":212,"content":"/**"},{"type":"DELETE","lineNumber":208,"oldContent":"/**"},{"type":"INSERT","lineNumber":226,"content":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"INSERT","lineNumber":227,"content":"    LaunchedEffect(isTracking) {"},{"type":"INSERT","lineNumber":228,"content":"        if (isTracking) {"},{"type":"INSERT","lineNumber":229,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":230,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":231,"content":"        } else {"},{"type":"INSERT","lineNumber":232,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":222,"oldContent":"    // Stabilisiere den Tracking-Status um falsches \"Tracking verloren\" zu vermeiden"},{"type":"DELETE","lineNumber":224,"oldContent":"    LaunchedEffect(isTracking) {"},{"type":"DELETE","lineNumber":226,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":228,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":230,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":232,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":234,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"INSERT","lineNumber":243,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":244,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":245,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":246,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754330170264,"changes":[{"type":"INSERT","lineNumber":40,"content":"    THROUGH_DOOR,   // Durch Tür gehen"},{"type":"DELETE","lineNumber":41,"oldContent":"    UNKNOWN         // Unbekannte Aktion"},{"type":"DELETE","lineNumber":44,"oldContent":" */"},{"type":"MODIFY","lineNumber":46,"content":" */","oldContent":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"INSERT","lineNumber":47,"content":"private fun ARScanStatus.shouldPulse(): Boolean = when (this) {"},{"type":"MODIFY","lineNumber":83,"content":" */","oldContent":" */"},{"type":"MODIFY","lineNumber":99,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {","oldContent":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":101,"oldContent":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":103,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":106,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"DELETE","lineNumber":108,"oldContent":"    isVisible: Boolean = true,"},{"type":"DELETE","lineNumber":111,"oldContent":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":113,"oldContent":") {"},{"type":"DELETE","lineNumber":116,"oldContent":"    if (!isVisible) return"},{"type":"DELETE","lineNumber":118,"oldContent":"    "},{"type":"INSERT","lineNumber":112,"content":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":113,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":114,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":115,"content":"    isVisible: Boolean = true,"},{"type":"INSERT","lineNumber":116,"content":"    currentInstruction: String? = null"},{"type":"INSERT","lineNumber":117,"content":") {"},{"type":"INSERT","lineNumber":118,"content":"    if (!isVisible) return"},{"type":"INSERT","lineNumber":119,"content":"    "},{"type":"INSERT","lineNumber":125,"content":"    )"},{"type":"INSERT","lineNumber":126,"content":"    "},{"type":"DELETE","lineNumber":128,"oldContent":"    )"},{"type":"DELETE","lineNumber":130,"oldContent":"    "},{"type":"DELETE","lineNumber":164,"oldContent":"                Icon("},{"type":"DELETE","lineNumber":166,"oldContent":"                    contentDescription = null,"},{"type":"DELETE","lineNumber":168,"oldContent":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":170,"oldContent":"                    modifier = Modifier.size(20.dp)"},{"type":"INSERT","lineNumber":168,"content":"                Icon("},{"type":"INSERT","lineNumber":169,"content":"                    painter = painterResource(id = iconResource),"},{"type":"INSERT","lineNumber":170,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":171,"content":"                    tint = scanStatus.getColor().copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":172,"content":"                    modifier = Modifier.size(20.dp)"},{"type":"DELETE","lineNumber":174,"oldContent":"                    painter = painterResource(id = iconResource),"},{"type":"MODIFY","lineNumber":175,"content":"                // Status Text - zeige Navigationsanweisung ohne Distanz wenn verfügbar","oldContent":"                // Status Text"},{"type":"INSERT","lineNumber":176,"content":"                val displayText = if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {"},{"type":"INSERT","lineNumber":177,"content":"                    // Entferne Distanzangaben aus der Anweisung"},{"type":"INSERT","lineNumber":178,"content":"                    currentInstruction"},{"type":"INSERT","lineNumber":179,"content":"                        .replace(Regex(\"\\\\d+\\\\s*m\"), \"\") // Entferne \"123m\" oder \"123 m\""},{"type":"INSERT","lineNumber":180,"content":"                        .replace(Regex(\"\\\\d+\\\\s*meter\"), \"\") // Entferne \"123 meter\""},{"type":"INSERT","lineNumber":181,"content":"                        .replace(Regex(\"\\\\d+\\\\s*Meter\"), \"\") // Entferne \"123 Meter\""},{"type":"INSERT","lineNumber":182,"content":"                        .replace(Regex(\"\\\\s+\"), \" \") // Mehrfache Leerzeichen durch einfache ersetzen"},{"type":"INSERT","lineNumber":183,"content":"                        .trim()"},{"type":"INSERT","lineNumber":184,"content":"                } else {"},{"type":"INSERT","lineNumber":185,"content":"                    scanStatus.getMessage()"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"                "},{"type":"INSERT","lineNumber":189,"content":"                    text = displayText,"},{"type":"DELETE","lineNumber":182,"oldContent":"                    text = scanStatus.getMessage(),"},{"type":"INSERT","lineNumber":197,"content":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":201,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":190,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":194,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":224,"content":"/**"},{"type":"DELETE","lineNumber":217,"oldContent":"/**"},{"type":"DELETE","lineNumber":226,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":227,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":228,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":229,"oldContent":"            }"},{"type":"DELETE","lineNumber":232,"oldContent":"        }"},{"type":"DELETE","lineNumber":235,"oldContent":"    }"},{"type":"DELETE","lineNumber":238,"oldContent":"    "},{"type":"INSERT","lineNumber":245,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":246,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":247,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":248,"content":"            }"},{"type":"INSERT","lineNumber":249,"content":"        }"},{"type":"INSERT","lineNumber":250,"content":"    }"},{"type":"INSERT","lineNumber":251,"content":"    "},{"type":"INSERT","lineNumber":255,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":256,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":249,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"DELETE","lineNumber":251,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"}]},{"timestamp":1754566595001,"changes":[{"type":"INSERT","lineNumber":45,"content":" * Helper functions für ARScanStatus enum"},{"type":"DELETE","lineNumber":47,"oldContent":" * Helper functions für ARScanStatus enum"},{"type":"INSERT","lineNumber":82,"content":" * Bestimmt die Navigationsaktion basierend auf der Anweisung"},{"type":"DELETE","lineNumber":83,"oldContent":" */"},{"type":"INSERT","lineNumber":98,"content":" */"},{"type":"DELETE","lineNumber":99,"oldContent":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"DELETE","lineNumber":107,"oldContent":"fun ARInfoIsland("},{"type":"INSERT","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"INSERT","lineNumber":109,"content":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"INSERT","lineNumber":110,"content":" */"},{"type":"INSERT","lineNumber":111,"content":"@Composable"},{"type":"INSERT","lineNumber":112,"content":"fun ARInfoIsland("},{"type":"DELETE","lineNumber":111,"oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":113,"oldContent":" * Zeigt Scan-Status und subtile Benutzerführung während der AR-Navigation"},{"type":"DELETE","lineNumber":116,"oldContent":" */"},{"type":"DELETE","lineNumber":119,"oldContent":"@Composable"},{"type":"MODIFY","lineNumber":127,"content":"    // Pulsierender Effekt für bestimmte Status","oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"INSERT","lineNumber":166,"content":"                }"},{"type":"INSERT","lineNumber":167,"content":"                "},{"type":"DELETE","lineNumber":168,"oldContent":"                }"},{"type":"DELETE","lineNumber":171,"oldContent":"                "},{"type":"DELETE","lineNumber":177,"oldContent":"                Text("},{"type":"DELETE","lineNumber":179,"oldContent":"                    color = Color.White.copy(alpha = 0.9f),"},{"type":"DELETE","lineNumber":181,"oldContent":"                    fontSize = 14.sp,"},{"type":"DELETE","lineNumber":183,"oldContent":"                    fontWeight = FontWeight.Medium,"},{"type":"DELETE","lineNumber":185,"oldContent":"                    textAlign = TextAlign.Center,"},{"type":"DELETE","lineNumber":187,"oldContent":"                    maxLines = 1"},{"type":"DELETE","lineNumber":190,"oldContent":"                )"},{"type":"DELETE","lineNumber":192,"oldContent":"                "},{"type":"DELETE","lineNumber":194,"oldContent":"                if (scanStatus.showProgress()) {"},{"type":"DELETE","lineNumber":196,"oldContent":"                    CircularProgressIndicator("},{"type":"INSERT","lineNumber":188,"content":"                Text("},{"type":"INSERT","lineNumber":189,"content":"                    text = displayText,"},{"type":"INSERT","lineNumber":190,"content":"                    color = Color.White.copy(alpha = 0.9f),"},{"type":"INSERT","lineNumber":191,"content":"                    fontSize = 14.sp,"},{"type":"INSERT","lineNumber":192,"content":"                    fontWeight = FontWeight.Medium,"},{"type":"INSERT","lineNumber":193,"content":"                    textAlign = TextAlign.Center,"},{"type":"INSERT","lineNumber":194,"content":"                    maxLines = 1"},{"type":"INSERT","lineNumber":195,"content":"                )"},{"type":"INSERT","lineNumber":196,"content":"                "},{"type":"INSERT","lineNumber":197,"content":"                // Optionaler Fortschrittsindikator"},{"type":"INSERT","lineNumber":198,"content":"                if (scanStatus.showProgress()) {"},{"type":"INSERT","lineNumber":199,"content":"                    CircularProgressIndicator("},{"type":"INSERT","lineNumber":201,"content":"                        color = scanStatus.getColor(),"},{"type":"DELETE","lineNumber":200,"oldContent":"                    text = displayText,"},{"type":"DELETE","lineNumber":207,"oldContent":"                // Optionaler Fortschrittsindikator"},{"type":"DELETE","lineNumber":212,"oldContent":"                        color = scanStatus.getColor(),"},{"type":"INSERT","lineNumber":224,"content":"/**"},{"type":"DELETE","lineNumber":235,"oldContent":"/**"},{"type":"INSERT","lineNumber":240,"content":"        android.util.Log.d(\"ARInfoIsland\", \"=== AR STATUS DEBUG ===\")"},{"type":"INSERT","lineNumber":241,"content":"        android.util.Log.d(\"ARInfoIsland\", \"isTracking changed to: $isTracking\")"},{"type":"INSERT","lineNumber":242,"content":"        android.util.Log.d(\"ARInfoIsland\", \"landmarkCount: $landmarkCount\")"},{"type":"INSERT","lineNumber":243,"content":"        android.util.Log.d(\"ARInfoIsland\", \"bestConfidence: $bestConfidence\")"},{"type":"INSERT","lineNumber":244,"content":"        android.util.Log.d(\"ARInfoIsland\", \"isInitialized: $isInitialized\")"},{"type":"INSERT","lineNumber":245,"content":"        "},{"type":"INSERT","lineNumber":247,"content":"            android.util.Log.d(\"ARInfoIsland\", \"Tracking active - setting stable state to true\")"},{"type":"INSERT","lineNumber":251,"content":"            android.util.Log.w(\"ARInfoIsland\", \"Tracking lost - waiting 5 seconds before showing 'Landmark verloren'\")"},{"type":"INSERT","lineNumber":253,"content":"            delay(5000)"},{"type":"INSERT","lineNumber":254,"content":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"INSERT","lineNumber":255,"content":"                android.util.Log.w(\"ARInfoIsland\", \"5 seconds passed without tracking - setting stable state to false\")"},{"type":"INSERT","lineNumber":256,"content":"                stableTrackingState = false"},{"type":"INSERT","lineNumber":257,"content":"            } else {"},{"type":"INSERT","lineNumber":258,"content":"                android.util.Log.d(\"ARInfoIsland\", \"Tracking recovered within 5 seconds - keeping stable state\")"},{"type":"INSERT","lineNumber":259,"content":"            }"},{"type":"INSERT","lineNumber":260,"content":"        }"},{"type":"INSERT","lineNumber":261,"content":"        android.util.Log.d(\"ARInfoIsland\", \"=======================\")"},{"type":"INSERT","lineNumber":262,"content":"    }"},{"type":"INSERT","lineNumber":263,"content":"    "},{"type":"INSERT","lineNumber":267,"content":"            !stableTrackingState -> ARScanStatus.LOST"},{"type":"INSERT","lineNumber":268,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":250,"oldContent":"            delay(5000)"},{"type":"DELETE","lineNumber":252,"oldContent":"            if (System.currentTimeMillis() - lastTrackingTime >= 5000) {"},{"type":"DELETE","lineNumber":254,"oldContent":"                stableTrackingState = false"},{"type":"DELETE","lineNumber":256,"oldContent":"            }"},{"type":"DELETE","lineNumber":258,"oldContent":"        }"},{"type":"DELETE","lineNumber":259,"oldContent":"    }"},{"type":"DELETE","lineNumber":261,"oldContent":"    "},{"type":"DELETE","lineNumber":263,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"DELETE","lineNumber":264,"oldContent":"            !stableTrackingState -> ARScanStatus.LOST"}]},{"timestamp":1754566604510,"changes":[{"type":"MODIFY","lineNumber":108,"content":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style","oldContent":" * AR Info Island - Semitransparente UI-Komponente im Dynamic Island Style"},{"type":"DELETE","lineNumber":110,"oldContent":"    scanStatus: ARScanStatus,"},{"type":"DELETE","lineNumber":112,"oldContent":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":113,"content":"    scanStatus: ARScanStatus,"},{"type":"INSERT","lineNumber":114,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":126,"content":"    "},{"type":"DELETE","lineNumber":127,"oldContent":"    // Pulsierender Effekt für bestimmte Status"},{"type":"MODIFY","lineNumber":168,"content":"                Icon(","oldContent":"                Icon("},{"type":"DELETE","lineNumber":182,"oldContent":"                Text("},{"type":"MODIFY","lineNumber":184,"content":"                } else {","oldContent":"                    text = displayText,"},{"type":"INSERT","lineNumber":185,"content":"                    scanStatus.getMessage()"},{"type":"INSERT","lineNumber":186,"content":"                }"},{"type":"INSERT","lineNumber":187,"content":"                "},{"type":"INSERT","lineNumber":188,"content":"                Text("},{"type":"INSERT","lineNumber":189,"content":"                    text = displayText,"},{"type":"DELETE","lineNumber":188,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":191,"oldContent":"                    scanStatus.getMessage()"},{"type":"DELETE","lineNumber":194,"oldContent":"                }"},{"type":"DELETE","lineNumber":197,"oldContent":"                "},{"type":"DELETE","lineNumber":199,"oldContent":"                        modifier = Modifier.size(16.dp),"},{"type":"DELETE","lineNumber":201,"oldContent":"                        strokeWidth = 2.dp"},{"type":"INSERT","lineNumber":200,"content":"                        modifier = Modifier.size(16.dp),"},{"type":"INSERT","lineNumber":202,"content":"                        strokeWidth = 2.dp"},{"type":"DELETE","lineNumber":241,"oldContent":"        if (isTracking) {"},{"type":"DELETE","lineNumber":243,"oldContent":"            stableTrackingState = true"},{"type":"DELETE","lineNumber":245,"oldContent":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":247,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":249,"oldContent":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":251,"oldContent":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"DELETE","lineNumber":252,"oldContent":"        currentStatus = when {"},{"type":"INSERT","lineNumber":246,"content":"        if (isTracking) {"},{"type":"DELETE","lineNumber":254,"oldContent":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"DELETE","lineNumber":255,"oldContent":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"DELETE","lineNumber":256,"oldContent":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":248,"content":"            stableTrackingState = true"},{"type":"INSERT","lineNumber":249,"content":"            lastTrackingTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":250,"content":"        } else {"},{"type":"DELETE","lineNumber":258,"oldContent":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":252,"content":"            // Warte 5 Sekunden ohne Tracking bevor \"Tracking verloren\" angezeigt wird"},{"type":"DELETE","lineNumber":260,"oldContent":"        }"},{"type":"DELETE","lineNumber":263,"oldContent":"    }"},{"type":"DELETE","lineNumber":266,"oldContent":"    "},{"type":"DELETE","lineNumber":270,"oldContent":"    return currentStatus"},{"type":"DELETE","lineNumber":273,"oldContent":"}"},{"type":"DELETE","lineNumber":275,"oldContent":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":264,"content":"    LaunchedEffect(isInitialized, landmarkCount, bestConfidence, stableTrackingState) {"},{"type":"INSERT","lineNumber":265,"content":"        val newStatus = when {"},{"type":"INSERT","lineNumber":266,"content":"            !isInitialized -> ARScanStatus.INITIALIZING"},{"type":"INSERT","lineNumber":268,"content":"            landmarkCount == 0 -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":269,"content":"            bestConfidence >= 0.7f && isTracking -> ARScanStatus.NAVIGATING"},{"type":"INSERT","lineNumber":270,"content":"            bestConfidence >= 0.5f && isTracking -> ARScanStatus.TRACKING"},{"type":"INSERT","lineNumber":271,"content":"            else -> ARScanStatus.SCANNING"},{"type":"INSERT","lineNumber":272,"content":"        }"},{"type":"INSERT","lineNumber":273,"content":"        "},{"type":"INSERT","lineNumber":274,"content":"        if (newStatus != currentStatus) {"},{"type":"INSERT","lineNumber":275,"content":"            android.util.Log.i(\"ARInfoIsland\", \"=== STATUS CHANGE ===\")"},{"type":"INSERT","lineNumber":276,"content":"            android.util.Log.i(\"ARInfoIsland\", \"Old status: ${currentStatus.getMessage()}\")"},{"type":"INSERT","lineNumber":277,"content":"            android.util.Log.i(\"ARInfoIsland\", \"New status: ${newStatus.getMessage()}\")"},{"type":"INSERT","lineNumber":278,"content":"            android.util.Log.i(\"ARInfoIsland\", \"Conditions:\")"},{"type":"INSERT","lineNumber":279,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- isInitialized: $isInitialized\")"},{"type":"INSERT","lineNumber":280,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- stableTrackingState: $stableTrackingState\")"},{"type":"INSERT","lineNumber":281,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- landmarkCount: $landmarkCount\")"},{"type":"INSERT","lineNumber":282,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- bestConfidence: $bestConfidence\")"},{"type":"INSERT","lineNumber":283,"content":"            android.util.Log.i(\"ARInfoIsland\", \"- isTracking: $isTracking\")"},{"type":"INSERT","lineNumber":284,"content":"            android.util.Log.i(\"ARInfoIsland\", \"====================\")"},{"type":"INSERT","lineNumber":285,"content":"        }"},{"type":"INSERT","lineNumber":286,"content":"        "},{"type":"INSERT","lineNumber":287,"content":"        currentStatus = newStatus"},{"type":"INSERT","lineNumber":288,"content":"    }"},{"type":"INSERT","lineNumber":289,"content":"    "},{"type":"INSERT","lineNumber":290,"content":"    return currentStatus"},{"type":"INSERT","lineNumber":291,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/ARTrackingSystem.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/ARTrackingSystem.kt","baseContent":"package com.example.arwalking\n\n// Diese Datei wurde entfernt - ARTrackingSystem ist jetzt in FeatureMatchingEngine.kt definiert","baseTimestamp":1754321349663,"deltas":[{"timestamp":1754329790154,"changes":[{"type":"DELETE","lineNumber":0,"oldContent":"package com.example.arwalking"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/DrawerList.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/DrawerList.kt","baseContent":"package components\n\nimport androidx.compose.animation.core.animateDpAsState\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.gestures.detectDragGestures\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.rememberScrollState\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.foundation.verticalScroll\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Brush\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.ColorFilter\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.arwalking.R\n\n// Data class for Navigation Steps\ndata class NavigationStepData(val text: String, val icon: Int)\n\n@Composable\nfun NavigationDrawer(\n    navigationSteps: List<NavigationStepData>,\n    destinationLabel: String,\n    onClose: () -> Unit,\n    modifier: Modifier = Modifier,\n    availableZoomRatios: List<Float> = listOf(0.7f, 1.0f, 2.0f),\n    currentZoomRatio: Float = 1.0f,\n    onZoomChange: (Float) -> Unit = {},\n    onShowUploadDialog: () -> Unit = {}\n) {\n    var isMaximized by remember { mutableStateOf(false) }\n    var offsetY by remember { mutableStateOf(0f) }\n    var isDragging by remember { mutableStateOf(false) }\n\n    // Smooth animation for height changes (Google Maps-like behavior)\n    val containerHeight by animateDpAsState(\n        targetValue = if (isMaximized) 750.dp else 280.dp, // More space: 750dp maximized, 280dp minimized\n        animationSpec = spring(\n            dampingRatio = 0.8f,\n            stiffness = 500f\n        ),\n        label = \"ContainerHeight\"\n    )\n\n    // Subtle zoom effect during drag\n    val scale by animateFloatAsState(\n        targetValue = if (isDragging) 1.01f else 1f,\n        animationSpec = tween(durationMillis = 100),\n        label = \"Scale\"\n    )\n\n\n    // Main container with drag gestures\n    Box(\n        modifier = modifier\n            .fillMaxWidth()\n            .height(containerHeight)\n            .graphicsLayer {\n                scaleX = scale\n                scaleY = scale\n            }\n            .clip(RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp))\n            .pointerInput(Unit) {\n                detectDragGestures(\n                    onDragStart = {\n                        isDragging = true\n                    },\n                    onDragEnd = {\n                        isDragging = false\n                        // Snap logic based on drag distance\n                        when {\n                            offsetY < -50 -> isMaximized = true\n                            offsetY > 50 -> isMaximized = false\n                        }\n                        offsetY = 0f\n                    },\n                    onDrag = { _, dragAmount ->\n                        offsetY += dragAmount.y\n\n                        // Immediate response for smooth UX\n                        when {\n                            offsetY < -100 -> {\n                                isMaximized = true\n                                offsetY = 0f\n                            }\n                            offsetY > 100 -> {\n                                isMaximized = false\n                                offsetY = 0f\n                            }\n                        }\n                    }\n                )\n            }\n    ) {\n        // Background\n        Box(\n            modifier = Modifier\n                .fillMaxSize()\n                .background(\n                    brush = Brush.verticalGradient(\n                        colors = listOf(\n                            Color.Black.copy(alpha = 0.8f),\n                            Color.Black.copy(alpha = 0.5f),\n                            Color.White.copy(alpha = 0.55f),\n                        )\n                    )\n                )\n                .border(\n                    width = 1.dp,\n                    color = Color.White.copy(alpha = 0.15f),\n                    shape = RoundedCornerShape(topStart = 24.dp, topEnd = 24.dp)\n                )\n        )\n\n        // Drag handle bar\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .offset(y = 12.dp)\n                .width(40.dp)\n                .height(4.dp)\n                .clip(RoundedCornerShape(2.dp))\n                .background(Color.White.copy(alpha = 0.8f))\n        )\n\n        // Header area with optimized UX layout\n        // Logo positioned on the left (with hidden upload function)\n        var longPressStartTime by remember { mutableStateOf(0L) }\n        var isLongPressing by remember { mutableStateOf(false) }\n        \n        Box(\n            modifier = Modifier\n                .align(Alignment.TopStart)\n                .offset(x = 20.dp, y = 7.dp)\n                .size(85.dp)\n                .pointerInput(Unit) {\n                    detectTapGestures(\n                        onPress = {\n                            longPressStartTime = System.currentTimeMillis()\n                            isLongPressing = true\n                            \n                            // Warte 5 Sekunden\n                            val pressJob = launch {\n                                delay(5000)\n                                if (isLongPressing) {\n                                    // 5 Sekunden erreicht - Upload-Dialog anzeigen\n                                    onShowUploadDialog()\n                                }\n                            }\n                            \n                            // Warte auf Release\n                            tryAwaitRelease()\n                            isLongPressing = false\n                            pressJob.cancel()\n                        }\n                    )\n                },\n            contentAlignment = Alignment.Center\n        ) {\n            // Logo mit visueller Rückmeldung bei Long Press\n            Image(\n                painter = painterResource(id = R.drawable.logo),\n                contentDescription = \"Logo\",\n                modifier = Modifier\n                    .size(90.dp)\n                    .graphicsLayer {\n                        alpha = if (isLongPressing) 0.7f else 1.0f\n                        scaleX = if (isLongPressing) 0.95f else 1.0f\n                        scaleY = if (isLongPressing) 0.95f else 1.0f\n                    }\n            )\n            \n            // Progress-Indikator für Long Press (nur sichtbar während Press)\n            if (isLongPressing) {\n                var progress by remember { mutableStateOf(0f) }\n                \n                LaunchedEffect(isLongPressing) {\n                    val startTime = System.currentTimeMillis()\n                    while (isLongPressing && progress < 1f) {\n                        val elapsed = System.currentTimeMillis() - startTime\n                        progress = (elapsed / 5000f).coerceAtMost(1f)\n                        delay(16) // ~60fps\n                    }\n                }\n                \n                CircularProgressIndicator(\n                    progress = progress,\n                    modifier = Modifier.size(95.dp),\n                    color = Color.White.copy(alpha = 0.8f),\n                    strokeWidth = 2.dp\n                )\n            }\n        }\n\n        // Zoom Level Switcher (Snapchat-style) with round elements - centered\n        val currentZoomIndex = availableZoomRatios.indexOfFirst { it == currentZoomRatio }.takeIf { it >= 0 } ?: 1\n        val zoomLabels = availableZoomRatios.map { ratio ->\n            when {\n                ratio < 1.0f -> {\n                    val formatted = if (ratio == 0.5f) \"0.5x\" else String.format(\"%.1fx\", ratio)\n                    formatted\n                }\n                ratio == 1.0f -> \"1x\"\n                else -> \"${ratio.toInt()}x\" // e.g., \"2x\"\n            }\n        }\n        \n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .offset(y = 25.dp)\n                .clip(RoundedCornerShape(20.dp))\n                .background(Color.Black.copy(alpha = 0.6f))\n                .border(\n                    width = 1.dp,\n                    color = Color.White.copy(alpha = 0.2f),\n                    shape = RoundedCornerShape(20.dp)\n                )\n                .padding(horizontal = 6.dp, vertical = 4.dp)\n        ) {\n            Row(horizontalArrangement = Arrangement.spacedBy(6.dp)) {\n                availableZoomRatios.forEachIndexed { index, zoomRatio ->\n                    Box(\n                        modifier = Modifier\n                            .size(38.dp) // Make elements perfectly round\n                            .clip(CircleShape) // Round zoom switcher elements  \n                            .background(\n                                if (currentZoomIndex == index) \n                                    Color.White.copy(alpha = 0.9f) \n                                else \n                                    Color.Transparent\n                            )\n                            .clickable { \n                                onZoomChange(zoomRatio)\n                            },\n                        contentAlignment = Alignment.Center\n                    ) {\n                        Text(\n                            text = zoomLabels[index],\n                            color = if (currentZoomIndex == index) \n                                Color.Black \n                            else \n                                Color.White.copy(alpha = 0.8f),\n                            style = TextStyle(\n                                fontSize = 11.sp,\n                                fontWeight = if (currentZoomIndex == index) \n                                    FontWeight.SemiBold \n                                else \n                                    FontWeight.Normal\n                            )\n                        )\n                    }\n                }\n            }\n        }\n\n        // Maximize/Minimize button positioned on the right\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopEnd)\n                .offset(x = (-20).dp, y = 25.dp)\n                .size(38.dp)\n                .clip(CircleShape)\n                .background(Color.Black.copy(alpha = 0.4f))\n                .border(\n                    width = 1.dp,\n                    color = Color.White.copy(alpha = 0.2f),\n                    shape = CircleShape\n                )\n                .clickable { isMaximized = !isMaximized },\n            contentAlignment = Alignment.Center\n        ) {\n            Icon(\n                painter = painterResource(\n                    id = if (isMaximized) R.drawable.minimize_2 else R.drawable.maximize_2_1\n                ),\n                contentDescription = if (isMaximized) \"Minimize\" else \"Maximize\",\n                tint = Color.White,\n                modifier = Modifier.size(16.dp)\n            )\n        }\n\n        // Content area\n        if (isMaximized) {\n            // Expanded view - show all steps\n            Column(\n                verticalArrangement = Arrangement.spacedBy(12.dp),\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .offset(y = 95.dp) // Adjusted for new header layout\n                    .fillMaxWidth()\n                    .padding(horizontal = 20.dp)\n                    .verticalScroll(rememberScrollState())\n                    .padding(bottom = 120.dp) // Increased bottom padding for larger drawer\n            ) {\n                // Current step (highlighted)\n                if (navigationSteps.isNotEmpty()) {\n                    StepCard(\n                        step = navigationSteps.first(),\n                        isActive = true,\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n\n                // Remaining steps\n                navigationSteps.drop(1).forEach { step ->\n                    StepCard(\n                        step = step,\n                        isActive = false,\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n\n                // Destination card\n                DestinationCard(\n                    destinationLabel = destinationLabel,\n                    modifier = Modifier.fillMaxWidth()\n                )\n            }\n        } else {\n            // Collapsed view - show current step and next steps\n            Column(\n                verticalArrangement = Arrangement.spacedBy(8.dp),\n                modifier = Modifier\n                    .align(Alignment.TopCenter)\n                    .offset(y = 95.dp) // Adjusted for new header layout consistency\n                    .fillMaxWidth()\n                    .padding(horizontal = 20.dp)\n            ) {\n                // Current step (full width)\n                if (navigationSteps.isNotEmpty()) {\n                    StepCard(\n                        step = navigationSteps.first(),\n                        isActive = true,\n                        isCompact = true,\n                        modifier = Modifier.fillMaxWidth()\n                    )\n                }\n\n                // Next steps (narrower width)\n                navigationSteps.drop(1).take(2).forEach { step -> // Show max 2 next steps\n                    Box(\n                        modifier = Modifier.fillMaxWidth(),\n                        contentAlignment = Alignment.Center\n                    ) {\n                        StepCard(\n                            step = step,\n                            isActive = false,\n                            isCompact = true,\n                            modifier = Modifier.fillMaxWidth(0.96f)\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n@Composable\nfun StepCard(\n    step: NavigationStepData,\n    isActive: Boolean,\n    isCompact: Boolean = false,\n    modifier: Modifier = Modifier\n) {\n    Box(\n        modifier = modifier\n            .height(if (isCompact) 64.dp else 72.dp)\n            .clip(RoundedCornerShape(16.dp))\n            .background(\n                if (isActive) {\n                    Color(0xFF94AC0B)\n                } else {\n                    Color.Black.copy(alpha = 0.3f)\n                }\n            )\n            .border(\n                width = 1.dp,\n                color = if (isActive) Color.Transparent else Color.White.copy(alpha = 0.15f),\n                shape = RoundedCornerShape(16.dp)\n            )\n            .padding(horizontal = 16.dp, vertical = 12.dp)\n    ) {\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Icon container\n            Box(\n                modifier = Modifier\n                    .size(if (isCompact) 36.dp else 44.dp)\n                    .clip(CircleShape)\n                    .background(\n                        if (isActive)\n                            Color.White.copy(alpha = 0.2f)\n                        else\n                            Color.White.copy(alpha = 0.1f)\n                    ),\n                contentAlignment = Alignment.Center\n            ) {\n                Image(\n                    painter = painterResource(id = step.icon),\n                    contentDescription = step.text,\n                    modifier = Modifier.size(if (isCompact) 20.dp else 24.dp),\n                    colorFilter = ColorFilter.tint(Color.White)\n                )\n            }\n\n            // Step text\n            Text(\n                text = step.text,\n                color = Color.White,\n                style = TextStyle(\n                    fontSize = if (isCompact) 15.sp else 17.sp,\n                    fontWeight = if (isActive) FontWeight.Medium else FontWeight.Normal\n                ),\n                modifier = Modifier.weight(1f)\n            )\n        }\n    }\n}\n\n@Composable\nfun DestinationCard(\n    destinationLabel: String,\n    modifier: Modifier = Modifier\n) {\n    Box(\n        modifier = modifier\n            .height(72.dp)\n            .clip(RoundedCornerShape(16.dp))\n            .background(Color.White.copy(alpha = 0.95f))\n            .border(\n                width = 1.dp,\n                color = Color.Black.copy(alpha = 0.1f),\n                shape = RoundedCornerShape(16.dp)\n            )\n            .padding(horizontal = 16.dp, vertical = 12.dp)\n    ) {\n        Row(\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Destination icon\n            Box(\n                modifier = Modifier\n                    .size(44.dp)\n                    .clip(CircleShape)\n                    .background(Color(0xFF94AC0B).copy(alpha = 0.15f)),\n                contentAlignment = Alignment.Center\n            ) {\n                Image(\n                    painter = painterResource(id = R.drawable.mappin1),\n                    contentDescription = \"Destination\",\n                    modifier = Modifier.size(24.dp),\n                    colorFilter = ColorFilter.tint(Color(0xFF94AC0B))\n                )\n            }\n\n            // Destination text\n            Text(\n                text = destinationLabel,\n                color = Color.Black,\n                style = TextStyle(\n                    fontSize = 17.sp,\n                    fontWeight = FontWeight.Medium\n                ),\n                modifier = Modifier.weight(1f)\n            )\n        }\n    }\n}\n\n","baseTimestamp":1754054279724,"deltas":[{"timestamp":1754054307220,"changes":[{"type":"INSERT","lineNumber":11,"content":"import androidx.compose.foundation.gestures.detectTapGestures"},{"type":"INSERT","lineNumber":12,"content":"import androidx.compose.material3.CircularProgressIndicator"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.runtime.LaunchedEffect"},{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.ui.graphics.graphicsLayer"},{"type":"INSERT","lineNumber":15,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.launch"}]},{"timestamp":1754232068035,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.compose.foundation.layout.Arrangement"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.foundation.layout.Column"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.foundation.layout.Row"},{"type":"DELETE","lineNumber":20,"oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.foundation.layout.Arrangement"},{"type":"INSERT","lineNumber":18,"content":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":19,"content":"import androidx.compose.foundation.layout.Column"},{"type":"INSERT","lineNumber":20,"content":"import androidx.compose.foundation.layout.Row"},{"type":"INSERT","lineNumber":21,"content":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":38,"content":"import androidx.compose.runtime.rememberCoroutineScope"},{"type":"INSERT","lineNumber":46,"content":"import com.example.arwalking.ui.theme.GradientUtils"},{"type":"DELETE","lineNumber":67,"oldContent":"    onZoomChange: (Float) -> Unit = {},"},{"type":"MODIFY","lineNumber":69,"content":"    onZoomChange: (Float) -> Unit = {}","oldContent":"    onShowUploadDialog: () -> Unit = {}"},{"type":"INSERT","lineNumber":74,"content":"    val coroutineScope = rememberCoroutineScope()"},{"type":"DELETE","lineNumber":139,"oldContent":"                    brush = Brush.verticalGradient("},{"type":"INSERT","lineNumber":141,"content":"                    brush = GradientUtils.safeVerticalGradient("},{"type":"DELETE","lineNumber":166,"oldContent":"        // Logo positioned on the left (with hidden upload function)"},{"type":"DELETE","lineNumber":167,"oldContent":"        var longPressStartTime by remember { mutableStateOf(0L) }"},{"type":"DELETE","lineNumber":168,"oldContent":"        var isLongPressing by remember { mutableStateOf(false) }"},{"type":"DELETE","lineNumber":169,"oldContent":"        "},{"type":"INSERT","lineNumber":168,"content":"        // Logo positioned on the left"},{"type":"DELETE","lineNumber":174,"oldContent":"                .size(85.dp)"},{"type":"DELETE","lineNumber":175,"oldContent":"                .pointerInput(Unit) {"},{"type":"DELETE","lineNumber":176,"oldContent":"                    detectTapGestures("},{"type":"DELETE","lineNumber":177,"oldContent":"                        onPress = {"},{"type":"DELETE","lineNumber":178,"oldContent":"                            longPressStartTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":179,"oldContent":"                            isLongPressing = true"},{"type":"DELETE","lineNumber":180,"oldContent":"                            "},{"type":"DELETE","lineNumber":181,"oldContent":"                            // Warte 5 Sekunden"},{"type":"DELETE","lineNumber":182,"oldContent":"                            val pressJob = launch {"},{"type":"DELETE","lineNumber":183,"oldContent":"                                delay(5000)"},{"type":"DELETE","lineNumber":184,"oldContent":"                                if (isLongPressing) {"},{"type":"DELETE","lineNumber":185,"oldContent":"                                    // 5 Sekunden erreicht - Upload-Dialog anzeigen"},{"type":"DELETE","lineNumber":186,"oldContent":"                                    onShowUploadDialog()"},{"type":"DELETE","lineNumber":187,"oldContent":"                                }"},{"type":"DELETE","lineNumber":188,"oldContent":"                            }"},{"type":"DELETE","lineNumber":189,"oldContent":"                            "},{"type":"DELETE","lineNumber":190,"oldContent":"                            // Warte auf Release"},{"type":"DELETE","lineNumber":191,"oldContent":"                            tryAwaitRelease()"},{"type":"DELETE","lineNumber":192,"oldContent":"                            isLongPressing = false"},{"type":"DELETE","lineNumber":193,"oldContent":"                            pressJob.cancel()"},{"type":"DELETE","lineNumber":194,"oldContent":"                        }"},{"type":"DELETE","lineNumber":195,"oldContent":"                    )"},{"type":"DELETE","lineNumber":196,"oldContent":"                },"},{"type":"INSERT","lineNumber":173,"content":"                .size(85.dp),"},{"type":"DELETE","lineNumber":199,"oldContent":"            // Logo mit visueller Rückmeldung bei Long Press"},{"type":"DELETE","lineNumber":203,"oldContent":"                modifier = Modifier"},{"type":"DELETE","lineNumber":204,"oldContent":"                    .size(90.dp)"},{"type":"DELETE","lineNumber":205,"oldContent":"                    .graphicsLayer {"},{"type":"DELETE","lineNumber":206,"oldContent":"                        alpha = if (isLongPressing) 0.7f else 1.0f"},{"type":"DELETE","lineNumber":207,"oldContent":"                        scaleX = if (isLongPressing) 0.95f else 1.0f"},{"type":"DELETE","lineNumber":208,"oldContent":"                        scaleY = if (isLongPressing) 0.95f else 1.0f"},{"type":"DELETE","lineNumber":209,"oldContent":"                    }"},{"type":"INSERT","lineNumber":179,"content":"                modifier = Modifier.size(90.dp)"}]},{"timestamp":1754232100064,"changes":[{"type":"MODIFY","lineNumber":15,"content":"import kotlinx.coroutines.delay","oldContent":"import androidx.compose.foundation.layout.Arrangement"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.launch"},{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.foundation.layout.Arrangement"},{"type":"DELETE","lineNumber":18,"oldContent":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":21,"oldContent":"import kotlinx.coroutines.launch"},{"type":"MODIFY","lineNumber":47,"content":"import androidx.compose.ui.graphics.Color","oldContent":"import androidx.compose.ui.graphics.Color"},{"type":"DELETE","lineNumber":69,"oldContent":"    onShowUploadDialog: () -> Unit = {}"},{"type":"INSERT","lineNumber":70,"content":") {"},{"type":"MODIFY","lineNumber":75,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":142,"content":"                        colors = listOf(","oldContent":"                        colors = listOf("},{"type":"DELETE","lineNumber":172,"oldContent":"                .size(85.dp),"},{"type":"DELETE","lineNumber":174,"oldContent":"                modifier = Modifier.size(90.dp)"},{"type":"INSERT","lineNumber":173,"content":"                .size(85.dp),"},{"type":"INSERT","lineNumber":179,"content":"                modifier = Modifier.size(90.dp)"},{"type":"DELETE","lineNumber":181,"oldContent":"            "},{"type":"DELETE","lineNumber":182,"oldContent":"            // Progress-Indikator für Long Press (nur sichtbar während Press)"},{"type":"DELETE","lineNumber":183,"oldContent":"            if (isLongPressing) {"},{"type":"DELETE","lineNumber":184,"oldContent":"                var progress by remember { mutableStateOf(0f) }"},{"type":"DELETE","lineNumber":185,"oldContent":"                "},{"type":"DELETE","lineNumber":186,"oldContent":"                LaunchedEffect(isLongPressing) {"},{"type":"DELETE","lineNumber":187,"oldContent":"                    val startTime = System.currentTimeMillis()"},{"type":"DELETE","lineNumber":188,"oldContent":"                    while (isLongPressing && progress < 1f) {"},{"type":"DELETE","lineNumber":189,"oldContent":"                        val elapsed = System.currentTimeMillis() - startTime"},{"type":"DELETE","lineNumber":190,"oldContent":"                        progress = (elapsed / 5000f).coerceAtMost(1f)"},{"type":"DELETE","lineNumber":191,"oldContent":"                        delay(16) // ~60fps"},{"type":"DELETE","lineNumber":192,"oldContent":"                    }"},{"type":"DELETE","lineNumber":193,"oldContent":"                }"},{"type":"DELETE","lineNumber":194,"oldContent":"                "},{"type":"DELETE","lineNumber":195,"oldContent":"                CircularProgressIndicator("},{"type":"DELETE","lineNumber":196,"oldContent":"                    progress = progress,"},{"type":"DELETE","lineNumber":197,"oldContent":"                    modifier = Modifier.size(95.dp),"},{"type":"DELETE","lineNumber":198,"oldContent":"                    color = Color.White.copy(alpha = 0.8f),"},{"type":"DELETE","lineNumber":199,"oldContent":"                    strokeWidth = 2.dp"},{"type":"DELETE","lineNumber":200,"oldContent":"                )"},{"type":"DELETE","lineNumber":201,"oldContent":"            }"}]},{"timestamp":1754314401782,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.example.arwalking.components","oldContent":"package components"},{"type":"MODIFY","lineNumber":14,"content":"import androidx.compose.ui.graphics.graphicsLayer","oldContent":"import androidx.compose.foundation.layout.Arrangement"},{"type":"MODIFY","lineNumber":18,"content":"import androidx.compose.foundation.layout.Box","oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"INSERT","lineNumber":46,"content":"import com.example.arwalking.ui.theme.GradientUtils"},{"type":"DELETE","lineNumber":47,"oldContent":"import androidx.compose.ui.graphics.Color"},{"type":"MODIFY","lineNumber":70,"content":") {","oldContent":") {"},{"type":"INSERT","lineNumber":74,"content":"    val coroutineScope = rememberCoroutineScope()"},{"type":"DELETE","lineNumber":75,"oldContent":""},{"type":"INSERT","lineNumber":141,"content":"                    brush = GradientUtils.safeVerticalGradient("},{"type":"DELETE","lineNumber":142,"oldContent":"                        colors = listOf("},{"type":"MODIFY","lineNumber":173,"content":"                .size(85.dp),","oldContent":"                .size(85.dp),"},{"type":"MODIFY","lineNumber":179,"content":"                modifier = Modifier.size(90.dp)","oldContent":"                modifier = Modifier.size(90.dp)"}]},{"timestamp":1754314407476,"changes":[{"type":"INSERT","lineNumber":17,"content":"import androidx.compose.foundation.layout.Arrangement"},{"type":"DELETE","lineNumber":18,"oldContent":"import androidx.compose.foundation.layout.Box"},{"type":"DELETE","lineNumber":58,"oldContent":"// Data class for Navigation Steps"},{"type":"DELETE","lineNumber":59,"oldContent":"data class NavigationStepData(val text: String, val icon: Int)"},{"type":"INSERT","lineNumber":58,"content":"// Import the correct NavigationStepData from NavigationDrawer.kt"},{"type":"INSERT","lineNumber":59,"content":"// data class NavigationStepData is already defined in NavigationDrawer.kt"},{"type":"INSERT","lineNumber":69,"content":"    onZoomChange: (Float) -> Unit = {}"},{"type":"DELETE","lineNumber":70,"oldContent":") {"},{"type":"INSERT","lineNumber":172,"content":"                .offset(x = 20.dp, y = 7.dp)"},{"type":"DELETE","lineNumber":173,"oldContent":"                .size(85.dp),"},{"type":"INSERT","lineNumber":178,"content":"                contentDescription = \"Logo\","},{"type":"DELETE","lineNumber":179,"oldContent":"                modifier = Modifier.size(90.dp)"}]},{"timestamp":1754314415283,"changes":[{"type":"MODIFY","lineNumber":62,"content":"fun NavigationDrawerList(","oldContent":"fun NavigationDrawer("}]},{"timestamp":1754314507861,"changes":[{"type":"DELETE","lineNumber":389,"oldContent":"                Image("},{"type":"DELETE","lineNumber":390,"oldContent":"                    painter = painterResource(id = step.icon),"},{"type":"DELETE","lineNumber":391,"oldContent":"                    contentDescription = step.text,"},{"type":"DELETE","lineNumber":392,"oldContent":"                    modifier = Modifier.size(if (isCompact) 20.dp else 24.dp),"},{"type":"DELETE","lineNumber":393,"oldContent":"                    colorFilter = ColorFilter.tint(Color.White)"},{"type":"INSERT","lineNumber":389,"content":"                Text("},{"type":"INSERT","lineNumber":390,"content":"                    text = step.stepNumber.toString(),"},{"type":"INSERT","lineNumber":391,"content":"                    color = Color.White,"},{"type":"INSERT","lineNumber":392,"content":"                    style = TextStyle("},{"type":"INSERT","lineNumber":393,"content":"                        fontSize = if (isCompact) 14.sp else 16.sp,"},{"type":"INSERT","lineNumber":394,"content":"                        fontWeight = FontWeight.Bold"},{"type":"INSERT","lineNumber":395,"content":"                    )"}]},{"timestamp":1754314523922,"changes":[{"type":"MODIFY","lineNumber":396,"content":"                )","oldContent":"                )"},{"type":"DELETE","lineNumber":399,"oldContent":"            // Step text"},{"type":"DELETE","lineNumber":400,"oldContent":"            Text("},{"type":"DELETE","lineNumber":401,"oldContent":"                text = step.text,"},{"type":"DELETE","lineNumber":402,"oldContent":"                color = Color.White,"},{"type":"DELETE","lineNumber":403,"oldContent":"                style = TextStyle("},{"type":"DELETE","lineNumber":404,"oldContent":"                    fontSize = if (isCompact) 15.sp else 17.sp,"},{"type":"DELETE","lineNumber":405,"oldContent":"                    fontWeight = if (isActive) FontWeight.Medium else FontWeight.Normal"},{"type":"DELETE","lineNumber":406,"oldContent":"                ),"},{"type":"INSERT","lineNumber":399,"content":"            // Step instruction and distance"},{"type":"INSERT","lineNumber":400,"content":"            Column("},{"type":"DELETE","lineNumber":408,"oldContent":"            )"},{"type":"INSERT","lineNumber":402,"content":"            ) {"},{"type":"INSERT","lineNumber":403,"content":"                Text("},{"type":"INSERT","lineNumber":404,"content":"                    text = step.instruction,"},{"type":"INSERT","lineNumber":405,"content":"                    color = Color.White,"},{"type":"INSERT","lineNumber":406,"content":"                    style = TextStyle("},{"type":"INSERT","lineNumber":407,"content":"                        fontSize = if (isCompact) 15.sp else 17.sp,"},{"type":"INSERT","lineNumber":408,"content":"                        fontWeight = if (isActive) FontWeight.Medium else FontWeight.Normal"},{"type":"INSERT","lineNumber":409,"content":"                    ),"},{"type":"INSERT","lineNumber":410,"content":"                    maxLines = if (isCompact) 1 else 2"},{"type":"INSERT","lineNumber":411,"content":"                )"},{"type":"INSERT","lineNumber":412,"content":"                if (step.distance > 0) {"},{"type":"INSERT","lineNumber":413,"content":"                    Text("},{"type":"INSERT","lineNumber":414,"content":"                        text = \"${step.distance.toInt()}m\","},{"type":"INSERT","lineNumber":415,"content":"                        color = Color.White.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":416,"content":"                        style = TextStyle("},{"type":"INSERT","lineNumber":417,"content":"                            fontSize = if (isCompact) 12.sp else 14.sp,"},{"type":"INSERT","lineNumber":418,"content":"                            fontWeight = FontWeight.Normal"},{"type":"INSERT","lineNumber":419,"content":"                        )"},{"type":"INSERT","lineNumber":420,"content":"                    )"},{"type":"INSERT","lineNumber":421,"content":"                }"},{"type":"INSERT","lineNumber":422,"content":"            }"}]},{"timestamp":1754314533308,"changes":[{"type":"MODIFY","lineNumber":63,"content":"    steps: List<NavigationStepData>,","oldContent":"    navigationSteps: List<NavigationStepData>,"},{"type":"INSERT","lineNumber":64,"content":"    currentStep: Int,"},{"type":"INSERT","lineNumber":396,"content":"                    )"},{"type":"DELETE","lineNumber":396,"oldContent":"                )"},{"type":"INSERT","lineNumber":402,"content":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":407,"oldContent":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":410,"oldContent":"        }"},{"type":"DELETE","lineNumber":412,"oldContent":"    }"},{"type":"DELETE","lineNumber":414,"oldContent":"}"},{"type":"DELETE","lineNumber":416,"oldContent":""},{"type":"DELETE","lineNumber":418,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":420,"oldContent":"fun DestinationCard("},{"type":"DELETE","lineNumber":422,"oldContent":"    destinationLabel: String,"},{"type":"DELETE","lineNumber":424,"oldContent":"    modifier: Modifier = Modifier"},{"type":"DELETE","lineNumber":426,"oldContent":") {"},{"type":"DELETE","lineNumber":428,"oldContent":"    Box("},{"type":"DELETE","lineNumber":430,"oldContent":"        modifier = modifier"},{"type":"DELETE","lineNumber":432,"oldContent":"            .height(72.dp)"},{"type":"DELETE","lineNumber":434,"oldContent":"            .clip(RoundedCornerShape(16.dp))"},{"type":"INSERT","lineNumber":424,"content":"        }"},{"type":"INSERT","lineNumber":425,"content":"    }"},{"type":"INSERT","lineNumber":426,"content":"}"},{"type":"INSERT","lineNumber":427,"content":""},{"type":"INSERT","lineNumber":428,"content":"@Composable"},{"type":"INSERT","lineNumber":429,"content":"fun DestinationCard("},{"type":"INSERT","lineNumber":430,"content":"    destinationLabel: String,"},{"type":"INSERT","lineNumber":431,"content":"    modifier: Modifier = Modifier"},{"type":"INSERT","lineNumber":432,"content":") {"},{"type":"INSERT","lineNumber":433,"content":"    Box("},{"type":"INSERT","lineNumber":434,"content":"        modifier = modifier"},{"type":"INSERT","lineNumber":435,"content":"            .height(72.dp)"},{"type":"INSERT","lineNumber":436,"content":"            .clip(RoundedCornerShape(16.dp))"}]},{"timestamp":1754314540307,"changes":[{"type":"MODIFY","lineNumber":320,"content":"                if (steps.isNotEmpty()) {","oldContent":"                if (navigationSteps.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":322,"content":"                        step = steps.getOrNull(currentStep - 1) ?: steps.first(),","oldContent":"                        step = navigationSteps.first(),"},{"type":"MODIFY","lineNumber":330,"content":"                steps.drop(currentStep).take(2).forEach { step -> // Show max 2 next steps","oldContent":"                navigationSteps.drop(1).take(2).forEach { step -> // Show max 2 next steps"},{"type":"MODIFY","lineNumber":397,"content":"                )","oldContent":"                )"},{"type":"MODIFY","lineNumber":403,"content":"            ) {","oldContent":"            ) {"},{"type":"INSERT","lineNumber":418,"content":"                            fontSize = if (isCompact) 12.sp else 14.sp,"},{"type":"INSERT","lineNumber":419,"content":"                            fontWeight = FontWeight.Normal"},{"type":"INSERT","lineNumber":420,"content":"                        )"},{"type":"INSERT","lineNumber":421,"content":"                    )"},{"type":"INSERT","lineNumber":422,"content":"                }"},{"type":"INSERT","lineNumber":423,"content":"            }"},{"type":"DELETE","lineNumber":420,"oldContent":"                            fontSize = if (isCompact) 12.sp else 14.sp,"},{"type":"DELETE","lineNumber":423,"oldContent":"                            fontWeight = FontWeight.Normal"},{"type":"DELETE","lineNumber":426,"oldContent":"                        )"},{"type":"DELETE","lineNumber":429,"oldContent":"                    )"},{"type":"DELETE","lineNumber":432,"oldContent":"                }"},{"type":"DELETE","lineNumber":435,"oldContent":"            }"}]},{"timestamp":1754314559412,"changes":[{"type":"DELETE","lineNumber":285,"oldContent":"                // Current step (highlighted)"},{"type":"DELETE","lineNumber":286,"oldContent":"                if (navigationSteps.isNotEmpty()) {"},{"type":"INSERT","lineNumber":285,"content":"                // All steps with current step highlighted"},{"type":"INSERT","lineNumber":286,"content":"                steps.forEachIndexed { index, step ->"},{"type":"DELETE","lineNumber":288,"oldContent":"                        step = navigationSteps.first(),"},{"type":"DELETE","lineNumber":289,"oldContent":"                        isActive = true,"},{"type":"DELETE","lineNumber":290,"oldContent":"                        modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":291,"oldContent":"                    )"},{"type":"DELETE","lineNumber":292,"oldContent":"                }"},{"type":"DELETE","lineNumber":293,"oldContent":""},{"type":"DELETE","lineNumber":294,"oldContent":"                // Remaining steps"},{"type":"DELETE","lineNumber":295,"oldContent":"                navigationSteps.drop(1).forEach { step ->"},{"type":"DELETE","lineNumber":296,"oldContent":"                    StepCard("},{"type":"DELETE","lineNumber":298,"oldContent":"                        isActive = false,"},{"type":"INSERT","lineNumber":289,"content":"                        isActive = (index + 1) == currentStep,"},{"type":"INSERT","lineNumber":387,"content":"                    )"},{"type":"DELETE","lineNumber":397,"oldContent":"                )"},{"type":"INSERT","lineNumber":393,"content":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":403,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":419,"oldContent":"        }"},{"type":"DELETE","lineNumber":421,"oldContent":"    }"},{"type":"DELETE","lineNumber":424,"oldContent":"}"},{"type":"DELETE","lineNumber":426,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"        }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1754329853109,"changes":[{"type":"MODIFY","lineNumber":289,"content":"                        isActive = (index + 1) == currentStep,","oldContent":"                        isActive = (index + 1) == currentStep,"},{"type":"DELETE","lineNumber":378,"oldContent":"                    )"},{"type":"DELETE","lineNumber":385,"oldContent":"                modifier = Modifier.weight(1f)"},{"type":"INSERT","lineNumber":387,"content":"                    )"},{"type":"INSERT","lineNumber":393,"content":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":406,"oldContent":"        }"},{"type":"DELETE","lineNumber":408,"oldContent":"    }"},{"type":"DELETE","lineNumber":410,"oldContent":"}"},{"type":"DELETE","lineNumber":412,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"        }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1754329855820,"changes":[{"type":"INSERT","lineNumber":288,"content":"                        step = step,"},{"type":"DELETE","lineNumber":289,"oldContent":"                        isActive = (index + 1) == currentStep,"},{"type":"DELETE","lineNumber":385,"oldContent":"                    )"},{"type":"INSERT","lineNumber":387,"content":"                    )"},{"type":"MODIFY","lineNumber":393,"content":"                modifier = Modifier.weight(1f)","oldContent":"                modifier = Modifier.weight(1f)"},{"type":"MODIFY","lineNumber":406,"content":"                       // text = \"${step.distance.toInt()}m\",","oldContent":"                        text = \"${step.distance.toInt()}m\","},{"type":"DELETE","lineNumber":411,"oldContent":"        }"},{"type":"DELETE","lineNumber":413,"oldContent":"    }"},{"type":"DELETE","lineNumber":415,"oldContent":"}"},{"type":"DELETE","lineNumber":417,"oldContent":""},{"type":"INSERT","lineNumber":415,"content":"        }"},{"type":"INSERT","lineNumber":416,"content":"    }"},{"type":"INSERT","lineNumber":417,"content":"}"},{"type":"INSERT","lineNumber":418,"content":""}]},{"timestamp":1754329867421,"changes":[{"type":"MODIFY","lineNumber":387,"content":"                    )","oldContent":"                    )"},{"type":"INSERT","lineNumber":392,"content":"            Column("},{"type":"DELETE","lineNumber":393,"oldContent":"                modifier = Modifier.weight(1f)"},{"type":"DELETE","lineNumber":406,"oldContent":"                       // text = \"${step.distance.toInt()}m\","},{"type":"INSERT","lineNumber":412,"content":"                }"},{"type":"INSERT","lineNumber":413,"content":"            }"},{"type":"DELETE","lineNumber":415,"oldContent":"                }"},{"type":"DELETE","lineNumber":418,"oldContent":"            }"}]},{"timestamp":1754329878609,"changes":[{"type":"INSERT","lineNumber":386,"content":"                        fontWeight = FontWeight.Bold"},{"type":"DELETE","lineNumber":387,"oldContent":"                    )"},{"type":"INSERT","lineNumber":406,"content":"                        text = \"${step.distance.toInt()}m\","},{"type":"DELETE","lineNumber":411,"oldContent":"                }"},{"type":"INSERT","lineNumber":413,"content":"                }"}]},{"timestamp":1754329882004,"changes":[{"type":"INSERT","lineNumber":404,"content":"                "}]},{"timestamp":1754330131989,"changes":[{"type":"MODIFY","lineNumber":404,"content":"","oldContent":"                "}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ExpandedARInfoIsland.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/ExpandedARInfoIsland.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.core.*\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.CameraAlt\nimport androidx.compose.material.icons.filled.Search\nimport androidx.compose.material.icons.filled.CheckCircle\nimport androidx.compose.material.icons.filled.Warning\nimport androidx.compose.material.icons.filled.LocationOn\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.blur\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport kotlinx.coroutines.delay\nimport com.example.arwalking.R\n\n/**\n * Erweiterte AR Info Island mit detaillierten Informationen\n * Zeigt Landmark-Count, Confidence und erweiterte Status-Informationen\n */\n@Composable\nfun ExpandedARInfoIsland(\n    scanStatus: ARScanStatus,\n    landmarkCount: Int = 0,\n    confidence: Float = 0f,\n    isVisible: Boolean = true,\n    modifier: Modifier = Modifier,\n    currentInstruction: String? = null\n) {\n    if (!isVisible) return\n    \n    // Animation für das Ein-/Ausblenden\n    val alpha by animateFloatAsState(\n        targetValue = if (isVisible) 0.9f else 0f,\n        animationSpec = tween(durationMillis = 300),\n        label = \"expanded_island_alpha\"\n    )\n    \n    // Pulsierender Effekt für bestimmte Status\n    val pulseAnimation = rememberInfiniteTransition(label = \"pulse\")\n    val pulseAlpha by pulseAnimation.animateFloat(\n        initialValue = 0.8f,\n        targetValue = 1f,\n        animationSpec = infiniteRepeatable(\n            animation = tween(1000, easing = EaseInOut),\n            repeatMode = RepeatMode.Reverse\n        ),\n        label = \"pulse_alpha\"\n    )\n    \n    // Bestimme Farben basierend auf Status\n    val (backgroundColor, contentColor, accentColor) = when (scanStatus) {\n        ARScanStatus.INITIALIZING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Yellow\n        )\n        ARScanStatus.SCANNING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Cyan\n        )\n        ARScanStatus.TRACKING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Green\n        )\n        ARScanStatus.LOST -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Red\n        )\n        ARScanStatus.NAVIGATING -> Triple(\n            Color.Black.copy(alpha = 0.8f),\n            Color.White,\n            Color.Blue\n        )\n    }\n    \n    Card(\n        modifier = modifier\n            .padding(16.dp),\n        shape = RoundedCornerShape(24.dp),\n        colors = CardDefaults.cardColors(\n            containerColor = backgroundColor.copy(alpha = alpha)\n        ),\n        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)\n    ) {\n        Row(\n            modifier = Modifier\n                .padding(horizontal = 20.dp, vertical = 12.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Status-Icon mit Animation\n            val iconAlpha = if (scanStatus == ARScanStatus.SCANNING || scanStatus == ARScanStatus.INITIALIZING) {\n                pulseAlpha\n            } else {\n                1f\n            }\n            \n            Icon(\n                imageVector = getStatusIcon(scanStatus),\n                contentDescription = null,\n                tint = accentColor.copy(alpha = iconAlpha),\n                modifier = Modifier.size(24.dp)\n            )\n            \n            // Status-Text und Details\n            Column(\n                verticalArrangement = Arrangement.spacedBy(2.dp)\n            ) {\n                Text(\n                    text = getStatusText(scanStatus),\n                    color = contentColor,\n                    fontSize = 14.sp,\n                    fontWeight = FontWeight.Medium\n                )\n                \n                // Erweiterte Informationen\n                if (landmarkCount > 0 || confidence > 0f) {\n                    Row(\n                        horizontalArrangement = Arrangement.spacedBy(8.dp),\n                        verticalAlignment = Alignment.CenterVertically\n                    ) {\n                        if (landmarkCount > 0) {\n                            Text(\n                                text = \"$landmarkCount Landmarks\",\n                                color = contentColor.copy(alpha = 0.7f),\n                                fontSize = 11.sp\n                            )\n                        }\n                        \n                        if (confidence > 0f) {\n                            Text(\n                                text = \"•\",\n                                color = contentColor.copy(alpha = 0.5f),\n                                fontSize = 11.sp\n                            )\n                            \n                            Text(\n                                text = \"${(confidence * 100).toInt()}%\",\n                                color = getConfidenceColor(confidence),\n                                fontSize = 11.sp,\n                                fontWeight = FontWeight.Medium\n                            )\n                        }\n                    }\n                }\n            }\n            \n            // Zusätzlicher Status-Indikator\n            if (scanStatus == ARScanStatus.TRACKING || scanStatus == ARScanStatus.NAVIGATING) {\n                Box(\n                    modifier = Modifier\n                        .size(8.dp)\n                        .background(\n                            accentColor.copy(alpha = pulseAlpha),\n                            shape = RoundedCornerShape(4.dp)\n                        )\n                )\n            }\n        }\n    }\n}\n\n/**\n * Bestimmt das Icon basierend auf dem Scan-Status\n */\nprivate fun getStatusIcon(status: ARScanStatus): ImageVector {\n    return when (status) {\n        ARScanStatus.INITIALIZING -> Icons.Default.CameraAlt\n        ARScanStatus.SCANNING -> Icons.Default.Search\n        ARScanStatus.TRACKING -> Icons.Default.CheckCircle\n        ARScanStatus.LOST -> Icons.Default.Warning\n        ARScanStatus.NAVIGATING -> Icons.Default.LocationOn\n    }\n}\n\n/**\n * Bestimmt den Status-Text\n */\nprivate fun getStatusText(status: ARScanStatus): String {\n    return when (status) {\n        ARScanStatus.INITIALIZING -> \"AR wird initialisiert...\"\n        ARScanStatus.SCANNING -> \"Suche nach Landmarks...\"\n        ARScanStatus.TRACKING -> \"Landmark erkannt\"\n        ARScanStatus.LOST -> \"Landmark verloren\"\n        ARScanStatus.NAVIGATING -> \"Navigation aktiv\"\n    }\n}\n\n/**\n * Bestimmt die Farbe basierend auf der Confidence\n */\nprivate fun getConfidenceColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.9f -> Color.Green\n        confidence >= 0.8f -> Color(0xFF90EE90) // Light Green\n        confidence >= 0.7f -> Color.Yellow\n        confidence >= 0.6f -> Color(0xFFFFA500) // Orange\n        else -> Color.Red\n    }\n}","baseTimestamp":1754330242450,"deltas":[{"timestamp":1754330248631,"changes":[{"type":"DELETE","lineNumber":113,"oldContent":"            Icon("},{"type":"DELETE","lineNumber":114,"oldContent":"                imageVector = getStatusIcon(scanStatus),"},{"type":"DELETE","lineNumber":115,"oldContent":"                contentDescription = null,"},{"type":"DELETE","lineNumber":116,"oldContent":"                tint = accentColor.copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":117,"oldContent":"                modifier = Modifier.size(24.dp)"},{"type":"DELETE","lineNumber":118,"oldContent":"            )"},{"type":"INSERT","lineNumber":113,"content":"            // Verwende Navigationsicon wenn verfügbar, sonst Standard-Icon"},{"type":"INSERT","lineNumber":114,"content":"            if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {"},{"type":"INSERT","lineNumber":115,"content":"                val navigationAction = getNavigationAction(currentInstruction)"},{"type":"INSERT","lineNumber":116,"content":"                Icon("},{"type":"INSERT","lineNumber":117,"content":"                    painter = painterResource(id = navigationAction.getIconResource()),"},{"type":"INSERT","lineNumber":118,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":119,"content":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":120,"content":"                    modifier = Modifier.size(24.dp)"},{"type":"INSERT","lineNumber":121,"content":"                )"},{"type":"INSERT","lineNumber":122,"content":"            } else {"},{"type":"INSERT","lineNumber":123,"content":"                Icon("},{"type":"INSERT","lineNumber":124,"content":"                    imageVector = getStatusIcon(scanStatus),"},{"type":"INSERT","lineNumber":125,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":126,"content":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":127,"content":"                    modifier = Modifier.size(24.dp)"},{"type":"INSERT","lineNumber":128,"content":"                )"},{"type":"INSERT","lineNumber":129,"content":"            }"}]},{"timestamp":1754330256506,"changes":[{"type":"DELETE","lineNumber":120,"oldContent":"            "},{"type":"DELETE","lineNumber":122,"oldContent":"            // Status-Text und Details"},{"type":"DELETE","lineNumber":124,"oldContent":"            Column("},{"type":"DELETE","lineNumber":126,"oldContent":"                verticalArrangement = Arrangement.spacedBy(2.dp)"},{"type":"DELETE","lineNumber":128,"oldContent":"            ) {"},{"type":"DELETE","lineNumber":130,"oldContent":"                Text("},{"type":"DELETE","lineNumber":132,"oldContent":"                    text = getStatusText(scanStatus),"},{"type":"DELETE","lineNumber":134,"oldContent":"                    color = contentColor,"},{"type":"DELETE","lineNumber":136,"oldContent":"                    fontSize = 14.sp,"},{"type":"DELETE","lineNumber":138,"oldContent":"                    fontWeight = FontWeight.Medium"},{"type":"INSERT","lineNumber":130,"content":"            "},{"type":"INSERT","lineNumber":131,"content":"            // Status-Text und Details"},{"type":"INSERT","lineNumber":132,"content":"            Column("},{"type":"INSERT","lineNumber":133,"content":"                verticalArrangement = Arrangement.spacedBy(2.dp)"},{"type":"INSERT","lineNumber":134,"content":"            ) {"},{"type":"INSERT","lineNumber":135,"content":"                // Status Text - zeige Navigationsanweisung ohne Distanz wenn verfügbar"},{"type":"INSERT","lineNumber":136,"content":"                val displayText = if (scanStatus == ARScanStatus.NAVIGATING && currentInstruction != null) {"},{"type":"INSERT","lineNumber":137,"content":"                    // Entferne Distanzangaben aus der Anweisung"},{"type":"INSERT","lineNumber":138,"content":"                    currentInstruction"},{"type":"INSERT","lineNumber":139,"content":"                        .replace(Regex(\"\\\\d+\\\\s*m\"), \"\") // Entferne \"123m\" oder \"123 m\""},{"type":"INSERT","lineNumber":140,"content":"                        .replace(Regex(\"\\\\d+\\\\s*meter\"), \"\") // Entferne \"123 meter\""},{"type":"INSERT","lineNumber":141,"content":"                        .replace(Regex(\"\\\\d+\\\\s*Meter\"), \"\") // Entferne \"123 Meter\""},{"type":"INSERT","lineNumber":142,"content":"                        .replace(Regex(\"\\\\s+\"), \" \") // Mehrfache Leerzeichen durch einfache ersetzen"},{"type":"INSERT","lineNumber":143,"content":"                        .trim()"},{"type":"INSERT","lineNumber":144,"content":"                } else {"},{"type":"INSERT","lineNumber":145,"content":"                    getStatusText(scanStatus)"},{"type":"INSERT","lineNumber":146,"content":"                }"},{"type":"INSERT","lineNumber":147,"content":"                "},{"type":"INSERT","lineNumber":148,"content":"                Text("},{"type":"INSERT","lineNumber":149,"content":"                    text = displayText,"},{"type":"INSERT","lineNumber":150,"content":"                    color = contentColor,"},{"type":"INSERT","lineNumber":151,"content":"                    fontSize = 14.sp,"},{"type":"INSERT","lineNumber":152,"content":"                    fontWeight = FontWeight.Medium"}]},{"timestamp":1754330267999,"changes":[{"type":"INSERT","lineNumber":125,"content":"                    contentDescription = null,"},{"type":"INSERT","lineNumber":126,"content":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"INSERT","lineNumber":127,"content":"                    modifier = Modifier.size(24.dp)"},{"type":"INSERT","lineNumber":128,"content":"                )"},{"type":"INSERT","lineNumber":129,"content":"            }"},{"type":"DELETE","lineNumber":127,"oldContent":"                    contentDescription = null,"},{"type":"DELETE","lineNumber":130,"oldContent":"                    tint = accentColor.copy(alpha = iconAlpha),"},{"type":"DELETE","lineNumber":133,"oldContent":"                    modifier = Modifier.size(24.dp)"},{"type":"DELETE","lineNumber":136,"oldContent":"                )"},{"type":"DELETE","lineNumber":139,"oldContent":"            }"},{"type":"DELETE","lineNumber":141,"oldContent":"                )"},{"type":"DELETE","lineNumber":143,"oldContent":"                "},{"type":"DELETE","lineNumber":145,"oldContent":"                // Erweiterte Informationen"},{"type":"DELETE","lineNumber":147,"oldContent":"                if (landmarkCount > 0 || confidence > 0f) {"},{"type":"DELETE","lineNumber":149,"oldContent":"                    Row("},{"type":"DELETE","lineNumber":151,"oldContent":"                        horizontalArrangement = Arrangement.spacedBy(8.dp),"},{"type":"DELETE","lineNumber":153,"oldContent":"                        verticalAlignment = Alignment.CenterVertically"},{"type":"DELETE","lineNumber":155,"oldContent":"                    ) {"},{"type":"DELETE","lineNumber":157,"oldContent":"                        if (landmarkCount > 0) {"},{"type":"DELETE","lineNumber":159,"oldContent":"                            Text("},{"type":"DELETE","lineNumber":161,"oldContent":"                                text = \"$landmarkCount Landmarks\","},{"type":"DELETE","lineNumber":163,"oldContent":"                                color = contentColor.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":153,"content":"                )"},{"type":"INSERT","lineNumber":154,"content":"                "},{"type":"INSERT","lineNumber":155,"content":"                // Erweiterte Informationen"},{"type":"INSERT","lineNumber":156,"content":"                if (landmarkCount > 0 || confidence > 0f) {"},{"type":"INSERT","lineNumber":157,"content":"                    Row("},{"type":"INSERT","lineNumber":158,"content":"                        horizontalArrangement = Arrangement.spacedBy(8.dp),"},{"type":"INSERT","lineNumber":159,"content":"                        verticalAlignment = Alignment.CenterVertically"},{"type":"INSERT","lineNumber":160,"content":"                    ) {"},{"type":"INSERT","lineNumber":161,"content":"                        if (landmarkCount > 0) {"},{"type":"INSERT","lineNumber":162,"content":"                            Text("},{"type":"INSERT","lineNumber":163,"content":"                                text = \"$landmarkCount Landmarks\","},{"type":"INSERT","lineNumber":164,"content":"                                color = contentColor.copy(alpha = 0.7f),"},{"type":"INSERT","lineNumber":240,"content":""},{"type":"INSERT","lineNumber":241,"content":"/**"},{"type":"INSERT","lineNumber":242,"content":" * Bestimmt die Navigationsaktion basierend auf der Anweisung"},{"type":"INSERT","lineNumber":243,"content":" */"},{"type":"INSERT","lineNumber":244,"content":"private fun getNavigationAction(instruction: String): NavigationAction {"},{"type":"INSERT","lineNumber":245,"content":"    val lowerInstruction = instruction.lowercase()"},{"type":"INSERT","lineNumber":246,"content":"    return when {"},{"type":"INSERT","lineNumber":247,"content":"        lowerInstruction.contains(\"rechts\") || lowerInstruction.contains(\"right\") -> NavigationAction.TURN_RIGHT"},{"type":"INSERT","lineNumber":248,"content":"        lowerInstruction.contains(\"links\") || lowerInstruction.contains(\"left\") -> NavigationAction.TURN_LEFT"},{"type":"INSERT","lineNumber":249,"content":"        lowerInstruction.contains(\"tür\") || lowerInstruction.contains(\"door\") || "},{"type":"INSERT","lineNumber":250,"content":"        lowerInstruction.contains(\"eingang\") || lowerInstruction.contains(\"entrance\") ||"},{"type":"INSERT","lineNumber":251,"content":"        lowerInstruction.contains(\"durch\") || lowerInstruction.contains(\"through\") -> NavigationAction.THROUGH_DOOR"},{"type":"INSERT","lineNumber":252,"content":"        else -> NavigationAction.STRAIGHT"},{"type":"INSERT","lineNumber":253,"content":"    }"},{"type":"INSERT","lineNumber":254,"content":"}"},{"type":"INSERT","lineNumber":255,"content":""},{"type":"INSERT","lineNumber":256,"content":"/**"},{"type":"INSERT","lineNumber":257,"content":" * Gibt das passende Icon für die Navigationsaktion zurück"},{"type":"INSERT","lineNumber":258,"content":" */"},{"type":"INSERT","lineNumber":259,"content":"private fun NavigationAction.getIconResource(): Int = when (this) {"},{"type":"INSERT","lineNumber":260,"content":"    NavigationAction.TURN_RIGHT -> R.drawable.corner_up_right_1"},{"type":"INSERT","lineNumber":261,"content":"    NavigationAction.TURN_LEFT -> R.drawable.left"},{"type":"INSERT","lineNumber":262,"content":"    NavigationAction.THROUGH_DOOR -> R.drawable.door"},{"type":"INSERT","lineNumber":263,"content":"    NavigationAction.STRAIGHT -> R.drawable.arrow_up_1"},{"type":"INSERT","lineNumber":264,"content":"    NavigationAction.UNKNOWN -> R.drawable.navigation21"},{"type":"INSERT","lineNumber":265,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/AR3DArrowOverlay.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/AR3DArrowOverlay.kt","baseContent":"package com.example.arwalking.components\n\nimport android.graphics.Canvas\nimport android.graphics.Paint\nimport android.graphics.Path\nimport android.graphics.PointF\nimport androidx.compose.foundation.Canvas\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.*\nimport androidx.compose.ui.graphics.drawscope.DrawScope\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\nimport androidx.compose.ui.graphics.drawscope.rotate\nimport androidx.compose.ui.graphics.drawscope.scale\nimport androidx.compose.ui.graphics.drawscope.translate\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.unit.dp\nimport com.example.arwalking.FeatureMatchResult\nimport kotlin.math.*\n\n/**\n * 3D-Pfeil Overlay für AR-Navigation\n * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt\n */\n@Composable\nfun AR3DArrowOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    screenWidth: Float,\n    screenHeight: Float,\n    modifier: Modifier = Modifier\n) {\n    // Nur den besten Match verwenden\n    val bestMatch = matches.maxByOrNull { it.confidence }\n    \n    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {\n        \n        // Berechne die Position des Pfeils basierend auf dem Landmark\n        val arrowPosition = calculateArrowPosition(\n            landmark = bestMatch.landmark,\n            screenPosition = bestMatch.screenPosition,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight\n        )\n        \n        // Berechne die Richtung des Pfeils\n        val arrowDirection = calculateArrowDirection(bestMatch.landmark)\n        \n        Box(modifier = modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.fillMaxSize()) {\n                draw3DArrow(\n                    position = arrowPosition,\n                    direction = arrowDirection,\n                    confidence = bestMatch.confidence,\n                    size = size\n                )\n            }\n        }\n    }\n}\n\n/**\n * Berechnet die Position des 3D-Pfeils auf dem Bildschirm\n */\nprivate fun calculateArrowPosition(\n    landmark: com.example.arwalking.FeatureLandmark,\n    screenWidth: Float,\n    screenHeight: Float\n): Offset {\n    // Verwende die Position des Landmarks, um die Bildschirmposition zu berechnen\n    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man\n    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden\n    \n    val x = landmark.position.x.toFloat()\n    val y = landmark.position.y.toFloat()\n    \n    // Normalisiere die Position auf Bildschirmkoordinaten\n    val normalizedX = (x % 100) / 100f // Vereinfachte Normalisierung\n    val normalizedY = (y % 100) / 100f\n    \n    return Offset(\n        x = normalizedX * screenWidth,\n        y = normalizedY * screenHeight\n    )\n}\n\n/**\n * Berechnet die Richtung des Pfeils basierend auf der Navigation\n */\nprivate fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {\n    // Vereinfachte Richtungsberechnung\n    // In einer echten Implementierung würde man die aktuelle Position des Benutzers\n    // und die Zielposition verwenden\n    \n    val angle = landmark.position.x.toFloat() * 0.1f // Vereinfachte Berechnung\n    return angle % 360f\n}\n\n/**\n * Zeichnet einen 3D-Pfeil auf dem Canvas\n */\nprivate fun DrawScope.draw3DArrow(\n    position: Offset,\n    direction: Float,\n    confidence: Float,\n    size: androidx.compose.ui.geometry.Size\n) {\n    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence\n    val arrowColor = getArrowColor(confidence)\n    \n    drawIntoCanvas { canvas ->\n        // Speichere den aktuellen Zustand\n        canvas.save()\n        \n        // Verschiebe zum Pfeil-Zentrum\n        canvas.translate(position.x, position.y)\n        \n        // Rotiere basierend auf der Richtung\n        canvas.rotate(direction)\n        \n        // Zeichne den 3D-Pfeil\n        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)\n        \n        // Stelle den ursprünglichen Zustand wieder her\n        canvas.restore()\n    }\n}\n\n/**\n * Zeichnet die 3D-Pfeil-Form\n */\nprivate fun DrawScope.draw3DArrowShape(\n    canvas: Canvas,\n    size: Float,\n    color: Color,\n    confidence: Float\n) {\n    val paint = Paint().apply {\n        this.color = color.toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    val strokePaint = Paint().apply {\n        this.color = Color.White.copy(alpha = 0.8f).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.STROKE\n        strokeWidth = 3f\n    }\n    \n    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)\n    val arrowPath = Path().apply {\n        // Pfeilspitze\n        moveTo(0f, -size * 0.5f)\n        lineTo(size * 0.3f, -size * 0.2f)\n        lineTo(size * 0.15f, -size * 0.2f)\n        \n        // Pfeilkörper\n        lineTo(size * 0.15f, size * 0.3f)\n        lineTo(-size * 0.15f, size * 0.3f)\n        lineTo(-size * 0.15f, -size * 0.2f)\n        lineTo(-size * 0.3f, -size * 0.2f)\n        \n        close()\n    }\n    \n    // Schatten-Effekt (3D-Tiefe)\n    val shadowPath = Path(arrowPath).apply {\n        offset(size * 0.05f, size * 0.05f)\n    }\n    \n    val shadowPaint = Paint().apply {\n        this.color = Color.Black.copy(alpha = 0.3f).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    // Zeichne Schatten\n    canvas.drawPath(shadowPath, shadowPaint)\n    \n    // Zeichne Hauptpfeil\n    canvas.drawPath(arrowPath, paint)\n    \n    // Zeichne Umriss\n    canvas.drawPath(arrowPath, strokePaint)\n    \n    // Zeichne Glanz-Effekt für 3D-Look\n    val highlightPaint = Paint().apply {\n        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()\n        isAntiAlias = true\n        style = Paint.Style.FILL\n    }\n    \n    val highlightPath = Path().apply {\n        moveTo(-size * 0.05f, -size * 0.4f)\n        lineTo(size * 0.05f, -size * 0.3f)\n        lineTo(size * 0.05f, -size * 0.1f)\n        lineTo(-size * 0.05f, -size * 0.2f)\n        close()\n    }\n    \n    canvas.drawPath(highlightPath, highlightPaint)\n}\n\n/**\n * Bestimmt die Farbe des Pfeils basierend auf der Confidence\n */\nprivate fun getArrowColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher\n        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher\n        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay\n        else -> Color(0xFFFF9800) // Orange - Unsicher\n    }\n}\n\n/**\n * Erweiterte 3D-Pfeil-Komponente mit Animation\n */\n@Composable\nfun Animated3DArrowOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    screenWidth: Float,\n    screenHeight: Float,\n    modifier: Modifier = Modifier\n) {\n    val bestMatch = matches.maxByOrNull { it.confidence }\n    var animationProgress by remember { mutableStateOf(0f) }\n    \n    // Animation für pulsierenden Effekt\n    LaunchedEffect(bestMatch) {\n        if (bestMatch != null && bestMatch.confidence >= 0.7f) {\n            while (true) {\n                animationProgress = (animationProgress + 0.02f) % 1f\n                kotlinx.coroutines.delay(16) // ~60 FPS\n            }\n        }\n    }\n    \n    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {\n        val arrowPosition = calculateArrowPosition(\n            landmark = bestMatch.landmark,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight\n        )\n        \n        val arrowDirection = calculateArrowDirection(bestMatch.landmark)\n        \n        Box(modifier = modifier.fillMaxSize()) {\n            Canvas(modifier = Modifier.fillMaxSize()) {\n                drawAnimated3DArrow(\n                    position = arrowPosition,\n                    direction = arrowDirection,\n                    confidence = bestMatch.confidence,\n                    animationProgress = animationProgress,\n                    size = size\n                )\n            }\n        }\n    }\n}\n\n/**\n * Zeichnet einen animierten 3D-Pfeil\n */\nprivate fun DrawScope.drawAnimated3DArrow(\n    position: Offset,\n    direction: Float,\n    confidence: Float,\n    animationProgress: Float,\n    size: androidx.compose.ui.geometry.Size\n) {\n    val baseSize = 60.dp.toPx()\n    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f\n    val arrowSize = baseSize * confidence * pulseScale\n    val arrowColor = getArrowColor(confidence)\n    \n    // Leichtes Schweben des Pfeils\n    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f\n    val adjustedPosition = position.copy(y = position.y + hoverOffset)\n    \n    drawIntoCanvas { canvas ->\n        canvas.save()\n        canvas.translate(adjustedPosition.x, adjustedPosition.y)\n        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation\n        \n        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)\n        \n        canvas.restore()\n    }\n}","baseTimestamp":1754116843411,"deltas":[{"timestamp":1754564059867,"changes":[{"type":"INSERT","lineNumber":5,"content":"import android.graphics.PointF"},{"type":"DELETE","lineNumber":30,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":31,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":46,"content":"            val model = GLBArrowModel(context)"},{"type":"INSERT","lineNumber":47,"content":"            isGLBLoaded = model.loadModel()"},{"type":"INSERT","lineNumber":48,"content":"            glbModel = model"},{"type":"INSERT","lineNumber":49,"content":"        }"},{"type":"INSERT","lineNumber":50,"content":"    }"},{"type":"INSERT","lineNumber":51,"content":"    "},{"type":"DELETE","lineNumber":47,"oldContent":"            val model = GLBArrowModel(context)"},{"type":"DELETE","lineNumber":50,"oldContent":"            isGLBLoaded = model.loadModel()"},{"type":"DELETE","lineNumber":53,"oldContent":"            glbModel = model"},{"type":"DELETE","lineNumber":56,"oldContent":"        }"},{"type":"DELETE","lineNumber":59,"oldContent":"    }"},{"type":"DELETE","lineNumber":61,"oldContent":"    "},{"type":"DELETE","lineNumber":131,"oldContent":"        "},{"type":"MODIFY","lineNumber":132,"content":"    totalSteps: Int = 3,","oldContent":"        // Stelle den ursprünglichen Zustand wieder her"},{"type":"INSERT","lineNumber":133,"content":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":134,"oldContent":"    }"},{"type":"DELETE","lineNumber":135,"oldContent":"}"},{"type":"DELETE","lineNumber":136,"oldContent":""},{"type":"DELETE","lineNumber":137,"oldContent":"/**"},{"type":"DELETE","lineNumber":138,"oldContent":" * Zeichnet die 3D-Pfeil-Form"},{"type":"DELETE","lineNumber":139,"oldContent":" */"},{"type":"DELETE","lineNumber":140,"oldContent":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":141,"oldContent":"    canvas: Canvas,"},{"type":"DELETE","lineNumber":142,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":143,"oldContent":"    color: Color,"},{"type":"DELETE","lineNumber":144,"oldContent":"    confidence: Float"},{"type":"DELETE","lineNumber":145,"oldContent":") {"},{"type":"DELETE","lineNumber":146,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":147,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":148,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":149,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":150,"oldContent":"    }"},{"type":"DELETE","lineNumber":151,"oldContent":"    "},{"type":"DELETE","lineNumber":152,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":153,"oldContent":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"DELETE","lineNumber":154,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":155,"oldContent":"        style = Paint.Style.STROKE"},{"type":"DELETE","lineNumber":156,"oldContent":"        strokeWidth = 3f"},{"type":"DELETE","lineNumber":157,"oldContent":"    }"},{"type":"DELETE","lineNumber":158,"oldContent":"    "},{"type":"DELETE","lineNumber":159,"oldContent":"    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)"},{"type":"DELETE","lineNumber":160,"oldContent":"    val arrowPath = Path().apply {"},{"type":"DELETE","lineNumber":161,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":162,"oldContent":"        moveTo(0f, -size * 0.5f)"},{"type":"DELETE","lineNumber":163,"oldContent":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"DELETE","lineNumber":164,"oldContent":"        lineTo(size * 0.15f, -size * 0.2f)"},{"type":"DELETE","lineNumber":165,"oldContent":"        "},{"type":"DELETE","lineNumber":166,"oldContent":"        lineTo(size * 0.15f, size * 0.3f)"},{"type":"DELETE","lineNumber":167,"oldContent":"        lineTo(-size * 0.15f, -size * 0.2f)"},{"type":"DELETE","lineNumber":168,"oldContent":"        "},{"type":"DELETE","lineNumber":169,"oldContent":"    }"},{"type":"DELETE","lineNumber":170,"oldContent":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"DELETE","lineNumber":171,"oldContent":"        offset(size * 0.05f, size * 0.05f)"},{"type":"DELETE","lineNumber":172,"oldContent":"    "},{"type":"INSERT","lineNumber":135,"content":"    // Priorität: Verwende Navigationsanweisung wenn verfügbar"},{"type":"INSERT","lineNumber":136,"content":"    val baseAngle = if (currentInstruction != null) {"},{"type":"INSERT","lineNumber":137,"content":"        val lowerInstruction = currentInstruction.lowercase()"},{"type":"INSERT","lineNumber":138,"content":"        when {"},{"type":"INSERT","lineNumber":139,"content":"            lowerInstruction.contains(\"rechts\") || lowerInstruction.contains(\"right\") -> 90f // Nach rechts"},{"type":"INSERT","lineNumber":140,"content":"            lowerInstruction.contains(\"links\") || lowerInstruction.contains(\"left\") -> 270f // Nach links"},{"type":"INSERT","lineNumber":141,"content":"            lowerInstruction.contains(\"tür\") || lowerInstruction.contains(\"door\") || "},{"type":"INSERT","lineNumber":142,"content":"            lowerInstruction.contains(\"eingang\") || lowerInstruction.contains(\"entrance\") ||"},{"type":"INSERT","lineNumber":143,"content":"            lowerInstruction.contains(\"durch\") || lowerInstruction.contains(\"through\") -> 0f // Geradeaus durch Tür"},{"type":"INSERT","lineNumber":144,"content":"            else -> 0f // Standard: geradeaus"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":"    } else {"},{"type":"INSERT","lineNumber":147,"content":"        // Fallback: Berechne Richtung basierend auf Landmark-Typ und Position"},{"type":"INSERT","lineNumber":148,"content":"        when {"},{"type":"INSERT","lineNumber":149,"content":"            // Prof. Ludwig Büro (PT-1-86) - Ausgang nach links"},{"type":"INSERT","lineNumber":150,"content":"            landmark.id == \"PT-1-86\" -> 270f // Nach links"},{"type":"INSERT","lineNumber":151,"content":"            "},{"type":"INSERT","lineNumber":152,"content":"            // Türen/Eingänge - geradeaus durch (z.B. PT-1-566, PT-1-697)"},{"type":"INSERT","lineNumber":153,"content":"            landmark.id.contains(\"PT-1-566\") || landmark.id.contains(\"PT-1-697\") -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":154,"content":"            "},{"type":"INSERT","lineNumber":155,"content":"            // Allgemeine Türen basierend auf Typ"},{"type":"INSERT","lineNumber":156,"content":"            landmark.name.contains(\"Tür\", ignoreCase = true) || "},{"type":"INSERT","lineNumber":157,"content":"            landmark.name.contains(\"door\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":158,"content":"            landmark.name.contains(\"Entry\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":159,"content":"            "},{"type":"INSERT","lineNumber":160,"content":"            // Büros - nach links"},{"type":"INSERT","lineNumber":161,"content":"            landmark.name.contains(\"Prof.\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":162,"content":"            landmark.name.contains(\"Office\", ignoreCase = true) -> 270f // Nach links"},{"type":"INSERT","lineNumber":163,"content":"            "},{"type":"INSERT","lineNumber":164,"content":"            // Treppen - nach oben/unten"},{"type":"INSERT","lineNumber":165,"content":"            landmark.name.contains(\"stairs\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":166,"content":"            landmark.name.contains(\"Treppe\", ignoreCase = true) -> 45f // Diagonal nach oben"},{"type":"INSERT","lineNumber":167,"content":"            "},{"type":"INSERT","lineNumber":168,"content":"            // Aufzüge - geradeaus"},{"type":"INSERT","lineNumber":169,"content":"            landmark.name.contains(\"elevator\", ignoreCase = true) ||"},{"type":"INSERT","lineNumber":170,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":171,"content":"            "},{"type":"INSERT","lineNumber":172,"content":"            else -> {"},{"type":"INSERT","lineNumber":173,"content":"                // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"DELETE","lineNumber":200,"oldContent":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":201,"content":"    "},{"type":"DELETE","lineNumber":269,"oldContent":"    "},{"type":"INSERT","lineNumber":271,"content":"    "},{"type":"DELETE","lineNumber":322,"oldContent":"    "},{"type":"INSERT","lineNumber":324,"content":"    "},{"type":"DELETE","lineNumber":414,"oldContent":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":416,"content":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":425,"content":"    "},{"type":"DELETE","lineNumber":426,"oldContent":"    "},{"type":"DELETE","lineNumber":430,"oldContent":""},{"type":"DELETE","lineNumber":432,"oldContent":"    size: Float,"},{"type":"DELETE","lineNumber":433,"oldContent":"}"},{"type":"DELETE","lineNumber":434,"oldContent":"    )"},{"type":"DELETE","lineNumber":437,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":434,"content":""},{"type":"INSERT","lineNumber":435,"content":""},{"type":"INSERT","lineNumber":436,"content":""},{"type":"INSERT","lineNumber":437,"content":"/**"},{"type":"MODIFY","lineNumber":440,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {","oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":441,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":442,"oldContent":"}"},{"type":"MODIFY","lineNumber":443,"content":"        name = processedLandmark.name,","oldContent":"        imageUrl = null"},{"type":"INSERT","lineNumber":444,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":446,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":447,"content":"    )"},{"type":"INSERT","lineNumber":448,"content":"}"}]},{"timestamp":1754564805927,"changes":[{"type":"DELETE","lineNumber":46,"oldContent":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":48,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":51,"oldContent":"    "},{"type":"DELETE","lineNumber":53,"oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":52,"content":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":53,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":54,"content":"    "},{"type":"INSERT","lineNumber":55,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"MODIFY","lineNumber":116,"content":"    val hashCode = (landmark.id ?: \"default\").hashCode()","oldContent":"    val hashCode = landmark.id.hashCode()"},{"type":"MODIFY","lineNumber":153,"content":"            (landmark.id?.contains(\"PT-1-566\") == true) || (landmark.id?.contains(\"PT-1-697\") == true) -> 0f // Geradeaus","oldContent":"            landmark.id.contains(\"PT-1-566\") || landmark.id.contains(\"PT-1-697\") -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":185,"oldContent":"    val positionVariation = (landmark.id.hashCode() % 10).toFloat() * 2f - 10f"},{"type":"DELETE","lineNumber":186,"oldContent":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"DELETE","lineNumber":187,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":188,"oldContent":"    }"},{"type":"DELETE","lineNumber":189,"oldContent":"    // Zeichne Schatten"},{"type":"DELETE","lineNumber":190,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":191,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":192,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":185,"content":"    val positionVariation = ((landmark.id ?: \"default\").hashCode() % 10).toFloat() * 2f - 10f"},{"type":"INSERT","lineNumber":186,"content":"    "},{"type":"INSERT","lineNumber":187,"content":"    return (baseAngle + positionVariation) % 360f"},{"type":"INSERT","lineNumber":188,"content":"}"},{"type":"INSERT","lineNumber":189,"content":""},{"type":"INSERT","lineNumber":190,"content":"/**"},{"type":"INSERT","lineNumber":191,"content":" * Zeichnet einen 3D-Pfeil auf dem Canvas"},{"type":"INSERT","lineNumber":192,"content":" */"},{"type":"DELETE","lineNumber":319,"oldContent":"    "},{"type":"DELETE","lineNumber":320,"oldContent":"    return (stabilizedDirection + confidenceVariation) % 360f"},{"type":"INSERT","lineNumber":319,"content":"    modifier: Modifier = Modifier,"},{"type":"INSERT","lineNumber":320,"content":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":351,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":352,"oldContent":""},{"type":"INSERT","lineNumber":351,"content":"                totalSteps = totalSteps,"},{"type":"INSERT","lineNumber":352,"content":"                currentInstruction = currentInstruction"},{"type":"INSERT","lineNumber":425,"content":"    "},{"type":"DELETE","lineNumber":427,"oldContent":"    "},{"type":"MODIFY","lineNumber":439,"content":" */","oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":445,"oldContent":"}"},{"type":"DELETE","lineNumber":446,"oldContent":"    )"},{"type":"INSERT","lineNumber":445,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":447,"content":"    )"},{"type":"INSERT","lineNumber":448,"content":"}"}]},{"timestamp":1754924670003,"changes":[{"type":"DELETE","lineNumber":49,"oldContent":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":50,"content":"    }"},{"type":"INSERT","lineNumber":51,"content":"    "},{"type":"INSERT","lineNumber":52,"content":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":53,"oldContent":"    }"},{"type":"DELETE","lineNumber":55,"oldContent":"    "},{"type":"DELETE","lineNumber":57,"oldContent":"        // Berechne die Position des Pfeils basierend auf dem Landmark"},{"type":"DELETE","lineNumber":58,"oldContent":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":59,"oldContent":"            calculateArrowPosition("},{"type":"DELETE","lineNumber":60,"oldContent":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"DELETE","lineNumber":61,"oldContent":"                screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":62,"oldContent":"                screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":63,"oldContent":"                screenHeight = screenHeight"},{"type":"DELETE","lineNumber":64,"oldContent":"            )"},{"type":"DELETE","lineNumber":65,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":66,"oldContent":"            Offset(screenWidth / 2, screenHeight / 2)"},{"type":"DELETE","lineNumber":67,"oldContent":"        }"},{"type":"INSERT","lineNumber":57,"content":"        // Berechne die Position des Pfeils basierend auf dem Match"},{"type":"INSERT","lineNumber":58,"content":"        val arrowPosition = Offset("},{"type":"INSERT","lineNumber":59,"content":"            bestMatch.position.x,"},{"type":"INSERT","lineNumber":60,"content":"            bestMatch.position.y"},{"type":"INSERT","lineNumber":61,"content":"        )"},{"type":"DELETE","lineNumber":74,"oldContent":" */"},{"type":"DELETE","lineNumber":75,"oldContent":"private fun calculateArrowPosition("},{"type":"INSERT","lineNumber":68,"content":"                totalSteps = totalSteps,"},{"type":"INSERT","lineNumber":69,"content":"                currentInstruction = currentInstruction"},{"type":"DELETE","lineNumber":174,"oldContent":"    "},{"type":"DELETE","lineNumber":175,"oldContent":"    val shadowPath = Path(arrowPath).apply {"},{"type":"DELETE","lineNumber":176,"oldContent":"    }"},{"type":"DELETE","lineNumber":177,"oldContent":"    "},{"type":"DELETE","lineNumber":178,"oldContent":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"INSERT","lineNumber":168,"content":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"INSERT","lineNumber":169,"content":"                when {"},{"type":"INSERT","lineNumber":170,"content":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"INSERT","lineNumber":171,"content":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"INSERT","lineNumber":172,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":353,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":347,"content":"            )"},{"type":"DELETE","lineNumber":397,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":391,"content":"        "},{"type":"DELETE","lineNumber":442,"oldContent":"}"},{"type":"INSERT","lineNumber":436,"content":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":446,"oldContent":"    )"},{"type":"INSERT","lineNumber":441,"content":"    )"}]},{"timestamp":1754924675722,"changes":[{"type":"MODIFY","lineNumber":50,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":53,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }","oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":62,"oldContent":"                totalSteps = totalSteps,"},{"type":"DELETE","lineNumber":64,"oldContent":"                currentInstruction = currentInstruction"},{"type":"DELETE","lineNumber":66,"oldContent":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":67,"oldContent":"            calculateArrowDirection("},{"type":"DELETE","lineNumber":68,"oldContent":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"DELETE","lineNumber":69,"oldContent":"                currentStep = currentStep,"},{"type":"DELETE","lineNumber":70,"oldContent":"            )"},{"type":"DELETE","lineNumber":71,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":72,"oldContent":"            0f"},{"type":"DELETE","lineNumber":73,"oldContent":"        }"},{"type":"INSERT","lineNumber":64,"content":"        val arrowDirection = 0f // Vereinfacht für jetzt"},{"type":"DELETE","lineNumber":162,"oldContent":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"DELETE","lineNumber":164,"oldContent":"                when {"},{"type":"DELETE","lineNumber":166,"oldContent":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"DELETE","lineNumber":168,"oldContent":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"DELETE","lineNumber":170,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":159,"content":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"INSERT","lineNumber":160,"content":"                when {"},{"type":"INSERT","lineNumber":161,"content":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"INSERT","lineNumber":162,"content":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"INSERT","lineNumber":163,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":175,"oldContent":"    val shadowPaint = Paint().apply {"},{"type":"DELETE","lineNumber":176,"oldContent":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"DELETE","lineNumber":177,"oldContent":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":166,"content":"        }"},{"type":"INSERT","lineNumber":167,"content":"    }"},{"type":"INSERT","lineNumber":168,"content":"    "},{"type":"DELETE","lineNumber":341,"oldContent":"            )"},{"type":"INSERT","lineNumber":338,"content":"            )"},{"type":"DELETE","lineNumber":364,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":355,"content":"}"},{"type":"DELETE","lineNumber":371,"oldContent":"    val arrowSize = 80.dp.toPx() * confidence"},{"type":"INSERT","lineNumber":362,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":385,"oldContent":"        "},{"type":"INSERT","lineNumber":382,"content":"        "},{"type":"DELETE","lineNumber":394,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":385,"content":"}"},{"type":"DELETE","lineNumber":430,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":436,"oldContent":"    )"},{"type":"INSERT","lineNumber":427,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":432,"content":"    )"}]},{"timestamp":1754924686079,"changes":[{"type":"INSERT","lineNumber":49,"content":"        }"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"INSERT","lineNumber":52,"content":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":53,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"MODIFY","lineNumber":64,"content":"        val arrowDirection = 0f // Vereinfacht für jetzt","oldContent":"        val arrowDirection = 0f // Vereinfacht für jetzt"},{"type":"DELETE","lineNumber":150,"oldContent":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"DELETE","lineNumber":152,"oldContent":"                when {"},{"type":"DELETE","lineNumber":154,"oldContent":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"DELETE","lineNumber":156,"oldContent":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"DELETE","lineNumber":157,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":160,"oldContent":"        }"},{"type":"DELETE","lineNumber":161,"oldContent":"    }"},{"type":"DELETE","lineNumber":163,"oldContent":"    "},{"type":"INSERT","lineNumber":159,"content":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"INSERT","lineNumber":160,"content":"                when {"},{"type":"INSERT","lineNumber":161,"content":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"INSERT","lineNumber":162,"content":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"INSERT","lineNumber":163,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":168,"oldContent":"    val shadowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":165,"content":"            }"},{"type":"INSERT","lineNumber":166,"content":"        }"},{"type":"INSERT","lineNumber":167,"content":"    }"},{"type":"INSERT","lineNumber":168,"content":"    "},{"type":"DELETE","lineNumber":321,"oldContent":"        val arrowPosition = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":322,"oldContent":"            calculateArrowPosition("},{"type":"DELETE","lineNumber":323,"oldContent":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"DELETE","lineNumber":324,"oldContent":"                screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":325,"oldContent":"                screenWidth = screenWidth,"},{"type":"DELETE","lineNumber":326,"oldContent":"                screenHeight = screenHeight"},{"type":"DELETE","lineNumber":327,"oldContent":"            )"},{"type":"DELETE","lineNumber":328,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":329,"oldContent":"            )"},{"type":"DELETE","lineNumber":330,"oldContent":"            Offset(screenWidth / 2, screenHeight / 2)"},{"type":"DELETE","lineNumber":331,"oldContent":"        }"},{"type":"INSERT","lineNumber":321,"content":"        val arrowPosition = Offset("},{"type":"INSERT","lineNumber":322,"content":"            bestMatch.position.x,"},{"type":"INSERT","lineNumber":323,"content":"            bestMatch.position.y"},{"type":"INSERT","lineNumber":324,"content":"        )"},{"type":"DELETE","lineNumber":333,"oldContent":"        val arrowDirection = if (bestMatch.landmark != null) {"},{"type":"DELETE","lineNumber":334,"oldContent":"            calculateArrowDirection("},{"type":"DELETE","lineNumber":335,"oldContent":"                landmark = convertToFeatureLandmark(bestMatch.landmark!!),"},{"type":"DELETE","lineNumber":336,"oldContent":"                currentStep = currentStep,"},{"type":"DELETE","lineNumber":337,"oldContent":"                totalSteps = totalSteps,"},{"type":"DELETE","lineNumber":338,"oldContent":"                currentInstruction = currentInstruction"},{"type":"DELETE","lineNumber":339,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":340,"oldContent":"            0f"},{"type":"DELETE","lineNumber":341,"oldContent":"        }"},{"type":"INSERT","lineNumber":326,"content":"        val arrowDirection = 0f // Vereinfacht für jetzt"},{"type":"DELETE","lineNumber":346,"oldContent":"}"},{"type":"DELETE","lineNumber":353,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":354,"oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":337,"content":"            }"},{"type":"INSERT","lineNumber":340,"content":"}"},{"type":"DELETE","lineNumber":362,"oldContent":"}"},{"type":"INSERT","lineNumber":346,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":347,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":373,"oldContent":"        "},{"type":"DELETE","lineNumber":377,"oldContent":"}"},{"type":"DELETE","lineNumber":382,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":365,"content":"        "},{"type":"DELETE","lineNumber":384,"oldContent":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":367,"content":"        "},{"type":"INSERT","lineNumber":368,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":370,"content":"}"},{"type":"DELETE","lineNumber":418,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":423,"oldContent":"    )"},{"type":"INSERT","lineNumber":412,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":417,"content":"    )"}]},{"timestamp":1754925471808,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"import androidx.compose.foundation.layout.fillMaxSize"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.ui.graphics.drawscope.DrawScope"},{"type":"MODIFY","lineNumber":17,"content":"import androidx.compose.ui.unit.dp","oldContent":"import androidx.compose.ui.graphics.drawscope.scale"},{"type":"MODIFY","lineNumber":55,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.3f) {","oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":63,"content":"        // Berechne die Richtung des Pfeils mit Navigationsdaten"},{"type":"DELETE","lineNumber":64,"oldContent":"        val arrowDirection = 0f // Vereinfacht für jetzt"},{"type":"DELETE","lineNumber":154,"oldContent":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"INSERT","lineNumber":155,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":156,"content":"            "},{"type":"INSERT","lineNumber":157,"content":"            else -> {"},{"type":"INSERT","lineNumber":158,"content":"                // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"INSERT","lineNumber":159,"content":"                val progress = currentStep.toFloat() / totalSteps.toFloat()"},{"type":"DELETE","lineNumber":159,"oldContent":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":161,"oldContent":"            "},{"type":"INSERT","lineNumber":164,"content":"                }"},{"type":"DELETE","lineNumber":163,"oldContent":"            else -> {"},{"type":"DELETE","lineNumber":165,"oldContent":"                // Dynamische Berechnung basierend auf Route-Fortschritt"},{"type":"DELETE","lineNumber":167,"oldContent":"                }"},{"type":"MODIFY","lineNumber":320,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.3f) {","oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":325,"content":"        "},{"type":"DELETE","lineNumber":327,"oldContent":"            }"},{"type":"DELETE","lineNumber":328,"oldContent":"}"},{"type":"DELETE","lineNumber":329,"oldContent":"        "},{"type":"DELETE","lineNumber":333,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":334,"oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":337,"content":"            }"},{"type":"INSERT","lineNumber":340,"content":"}"},{"type":"INSERT","lineNumber":346,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":347,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":350,"oldContent":"        "},{"type":"DELETE","lineNumber":353,"oldContent":"        "},{"type":"DELETE","lineNumber":355,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":358,"oldContent":"}"},{"type":"DELETE","lineNumber":367,"oldContent":"        position = com.example.arwalking.Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":368,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":363,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":364,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":365,"content":"        "},{"type":"INSERT","lineNumber":367,"content":"        "},{"type":"INSERT","lineNumber":368,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":370,"content":"}"},{"type":"DELETE","lineNumber":397,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":403,"oldContent":"    )"},{"type":"INSERT","lineNumber":412,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":417,"content":"    )"}]},{"timestamp":1754925479777,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import androidx.compose.ui.graphics.drawscope.DrawScope","oldContent":"import androidx.compose.ui.graphics.drawscope.DrawScope"},{"type":"MODIFY","lineNumber":15,"content":"import androidx.compose.ui.graphics.nativeCanvas","oldContent":"import androidx.compose.ui.graphics.drawscope.Stroke"},{"type":"MODIFY","lineNumber":19,"content":"import kotlinx.coroutines.delay","oldContent":"import androidx.compose.ui.graphics.drawscope.translate"},{"type":"MODIFY","lineNumber":36,"content":"    currentInstruction: String? = null,","oldContent":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":52,"content":"    // Debug-Informationen"},{"type":"INSERT","lineNumber":53,"content":"    Log.d(\"AR3DArrowOverlay\", \"🔍 Feature-Mapping: $isFeatureMappingEnabled, Matches: ${matches.size}\")"},{"type":"INSERT","lineNumber":54,"content":"    matches.forEach { match ->"},{"type":"INSERT","lineNumber":55,"content":"        Log.d(\"AR3DArrowOverlay\", \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":56,"content":"    }"},{"type":"INSERT","lineNumber":57,"content":"    "},{"type":"INSERT","lineNumber":62,"content":"        Log.i(\"AR3DArrowOverlay\", \"🎯 Zeige AR-Pfeil für: ${bestMatch.landmarkId} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"DELETE","lineNumber":154,"oldContent":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":162,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":157,"oldContent":"                when {"},{"type":"DELETE","lineNumber":159,"oldContent":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"DELETE","lineNumber":161,"oldContent":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"INSERT","lineNumber":167,"content":"                when {"},{"type":"INSERT","lineNumber":168,"content":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"INSERT","lineNumber":169,"content":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"DELETE","lineNumber":164,"oldContent":"            }"},{"type":"INSERT","lineNumber":172,"content":"            }"},{"type":"DELETE","lineNumber":333,"oldContent":"            }"},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"INSERT","lineNumber":344,"content":"            }"},{"type":"INSERT","lineNumber":347,"content":"}"},{"type":"DELETE","lineNumber":344,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":346,"oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":353,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":354,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":358,"oldContent":" */"},{"type":"INSERT","lineNumber":365,"content":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"INSERT","lineNumber":366,"content":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"INSERT","lineNumber":367,"content":"    "},{"type":"INSERT","lineNumber":368,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":369,"content":"        canvas.save()"},{"type":"DELETE","lineNumber":360,"oldContent":"    }"},{"type":"DELETE","lineNumber":362,"oldContent":"    )"},{"type":"DELETE","lineNumber":364,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":365,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":373,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":368,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":376,"content":"    }"},{"type":"DELETE","lineNumber":370,"oldContent":"        lineTo(offsetX - size * 0.15f, offsetY - size * 0.2f)"},{"type":"DELETE","lineNumber":410,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":419,"content":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":416,"oldContent":"    )"},{"type":"INSERT","lineNumber":424,"content":"    )"}]},{"timestamp":1754925522831,"changes":[{"type":"INSERT","lineNumber":6,"content":"import android.util.Log"},{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.ui.graphics.*"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.ui.graphics.drawscope.DrawScope"},{"type":"MODIFY","lineNumber":15,"content":"import androidx.compose.ui.graphics.drawscope.drawIntoCanvas","oldContent":"import androidx.compose.ui.graphics.drawscope.Stroke"},{"type":"DELETE","lineNumber":53,"oldContent":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":55,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":57,"oldContent":"    "},{"type":"DELETE","lineNumber":59,"oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.3f) {"},{"type":"DELETE","lineNumber":61,"oldContent":"        "},{"type":"INSERT","lineNumber":59,"content":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":60,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":61,"content":"    "},{"type":"INSERT","lineNumber":62,"content":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.3f) {"},{"type":"INSERT","lineNumber":63,"content":"        Log.i(\"AR3DArrowOverlay\", \"🎯 Zeige AR-Pfeil für: ${bestMatch.landmarkId} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":64,"content":"        "},{"type":"DELETE","lineNumber":68,"oldContent":"        Log.i(\"AR3DArrowOverlay\", \"🎯 Zeige AR-Pfeil für: ${bestMatch.landmarkId} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":163,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":165,"oldContent":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":168,"content":"                when {"},{"type":"INSERT","lineNumber":169,"content":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"INSERT","lineNumber":170,"content":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"INSERT","lineNumber":173,"content":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":"                when {"},{"type":"DELETE","lineNumber":172,"oldContent":"                    progress < 0.33f -> 270f // Anfang: nach links"},{"type":"DELETE","lineNumber":174,"oldContent":"                    progress < 0.66f -> 0f   // Mitte: geradeaus"},{"type":"DELETE","lineNumber":178,"oldContent":"            }"},{"type":"INSERT","lineNumber":345,"content":"            }"},{"type":"DELETE","lineNumber":345,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":347,"content":"    }"},{"type":"INSERT","lineNumber":348,"content":"}"},{"type":"DELETE","lineNumber":349,"oldContent":"            }"},{"type":"DELETE","lineNumber":351,"oldContent":"}"},{"type":"INSERT","lineNumber":354,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":355,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":358,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":360,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":364,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":365,"oldContent":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"DELETE","lineNumber":366,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":367,"oldContent":"        "},{"type":"INSERT","lineNumber":365,"content":"    // Leichtes Schweben des Pfeils"},{"type":"DELETE","lineNumber":370,"oldContent":"        "},{"type":"DELETE","lineNumber":372,"oldContent":"        canvas.restore()"},{"type":"INSERT","lineNumber":371,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":372,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":373,"content":"        "},{"type":"INSERT","lineNumber":374,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":375,"content":"        "},{"type":"INSERT","lineNumber":376,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":377,"content":"    }"},{"type":"DELETE","lineNumber":378,"oldContent":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":382,"oldContent":"    }"},{"type":"INSERT","lineNumber":420,"content":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":423,"oldContent":"}"},{"type":"DELETE","lineNumber":424,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":426,"content":"}"}]},{"timestamp":1754925719294,"changes":[{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.ui.graphics.drawscope.DrawScope"},{"type":"MODIFY","lineNumber":14,"content":"import androidx.compose.ui.graphics.drawscope.DrawScope","oldContent":"import androidx.compose.ui.graphics.drawscope.Stroke"},{"type":"INSERT","lineNumber":16,"content":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"MODIFY","lineNumber":19,"content":"import com.example.arwalking.FeatureMatchResult","oldContent":"import androidx.compose.ui.graphics.drawscope.translate"},{"type":"DELETE","lineNumber":25,"oldContent":" * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt"},{"type":"DELETE","lineNumber":26,"oldContent":" * Unterstützt GLB-Modelle für realistischere 3D-Darstellung"},{"type":"INSERT","lineNumber":25,"content":" * Zeigt einen 3D-Pfeil an, der in der realen Welt getrackt wird"},{"type":"INSERT","lineNumber":26,"content":" * Verwendet Pose-Estimation und echtes 3D-Tracking wie Snapchat"},{"type":"INSERT","lineNumber":57,"content":"    }"},{"type":"INSERT","lineNumber":58,"content":"    "},{"type":"DELETE","lineNumber":59,"oldContent":"    }"},{"type":"DELETE","lineNumber":62,"oldContent":"    "},{"type":"MODIFY","lineNumber":65,"content":"        // Berechne die Position des Pfeils basierend auf dem Match","oldContent":"        // Berechne die Position des Pfeils basierend auf dem Match"},{"type":"MODIFY","lineNumber":164,"content":"            ","oldContent":"            "},{"type":"DELETE","lineNumber":168,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":170,"oldContent":"                }"},{"type":"DELETE","lineNumber":172,"oldContent":"        }"},{"type":"DELETE","lineNumber":174,"oldContent":"    }"},{"type":"INSERT","lineNumber":171,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":172,"content":"                }"},{"type":"INSERT","lineNumber":174,"content":"        }"},{"type":"INSERT","lineNumber":175,"content":"    }"},{"type":"MODIFY","lineNumber":217,"content":"    canvas: android.graphics.Canvas,","oldContent":"        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher"},{"type":"DELETE","lineNumber":345,"oldContent":"        }"},{"type":"DELETE","lineNumber":347,"oldContent":""},{"type":"INSERT","lineNumber":346,"content":"        }"},{"type":"MODIFY","lineNumber":349,"content":"","oldContent":"/**"},{"type":"INSERT","lineNumber":350,"content":"/**"},{"type":"DELETE","lineNumber":354,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":356,"oldContent":"    animationProgress: Float,"},{"type":"DELETE","lineNumber":358,"oldContent":"    )"},{"type":"DELETE","lineNumber":359,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":360,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":361,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":356,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":357,"content":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":358,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":359,"content":") {"},{"type":"INSERT","lineNumber":360,"content":"    val baseSize = 60.dp.toPx()"},{"type":"INSERT","lineNumber":361,"content":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"DELETE","lineNumber":368,"oldContent":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":369,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":370,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":371,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"DELETE","lineNumber":372,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":374,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":376,"oldContent":"}"},{"type":"MODIFY","lineNumber":378,"content":"}","oldContent":""},{"type":"INSERT","lineNumber":379,"content":""},{"type":"MODIFY","lineNumber":421,"content":"        name = processedLandmark.name,","oldContent":"        name = processedLandmark.name,"}]},{"timestamp":1754925838896,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.compose.ui.graphics.*"},{"type":"DELETE","lineNumber":14,"oldContent":"import androidx.compose.ui.graphics.drawscope.Stroke"},{"type":"MODIFY","lineNumber":16,"content":"import androidx.compose.ui.graphics.nativeCanvas","oldContent":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"MODIFY","lineNumber":59,"content":"    // Nur den besten Match verwenden","oldContent":"    // Nur den besten Match verwenden"},{"type":"DELETE","lineNumber":64,"oldContent":"        // Berechne die Position des Pfeils basierend auf dem Match"},{"type":"DELETE","lineNumber":65,"oldContent":"        // Berechne die Position des Pfeils basierend auf dem Match"},{"type":"DELETE","lineNumber":66,"oldContent":"        val arrowPosition = Offset("},{"type":"DELETE","lineNumber":67,"oldContent":"            bestMatch.position.x,"},{"type":"DELETE","lineNumber":68,"oldContent":"            bestMatch.position.y"},{"type":"DELETE","lineNumber":69,"oldContent":"        )"},{"type":"DELETE","lineNumber":71,"oldContent":"        // Berechne die Richtung des Pfeils mit Navigationsdaten"},{"type":"DELETE","lineNumber":72,"oldContent":"        val arrowDirection = 0f // Vereinfacht für jetzt"},{"type":"INSERT","lineNumber":65,"content":"        // Verwende AR-Objekt-Position wenn verfügbar (Snapchat-Style)"},{"type":"INSERT","lineNumber":66,"content":"        val arrowPosition = if (bestMatch.arObject != null) {"},{"type":"INSERT","lineNumber":67,"content":"            Log.i(\"AR3DArrowOverlay\", \"🎯 Verwende AR-3D-Position: ${bestMatch.arObject.screenPosition}\")"},{"type":"INSERT","lineNumber":68,"content":"            Offset("},{"type":"INSERT","lineNumber":69,"content":"                bestMatch.arObject.screenPosition.x,"},{"type":"INSERT","lineNumber":70,"content":"                bestMatch.arObject.screenPosition.y"},{"type":"INSERT","lineNumber":71,"content":"            )"},{"type":"INSERT","lineNumber":72,"content":"        } else {"},{"type":"INSERT","lineNumber":73,"content":"            // Fallback auf 2D-Position"},{"type":"INSERT","lineNumber":74,"content":"            Offset("},{"type":"INSERT","lineNumber":75,"content":"                bestMatch.position.x,"},{"type":"INSERT","lineNumber":76,"content":"                bestMatch.position.y"},{"type":"INSERT","lineNumber":77,"content":"            )"},{"type":"INSERT","lineNumber":78,"content":"        }"},{"type":"INSERT","lineNumber":80,"content":"        // Berechne die Richtung des Pfeils basierend auf AR-Pose"},{"type":"INSERT","lineNumber":81,"content":"        val arrowDirection = if (bestMatch.arObject != null) {"},{"type":"INSERT","lineNumber":82,"content":"            Math.toDegrees(bestMatch.arObject.rotation.y).toFloat()"},{"type":"INSERT","lineNumber":83,"content":"        } else {"},{"type":"INSERT","lineNumber":84,"content":"            0f // Fallback"},{"type":"INSERT","lineNumber":85,"content":"        }"},{"type":"INSERT","lineNumber":86,"content":"        "},{"type":"DELETE","lineNumber":96,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"DELETE","lineNumber":97,"oldContent":" */"},{"type":"DELETE","lineNumber":98,"oldContent":"private fun calculateArrowDirection(landmark: com.example.arwalking.FeatureLandmark): Float {"},{"type":"DELETE","lineNumber":99,"oldContent":"    // Vereinfachte Richtungsberechnung"},{"type":"DELETE","lineNumber":100,"oldContent":"    // In einer echten Implementierung würde man die aktuelle Position des Benutzers"},{"type":"INSERT","lineNumber":109,"content":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"INSERT","lineNumber":110,"content":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":111,"content":"        return Offset("},{"type":"INSERT","lineNumber":112,"content":"            x = screenPosition.x,"},{"type":"INSERT","lineNumber":113,"content":"            y = screenPosition.y"},{"type":"DELETE","lineNumber":113,"oldContent":") {"},{"type":"DELETE","lineNumber":114,"oldContent":"    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence"},{"type":"DELETE","lineNumber":115,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":116,"oldContent":"    "},{"type":"INSERT","lineNumber":126,"content":"    return Offset("},{"type":"INSERT","lineNumber":127,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":128,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":129,"content":"    )"},{"type":"DELETE","lineNumber":119,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":120,"oldContent":"        "},{"type":"DELETE","lineNumber":121,"oldContent":"        // Verschiebe zum Pfeil-Zentrum"},{"type":"INSERT","lineNumber":132,"content":"/**"},{"type":"INSERT","lineNumber":133,"content":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":134,"content":" */"},{"type":"INSERT","lineNumber":176,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":164,"oldContent":"            "},{"type":"DELETE","lineNumber":169,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":171,"oldContent":"                }"},{"type":"INSERT","lineNumber":184,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":185,"content":"                }"},{"type":"INSERT","lineNumber":186,"content":"            }"},{"type":"DELETE","lineNumber":175,"oldContent":"            }"},{"type":"DELETE","lineNumber":212,"oldContent":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence"},{"type":"INSERT","lineNumber":225,"content":""},{"type":"INSERT","lineNumber":226,"content":"/**"},{"type":"INSERT","lineNumber":227,"content":" * Zeichnet die 3D-Pfeil-Form"},{"type":"DELETE","lineNumber":214,"oldContent":"private fun getArrowColor(confidence: Float): Color {"},{"type":"DELETE","lineNumber":215,"oldContent":"    return when {"},{"type":"DELETE","lineNumber":216,"oldContent":"        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher"},{"type":"INSERT","lineNumber":229,"content":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":263,"oldContent":"                    size = size"},{"type":"INSERT","lineNumber":276,"content":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":345,"oldContent":"        }"},{"type":"INSERT","lineNumber":359,"content":"        }"},{"type":"INSERT","lineNumber":361,"content":"}"},{"type":"DELETE","lineNumber":350,"oldContent":"}"},{"type":"DELETE","lineNumber":352,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":353,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":365,"content":" */"},{"type":"INSERT","lineNumber":366,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":368,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":357,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":368,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":382,"content":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":371,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":385,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":390,"content":"    }"},{"type":"DELETE","lineNumber":379,"oldContent":"    }"},{"type":"INSERT","lineNumber":433,"content":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":421,"oldContent":"        name = processedLandmark.name,"}]},{"timestamp":1754925846480,"changes":[{"type":"INSERT","lineNumber":15,"content":"import androidx.compose.ui.graphics.drawscope.drawIntoCanvas"},{"type":"DELETE","lineNumber":16,"oldContent":"import androidx.compose.ui.graphics.nativeCanvas"},{"type":"INSERT","lineNumber":58,"content":"    "},{"type":"DELETE","lineNumber":59,"oldContent":"    // Nur den besten Match verwenden"},{"type":"INSERT","lineNumber":64,"content":"        "},{"type":"DELETE","lineNumber":70,"oldContent":"        "},{"type":"DELETE","lineNumber":74,"oldContent":"        "},{"type":"DELETE","lineNumber":76,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":78,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":80,"oldContent":"                draw3DArrow("},{"type":"DELETE","lineNumber":82,"oldContent":"                    position = arrowPosition,"},{"type":"DELETE","lineNumber":84,"oldContent":"                    direction = arrowDirection,"},{"type":"DELETE","lineNumber":85,"oldContent":"                    confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":79,"content":"        "},{"type":"DELETE","lineNumber":87,"oldContent":"                    size = size"},{"type":"DELETE","lineNumber":89,"oldContent":"                )"},{"type":"DELETE","lineNumber":91,"oldContent":"            }"},{"type":"DELETE","lineNumber":93,"oldContent":"        }"},{"type":"DELETE","lineNumber":95,"oldContent":"    }"},{"type":"DELETE","lineNumber":97,"oldContent":"}"},{"type":"INSERT","lineNumber":87,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":88,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":89,"content":"                if (bestMatch.arObject != null) {"},{"type":"INSERT","lineNumber":90,"content":"                    // Snapchat-Style 3D-Rendering"},{"type":"INSERT","lineNumber":91,"content":"                    drawSnapchatStyle3DArrow("},{"type":"INSERT","lineNumber":92,"content":"                        position = arrowPosition,"},{"type":"INSERT","lineNumber":93,"content":"                        direction = arrowDirection,"},{"type":"INSERT","lineNumber":94,"content":"                        confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":95,"content":"                        scale = bestMatch.arObject.scale,"},{"type":"INSERT","lineNumber":96,"content":"                        arPose = bestMatch.arPose,"},{"type":"INSERT","lineNumber":97,"content":"                        size = size"},{"type":"INSERT","lineNumber":98,"content":"                    )"},{"type":"INSERT","lineNumber":99,"content":"                } else {"},{"type":"INSERT","lineNumber":100,"content":"                    // Fallback 2D-Rendering"},{"type":"INSERT","lineNumber":101,"content":"                    draw3DArrow("},{"type":"INSERT","lineNumber":102,"content":"                        position = arrowPosition,"},{"type":"INSERT","lineNumber":103,"content":"                        direction = arrowDirection,"},{"type":"INSERT","lineNumber":104,"content":"                        confidence = bestMatch.confidence,"},{"type":"INSERT","lineNumber":105,"content":"                        size = size"},{"type":"INSERT","lineNumber":106,"content":"                    )"},{"type":"INSERT","lineNumber":107,"content":"                }"},{"type":"INSERT","lineNumber":108,"content":"            }"},{"type":"INSERT","lineNumber":109,"content":"        }"},{"type":"INSERT","lineNumber":110,"content":"    }"},{"type":"INSERT","lineNumber":111,"content":"}"},{"type":"INSERT","lineNumber":122,"content":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"INSERT","lineNumber":123,"content":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":124,"content":"        return Offset("},{"type":"INSERT","lineNumber":125,"content":"            x = screenPosition.x,"},{"type":"INSERT","lineNumber":126,"content":"            y = screenPosition.y"},{"type":"DELETE","lineNumber":117,"oldContent":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"DELETE","lineNumber":119,"oldContent":"    if (screenPosition != null) {"},{"type":"DELETE","lineNumber":121,"oldContent":"        return Offset("},{"type":"DELETE","lineNumber":123,"oldContent":"            x = screenPosition.x,"},{"type":"DELETE","lineNumber":125,"oldContent":"            y = screenPosition.y"},{"type":"DELETE","lineNumber":126,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":139,"content":"    return Offset("},{"type":"INSERT","lineNumber":140,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":141,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":142,"content":"    )"},{"type":"INSERT","lineNumber":143,"content":"}"},{"type":"INSERT","lineNumber":145,"content":"/**"},{"type":"INSERT","lineNumber":146,"content":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":147,"content":" */"},{"type":"DELETE","lineNumber":132,"oldContent":"    return Offset("},{"type":"DELETE","lineNumber":134,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":136,"oldContent":"        y = normalizedY * screenHeight"},{"type":"DELETE","lineNumber":138,"oldContent":"    )"},{"type":"DELETE","lineNumber":142,"oldContent":"/**"},{"type":"DELETE","lineNumber":144,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"DELETE","lineNumber":146,"oldContent":" */"},{"type":"INSERT","lineNumber":189,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":197,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":198,"content":"                }"},{"type":"INSERT","lineNumber":199,"content":"            }"},{"type":"DELETE","lineNumber":185,"oldContent":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":194,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":196,"oldContent":"                }"},{"type":"DELETE","lineNumber":198,"oldContent":"            }"},{"type":"INSERT","lineNumber":238,"content":""},{"type":"INSERT","lineNumber":239,"content":"/**"},{"type":"INSERT","lineNumber":240,"content":" * Zeichnet die 3D-Pfeil-Form"},{"type":"INSERT","lineNumber":242,"content":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":232,"oldContent":"/**"},{"type":"DELETE","lineNumber":233,"oldContent":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"DELETE","lineNumber":234,"oldContent":""},{"type":"DELETE","lineNumber":235,"oldContent":" */"},{"type":"DELETE","lineNumber":236,"oldContent":"/**"},{"type":"INSERT","lineNumber":249,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":250,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":251,"content":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":238,"oldContent":" * Zeichnet die 3D-Pfeil-Form"},{"type":"DELETE","lineNumber":239,"oldContent":"fun Animated3DArrowOverlay("},{"type":"DELETE","lineNumber":240,"oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"DELETE","lineNumber":241,"oldContent":"private fun DrawScope.draw3DArrowShape("},{"type":"INSERT","lineNumber":253,"content":"    "},{"type":"INSERT","lineNumber":254,"content":"    val strokePaint = Paint().apply {"},{"type":"INSERT","lineNumber":289,"content":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":278,"oldContent":"            }"},{"type":"INSERT","lineNumber":292,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":281,"oldContent":"}"},{"type":"INSERT","lineNumber":295,"content":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"DELETE","lineNumber":288,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":336,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":349,"content":"                delay(16) // ~60 FPS"},{"type":"INSERT","lineNumber":372,"content":"        }"},{"type":"INSERT","lineNumber":374,"content":"}"},{"type":"INSERT","lineNumber":378,"content":" */"},{"type":"INSERT","lineNumber":379,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":381,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":367,"oldContent":"        }"},{"type":"DELETE","lineNumber":370,"oldContent":"}"},{"type":"DELETE","lineNumber":375,"oldContent":" */"},{"type":"DELETE","lineNumber":377,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":380,"oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":395,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":398,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":403,"content":"    }"},{"type":"DELETE","lineNumber":392,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":396,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":402,"oldContent":"    }"},{"type":"INSERT","lineNumber":446,"content":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":439,"oldContent":"        id = processedLandmark.id,"}]},{"timestamp":1754925852412,"changes":[{"type":"INSERT","lineNumber":20,"content":"import com.example.arwalking.ar.SnapchatStyleARRenderer"},{"type":"DELETE","lineNumber":76,"oldContent":"        "},{"type":"INSERT","lineNumber":80,"content":"        "},{"type":"INSERT","lineNumber":82,"content":"        val arrowDirection = if (bestMatch.arObject != null) {"},{"type":"INSERT","lineNumber":83,"content":"            Math.toDegrees(bestMatch.arObject.rotation.y).toFloat()"},{"type":"INSERT","lineNumber":84,"content":"        } else {"},{"type":"INSERT","lineNumber":85,"content":"            0f // Fallback"},{"type":"INSERT","lineNumber":86,"content":"        }"},{"type":"INSERT","lineNumber":87,"content":"        "},{"type":"DELETE","lineNumber":83,"oldContent":"        val arrowDirection = if (bestMatch.arObject != null) {"},{"type":"DELETE","lineNumber":86,"oldContent":"            Math.toDegrees(bestMatch.arObject.rotation.y).toFloat()"},{"type":"DELETE","lineNumber":89,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":92,"oldContent":"            0f // Fallback"},{"type":"DELETE","lineNumber":95,"oldContent":"        }"},{"type":"DELETE","lineNumber":98,"oldContent":"        "},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"DELETE","lineNumber":102,"oldContent":"/**"},{"type":"DELETE","lineNumber":104,"oldContent":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"DELETE","lineNumber":106,"oldContent":" */"},{"type":"DELETE","lineNumber":108,"oldContent":"private fun calculateArrowPosition("},{"type":"DELETE","lineNumber":110,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":112,"oldContent":"    screenPosition: android.graphics.PointF?,"},{"type":"DELETE","lineNumber":114,"oldContent":"    screenWidth: Float,"},{"type":"DELETE","lineNumber":116,"oldContent":"    screenHeight: Float"},{"type":"DELETE","lineNumber":118,"oldContent":"): Offset {"},{"type":"DELETE","lineNumber":120,"oldContent":"    // und die Zielposition verwenden"},{"type":"DELETE","lineNumber":122,"oldContent":"    "},{"type":"INSERT","lineNumber":113,"content":""},{"type":"INSERT","lineNumber":114,"content":"/**"},{"type":"INSERT","lineNumber":115,"content":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"INSERT","lineNumber":116,"content":" */"},{"type":"INSERT","lineNumber":117,"content":"private fun calculateArrowPosition("},{"type":"INSERT","lineNumber":118,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":119,"content":"    screenPosition: android.graphics.PointF?,"},{"type":"INSERT","lineNumber":120,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":121,"content":"    screenHeight: Float"},{"type":"INSERT","lineNumber":122,"content":"): Offset {"},{"type":"INSERT","lineNumber":123,"content":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"INSERT","lineNumber":124,"content":"    if (screenPosition != null) {"},{"type":"INSERT","lineNumber":125,"content":"        return Offset("},{"type":"INSERT","lineNumber":126,"content":"            x = screenPosition.x,"},{"type":"INSERT","lineNumber":127,"content":"            y = screenPosition.y"},{"type":"INSERT","lineNumber":128,"content":"        )"},{"type":"INSERT","lineNumber":129,"content":"    }"},{"type":"DELETE","lineNumber":132,"oldContent":"    // Verwende die tatsächliche Bildschirmposition falls verfügbar"},{"type":"DELETE","lineNumber":134,"oldContent":"    if (screenPosition != null) {"},{"type":"DELETE","lineNumber":135,"oldContent":"        return Offset("},{"type":"DELETE","lineNumber":137,"oldContent":"            x = screenPosition.x,"},{"type":"DELETE","lineNumber":138,"oldContent":"            y = screenPosition.y"},{"type":"INSERT","lineNumber":140,"content":"    return Offset("},{"type":"INSERT","lineNumber":141,"content":"        x = normalizedX * screenWidth,"},{"type":"INSERT","lineNumber":142,"content":"        y = normalizedY * screenHeight"},{"type":"INSERT","lineNumber":143,"content":"    )"},{"type":"INSERT","lineNumber":144,"content":"}"},{"type":"INSERT","lineNumber":146,"content":"/**"},{"type":"INSERT","lineNumber":147,"content":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":148,"content":" */"},{"type":"DELETE","lineNumber":147,"oldContent":"    return Offset("},{"type":"DELETE","lineNumber":149,"oldContent":"        x = normalizedX * screenWidth,"},{"type":"DELETE","lineNumber":151,"oldContent":"        y = normalizedY * screenHeight"},{"type":"DELETE","lineNumber":153,"oldContent":"    )"},{"type":"DELETE","lineNumber":154,"oldContent":"}"},{"type":"DELETE","lineNumber":156,"oldContent":"/**"},{"type":"DELETE","lineNumber":158,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"DELETE","lineNumber":159,"oldContent":" */"},{"type":"INSERT","lineNumber":190,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"INSERT","lineNumber":198,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":199,"content":"                }"},{"type":"INSERT","lineNumber":200,"content":"            }"},{"type":"DELETE","lineNumber":201,"oldContent":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":208,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":210,"oldContent":"                }"},{"type":"DELETE","lineNumber":211,"oldContent":"            }"},{"type":"DELETE","lineNumber":238,"oldContent":" */"},{"type":"DELETE","lineNumber":239,"oldContent":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":240,"oldContent":"        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay"},{"type":"DELETE","lineNumber":241,"oldContent":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"DELETE","lineNumber":242,"oldContent":"    }"},{"type":"DELETE","lineNumber":243,"oldContent":") {"},{"type":"DELETE","lineNumber":244,"oldContent":"    val paint = Paint().apply {"},{"type":"DELETE","lineNumber":245,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":242,"content":" */"},{"type":"INSERT","lineNumber":244,"content":"    canvas: android.graphics.Canvas,"},{"type":"INSERT","lineNumber":245,"content":"    size: Float,"},{"type":"INSERT","lineNumber":246,"content":"    color: Color,"},{"type":"INSERT","lineNumber":247,"content":"    confidence: Float"},{"type":"INSERT","lineNumber":248,"content":") {"},{"type":"INSERT","lineNumber":249,"content":"    val paint = Paint().apply {"},{"type":"INSERT","lineNumber":250,"content":"        this.color = color.toArgb()"},{"type":"INSERT","lineNumber":251,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":252,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":253,"content":"    }"},{"type":"INSERT","lineNumber":254,"content":"    "},{"type":"INSERT","lineNumber":255,"content":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":257,"oldContent":"        this.color = color.toArgb()"},{"type":"DELETE","lineNumber":259,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":261,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":264,"oldContent":"    "},{"type":"DELETE","lineNumber":266,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"INSERT","lineNumber":290,"content":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":290,"oldContent":"            }"},{"type":"INSERT","lineNumber":292,"content":"    // Zeichne Hauptpfeil"},{"type":"INSERT","lineNumber":293,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":296,"content":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"DELETE","lineNumber":299,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":303,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":307,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"INSERT","lineNumber":350,"content":"                delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":361,"oldContent":"                delay(16) // ~60 FPS"},{"type":"INSERT","lineNumber":373,"content":"        }"},{"type":"INSERT","lineNumber":375,"content":"}"},{"type":"DELETE","lineNumber":375,"oldContent":"    )"},{"type":"INSERT","lineNumber":378,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":379,"content":" */"},{"type":"INSERT","lineNumber":380,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":382,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":383,"oldContent":"        }"},{"type":"DELETE","lineNumber":386,"oldContent":"}"},{"type":"DELETE","lineNumber":389,"oldContent":" */"},{"type":"DELETE","lineNumber":391,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":393,"oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":396,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":399,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":404,"content":"    }"},{"type":"DELETE","lineNumber":407,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":410,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":415,"oldContent":"    }"},{"type":"INSERT","lineNumber":447,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":451,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":452,"content":"    )"},{"type":"DELETE","lineNumber":450,"oldContent":"}"},{"type":"DELETE","lineNumber":451,"oldContent":"        id = processedLandmark.id,"}]},{"timestamp":1754925887234,"changes":[{"type":"DELETE","lineNumber":82,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":84,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":87,"oldContent":"                if (bestMatch.arObject != null) {"},{"type":"DELETE","lineNumber":89,"oldContent":"                    // Snapchat-Style 3D-Rendering"},{"type":"INSERT","lineNumber":88,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":89,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":90,"content":"                if (bestMatch.arObject != null) {"},{"type":"INSERT","lineNumber":91,"content":"                    // Snapchat-Style 3D-Rendering"},{"type":"DELETE","lineNumber":107,"oldContent":""},{"type":"INSERT","lineNumber":108,"content":"                }"},{"type":"INSERT","lineNumber":109,"content":"            }"},{"type":"INSERT","lineNumber":110,"content":"        }"},{"type":"INSERT","lineNumber":111,"content":"    }"},{"type":"INSERT","lineNumber":112,"content":"}"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"DELETE","lineNumber":111,"oldContent":"                }"},{"type":"DELETE","lineNumber":114,"oldContent":"            }"},{"type":"DELETE","lineNumber":117,"oldContent":"        }"},{"type":"DELETE","lineNumber":120,"oldContent":"    }"},{"type":"DELETE","lineNumber":123,"oldContent":"}"},{"type":"DELETE","lineNumber":125,"oldContent":"    "},{"type":"DELETE","lineNumber":127,"oldContent":"    // Fallback: Verwende eine berechnete Position basierend auf Landmark-ID"},{"type":"DELETE","lineNumber":129,"oldContent":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"DELETE","lineNumber":131,"oldContent":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"DELETE","lineNumber":133,"oldContent":"    "},{"type":"INSERT","lineNumber":130,"content":"    "},{"type":"INSERT","lineNumber":131,"content":"    // Fallback: Verwende eine berechnete Position basierend auf Landmark-ID"},{"type":"INSERT","lineNumber":132,"content":"    // Dies ist eine vereinfachte Berechnung - in einer echten AR-App würde man"},{"type":"INSERT","lineNumber":133,"content":"    // die Kamera-Matrix und die 3D-Position des Landmarks verwenden"},{"type":"INSERT","lineNumber":134,"content":"    "},{"type":"DELETE","lineNumber":140,"oldContent":""},{"type":"DELETE","lineNumber":142,"oldContent":"private fun calculateArrowDirection("},{"type":"DELETE","lineNumber":144,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"DELETE","lineNumber":146,"oldContent":"    currentStep: Int = 1,"},{"type":"DELETE","lineNumber":148,"oldContent":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":150,"oldContent":"    currentInstruction: String? = null"},{"type":"DELETE","lineNumber":151,"oldContent":"): Float {"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"DELETE","lineNumber":153,"oldContent":"    // Priorität: Verwende Navigationsanweisung wenn verfügbar"},{"type":"INSERT","lineNumber":149,"content":"private fun calculateArrowDirection("},{"type":"INSERT","lineNumber":150,"content":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"INSERT","lineNumber":151,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":152,"content":"    totalSteps: Int = 3,"},{"type":"INSERT","lineNumber":153,"content":"    currentInstruction: String? = null"},{"type":"INSERT","lineNumber":154,"content":"): Float {"},{"type":"INSERT","lineNumber":155,"content":"    // Priorität: Verwende Navigationsanweisung wenn verfügbar"},{"type":"MODIFY","lineNumber":191,"content":"            ","oldContent":"            "},{"type":"INSERT","lineNumber":198,"content":"                    else -> 90f              // Ende: nach rechts"},{"type":"INSERT","lineNumber":199,"content":"                }"},{"type":"INSERT","lineNumber":200,"content":"            }"},{"type":"DELETE","lineNumber":200,"oldContent":"                    else -> 90f              // Ende: nach rechts"},{"type":"DELETE","lineNumber":202,"oldContent":"                }"},{"type":"DELETE","lineNumber":204,"oldContent":"            }"},{"type":"INSERT","lineNumber":239,"content":""},{"type":"INSERT","lineNumber":240,"content":"/**"},{"type":"INSERT","lineNumber":241,"content":" * Zeichnet die 3D-Pfeil-Form"},{"type":"INSERT","lineNumber":243,"content":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":243,"oldContent":""},{"type":"DELETE","lineNumber":245,"oldContent":"/**"},{"type":"DELETE","lineNumber":247,"oldContent":" * Zeichnet die 3D-Pfeil-Form"},{"type":"DELETE","lineNumber":249,"oldContent":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":251,"oldContent":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"DELETE","lineNumber":253,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":255,"oldContent":"        style = Paint.Style.STROKE"},{"type":"DELETE","lineNumber":257,"oldContent":"        strokeWidth = 3f"},{"type":"DELETE","lineNumber":259,"oldContent":"    }"},{"type":"INSERT","lineNumber":256,"content":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"INSERT","lineNumber":257,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":258,"content":"        style = Paint.Style.STROKE"},{"type":"INSERT","lineNumber":259,"content":"        strokeWidth = 3f"},{"type":"INSERT","lineNumber":260,"content":"    }"},{"type":"DELETE","lineNumber":290,"oldContent":"    "},{"type":"DELETE","lineNumber":294,"oldContent":"}"},{"type":"INSERT","lineNumber":295,"content":"    // Zeichne Umriss"},{"type":"INSERT","lineNumber":296,"content":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"INSERT","lineNumber":297,"content":"    "},{"type":"DELETE","lineNumber":299,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"MODIFY","lineNumber":351,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":365,"content":"                drawAnimated3DArrow(","oldContent":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":369,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":370,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":371,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":369,"content":"                    animationProgress = animationProgress,"},{"type":"INSERT","lineNumber":370,"content":"                    size = size"},{"type":"INSERT","lineNumber":371,"content":"                )"},{"type":"INSERT","lineNumber":373,"content":"        }"},{"type":"INSERT","lineNumber":375,"content":"}"},{"type":"INSERT","lineNumber":376,"content":""},{"type":"INSERT","lineNumber":377,"content":"/**"},{"type":"INSERT","lineNumber":378,"content":" * Zeichnet einen Snapchat-Style 3D-Pfeil mit realistischer Perspektive"},{"type":"INSERT","lineNumber":379,"content":" */"},{"type":"INSERT","lineNumber":380,"content":"private fun DrawScope.drawSnapchatStyle3DArrow("},{"type":"INSERT","lineNumber":381,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":382,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":383,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":384,"content":"    scale: Float,"},{"type":"INSERT","lineNumber":385,"content":"    arPose: SnapchatStyleARRenderer.ARPose?,"},{"type":"INSERT","lineNumber":386,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":387,"content":") {"},{"type":"INSERT","lineNumber":388,"content":"    // Berechne Größe basierend auf Z-Tiefe (Perspektive)"},{"type":"INSERT","lineNumber":389,"content":"    val depth = arPose?.translation?.z?.toFloat() ?: 2.0f"},{"type":"INSERT","lineNumber":390,"content":"    val perspectiveScale = (2.0f / (depth + 2.0f)).coerceIn(0.3f, 2.0f)"},{"type":"INSERT","lineNumber":391,"content":"    val arrowSize = 80.dp.toPx() * scale * perspectiveScale"},{"type":"INSERT","lineNumber":392,"content":"    "},{"type":"INSERT","lineNumber":393,"content":"    // Farbe basierend auf Confidence und Tiefe"},{"type":"INSERT","lineNumber":394,"content":"    val baseColor = Color(0xFF00FF88) // Snapchat-Grün"},{"type":"INSERT","lineNumber":395,"content":"    val alpha = (confidence * 0.9f + 0.1f) * (1.0f - depth * 0.1f).coerceIn(0.3f, 1.0f)"},{"type":"INSERT","lineNumber":396,"content":"    val arrowColor = baseColor.copy(alpha = alpha)"},{"type":"INSERT","lineNumber":397,"content":"    "},{"type":"INSERT","lineNumber":398,"content":"    // Schatten für 3D-Effekt"},{"type":"INSERT","lineNumber":399,"content":"    val shadowOffset = Offset("},{"type":"INSERT","lineNumber":400,"content":"        arrowSize * 0.1f * cos(Math.toRadians(45.0)).toFloat(),"},{"type":"INSERT","lineNumber":401,"content":"        arrowSize * 0.1f * sin(Math.toRadians(45.0)).toFloat()"},{"type":"INSERT","lineNumber":402,"content":"    )"},{"type":"INSERT","lineNumber":403,"content":"    "},{"type":"INSERT","lineNumber":404,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":405,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":406,"content":"        "},{"type":"INSERT","lineNumber":407,"content":"        // Transformiere zu Pfeil-Position"},{"type":"INSERT","lineNumber":408,"content":"        canvas.translate(position.x, position.y)"},{"type":"INSERT","lineNumber":409,"content":"        canvas.rotate(direction)"},{"type":"INSERT","lineNumber":410,"content":"        canvas.scale(perspectiveScale, perspectiveScale)"},{"type":"INSERT","lineNumber":411,"content":"        "},{"type":"INSERT","lineNumber":412,"content":"        // Zeichne Schatten"},{"type":"INSERT","lineNumber":413,"content":"        canvas.translate(shadowOffset.x, shadowOffset.y)"},{"type":"INSERT","lineNumber":414,"content":"        draw3DArrowShape("},{"type":"INSERT","lineNumber":415,"content":"            canvas.nativeCanvas, "},{"type":"INSERT","lineNumber":416,"content":"            arrowSize, "},{"type":"INSERT","lineNumber":417,"content":"            Color.Black.copy(alpha = 0.3f), "},{"type":"INSERT","lineNumber":418,"content":"            confidence"},{"type":"INSERT","lineNumber":419,"content":"        )"},{"type":"INSERT","lineNumber":420,"content":"        "},{"type":"INSERT","lineNumber":421,"content":"        // Zurück zur Hauptposition"},{"type":"INSERT","lineNumber":422,"content":"        canvas.translate(-shadowOffset.x, -shadowOffset.y)"},{"type":"INSERT","lineNumber":423,"content":"        "},{"type":"INSERT","lineNumber":424,"content":"        // Zeichne Hauptpfeil mit 3D-Effekt"},{"type":"INSERT","lineNumber":425,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":426,"content":"        "},{"type":"INSERT","lineNumber":427,"content":"        // Glanz-Effekt für Snapchat-Look"},{"type":"INSERT","lineNumber":428,"content":"        val glowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":429,"content":"            color = Color.White.copy(alpha = 0.4f * confidence)"},{"type":"INSERT","lineNumber":430,"content":"            style = PaintingStyle.Stroke"},{"type":"INSERT","lineNumber":431,"content":"            strokeWidth = 3.dp.toPx()"},{"type":"INSERT","lineNumber":433,"content":"        "},{"type":"INSERT","lineNumber":434,"content":"        // Zeichne Glanz-Outline"},{"type":"INSERT","lineNumber":435,"content":"        val arrowPath = createArrowPath(arrowSize)"},{"type":"INSERT","lineNumber":436,"content":"        canvas.drawPath(arrowPath, glowPaint)"},{"type":"INSERT","lineNumber":437,"content":"        "},{"type":"INSERT","lineNumber":438,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":439,"content":"    }"},{"type":"INSERT","lineNumber":440,"content":"    "},{"type":"INSERT","lineNumber":441,"content":"    // Debug-Info anzeigen"},{"type":"INSERT","lineNumber":442,"content":"    if (arPose != null) {"},{"type":"INSERT","lineNumber":443,"content":"        drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":444,"content":"            val debugPaint = Paint().apply {"},{"type":"INSERT","lineNumber":445,"content":"                color = Color.White.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":446,"content":"                textSize = 12.dp.toPx()"},{"type":"INSERT","lineNumber":447,"content":"            }"},{"type":"INSERT","lineNumber":448,"content":"            "},{"type":"INSERT","lineNumber":449,"content":"            val debugText = \"3D: Z=${String.format(\"%.1f\", depth)}, S=${String.format(\"%.2f\", perspectiveScale)}\""},{"type":"INSERT","lineNumber":450,"content":"            canvas.nativeCanvas.drawText("},{"type":"INSERT","lineNumber":451,"content":"                debugText,"},{"type":"INSERT","lineNumber":452,"content":"                position.x - 50.dp.toPx(),"},{"type":"INSERT","lineNumber":453,"content":"                position.y - arrowSize - 10.dp.toPx(),"},{"type":"INSERT","lineNumber":454,"content":"                debugPaint.asFrameworkPaint()"},{"type":"INSERT","lineNumber":455,"content":"            )"},{"type":"INSERT","lineNumber":456,"content":"        }"},{"type":"INSERT","lineNumber":457,"content":"    }"},{"type":"INSERT","lineNumber":458,"content":"}"},{"type":"INSERT","lineNumber":461,"content":" * Erstellt einen Pfeil-Path für Outline-Rendering"},{"type":"INSERT","lineNumber":462,"content":" */"},{"type":"INSERT","lineNumber":463,"content":"private fun createArrowPath(size: Float): Path {"},{"type":"INSERT","lineNumber":464,"content":"    return Path().apply {"},{"type":"INSERT","lineNumber":465,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":466,"content":"        moveTo(size * 0.5f, 0f)"},{"type":"INSERT","lineNumber":467,"content":"        lineTo(0f, size * 0.3f)"},{"type":"INSERT","lineNumber":468,"content":"        lineTo(size * 0.2f, size * 0.3f)"},{"type":"INSERT","lineNumber":469,"content":"        "},{"type":"INSERT","lineNumber":470,"content":"        // Pfeilschaft"},{"type":"INSERT","lineNumber":471,"content":"        lineTo(size * 0.2f, size)"},{"type":"INSERT","lineNumber":472,"content":"        lineTo(size * 0.8f, size)"},{"type":"INSERT","lineNumber":473,"content":"        lineTo(size * 0.8f, size * 0.3f)"},{"type":"INSERT","lineNumber":474,"content":"        "},{"type":"INSERT","lineNumber":475,"content":"        // Zurück zur Spitze"},{"type":"INSERT","lineNumber":476,"content":"        lineTo(size, size * 0.3f)"},{"type":"INSERT","lineNumber":477,"content":"        close()"},{"type":"INSERT","lineNumber":478,"content":"    }"},{"type":"INSERT","lineNumber":480,"content":""},{"type":"INSERT","lineNumber":481,"content":"/**"},{"type":"INSERT","lineNumber":482,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":483,"content":" */"},{"type":"INSERT","lineNumber":484,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":486,"content":"    direction: Float,"},{"type":"DELETE","lineNumber":380,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":382,"oldContent":" */"},{"type":"DELETE","lineNumber":384,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":387,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":389,"oldContent":"}"},{"type":"INSERT","lineNumber":493,"content":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"DELETE","lineNumber":391,"oldContent":"        "},{"type":"INSERT","lineNumber":495,"content":"    "},{"type":"DELETE","lineNumber":396,"oldContent":"        canvas.save()"},{"type":"INSERT","lineNumber":501,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":503,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":401,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":508,"content":"    }"},{"type":"DELETE","lineNumber":407,"oldContent":"    }"},{"type":"DELETE","lineNumber":427,"oldContent":"    )"},{"type":"DELETE","lineNumber":428,"oldContent":"        imageUrl = null"},{"type":"INSERT","lineNumber":531,"content":"            false"},{"type":"INSERT","lineNumber":532,"content":"        }"},{"type":"DELETE","lineNumber":447,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":449,"oldContent":"}"},{"type":"INSERT","lineNumber":552,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":553,"content":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":451,"oldContent":"    )"},{"type":"INSERT","lineNumber":557,"content":"}"}]},{"timestamp":1754926028050,"changes":[{"type":"MODIFY","lineNumber":20,"content":"import com.example.arwalking.ar.SimpleARRenderer","oldContent":"import com.example.arwalking.ar.SnapchatStyleARRenderer"},{"type":"MODIFY","lineNumber":35,"content":"    currentStep: Int = 1,","oldContent":"    screenHeight: Float,"},{"type":"MODIFY","lineNumber":40,"content":") {","oldContent":"    "},{"type":"DELETE","lineNumber":85,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":86,"content":"        }"},{"type":"INSERT","lineNumber":87,"content":"        "},{"type":"INSERT","lineNumber":88,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":89,"oldContent":"        }"},{"type":"DELETE","lineNumber":91,"oldContent":"        "},{"type":"MODIFY","lineNumber":108,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":110,"oldContent":"/**"},{"type":"DELETE","lineNumber":112,"oldContent":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"MODIFY","lineNumber":114,"content":"/**","oldContent":" */"},{"type":"INSERT","lineNumber":115,"content":" * Berechnet die Position des 3D-Pfeils auf dem Bildschirm"},{"type":"INSERT","lineNumber":116,"content":" */"},{"type":"DELETE","lineNumber":127,"oldContent":"    "},{"type":"INSERT","lineNumber":128,"content":"        )"},{"type":"INSERT","lineNumber":129,"content":"    }"},{"type":"INSERT","lineNumber":130,"content":"    "},{"type":"DELETE","lineNumber":131,"oldContent":"        )"},{"type":"DELETE","lineNumber":134,"oldContent":"    }"},{"type":"DELETE","lineNumber":142,"oldContent":""},{"type":"MODIFY","lineNumber":145,"content":"","oldContent":"private fun calculateArrowDirection("},{"type":"INSERT","lineNumber":146,"content":"/**"},{"type":"INSERT","lineNumber":147,"content":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"INSERT","lineNumber":148,"content":" */"},{"type":"INSERT","lineNumber":149,"content":"private fun calculateArrowDirection("},{"type":"DELETE","lineNumber":150,"oldContent":"/**"},{"type":"DELETE","lineNumber":153,"oldContent":" * Berechnet die Richtung des Pfeils basierend auf der Navigation"},{"type":"DELETE","lineNumber":155,"oldContent":" */"},{"type":"INSERT","lineNumber":190,"content":"            landmark.name.contains(\"Aufzug\", ignoreCase = true) -> 0f // Geradeaus"},{"type":"DELETE","lineNumber":191,"oldContent":"            "},{"type":"DELETE","lineNumber":199,"oldContent":"        }"},{"type":"MODIFY","lineNumber":201,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":202,"content":"    }"},{"type":"DELETE","lineNumber":240,"oldContent":" */"},{"type":"MODIFY","lineNumber":242,"content":" */","oldContent":"    canvas: android.graphics.Canvas,"},{"type":"INSERT","lineNumber":243,"content":"private fun DrawScope.draw3DArrowShape("},{"type":"INSERT","lineNumber":244,"content":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":246,"oldContent":"private fun DrawScope.draw3DArrowShape("},{"type":"DELETE","lineNumber":253,"oldContent":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"INSERT","lineNumber":254,"content":"    "},{"type":"INSERT","lineNumber":255,"content":"    val strokePaint = Paint().apply {"},{"type":"INSERT","lineNumber":256,"content":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"DELETE","lineNumber":257,"oldContent":"    "},{"type":"DELETE","lineNumber":260,"oldContent":"    val strokePaint = Paint().apply {"},{"type":"DELETE","lineNumber":262,"oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"DELETE","lineNumber":263,"oldContent":"    var animationProgress by remember { mutableStateOf(0f) }"},{"type":"DELETE","lineNumber":264,"oldContent":"    "},{"type":"DELETE","lineNumber":265,"oldContent":"    // Animation für pulsierenden Effekt"},{"type":"DELETE","lineNumber":266,"oldContent":"    LaunchedEffect(bestMatch) {"},{"type":"DELETE","lineNumber":267,"oldContent":"            while (true) {"},{"type":"DELETE","lineNumber":268,"oldContent":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"DELETE","lineNumber":269,"oldContent":"                kotlinx.coroutines.delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":270,"oldContent":"            }"},{"type":"DELETE","lineNumber":271,"oldContent":"        }"},{"type":"DELETE","lineNumber":272,"oldContent":"    }"},{"type":"DELETE","lineNumber":273,"oldContent":"    "},{"type":"DELETE","lineNumber":274,"oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":262,"content":"    // Hauptkörper des Pfeils (3D-Effekt durch mehrere Schichten)"},{"type":"INSERT","lineNumber":263,"content":"    val arrowPath = Path().apply {"},{"type":"INSERT","lineNumber":264,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":265,"content":"        moveTo(0f, -size * 0.5f)"},{"type":"INSERT","lineNumber":266,"content":"        lineTo(size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":267,"content":"        lineTo(size * 0.15f, -size * 0.2f)"},{"type":"INSERT","lineNumber":268,"content":"        "},{"type":"INSERT","lineNumber":269,"content":"        // Pfeilkörper"},{"type":"INSERT","lineNumber":270,"content":"        lineTo(size * 0.15f, size * 0.3f)"},{"type":"INSERT","lineNumber":271,"content":"        lineTo(-size * 0.15f, size * 0.3f)"},{"type":"INSERT","lineNumber":272,"content":"        lineTo(-size * 0.15f, -size * 0.2f)"},{"type":"INSERT","lineNumber":273,"content":"        lineTo(-size * 0.3f, -size * 0.2f)"},{"type":"INSERT","lineNumber":274,"content":"        "},{"type":"MODIFY","lineNumber":282,"content":"    ","oldContent":"        "},{"type":"DELETE","lineNumber":293,"oldContent":"    // Zeichne Umriss"},{"type":"INSERT","lineNumber":294,"content":"    "},{"type":"INSERT","lineNumber":295,"content":"    // Zeichne Umriss"},{"type":"DELETE","lineNumber":297,"oldContent":"    "},{"type":"INSERT","lineNumber":350,"content":"                delay(16) // ~60 FPS"},{"type":"DELETE","lineNumber":351,"oldContent":"            }"},{"type":"MODIFY","lineNumber":362,"content":"        ","oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"MODIFY","lineNumber":364,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {","oldContent":"        // Spezifische Landmark-IDs aus der Route"},{"type":"DELETE","lineNumber":367,"oldContent":"    val hashCode = landmark.id.hashCode()"},{"type":"DELETE","lineNumber":368,"oldContent":"    // Fallback: Verwende berechnete Position basierend auf Landmark-ID"},{"type":"INSERT","lineNumber":367,"content":"                    direction = arrowDirection,"},{"type":"INSERT","lineNumber":368,"content":"                    confidence = bestMatch.confidence,"},{"type":"DELETE","lineNumber":375,"oldContent":"        }"},{"type":"DELETE","lineNumber":378,"oldContent":""},{"type":"DELETE","lineNumber":380,"oldContent":"/**"},{"type":"DELETE","lineNumber":381,"oldContent":"}"},{"type":"DELETE","lineNumber":383,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":385,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":388,"oldContent":"    animationProgress: Float,"},{"type":"DELETE","lineNumber":391,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":394,"oldContent":") {"},{"type":"DELETE","lineNumber":396,"oldContent":"    val baseSize = 60.dp.toPx()"},{"type":"DELETE","lineNumber":399,"oldContent":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"DELETE","lineNumber":402,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":405,"oldContent":"    // Leichtes Schweben des Pfeils"},{"type":"DELETE","lineNumber":407,"oldContent":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"DELETE","lineNumber":409,"oldContent":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"DELETE","lineNumber":411,"oldContent":"    "},{"type":"DELETE","lineNumber":414,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":416,"oldContent":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"DELETE","lineNumber":418,"oldContent":"        "},{"type":"DELETE","lineNumber":420,"oldContent":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":423,"oldContent":"        "},{"type":"DELETE","lineNumber":425,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":427,"oldContent":"}"},{"type":"DELETE","lineNumber":429,"oldContent":""},{"type":"DELETE","lineNumber":431,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":434,"oldContent":" * GLB-Model Loader für 3D-Pfeil (Fallback auf 2D-Rendering)"},{"type":"DELETE","lineNumber":436,"oldContent":" * Lädt das arrow.glb Modell aus den Assets oder verwendet 2D-Fallback"},{"type":"DELETE","lineNumber":438,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":440,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":442,"oldContent":"    fun hasGLBSupport(): Boolean = isLoaded && modelData != null"},{"type":"DELETE","lineNumber":444,"oldContent":"    "},{"type":"DELETE","lineNumber":446,"oldContent":"    "},{"type":"DELETE","lineNumber":448,"oldContent":"    fun isModelLoaded(): Boolean = isLoaded"},{"type":"DELETE","lineNumber":450,"oldContent":"    }"},{"type":"DELETE","lineNumber":452,"oldContent":"            isLoaded = false"},{"type":"DELETE","lineNumber":454,"oldContent":"            // Fallback: Verwende 2D-Rendering"},{"type":"DELETE","lineNumber":456,"oldContent":"}"},{"type":"DELETE","lineNumber":458,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":460,"oldContent":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"DELETE","lineNumber":462,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":464,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":466,"oldContent":""},{"type":"DELETE","lineNumber":468,"oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":"    fun getModelData(): ByteArray? = modelData"},{"type":"DELETE","lineNumber":474,"oldContent":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"DELETE","lineNumber":476,"oldContent":"    "},{"type":"DELETE","lineNumber":478,"oldContent":"}"},{"type":"DELETE","lineNumber":479,"oldContent":"    "},{"type":"INSERT","lineNumber":432,"content":"        }"},{"type":"DELETE","lineNumber":481,"oldContent":"    fun getModelData(): ByteArray? = modelData"},{"type":"DELETE","lineNumber":483,"oldContent":""},{"type":"DELETE","lineNumber":485,"oldContent":"}"},{"type":"DELETE","lineNumber":487,"oldContent":"    )"},{"type":"DELETE","lineNumber":489,"oldContent":""},{"type":"DELETE","lineNumber":491,"oldContent":""},{"type":"DELETE","lineNumber":493,"oldContent":"/**"},{"type":"DELETE","lineNumber":495,"oldContent":""},{"type":"DELETE","lineNumber":497,"oldContent":"}"},{"type":"DELETE","lineNumber":499,"oldContent":"    )"},{"type":"DELETE","lineNumber":501,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":503,"oldContent":"    )"},{"type":"DELETE","lineNumber":505,"oldContent":"    )"},{"type":"DELETE","lineNumber":507,"oldContent":"    )"},{"type":"DELETE","lineNumber":510,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":513,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":516,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":518,"oldContent":"}"},{"type":"DELETE","lineNumber":520,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":522,"oldContent":"        name = processedLandmark.name,"},{"type":"DELETE","lineNumber":524,"oldContent":"        }"},{"type":"DELETE","lineNumber":526,"oldContent":"            false"},{"type":"DELETE","lineNumber":528,"oldContent":"    }"},{"type":"DELETE","lineNumber":529,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":530,"oldContent":"        canvas.save()"},{"type":"INSERT","lineNumber":459,"content":""},{"type":"INSERT","lineNumber":460,"content":"/**"},{"type":"DELETE","lineNumber":532,"oldContent":"    "},{"type":"DELETE","lineNumber":534,"oldContent":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"DELETE","lineNumber":536,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":538,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":540,"oldContent":" */"},{"type":"DELETE","lineNumber":542,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":544,"oldContent":"/**"},{"type":"DELETE","lineNumber":546,"oldContent":""},{"type":"DELETE","lineNumber":548,"oldContent":"    }"},{"type":"DELETE","lineNumber":550,"oldContent":"        close()"},{"type":"DELETE","lineNumber":552,"oldContent":"        lineTo(size, size * 0.3f)"},{"type":"DELETE","lineNumber":554,"oldContent":"        // Zurück zur Spitze"},{"type":"INSERT","lineNumber":475,"content":"        // Zurück zur Spitze"},{"type":"INSERT","lineNumber":476,"content":"        lineTo(size, size * 0.3f)"},{"type":"INSERT","lineNumber":477,"content":"        close()"},{"type":"INSERT","lineNumber":478,"content":"    }"},{"type":"INSERT","lineNumber":479,"content":"}"},{"type":"INSERT","lineNumber":480,"content":""},{"type":"INSERT","lineNumber":481,"content":"/**"},{"type":"INSERT","lineNumber":482,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":483,"content":" */"},{"type":"INSERT","lineNumber":484,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":485,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":486,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":487,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":488,"content":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":489,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":490,"content":") {"},{"type":"INSERT","lineNumber":491,"content":"    val baseSize = 60.dp.toPx()"},{"type":"INSERT","lineNumber":492,"content":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"INSERT","lineNumber":493,"content":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"INSERT","lineNumber":494,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":495,"content":"    "},{"type":"INSERT","lineNumber":496,"content":"    // Leichtes Schweben des Pfeils"},{"type":"INSERT","lineNumber":497,"content":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"INSERT","lineNumber":498,"content":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"INSERT","lineNumber":499,"content":"    "},{"type":"INSERT","lineNumber":500,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":501,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":502,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":503,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":504,"content":"        "},{"type":"INSERT","lineNumber":505,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":506,"content":"        "},{"type":"INSERT","lineNumber":507,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":508,"content":"    }"},{"type":"INSERT","lineNumber":509,"content":"}"},{"type":"INSERT","lineNumber":510,"content":""},{"type":"INSERT","lineNumber":511,"content":"/**"},{"type":"INSERT","lineNumber":512,"content":" * GLB-Model Loader für 3D-Pfeil (Fallback auf 2D-Rendering)"},{"type":"INSERT","lineNumber":513,"content":" * Lädt das arrow.glb Modell aus den Assets oder verwendet 2D-Fallback"},{"type":"INSERT","lineNumber":514,"content":" */"},{"type":"INSERT","lineNumber":515,"content":"class GLBArrowModel(private val context: Context) {"},{"type":"INSERT","lineNumber":516,"content":"    private var isLoaded = false"},{"type":"INSERT","lineNumber":517,"content":"    private var modelData: ByteArray? = null"},{"type":"INSERT","lineNumber":518,"content":"    "},{"type":"INSERT","lineNumber":519,"content":"    suspend fun loadModel(): Boolean {"},{"type":"INSERT","lineNumber":520,"content":"        return try {"},{"type":"INSERT","lineNumber":521,"content":"            val inputStream = context.assets.open(\"models/arrow.glb\")"},{"type":"INSERT","lineNumber":522,"content":"            modelData = inputStream.readBytes()"},{"type":"INSERT","lineNumber":523,"content":"            inputStream.close()"},{"type":"INSERT","lineNumber":524,"content":"            isLoaded = true"},{"type":"INSERT","lineNumber":525,"content":"            android.util.Log.i(\"GLBArrowModel\", \"GLB-Modell erfolgreich geladen\")"},{"type":"INSERT","lineNumber":526,"content":"            true"},{"type":"INSERT","lineNumber":527,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":528,"content":"            android.util.Log.w(\"GLBArrowModel\", \"GLB-Modell nicht gefunden, verwende 2D-Fallback: ${e.message}\")"},{"type":"INSERT","lineNumber":529,"content":"            // Fallback: Verwende 2D-Rendering"},{"type":"INSERT","lineNumber":530,"content":"            isLoaded = false"},{"type":"INSERT","lineNumber":531,"content":"            false"},{"type":"INSERT","lineNumber":532,"content":"        }"},{"type":"INSERT","lineNumber":533,"content":"    }"},{"type":"INSERT","lineNumber":534,"content":"    "},{"type":"INSERT","lineNumber":535,"content":"    fun isModelLoaded(): Boolean = isLoaded"},{"type":"INSERT","lineNumber":536,"content":"    "},{"type":"INSERT","lineNumber":537,"content":"    fun getModelData(): ByteArray? = modelData"},{"type":"INSERT","lineNumber":538,"content":"    "},{"type":"INSERT","lineNumber":539,"content":"    fun hasGLBSupport(): Boolean = isLoaded && modelData != null"},{"type":"INSERT","lineNumber":540,"content":"}"},{"type":"INSERT","lineNumber":541,"content":""},{"type":"INSERT","lineNumber":542,"content":""},{"type":"INSERT","lineNumber":543,"content":""},{"type":"INSERT","lineNumber":544,"content":""},{"type":"INSERT","lineNumber":545,"content":""},{"type":"INSERT","lineNumber":546,"content":"/**"},{"type":"INSERT","lineNumber":547,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":548,"content":" */"},{"type":"INSERT","lineNumber":549,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":550,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":551,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":552,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":553,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":554,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":555,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":556,"content":"    )"},{"type":"INSERT","lineNumber":557,"content":"}"}]},{"timestamp":1754926034066,"changes":[{"type":"MODIFY","lineNumber":83,"content":"            bestMatch.arObject.rotation","oldContent":"            Math.toDegrees(bestMatch.arObject.rotation.y).toFloat()"},{"type":"MODIFY","lineNumber":86,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":89,"content":"            Canvas(modifier = Modifier.fillMaxSize()) {","oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"INSERT","lineNumber":107,"content":"                    )"},{"type":"DELETE","lineNumber":108,"oldContent":"                }"},{"type":"INSERT","lineNumber":112,"content":"}"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"DELETE","lineNumber":115,"oldContent":" */"},{"type":"DELETE","lineNumber":116,"oldContent":""},{"type":"MODIFY","lineNumber":128,"content":"        )","oldContent":"        )"},{"type":"MODIFY","lineNumber":131,"content":"    // Fallback: Verwende eine berechnete Position basierend auf Landmark-ID","oldContent":"    // Fallback: Verwende eine berechnete Position basierend auf Landmark-ID"},{"type":"MODIFY","lineNumber":135,"content":"    // Generiere eine konsistente Position basierend auf der Landmark-ID","oldContent":" * Zeichnet einen 3D-Pfeil auf dem Canvas"},{"type":"MODIFY","lineNumber":137,"content":"    val normalizedX = (abs(hashCode) % 100) / 100f","oldContent":"private fun DrawScope.draw3DArrow("},{"type":"INSERT","lineNumber":144,"content":"}"},{"type":"DELETE","lineNumber":146,"oldContent":"}"},{"type":"DELETE","lineNumber":148,"oldContent":"    landmark: com.example.arwalking.FeatureLandmark,"},{"type":"MODIFY","lineNumber":150,"content":"    landmark: com.example.arwalking.FeatureLandmark,","oldContent":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":151,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":200,"content":"            }"},{"type":"DELETE","lineNumber":202,"oldContent":"            }"},{"type":"MODIFY","lineNumber":224,"content":"        canvas.save()","oldContent":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"DELETE","lineNumber":226,"oldContent":"        isAntiAlias = true"},{"type":"DELETE","lineNumber":227,"oldContent":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":228,"oldContent":"    "},{"type":"DELETE","lineNumber":229,"oldContent":"    val highlightPath = Path().apply {"},{"type":"DELETE","lineNumber":230,"oldContent":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"DELETE","lineNumber":231,"oldContent":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"DELETE","lineNumber":232,"oldContent":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"INSERT","lineNumber":226,"content":"        // Verschiebe zum Pfeil-Zentrum"},{"type":"INSERT","lineNumber":227,"content":"        canvas.translate(position.x, position.y)"},{"type":"INSERT","lineNumber":228,"content":"        "},{"type":"INSERT","lineNumber":229,"content":"        // Rotiere basierend auf der Richtung"},{"type":"INSERT","lineNumber":230,"content":"        canvas.rotate(direction)"},{"type":"INSERT","lineNumber":231,"content":"        "},{"type":"INSERT","lineNumber":232,"content":"        // Zeichne den 3D-Pfeil"},{"type":"DELETE","lineNumber":234,"oldContent":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"DELETE","lineNumber":235,"oldContent":"        close()"},{"type":"DELETE","lineNumber":236,"oldContent":"    "},{"type":"INSERT","lineNumber":234,"content":"        "},{"type":"INSERT","lineNumber":235,"content":"        // Stelle den ursprünglichen Zustand wieder her"},{"type":"INSERT","lineNumber":236,"content":"        canvas.restore()"},{"type":"MODIFY","lineNumber":238,"content":"}","oldContent":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"INSERT","lineNumber":241,"content":" * Zeichnet die 3D-Pfeil-Form"},{"type":"DELETE","lineNumber":243,"oldContent":" * Zeichnet die 3D-Pfeil-Form"},{"type":"MODIFY","lineNumber":254,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":257,"content":"        isAntiAlias = true","oldContent":"        isAntiAlias = true"},{"type":"MODIFY","lineNumber":294,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":307,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":308,"oldContent":") {"},{"type":"DELETE","lineNumber":309,"oldContent":"    val baseSize = 60.dp.toPx()"},{"type":"DELETE","lineNumber":310,"oldContent":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"INSERT","lineNumber":307,"content":"        lineTo(size * 0.05f, -size * 0.3f)"},{"type":"INSERT","lineNumber":308,"content":"        lineTo(size * 0.05f, -size * 0.1f)"},{"type":"INSERT","lineNumber":309,"content":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"INSERT","lineNumber":310,"content":"        close()"},{"type":"MODIFY","lineNumber":312,"content":"    ","oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":321,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":322,"oldContent":"        "},{"type":"DELETE","lineNumber":323,"oldContent":"        draw3DArrowShape(canvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":324,"oldContent":"        "},{"type":"DELETE","lineNumber":325,"oldContent":"        canvas.restore()"},{"type":"INSERT","lineNumber":321,"content":"        confidence >= 0.9f -> Color(0xFF4CAF50) // Grün - Sehr sicher"},{"type":"INSERT","lineNumber":322,"content":"        confidence >= 0.8f -> Color(0xFF8BC34A) // Hellgrün - Sicher"},{"type":"INSERT","lineNumber":323,"content":"        confidence >= 0.7f -> Color(0xFFFFEB3B) // Gelb - Okay"},{"type":"INSERT","lineNumber":324,"content":"        else -> Color(0xFFFF9800) // Orange - Unsicher"},{"type":"INSERT","lineNumber":326,"content":"}"},{"type":"MODIFY","lineNumber":354,"content":"    ","oldContent":"}"},{"type":"MODIFY","lineNumber":366,"content":"                    position = arrowPosition,","oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":407,"oldContent":"        }"},{"type":"DELETE","lineNumber":422,"oldContent":""},{"type":"DELETE","lineNumber":424,"oldContent":"/**"},{"type":"DELETE","lineNumber":433,"oldContent":"        // Zurück zur Spitze"},{"type":"DELETE","lineNumber":435,"oldContent":"        lineTo(size, size * 0.3f)"},{"type":"DELETE","lineNumber":436,"oldContent":"        close()"},{"type":"INSERT","lineNumber":432,"content":"        }"},{"type":"INSERT","lineNumber":433,"content":"        "},{"type":"INSERT","lineNumber":434,"content":"        // Zeichne Glanz-Outline"},{"type":"INSERT","lineNumber":435,"content":"        val arrowPath = createArrowPath(arrowSize)"},{"type":"INSERT","lineNumber":436,"content":"        canvas.drawPath(arrowPath, glowPaint)"},{"type":"INSERT","lineNumber":437,"content":"        "},{"type":"INSERT","lineNumber":438,"content":"        canvas.restore()"},{"type":"INSERT","lineNumber":440,"content":"    "},{"type":"INSERT","lineNumber":441,"content":"    // Debug-Info anzeigen"},{"type":"INSERT","lineNumber":442,"content":"    if (arPose != null) {"},{"type":"INSERT","lineNumber":443,"content":"        drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":444,"content":"            val debugPaint = Paint().apply {"},{"type":"INSERT","lineNumber":445,"content":"                color = Color.White.copy(alpha = 0.7f)"},{"type":"INSERT","lineNumber":446,"content":"                textSize = 12.dp.toPx()"},{"type":"INSERT","lineNumber":447,"content":"            }"},{"type":"INSERT","lineNumber":448,"content":"            "},{"type":"INSERT","lineNumber":449,"content":"            val debugText = \"3D: Z=${String.format(\"%.1f\", depth)}, S=${String.format(\"%.2f\", perspectiveScale)}\""},{"type":"INSERT","lineNumber":450,"content":"            canvas.nativeCanvas.drawText("},{"type":"INSERT","lineNumber":451,"content":"                debugText,"},{"type":"INSERT","lineNumber":452,"content":"                position.x - 50.dp.toPx(),"},{"type":"INSERT","lineNumber":453,"content":"                position.y - arrowSize - 10.dp.toPx(),"},{"type":"INSERT","lineNumber":454,"content":"                debugPaint.asFrameworkPaint()"},{"type":"INSERT","lineNumber":455,"content":"            )"},{"type":"INSERT","lineNumber":456,"content":"        }"},{"type":"INSERT","lineNumber":457,"content":"    }"},{"type":"INSERT","lineNumber":460,"content":"/**"},{"type":"INSERT","lineNumber":461,"content":" * Erstellt einen Pfeil-Path für Outline-Rendering"},{"type":"INSERT","lineNumber":462,"content":" */"},{"type":"INSERT","lineNumber":463,"content":"private fun createArrowPath(size: Float): Path {"},{"type":"INSERT","lineNumber":464,"content":"    return Path().apply {"},{"type":"INSERT","lineNumber":465,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":466,"content":"        moveTo(size * 0.5f, 0f)"},{"type":"INSERT","lineNumber":467,"content":"        lineTo(0f, size * 0.3f)"},{"type":"INSERT","lineNumber":468,"content":"        lineTo(size * 0.2f, size * 0.3f)"},{"type":"INSERT","lineNumber":470,"content":"        // Pfeilschaft"},{"type":"INSERT","lineNumber":471,"content":"        lineTo(size * 0.2f, size)"},{"type":"INSERT","lineNumber":472,"content":"        lineTo(size * 0.8f, size)"},{"type":"INSERT","lineNumber":473,"content":"        lineTo(size * 0.8f, size * 0.3f)"},{"type":"INSERT","lineNumber":474,"content":"        "},{"type":"INSERT","lineNumber":475,"content":"        // Zurück zur Spitze"},{"type":"INSERT","lineNumber":476,"content":"        lineTo(size, size * 0.3f)"},{"type":"INSERT","lineNumber":477,"content":"        close()"},{"type":"INSERT","lineNumber":478,"content":"    }"},{"type":"INSERT","lineNumber":479,"content":"}"},{"type":"INSERT","lineNumber":480,"content":""},{"type":"DELETE","lineNumber":444,"oldContent":"        // Zeichne Glanz-Outline"},{"type":"DELETE","lineNumber":447,"oldContent":"        val arrowPath = createArrowPath(arrowSize)"},{"type":"DELETE","lineNumber":450,"oldContent":"        canvas.drawPath(arrowPath, glowPaint)"},{"type":"DELETE","lineNumber":453,"oldContent":"        "},{"type":"DELETE","lineNumber":456,"oldContent":"        canvas.restore()"},{"type":"DELETE","lineNumber":459,"oldContent":"    }"},{"type":"DELETE","lineNumber":463,"oldContent":"    "},{"type":"DELETE","lineNumber":465,"oldContent":"    // Debug-Info anzeigen"},{"type":"DELETE","lineNumber":468,"oldContent":"    if (arPose != null) {"},{"type":"DELETE","lineNumber":471,"oldContent":"        drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":474,"oldContent":"            val debugPaint = Paint().apply {"},{"type":"DELETE","lineNumber":477,"oldContent":"                color = Color.White.copy(alpha = 0.7f)"},{"type":"DELETE","lineNumber":480,"oldContent":"                textSize = 12.dp.toPx()"},{"type":"DELETE","lineNumber":483,"oldContent":"            }"},{"type":"DELETE","lineNumber":485,"oldContent":"            "},{"type":"DELETE","lineNumber":488,"oldContent":"            val debugText = \"3D: Z=${String.format(\"%.1f\", depth)}, S=${String.format(\"%.2f\", perspectiveScale)}\""},{"type":"DELETE","lineNumber":490,"oldContent":"            canvas.nativeCanvas.drawText("},{"type":"DELETE","lineNumber":493,"oldContent":"                debugText,"},{"type":"DELETE","lineNumber":495,"oldContent":"                position.x - 50.dp.toPx(),"},{"type":"DELETE","lineNumber":498,"oldContent":"                position.y - arrowSize - 10.dp.toPx(),"},{"type":"DELETE","lineNumber":501,"oldContent":"                debugPaint.asFrameworkPaint()"},{"type":"DELETE","lineNumber":504,"oldContent":"            )"},{"type":"DELETE","lineNumber":507,"oldContent":"        }"},{"type":"DELETE","lineNumber":510,"oldContent":"    }"},{"type":"DELETE","lineNumber":513,"oldContent":"}"},{"type":"DELETE","lineNumber":518,"oldContent":" * Erstellt einen Pfeil-Path für Outline-Rendering"},{"type":"DELETE","lineNumber":521,"oldContent":" */"},{"type":"DELETE","lineNumber":524,"oldContent":"private fun createArrowPath(size: Float): Path {"},{"type":"DELETE","lineNumber":527,"oldContent":"    return Path().apply {"},{"type":"DELETE","lineNumber":530,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":533,"oldContent":"        moveTo(size * 0.5f, 0f)"},{"type":"DELETE","lineNumber":536,"oldContent":"        lineTo(0f, size * 0.3f)"},{"type":"DELETE","lineNumber":539,"oldContent":"        lineTo(size * 0.2f, size * 0.3f)"},{"type":"DELETE","lineNumber":542,"oldContent":"        "},{"type":"DELETE","lineNumber":545,"oldContent":"        // Pfeilschaft"},{"type":"DELETE","lineNumber":548,"oldContent":"        lineTo(size * 0.2f, size)"},{"type":"DELETE","lineNumber":551,"oldContent":"        lineTo(size * 0.8f, size)"},{"type":"DELETE","lineNumber":554,"oldContent":"        lineTo(size * 0.8f, size * 0.3f)"}]},{"timestamp":1754926039127,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.content.Context","oldContent":"import android.graphics.Canvas"},{"type":"INSERT","lineNumber":10,"content":"import androidx.compose.runtime.*"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.ui.graphics.*"},{"type":"MODIFY","lineNumber":22,"content":"import kotlin.math.*","oldContent":"import androidx.compose.ui.unit.dp"},{"type":"MODIFY","lineNumber":28,"content":" */","oldContent":" * Zeigt einen 3D-Pfeil an, der auf erkannte Landmarks zeigt"},{"type":"MODIFY","lineNumber":34,"content":"    screenHeight: Float,","oldContent":"    screenWidth: Float,"},{"type":"MODIFY","lineNumber":36,"content":"    totalSteps: Int = 3,","oldContent":"    modifier: Modifier = Modifier"},{"type":"INSERT","lineNumber":85,"content":"            0f // Fallback"},{"type":"DELETE","lineNumber":86,"oldContent":"        }"},{"type":"INSERT","lineNumber":88,"content":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":89,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"MODIFY","lineNumber":114,"content":"/**","oldContent":"/**"},{"type":"INSERT","lineNumber":127,"content":"            y = screenPosition.y"},{"type":"DELETE","lineNumber":128,"oldContent":"        )"},{"type":"INSERT","lineNumber":130,"content":"    "},{"type":"DELETE","lineNumber":131,"oldContent":"    // Fallback: Verwende eine berechnete Position basierend auf Landmark-ID"},{"type":"INSERT","lineNumber":149,"content":"private fun calculateArrowDirection("},{"type":"DELETE","lineNumber":151,"oldContent":"private fun calculateArrowDirection("},{"type":"MODIFY","lineNumber":204,"content":"    // Füge leichte Variation basierend auf Landmark-ID hinzu","oldContent":"        offset(size * 0.05f, size * 0.05f)"},{"type":"DELETE","lineNumber":222,"oldContent":"    "},{"type":"DELETE","lineNumber":223,"oldContent":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"INSERT","lineNumber":222,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":223,"content":"        // Speichere den aktuellen Zustand"},{"type":"MODIFY","lineNumber":225,"content":"        ","oldContent":"        isAntiAlias = true"},{"type":"MODIFY","lineNumber":233,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)","oldContent":"        lineTo(-size * 0.05f, -size * 0.2f)"},{"type":"MODIFY","lineNumber":237,"content":"    }","oldContent":"    canvas.drawPath(highlightPath, highlightPaint)"},{"type":"INSERT","lineNumber":253,"content":"    }"},{"type":"DELETE","lineNumber":254,"oldContent":"    "},{"type":"INSERT","lineNumber":256,"content":"        this.color = Color.White.copy(alpha = 0.8f).toArgb()"},{"type":"DELETE","lineNumber":257,"oldContent":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":276,"content":"    }"},{"type":"DELETE","lineNumber":277,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":278,"oldContent":"            landmark = bestMatch.landmark,"},{"type":"DELETE","lineNumber":279,"oldContent":"            screenWidth = screenWidth,"},{"type":"INSERT","lineNumber":278,"content":"    // Schatten-Effekt (3D-Tiefe)"},{"type":"INSERT","lineNumber":279,"content":"    val shadowPath = Path(arrowPath).apply {"},{"type":"DELETE","lineNumber":283,"oldContent":"        val arrowDirection = calculateArrowDirection(bestMatch.landmark)"},{"type":"DELETE","lineNumber":284,"oldContent":"        "},{"type":"DELETE","lineNumber":285,"oldContent":"        Box(modifier = modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":286,"oldContent":"            Canvas(modifier = Modifier.fillMaxSize()) {"},{"type":"DELETE","lineNumber":287,"oldContent":"                drawAnimated3DArrow("},{"type":"INSERT","lineNumber":283,"content":"    val shadowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":284,"content":"        this.color = Color.Black.copy(alpha = 0.3f).toArgb()"},{"type":"INSERT","lineNumber":285,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":286,"content":"        style = Paint.Style.FILL"},{"type":"INSERT","lineNumber":287,"content":"    }"},{"type":"INSERT","lineNumber":293,"content":"    canvas.drawPath(arrowPath, paint)"},{"type":"DELETE","lineNumber":294,"oldContent":"    "},{"type":"DELETE","lineNumber":301,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":302,"oldContent":" */"},{"type":"INSERT","lineNumber":301,"content":"        isAntiAlias = true"},{"type":"INSERT","lineNumber":302,"content":"        style = Paint.Style.FILL"},{"type":"DELETE","lineNumber":305,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":306,"oldContent":"    confidence: Float,"},{"type":"INSERT","lineNumber":305,"content":"    val highlightPath = Path().apply {"},{"type":"INSERT","lineNumber":306,"content":"        moveTo(-size * 0.05f, -size * 0.4f)"},{"type":"MODIFY","lineNumber":311,"content":"    }","oldContent":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"DELETE","lineNumber":314,"oldContent":"    "},{"type":"DELETE","lineNumber":315,"oldContent":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"INSERT","lineNumber":314,"content":"}"},{"type":"INSERT","lineNumber":315,"content":""},{"type":"DELETE","lineNumber":319,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":320,"oldContent":"        canvas.save()"},{"type":"INSERT","lineNumber":319,"content":"private fun getArrowColor(confidence: Float): Color {"},{"type":"INSERT","lineNumber":320,"content":"    return when {"},{"type":"MODIFY","lineNumber":326,"content":"}","oldContent":"}"},{"type":"DELETE","lineNumber":334,"oldContent":"        // Pfeilkörper"},{"type":"DELETE","lineNumber":335,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":336,"oldContent":"    canvas: android.graphics.Canvas,"},{"type":"DELETE","lineNumber":337,"oldContent":"/**"},{"type":"DELETE","lineNumber":338,"oldContent":"    val stabilizedDirection = baseDirection - cameraRotation"},{"type":"INSERT","lineNumber":334,"content":"    isFeatureMappingEnabled: Boolean,"},{"type":"INSERT","lineNumber":335,"content":"    screenWidth: Float,"},{"type":"INSERT","lineNumber":336,"content":"    screenHeight: Float,"},{"type":"INSERT","lineNumber":337,"content":"    currentStep: Int = 1,"},{"type":"INSERT","lineNumber":338,"content":"    totalSteps: Int = 3,"},{"type":"DELETE","lineNumber":341,"oldContent":"        landmark.id == \"PT-1-566\" -> 0f     // Tür - geradeaus"},{"type":"DELETE","lineNumber":342,"oldContent":"        landmark.id == \"PT-1-86\" -> 270f    // Prof. Ludwig Büro - nach links"},{"type":"INSERT","lineNumber":341,"content":") {"},{"type":"INSERT","lineNumber":342,"content":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"MODIFY","lineNumber":385,"content":"    arPose: SimpleARRenderer.SimpleARPose?,","oldContent":"    arPose: SnapchatStyleARRenderer.ARPose?,"},{"type":"DELETE","lineNumber":429,"oldContent":"        }"},{"type":"INSERT","lineNumber":430,"content":"            style = PaintingStyle.Stroke"},{"type":"INSERT","lineNumber":431,"content":"            strokeWidth = 3.dp.toPx()"},{"type":"INSERT","lineNumber":432,"content":"        }"},{"type":"DELETE","lineNumber":433,"oldContent":"            style = PaintingStyle.Stroke"},{"type":"DELETE","lineNumber":437,"oldContent":"            strokeWidth = 3.dp.toPx()"},{"type":"DELETE","lineNumber":440,"oldContent":"}"},{"type":"DELETE","lineNumber":442,"oldContent":""},{"type":"DELETE","lineNumber":444,"oldContent":"        "},{"type":"DELETE","lineNumber":446,"oldContent":"/**"},{"type":"DELETE","lineNumber":448,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":451,"oldContent":" */"},{"type":"DELETE","lineNumber":453,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":456,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":458,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":461,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":463,"oldContent":"    animationProgress: Float,"},{"type":"DELETE","lineNumber":466,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"DELETE","lineNumber":468,"oldContent":") {"},{"type":"DELETE","lineNumber":471,"oldContent":"    val baseSize = 60.dp.toPx()"},{"type":"DELETE","lineNumber":472,"oldContent":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"INSERT","lineNumber":458,"content":"}"},{"type":"INSERT","lineNumber":459,"content":""},{"type":"DELETE","lineNumber":474,"oldContent":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"DELETE","lineNumber":476,"oldContent":"    val arrowColor = getArrowColor(confidence)"},{"type":"DELETE","lineNumber":478,"oldContent":"    "},{"type":"DELETE","lineNumber":481,"oldContent":"    // Leichtes Schweben des Pfeils"},{"type":"DELETE","lineNumber":484,"oldContent":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"DELETE","lineNumber":486,"oldContent":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"DELETE","lineNumber":488,"oldContent":"    "},{"type":"INSERT","lineNumber":469,"content":"        "},{"type":"DELETE","lineNumber":490,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"DELETE","lineNumber":493,"oldContent":"        canvas.save()"},{"type":"DELETE","lineNumber":495,"oldContent":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"DELETE","lineNumber":498,"oldContent":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"DELETE","lineNumber":500,"oldContent":"        "},{"type":"DELETE","lineNumber":503,"oldContent":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"DELETE","lineNumber":505,"oldContent":"        "},{"type":"INSERT","lineNumber":481,"content":"/**"},{"type":"INSERT","lineNumber":482,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":483,"content":" */"},{"type":"INSERT","lineNumber":484,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":485,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":486,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":487,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":488,"content":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":489,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":490,"content":") {"},{"type":"INSERT","lineNumber":491,"content":"    val baseSize = 60.dp.toPx()"},{"type":"INSERT","lineNumber":492,"content":"    val pulseScale = 1f + sin(animationProgress * 2 * PI).toFloat() * 0.1f"},{"type":"INSERT","lineNumber":493,"content":"    val arrowSize = baseSize * confidence * pulseScale"},{"type":"INSERT","lineNumber":494,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"INSERT","lineNumber":495,"content":"    "},{"type":"INSERT","lineNumber":496,"content":"    // Leichtes Schweben des Pfeils"},{"type":"INSERT","lineNumber":497,"content":"    val hoverOffset = sin(animationProgress * 4 * PI).toFloat() * 5f"},{"type":"INSERT","lineNumber":498,"content":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"INSERT","lineNumber":499,"content":"    "},{"type":"INSERT","lineNumber":500,"content":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":501,"content":"        canvas.save()"},{"type":"INSERT","lineNumber":502,"content":"        canvas.translate(adjustedPosition.x, adjustedPosition.y)"},{"type":"INSERT","lineNumber":503,"content":"        canvas.rotate(direction + animationProgress * 2f) // Leichte Rotation"},{"type":"INSERT","lineNumber":504,"content":"        "},{"type":"INSERT","lineNumber":505,"content":"        draw3DArrowShape(canvas.nativeCanvas, arrowSize, arrowColor, confidence)"},{"type":"INSERT","lineNumber":506,"content":"        "},{"type":"INSERT","lineNumber":552,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":553,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":554,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":555,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":556,"content":"    )"},{"type":"INSERT","lineNumber":557,"content":"}"}]},{"timestamp":1754926048547,"changes":[{"type":"DELETE","lineNumber":24,"oldContent":"import kotlin.math.*"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"INSERT","lineNumber":24,"content":"/**"},{"type":"INSERT","lineNumber":25,"content":" * 3D-Pfeil Overlay für AR-Navigation (Snapchat-Style)"},{"type":"DELETE","lineNumber":30,"oldContent":"@Composable"},{"type":"INSERT","lineNumber":31,"content":"    matches: List<FeatureMatchResult>,"},{"type":"INSERT","lineNumber":113,"content":""},{"type":"DELETE","lineNumber":114,"oldContent":"/**"},{"type":"MODIFY","lineNumber":138,"content":"    val normalizedY = (abs(hashCode / 100) % 100) / 100f","oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":213,"oldContent":"    // Zeichne Schatten"},{"type":"DELETE","lineNumber":214,"oldContent":"    canvas.drawPath(shadowPath, shadowPaint)"},{"type":"DELETE","lineNumber":215,"oldContent":"    "},{"type":"DELETE","lineNumber":216,"oldContent":"    // Zeichne Hauptpfeil"},{"type":"DELETE","lineNumber":217,"oldContent":"    canvas.drawPath(arrowPath, paint)"},{"type":"INSERT","lineNumber":213,"content":"private fun DrawScope.draw3DArrow("},{"type":"INSERT","lineNumber":214,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":215,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":216,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":217,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"MODIFY","lineNumber":261,"content":"    ","oldContent":"    screenHeight: Float,"},{"type":"MODIFY","lineNumber":281,"content":"    }","oldContent":"        )"},{"type":"DELETE","lineNumber":297,"oldContent":"}"},{"type":"DELETE","lineNumber":298,"oldContent":""},{"type":"DELETE","lineNumber":299,"oldContent":"/**"},{"type":"DELETE","lineNumber":300,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":297,"content":"    "},{"type":"INSERT","lineNumber":298,"content":"    // Zeichne Glanz-Effekt für 3D-Look"},{"type":"INSERT","lineNumber":299,"content":"    val highlightPaint = Paint().apply {"},{"type":"INSERT","lineNumber":300,"content":"        this.color = Color.White.copy(alpha = 0.4f * confidence).toArgb()"},{"type":"DELETE","lineNumber":303,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":304,"oldContent":"    direction: Float,"},{"type":"INSERT","lineNumber":303,"content":"    }"},{"type":"INSERT","lineNumber":304,"content":"    "},{"type":"DELETE","lineNumber":317,"oldContent":"    "},{"type":"DELETE","lineNumber":318,"oldContent":"    drawIntoCanvas { canvas ->"},{"type":"INSERT","lineNumber":317,"content":" * Bestimmt die Farbe des Pfeils basierend auf der Confidence"},{"type":"INSERT","lineNumber":318,"content":" */"},{"type":"INSERT","lineNumber":325,"content":"    }"},{"type":"DELETE","lineNumber":326,"oldContent":"}"},{"type":"DELETE","lineNumber":328,"oldContent":"    )"},{"type":"DELETE","lineNumber":329,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":330,"oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":328,"content":"/**"},{"type":"INSERT","lineNumber":329,"content":" * Erweiterte 3D-Pfeil-Komponente mit Animation"},{"type":"INSERT","lineNumber":330,"content":" */"},{"type":"DELETE","lineNumber":345,"oldContent":"    private var modelData: ByteArray? = null"},{"type":"DELETE","lineNumber":346,"oldContent":"    private var isLoaded = false"},{"type":"DELETE","lineNumber":347,"oldContent":"class GLBArrowModel(private val context: Context) {"},{"type":"DELETE","lineNumber":348,"oldContent":" */"},{"type":"DELETE","lineNumber":349,"oldContent":" * Lädt das arrow.glb Modell aus den Assets"},{"type":"INSERT","lineNumber":345,"content":"    // Animation für pulsierenden Effekt"},{"type":"INSERT","lineNumber":346,"content":"    LaunchedEffect(bestMatch) {"},{"type":"INSERT","lineNumber":347,"content":"        if (bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"INSERT","lineNumber":348,"content":"            while (true) {"},{"type":"INSERT","lineNumber":349,"content":"                animationProgress = (animationProgress + 0.02f) % 1f"},{"type":"MODIFY","lineNumber":363,"content":"        Box(modifier = modifier.fillMaxSize()) {","oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":389,"oldContent":"    val depth = arPose?.translation?.z?.toFloat() ?: 2.0f"},{"type":"MODIFY","lineNumber":389,"content":"    val depth = arPose?.depth ?: 2.0f","oldContent":"    val perspectiveScale = (2.0f / (depth + 2.0f)).coerceIn(0.3f, 2.0f)"},{"type":"INSERT","lineNumber":390,"content":"    val perspectiveScale = arPose?.scale ?: 1.0f"},{"type":"MODIFY","lineNumber":393,"content":"    // Farbe basierend auf Confidence und Tiefe - Snapchat-Style","oldContent":"    // Farbe basierend auf Confidence und Tiefe"},{"type":"MODIFY","lineNumber":430,"content":"            style = PaintingStyle.Stroke","oldContent":"            style = PaintingStyle.Stroke"},{"type":"MODIFY","lineNumber":433,"content":"        ","oldContent":"        "},{"type":"DELETE","lineNumber":450,"oldContent":"}"},{"type":"DELETE","lineNumber":451,"oldContent":""},{"type":"MODIFY","lineNumber":458,"content":"}","oldContent":"        "},{"type":"INSERT","lineNumber":459,"content":""},{"type":"INSERT","lineNumber":465,"content":"        // Pfeilspitze"},{"type":"INSERT","lineNumber":466,"content":"        moveTo(size * 0.5f, 0f)"},{"type":"INSERT","lineNumber":467,"content":"        lineTo(0f, size * 0.3f)"},{"type":"INSERT","lineNumber":468,"content":"        lineTo(size * 0.2f, size * 0.3f)"},{"type":"INSERT","lineNumber":469,"content":"        "},{"type":"INSERT","lineNumber":470,"content":"        // Pfeilschaft"},{"type":"INSERT","lineNumber":471,"content":"        lineTo(size * 0.2f, size)"},{"type":"INSERT","lineNumber":472,"content":"        lineTo(size * 0.8f, size)"},{"type":"INSERT","lineNumber":473,"content":"        lineTo(size * 0.8f, size * 0.3f)"},{"type":"INSERT","lineNumber":474,"content":"        "},{"type":"INSERT","lineNumber":475,"content":"        // Zurück zur Spitze"},{"type":"INSERT","lineNumber":476,"content":"        lineTo(size, size * 0.3f)"},{"type":"INSERT","lineNumber":477,"content":"        close()"},{"type":"INSERT","lineNumber":478,"content":"    }"},{"type":"INSERT","lineNumber":479,"content":"}"},{"type":"INSERT","lineNumber":480,"content":""},{"type":"DELETE","lineNumber":468,"oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":470,"oldContent":"        moveTo(size * 0.5f, 0f)"},{"type":"DELETE","lineNumber":473,"oldContent":"        lineTo(0f, size * 0.3f)"},{"type":"DELETE","lineNumber":476,"oldContent":"        lineTo(size * 0.2f, size * 0.3f)"},{"type":"DELETE","lineNumber":479,"oldContent":"        // Pfeilschaft"},{"type":"DELETE","lineNumber":482,"oldContent":"        lineTo(size * 0.2f, size)"},{"type":"DELETE","lineNumber":484,"oldContent":"        lineTo(size * 0.8f, size)"},{"type":"DELETE","lineNumber":487,"oldContent":"        lineTo(size * 0.8f, size * 0.3f)"},{"type":"DELETE","lineNumber":490,"oldContent":"        "},{"type":"DELETE","lineNumber":492,"oldContent":"        // Zurück zur Spitze"},{"type":"DELETE","lineNumber":495,"oldContent":"        lineTo(size, size * 0.3f)"},{"type":"DELETE","lineNumber":498,"oldContent":"        close()"},{"type":"DELETE","lineNumber":500,"oldContent":"    }"},{"type":"DELETE","lineNumber":503,"oldContent":"}"},{"type":"DELETE","lineNumber":506,"oldContent":""},{"type":"DELETE","lineNumber":541,"oldContent":"    )"},{"type":"DELETE","lineNumber":542,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":543,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":544,"oldContent":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":541,"content":""},{"type":"INSERT","lineNumber":542,"content":""},{"type":"INSERT","lineNumber":543,"content":""},{"type":"INSERT","lineNumber":544,"content":""},{"type":"INSERT","lineNumber":545,"content":""},{"type":"INSERT","lineNumber":546,"content":"/**"},{"type":"INSERT","lineNumber":547,"content":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"INSERT","lineNumber":548,"content":" */"},{"type":"INSERT","lineNumber":549,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":550,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"INSERT","lineNumber":551,"content":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":553,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":554,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":555,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":556,"content":"    )"},{"type":"INSERT","lineNumber":557,"content":"}"}]},{"timestamp":1754926055884,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import androidx.compose.ui.platform.LocalContext","oldContent":"import androidx.compose.ui.graphics.drawscope.rotate"},{"type":"MODIFY","lineNumber":23,"content":"","oldContent":"import com.example.arwalking.FeatureMatchResult"},{"type":"MODIFY","lineNumber":31,"content":"    matches: List<FeatureMatchResult>,","oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":41,"content":"    val context = LocalContext.current","oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"DELETE","lineNumber":219,"oldContent":"    // Zeichne Umriss"},{"type":"DELETE","lineNumber":220,"oldContent":"    canvas.drawPath(arrowPath, strokePaint)"},{"type":"INSERT","lineNumber":219,"content":"    val arrowSize = 60.dp.toPx() * confidence // Größe basierend auf Confidence"},{"type":"INSERT","lineNumber":220,"content":"    val arrowColor = getArrowColor(confidence)"},{"type":"MODIFY","lineNumber":275,"content":"        close()","oldContent":"    "},{"type":"MODIFY","lineNumber":277,"content":"    ","oldContent":"    if (isFeatureMappingEnabled && bestMatch != null && bestMatch.confidence >= 0.7f) {"},{"type":"MODIFY","lineNumber":289,"content":"    // Zeichne Schatten","oldContent":"                    direction = arrowDirection,"},{"type":"MODIFY","lineNumber":291,"content":"    ","oldContent":"            }"},{"type":"MODIFY","lineNumber":313,"content":"    canvas.drawPath(highlightPath, highlightPaint)","oldContent":"    "},{"type":"MODIFY","lineNumber":316,"content":"/**","oldContent":"    val adjustedPosition = position.copy(y = position.y + hoverOffset)"},{"type":"DELETE","lineNumber":332,"oldContent":"        description = \"Processed landmark\","},{"type":"DELETE","lineNumber":333,"oldContent":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":332,"content":"fun Animated3DArrowOverlay("},{"type":"INSERT","lineNumber":333,"content":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":343,"content":"    var animationProgress by remember { mutableStateOf(0f) }","oldContent":"            isLoaded = false"},{"type":"DELETE","lineNumber":351,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":352,"oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"DELETE","lineNumber":353,"oldContent":""},{"type":"INSERT","lineNumber":351,"content":"            }"},{"type":"INSERT","lineNumber":352,"content":"        }"},{"type":"INSERT","lineNumber":353,"content":"    }"},{"type":"MODIFY","lineNumber":390,"content":"    val perspectiveScale = arPose?.scale ?: 1.0f","oldContent":"    val perspectiveScale = (2.0f / (depth + 2.0f)).coerceIn(0.3f, 2.0f)"},{"type":"MODIFY","lineNumber":428,"content":"        val glowPaint = androidx.compose.ui.graphics.Paint().apply {","oldContent":"        val glowPaint = Paint().apply {"},{"type":"INSERT","lineNumber":429,"content":"            color = Color.White.copy(alpha = 0.4f * confidence)"},{"type":"DELETE","lineNumber":430,"oldContent":"            style = PaintingStyle.Stroke"},{"type":"INSERT","lineNumber":432,"content":"        }"},{"type":"DELETE","lineNumber":433,"oldContent":"        "},{"type":"DELETE","lineNumber":456,"oldContent":"}"},{"type":"DELETE","lineNumber":457,"oldContent":""},{"type":"INSERT","lineNumber":458,"content":"}"},{"type":"INSERT","lineNumber":459,"content":""},{"type":"MODIFY","lineNumber":465,"content":"        // Pfeilspitze","oldContent":"        // Pfeilspitze"},{"type":"DELETE","lineNumber":467,"oldContent":"/**"},{"type":"DELETE","lineNumber":469,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":472,"oldContent":" */"},{"type":"DELETE","lineNumber":475,"oldContent":"private fun DrawScope.drawAnimated3DArrow("},{"type":"DELETE","lineNumber":477,"oldContent":"    position: Offset,"},{"type":"DELETE","lineNumber":480,"oldContent":"    direction: Float,"},{"type":"DELETE","lineNumber":482,"oldContent":"    confidence: Float,"},{"type":"DELETE","lineNumber":485,"oldContent":"    animationProgress: Float,"},{"type":"DELETE","lineNumber":487,"oldContent":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":481,"content":"/**"},{"type":"INSERT","lineNumber":482,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":483,"content":" */"},{"type":"INSERT","lineNumber":484,"content":"private fun DrawScope.drawAnimated3DArrow("},{"type":"INSERT","lineNumber":485,"content":"    position: Offset,"},{"type":"INSERT","lineNumber":486,"content":"    direction: Float,"},{"type":"INSERT","lineNumber":487,"content":"    confidence: Float,"},{"type":"INSERT","lineNumber":488,"content":"    animationProgress: Float,"},{"type":"INSERT","lineNumber":489,"content":"    size: androidx.compose.ui.geometry.Size"},{"type":"INSERT","lineNumber":537,"content":"    fun getModelData(): ByteArray? = modelData"},{"type":"INSERT","lineNumber":538,"content":"    "},{"type":"INSERT","lineNumber":539,"content":"    fun hasGLBSupport(): Boolean = isLoaded && modelData != null"},{"type":"DELETE","lineNumber":538,"oldContent":"    )"},{"type":"DELETE","lineNumber":539,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":540,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":546,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":548,"oldContent":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"DELETE","lineNumber":550,"oldContent":"        description = \"Processed landmark\","},{"type":"MODIFY","lineNumber":551,"content":"        id = processedLandmark.id,","oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":552,"content":"        name = processedLandmark.name,"},{"type":"INSERT","lineNumber":553,"content":"        description = \"Processed landmark\","},{"type":"INSERT","lineNumber":554,"content":"        position = null, // Position wird aus screenPosition berechnet"},{"type":"INSERT","lineNumber":555,"content":"        imageUrl = null"},{"type":"INSERT","lineNumber":556,"content":"    )"},{"type":"INSERT","lineNumber":557,"content":"}"}]},{"timestamp":1754926064715,"changes":[{"type":"MODIFY","lineNumber":29,"content":"@Composable","oldContent":" */"},{"type":"INSERT","lineNumber":30,"content":"fun AR3DArrowOverlay("},{"type":"DELETE","lineNumber":31,"oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":39,"content":"    modifier: Modifier = Modifier","oldContent":"    val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"MODIFY","lineNumber":139,"content":"    ","oldContent":"    direction: Float,"},{"type":"MODIFY","lineNumber":218,"content":") {","oldContent":"    "},{"type":"MODIFY","lineNumber":280,"content":"        offset(size * 0.05f, size * 0.05f)","oldContent":"            screenHeight = screenHeight"},{"type":"MODIFY","lineNumber":288,"content":"    ","oldContent":"                    position = arrowPosition,"},{"type":"MODIFY","lineNumber":327,"content":"","oldContent":"}"},{"type":"MODIFY","lineNumber":331,"content":"@Composable","oldContent":" * Konvertiert ProcessedLandmark zu FeatureLandmark"},{"type":"MODIFY","lineNumber":444,"content":"            val debugPaint = androidx.compose.ui.graphics.Paint().apply {","oldContent":"            val debugPaint = Paint().apply {"},{"type":"DELETE","lineNumber":446,"oldContent":"                textSize = 12.dp.toPx()"},{"type":"DELETE","lineNumber":456,"oldContent":"}"},{"type":"DELETE","lineNumber":458,"oldContent":""},{"type":"INSERT","lineNumber":457,"content":"}"},{"type":"INSERT","lineNumber":458,"content":""},{"type":"INSERT","lineNumber":463,"content":"    return Path().apply {"},{"type":"DELETE","lineNumber":465,"oldContent":"        // Pfeilspitze"},{"type":"MODIFY","lineNumber":475,"content":"        lineTo(size, size * 0.3f)","oldContent":"/**"},{"type":"INSERT","lineNumber":476,"content":"        close()"},{"type":"INSERT","lineNumber":477,"content":"    }"},{"type":"INSERT","lineNumber":478,"content":"}"},{"type":"INSERT","lineNumber":479,"content":""},{"type":"INSERT","lineNumber":480,"content":"/**"},{"type":"DELETE","lineNumber":479,"oldContent":"        lineTo(size, size * 0.3f)"},{"type":"DELETE","lineNumber":481,"oldContent":"        close()"},{"type":"DELETE","lineNumber":484,"oldContent":"    }"},{"type":"DELETE","lineNumber":487,"oldContent":"}"},{"type":"DELETE","lineNumber":489,"oldContent":""},{"type":"MODIFY","lineNumber":539,"content":"}","oldContent":"}"},{"type":"INSERT","lineNumber":547,"content":" */"},{"type":"INSERT","lineNumber":548,"content":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"INSERT","lineNumber":549,"content":"    return com.example.arwalking.FeatureLandmark("},{"type":"DELETE","lineNumber":550,"oldContent":"        id = processedLandmark.id,"},{"type":"DELETE","lineNumber":552,"oldContent":"private fun convertToFeatureLandmark(processedLandmark: com.example.arwalking.ProcessedLandmark): com.example.arwalking.FeatureLandmark {"},{"type":"DELETE","lineNumber":554,"oldContent":"    return com.example.arwalking.FeatureLandmark("},{"type":"MODIFY","lineNumber":556,"content":"}","oldContent":"}"}]},{"timestamp":1754926131359,"changes":[{"type":"MODIFY","lineNumber":32,"content":"    isFeatureMappingEnabled: Boolean,","oldContent":"    matches: List<FeatureMatchResult>,"},{"type":"MODIFY","lineNumber":37,"content":"    useGLBModel: Boolean = false, // Standardmäßig 2D-Rendering verwenden","oldContent":") {"},{"type":"DELETE","lineNumber":42,"oldContent":"        "},{"type":"DELETE","lineNumber":43,"oldContent":"        val arrowPosition = calculateArrowPosition("},{"type":"DELETE","lineNumber":44,"oldContent":"            screenPosition = bestMatch.screenPosition,"},{"type":"DELETE","lineNumber":45,"oldContent":"            screenHeight = screenHeight"},{"type":"DELETE","lineNumber":46,"oldContent":"        "},{"type":"DELETE","lineNumber":47,"oldContent":"        val arrowDirection = calculateArrowDirection(bestMatch.landmark)"},{"type":"INSERT","lineNumber":42,"content":"    var glbModel by remember { mutableStateOf<GLBArrowModel?>(null) }"},{"type":"INSERT","lineNumber":43,"content":"    var isGLBLoaded by remember { mutableStateOf(false) }"},{"type":"INSERT","lineNumber":44,"content":"    "},{"type":"INSERT","lineNumber":45,"content":"    // GLB-Modell laden wenn gewünscht"},{"type":"INSERT","lineNumber":46,"content":"    LaunchedEffect(useGLBModel) {"},{"type":"INSERT","lineNumber":47,"content":"        if (useGLBModel) {"},{"type":"MODIFY","lineNumber":344,"content":"    ","oldContent":"                totalSteps = totalSteps,"},{"type":"DELETE","lineNumber":455,"oldContent":"}"},{"type":"MODIFY","lineNumber":457,"content":"}","oldContent":""},{"type":"INSERT","lineNumber":458,"content":""},{"type":"DELETE","lineNumber":462,"oldContent":"    return Path().apply {"},{"type":"MODIFY","lineNumber":462,"content":"private fun createArrowPath(size: Float): androidx.compose.ui.graphics.Path {","oldContent":"private fun createArrowPath(size: Float): Path {"},{"type":"INSERT","lineNumber":463,"content":"    return androidx.compose.ui.graphics.Path().apply {"},{"type":"INSERT","lineNumber":474,"content":"        // Zurück zur Spitze"},{"type":"DELETE","lineNumber":476,"oldContent":"        // Zurück zur Spitze"},{"type":"DELETE","lineNumber":478,"oldContent":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"DELETE","lineNumber":480,"oldContent":" */"},{"type":"INSERT","lineNumber":481,"content":" * Zeichnet einen animierten 3D-Pfeil"},{"type":"INSERT","lineNumber":482,"content":" */"},{"type":"DELETE","lineNumber":534,"oldContent":"}"},{"type":"DELETE","lineNumber":535,"oldContent":"    )"},{"type":"INSERT","lineNumber":534,"content":"    fun isModelLoaded(): Boolean = isLoaded"},{"type":"INSERT","lineNumber":535,"content":"    "},{"type":"DELETE","lineNumber":537,"oldContent":"        imageUrl = null"},{"type":"DELETE","lineNumber":538,"oldContent":"}"},{"type":"INSERT","lineNumber":537,"content":"    "},{"type":"INSERT","lineNumber":539,"content":"}"},{"type":"MODIFY","lineNumber":547,"content":" */","oldContent":" */"},{"type":"MODIFY","lineNumber":550,"content":"        id = processedLandmark.id,","oldContent":"        id = processedLandmark.id,"},{"type":"INSERT","lineNumber":555,"content":"    )"},{"type":"INSERT","lineNumber":556,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/RouteViewModel.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/RouteViewModel.kt","baseContent":"// RouteViewModel.kt (erweitert)\npackage com.example.arwalking\n\nimport RouteData\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport android.util.Log\nimport android.content.Context\nimport com.google.gson.Gson\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\n\nclass RouteViewModel : ViewModel() {\n\n    private val TAG = \"RouteViewModel\"\n    \n    // Feature Map Manager\n    private var featureMapManager: FeatureMapManager? = null\n    \n    // State für Feature-Navigation\n    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)\n    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()\n    \n    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())\n    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()\n    \n    private val _isFeatureMappingEnabled = MutableStateFlow(false)\n    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()\n\n    // Die neue Funktion die das NavigationRoute-Objekt zurückgibt\n    fun loadNavigationRoute(context: Context): NavigationRoute? {\n        return try {\n            Log.i(TAG, \"Route wird geladen...\")\n\n            // JSON laden und parsen (wie vorher)\n            val jsonString = loadJSONFromAsset(context, \"route.json\")\n            val gson = Gson()\n            val routeData = gson.fromJson(jsonString, RouteData::class.java)\n\n            // In NavigationRoute umwandeln\n            convertToNavigationRoute(routeData)\n\n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")\n            null\n        }\n    }\n\n    // Konvertierung von RouteData zu NavigationRoute\n    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {\n        val steps = mutableListOf<NavigationStep>()\n        var stepNumber = 1\n\n        routeData.route.path.forEach { pathItem ->\n            pathItem.routeParts.forEach { routePart ->\n                val landmarkIds = routePart.landmarks.map { it.id }\n\n                val step = NavigationStep(\n                    stepNumber = stepNumber,\n                    instruction = routePart.instructionDe,\n                    building = pathItem.xmlName,\n                    landmarkIds = landmarkIds\n                )\n\n                steps.add(step)\n                stepNumber++\n            }\n        }\n\n        return NavigationRoute(\n            totalLength = routeData.route.routeInfo.routeLength,\n            steps = steps\n        )\n    }\n\n    // Optional: Für Debugging - die alte Logging-Funktion angepasst\n    fun logNavigationRoute(navigationRoute: NavigationRoute) {\n        Log.i(TAG, \"=== NAVIGATION ROUTE START ===\")\n        Log.i(TAG, \"Gesamte Routenlänge: ${navigationRoute.totalLength} Meter\")\n        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")\n        Log.i(TAG, \"\")\n\n        navigationRoute.steps.forEach { step ->\n            Log.i(TAG, \"Schritt ${step.stepNumber}: ${step.instruction}\")\n            Log.i(TAG, \"  Gebäude: ${step.building}\")\n            if (step.landmarkIds.isNotEmpty()) {\n                Log.i(TAG, \"  Landmark IDs: ${step.landmarkIds.joinToString(\", \")}\")\n            } else {\n                Log.i(TAG, \"  Keine Landmarks\")\n            }\n            Log.i(TAG, \"\")\n        }\n\n        Log.i(TAG, \"=== NAVIGATION ROUTE ENDE ===\")\n    }\n\n    private fun loadJSONFromAsset(context: Context, filename: String): String {\n        return context.assets.open(filename).bufferedReader().use { it.readText() }\n    }\n}","baseTimestamp":1754044850874,"deltas":[{"timestamp":1754923916473,"changes":[{"type":"DELETE","lineNumber":79,"oldContent":"                val step = NavigationStep("},{"type":"DELETE","lineNumber":80,"oldContent":"                    stepNumber = stepNumber,"},{"type":"INSERT","lineNumber":79,"content":"    val isFeatureMappingEnabled: StateFlow<Boolean> = _isFeatureMappingEnabled.asStateFlow()"},{"type":"INSERT","lineNumber":80,"content":"    "},{"type":"MODIFY","lineNumber":96,"content":"            }","oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"    "},{"type":"MODIFY","lineNumber":287,"content":"                featureMatchingEngine = FeatureMatchingEngine(context)","oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"MODIFY","lineNumber":291,"content":"                arTrackingSystem = ARTrackingSystem()","oldContent":"                "},{"type":"DELETE","lineNumber":294,"oldContent":"                }"},{"type":"MODIFY","lineNumber":294,"content":"                // Engine initialisieren und Landmarks laden","oldContent":"                // Engine initialisieren und Landmarks laden"},{"type":"DELETE","lineNumber":304,"oldContent":"                val status = storageManager!!.getStorageStatus()"},{"type":"DELETE","lineNumber":307,"oldContent":"                "},{"type":"DELETE","lineNumber":309,"oldContent":"                val storageStats = featureMatchingEngine!!.getStorageStats()"},{"type":"DELETE","lineNumber":312,"oldContent":"                "},{"type":"DELETE","lineNumber":314,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":310,"content":"                }"},{"type":"INSERT","lineNumber":311,"content":"                "},{"type":"INSERT","lineNumber":312,"content":"                // Storage-Status loggen"},{"type":"INSERT","lineNumber":313,"content":"                val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":314,"content":"                Log.i(TAG, \"📊 Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":315,"content":"                "},{"type":"INSERT","lineNumber":316,"content":"                val storageStats = featureMatchingEngine!!.getStorageStats()"},{"type":"INSERT","lineNumber":317,"content":"                Log.i(TAG, \"📊 Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"INSERT","lineNumber":318,"content":"                "},{"type":"INSERT","lineNumber":319,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":320,"content":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"DELETE","lineNumber":320,"oldContent":"                // Storage-Status loggen"},{"type":"DELETE","lineNumber":323,"oldContent":"                Log.i(TAG, \"📊 Storage-Status: ${status.getHealthStatus()}\")"},{"type":"DELETE","lineNumber":325,"oldContent":"     * Lädt Landmarks für die aktuelle Route"},{"type":"INSERT","lineNumber":327,"content":"     * Lädt Landmarks für die aktuelle Route (vereinfacht)"},{"type":"DELETE","lineNumber":327,"oldContent":"                Log.i(TAG, \"📊 Feature-Storage: ${storageStats.landmarkCount} Landmarks, ${\"%.1f\".format(storageStats.getTotalSizeMB())} MB\")"},{"type":"DELETE","lineNumber":331,"oldContent":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"DELETE","lineNumber":333,"oldContent":"                Log.i(TAG, \"🔄 In loadLandmarksForCurrentRoute Coroutine\")"},{"type":"DELETE","lineNumber":335,"oldContent":"                    Log.w(TAG, \"❌ FeatureMatchingEngine nicht initialisiert - initialisiere jetzt...\")"},{"type":"DELETE","lineNumber":336,"oldContent":"                    initializeStorage(context)"},{"type":"DELETE","lineNumber":337,"oldContent":"                    if (featureMatchingEngine == null) {"},{"type":"DELETE","lineNumber":338,"oldContent":"                        Log.e(TAG, \"❌ FeatureMatchingEngine konnte nicht initialisiert werden\")"},{"type":"DELETE","lineNumber":339,"oldContent":"                    }"},{"type":"INSERT","lineNumber":334,"content":"                    Log.w(TAG, \"❌ FeatureMatchingEngine nicht initialisiert\")"},{"type":"INSERT","lineNumber":335,"content":"                    return@launch"},{"type":"INSERT","lineNumber":337,"content":"                "},{"type":"DELETE","lineNumber":343,"oldContent":"                processedLandmarks.clear()"},{"type":"INSERT","lineNumber":340,"content":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"INSERT","lineNumber":341,"content":"                // müssen wir hier nur prüfen ob sie initialisiert ist"},{"type":"INSERT","lineNumber":342,"content":"                val debugInfo = featureMatchingEngine!!.getDebugInfo()"},{"type":"INSERT","lineNumber":343,"content":"                Log.i(TAG, \"📊 Engine Status nach Route-Loading:\")"},{"type":"INSERT","lineNumber":344,"content":"                Log.i(TAG, debugInfo)"},{"type":"DELETE","lineNumber":345,"oldContent":"                val currentRoute = _currentRoute.value"},{"type":"DELETE","lineNumber":346,"oldContent":"                if (currentRoute != null) {"},{"type":"DELETE","lineNumber":347,"oldContent":"                    Log.i(TAG, \"✅ Route ist verfügbar, lade Landmarks...\")"},{"type":"DELETE","lineNumber":348,"oldContent":"                    // Lade nur die Landmarks, die in der aktuellen Route verwendet werden"},{"type":"DELETE","lineNumber":349,"oldContent":"                    val routeSpecificLandmarks = featureMatchingEngine!!.loadRouteSpecificLandmarks(currentRoute.route)"},{"type":"DELETE","lineNumber":350,"oldContent":"                        return@launch"},{"type":"DELETE","lineNumber":351,"oldContent":"                    Log.i(TAG, \"📍 ${processedLandmarks.size} route-spezifische Landmarks für Feature-Matching geladen\")"},{"type":"DELETE","lineNumber":352,"oldContent":"                    "},{"type":"DELETE","lineNumber":353,"oldContent":"                    // Debug: Zeige gefundene Landmark-IDs"},{"type":"DELETE","lineNumber":354,"oldContent":"                    Log.i(TAG, \"🔍 Gefundene Landmark-IDs: ${processedLandmarks.map { it.id }}\")"},{"type":"DELETE","lineNumber":355,"oldContent":"                    "},{"type":"DELETE","lineNumber":356,"oldContent":"                        Log.i(TAG, \"🔄 Starte Feature-Loading für ${processedLandmarks.size} Landmarks...\")"},{"type":"DELETE","lineNumber":357,"oldContent":"                        featureMatchingEngine!!.loadLandmarkFeatures(processedLandmarks)"},{"type":"DELETE","lineNumber":358,"oldContent":"                        Log.i(TAG, \"✅ Feature-Loading abgeschlossen\")"},{"type":"DELETE","lineNumber":359,"oldContent":"                        "},{"type":"DELETE","lineNumber":360,"oldContent":"                    processedLandmarks.addAll(routeSpecificLandmarks)"},{"type":"DELETE","lineNumber":361,"oldContent":"                        // Warte kurz und prüfe dann den Status"},{"type":"DELETE","lineNumber":362,"oldContent":"                        kotlinx.coroutines.delay(500)"},{"type":"DELETE","lineNumber":363,"oldContent":"                        // Debug: Teste das Laden einzelner Landmarks"},{"type":"DELETE","lineNumber":364,"oldContent":"                        Log.i(TAG, \"🧪 Teste einzelne Landmark-Loading...\")"},{"type":"DELETE","lineNumber":365,"oldContent":"                        processedLandmarks.take(3).forEach { landmark ->"},{"type":"DELETE","lineNumber":366,"oldContent":"                    // Lade Features für echtes Feature-Matching"},{"type":"DELETE","lineNumber":367,"oldContent":"                            val success = featureMatchingEngine!!.testLandmarkLoading(landmark.id)"},{"type":"DELETE","lineNumber":368,"oldContent":"                    if (processedLandmarks.isNotEmpty()) {"},{"type":"DELETE","lineNumber":369,"oldContent":"                            Log.i(TAG, \"🧪 Test für ${landmark.id}: ${if (success) \"✅ Erfolgreich\" else \"❌ Fehlgeschlagen\"}\")"},{"type":"DELETE","lineNumber":370,"oldContent":"                        }"},{"type":"DELETE","lineNumber":371,"oldContent":"                        "},{"type":"DELETE","lineNumber":372,"oldContent":"                        // Debug-Info ausgeben"},{"type":"INSERT","lineNumber":346,"content":"                // Feature-Mapping aktivieren falls noch nicht geschehen"},{"type":"INSERT","lineNumber":347,"content":"                if (!_isFeatureMappingEnabled.value) {"},{"type":"INSERT","lineNumber":348,"content":"                    _isFeatureMappingEnabled.value = true"},{"type":"INSERT","lineNumber":349,"content":"                    Log.i(TAG, \"✅ Feature-Mapping aktiviert\")"},{"type":"INSERT","lineNumber":350,"content":"                }"},{"type":"DELETE","lineNumber":376,"oldContent":"                        "},{"type":"INSERT","lineNumber":360,"content":"                                routePart.landmarks?.forEachIndexed { lIndex, landmark ->"},{"type":"INSERT","lineNumber":361,"content":"                                    Log.w(TAG, \"    Landmark $lIndex: id=${landmark.id}\")"},{"type":"INSERT","lineNumber":362,"content":"                                }"},{"type":"INSERT","lineNumber":363,"content":"                            }"},{"type":"INSERT","lineNumber":364,"content":"                        }"},{"type":"DELETE","lineNumber":391,"oldContent":"                                routePart.landmarks?.forEachIndexed { lIndex, landmark ->"},{"type":"DELETE","lineNumber":393,"oldContent":"                                    Log.w(TAG, \"    Landmark $lIndex: id=${landmark.id}\")"},{"type":"DELETE","lineNumber":395,"oldContent":"                                }"},{"type":"DELETE","lineNumber":396,"oldContent":"                            }"},{"type":"DELETE","lineNumber":398,"oldContent":"                        }"},{"type":"INSERT","lineNumber":380,"content":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"INSERT","lineNumber":388,"content":"     */"},{"type":"INSERT","lineNumber":389,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":390,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":393,"content":"                "},{"type":"DELETE","lineNumber":413,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"DELETE","lineNumber":419,"oldContent":"     */"},{"type":"DELETE","lineNumber":421,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":423,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":427,"oldContent":"                "},{"type":"INSERT","lineNumber":451,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"INSERT","lineNumber":462,"content":"    /**"},{"type":"DELETE","lineNumber":485,"oldContent":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":496,"oldContent":"    /**"},{"type":"DELETE","lineNumber":499,"oldContent":"        "},{"type":"DELETE","lineNumber":500,"oldContent":"        }"},{"type":"DELETE","lineNumber":501,"oldContent":"        if (currentTime - lastFrameProcessTime < frameProcessingInterval) {"},{"type":"DELETE","lineNumber":502,"oldContent":"        // Throttle Frame-Processing für bessere Performance"},{"type":"DELETE","lineNumber":503,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":476,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":477,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":478,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":479,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":480,"content":"                    landmarkName = landmarkName,"},{"type":"DELETE","lineNumber":522,"oldContent":"     */"},{"type":"DELETE","lineNumber":523,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":524,"oldContent":"    /**"},{"type":"INSERT","lineNumber":499,"content":"            "},{"type":"INSERT","lineNumber":500,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":501,"content":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":502,"content":"            false"},{"type":"INSERT","lineNumber":503,"content":"        }"},{"type":"DELETE","lineNumber":526,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":527,"oldContent":"            initialize(context)"},{"type":"INSERT","lineNumber":505,"content":"    "},{"type":"INSERT","lineNumber":506,"content":""},{"type":"INSERT","lineNumber":507,"content":"    "},{"type":"INSERT","lineNumber":508,"content":""},{"type":"INSERT","lineNumber":509,"content":"    "},{"type":"DELETE","lineNumber":529,"oldContent":"            "},{"type":"DELETE","lineNumber":531,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":533,"oldContent":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":535,"oldContent":"            false"},{"type":"INSERT","lineNumber":514,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":539,"oldContent":""},{"type":"DELETE","lineNumber":544,"oldContent":"        "},{"type":"DELETE","lineNumber":545,"oldContent":"                                (300f + Math.random() * 200f).toFloat()"},{"type":"DELETE","lineNumber":546,"oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":522,"content":"    }"},{"type":"INSERT","lineNumber":523,"content":"    "},{"type":"INSERT","lineNumber":524,"content":""},{"type":"INSERT","lineNumber":525,"content":"    "},{"type":"INSERT","lineNumber":529,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":530,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":553,"oldContent":"    }"},{"type":"DELETE","lineNumber":555,"oldContent":"    /**"},{"type":"DELETE","lineNumber":556,"oldContent":""},{"type":"INSERT","lineNumber":535,"content":"     */"},{"type":"INSERT","lineNumber":536,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":537,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":539,"content":"    "},{"type":"DELETE","lineNumber":559,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":561,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":545,"content":"    }"},{"type":"DELETE","lineNumber":567,"oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":568,"oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":549,"content":"     */"},{"type":"DELETE","lineNumber":571,"oldContent":"    "},{"type":"INSERT","lineNumber":551,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":555,"content":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":581,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":582,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":583,"oldContent":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":562,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":588,"oldContent":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":591,"oldContent":"    }"},{"type":"INSERT","lineNumber":573,"content":"                "},{"type":"DELETE","lineNumber":607,"oldContent":"                "},{"type":"INSERT","lineNumber":589,"content":"    "},{"type":"INSERT","lineNumber":594,"content":"    /**"},{"type":"DELETE","lineNumber":620,"oldContent":"    "},{"type":"INSERT","lineNumber":599,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":623,"oldContent":"     */"},{"type":"INSERT","lineNumber":602,"content":"    }"},{"type":"INSERT","lineNumber":603,"content":"    "},{"type":"INSERT","lineNumber":605,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":606,"content":"     */"},{"type":"DELETE","lineNumber":629,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":630,"oldContent":"        }"},{"type":"INSERT","lineNumber":611,"content":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":612,"content":"    ): Boolean {"},{"type":"DELETE","lineNumber":632,"oldContent":"    }"},{"type":"DELETE","lineNumber":634,"oldContent":"    "},{"type":"DELETE","lineNumber":636,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":637,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":638,"oldContent":"     */"},{"type":"INSERT","lineNumber":616,"content":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":617,"content":"                    bitmap = bitmap,"},{"type":"DELETE","lineNumber":642,"oldContent":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":622,"content":"                )"},{"type":"INSERT","lineNumber":624,"content":"            } else {"},{"type":"INSERT","lineNumber":626,"content":"            }"},{"type":"DELETE","lineNumber":647,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":630,"content":"        }"},{"type":"INSERT","lineNumber":631,"content":"    }"},{"type":"INSERT","lineNumber":632,"content":"    "},{"type":"INSERT","lineNumber":633,"content":"    /**"},{"type":"INSERT","lineNumber":634,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":652,"oldContent":"                )"},{"type":"DELETE","lineNumber":654,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":657,"oldContent":"            }"},{"type":"DELETE","lineNumber":660,"oldContent":"        }"},{"type":"DELETE","lineNumber":662,"oldContent":"    }"},{"type":"DELETE","lineNumber":664,"oldContent":"    "},{"type":"DELETE","lineNumber":666,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":668,"content":"                val featureRoute = FeatureNavigationRoute(","oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":699,"oldContent":"    }"},{"type":"INSERT","lineNumber":677,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":701,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":702,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":679,"content":"            }"},{"type":"INSERT","lineNumber":680,"content":"        }"},{"type":"INSERT","lineNumber":681,"content":"    }"},{"type":"DELETE","lineNumber":704,"oldContent":"    "},{"type":"DELETE","lineNumber":713,"oldContent":"            }"},{"type":"INSERT","lineNumber":691,"content":"                "},{"type":"DELETE","lineNumber":725,"oldContent":"                "},{"type":"INSERT","lineNumber":720,"content":"    private var lastFrameProcessTime = 0L"},{"type":"INSERT","lineNumber":729,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":752,"oldContent":"    private var lastFrameProcessTime = 0L"},{"type":"INSERT","lineNumber":734,"content":"            return"},{"type":"INSERT","lineNumber":735,"content":"        }"},{"type":"DELETE","lineNumber":761,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":767,"oldContent":"            return"},{"type":"DELETE","lineNumber":769,"oldContent":"        }"},{"type":"INSERT","lineNumber":748,"content":"                Log.d(TAG, \"Frame size: ${frame.rows()}x${frame.cols()}\")"},{"type":"INSERT","lineNumber":751,"content":"                    // Debug: Prüfe Status der FeatureMatchingEngine"},{"type":"INSERT","lineNumber":752,"content":"                    Log.d(TAG, \"FeatureMatchingEngine Debug Info:\")"},{"type":"INSERT","lineNumber":753,"content":"                    Log.d(TAG, featureMatchingEngine!!.getDebugInfo())"},{"type":"INSERT","lineNumber":754,"content":"                    "},{"type":"DELETE","lineNumber":779,"oldContent":"                Log.d(TAG, \"Frame size: ${frame.rows()}x${frame.cols()}\")"},{"type":"DELETE","lineNumber":782,"oldContent":"                    // Debug: Prüfe Status der FeatureMatchingEngine"},{"type":"DELETE","lineNumber":784,"oldContent":"                    Log.d(TAG, \"FeatureMatchingEngine Debug Info:\")"},{"type":"DELETE","lineNumber":786,"oldContent":"                    Log.d(TAG, featureMatchingEngine!!.getDebugInfo())"},{"type":"DELETE","lineNumber":788,"oldContent":"                    "},{"type":"INSERT","lineNumber":771,"content":"                    // Debug: Zeige warum keine Matches gefunden wurden"},{"type":"INSERT","lineNumber":772,"content":"                    if (featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":773,"content":"                        val debugInfo = featureMatchingEngine!!.getDebugInfo()"},{"type":"INSERT","lineNumber":774,"content":"                        if (debugInfo.contains(\"Größe: 0\")) {"},{"type":"INSERT","lineNumber":775,"content":"                            Log.w(TAG, \"❌ Keine Landmark-Features geladen - das ist der Grund für fehlende Matches!\")"},{"type":"INSERT","lineNumber":776,"content":"                        }"},{"type":"INSERT","lineNumber":777,"content":"                    }"},{"type":"INSERT","lineNumber":782,"content":"                Log.e(TAG, \"Exception details: \", e)"},{"type":"INSERT","lineNumber":783,"content":"                _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":784,"content":"            }"},{"type":"INSERT","lineNumber":785,"content":"        }"},{"type":"INSERT","lineNumber":786,"content":"    }"},{"type":"DELETE","lineNumber":801,"oldContent":"                    // Debug: Zeige warum keine Matches gefunden wurden"},{"type":"DELETE","lineNumber":802,"oldContent":"                    if (featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":804,"oldContent":"                        val debugInfo = featureMatchingEngine!!.getDebugInfo()"},{"type":"DELETE","lineNumber":805,"oldContent":"                        if (debugInfo.contains(\"Größe: 0\")) {"},{"type":"DELETE","lineNumber":807,"oldContent":"                            Log.w(TAG, \"❌ Keine Landmark-Features geladen - das ist der Grund für fehlende Matches!\")"},{"type":"DELETE","lineNumber":809,"oldContent":"                        }"},{"type":"DELETE","lineNumber":811,"oldContent":"                    }"},{"type":"DELETE","lineNumber":815,"oldContent":"                Log.e(TAG, \"Exception details: \", e)"},{"type":"DELETE","lineNumber":816,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":818,"oldContent":"            }"},{"type":"DELETE","lineNumber":819,"oldContent":"        }"},{"type":"INSERT","lineNumber":798,"content":"        "},{"type":"DELETE","lineNumber":821,"oldContent":"    }"},{"type":"INSERT","lineNumber":803,"content":"    "},{"type":"DELETE","lineNumber":833,"oldContent":"        "},{"type":"DELETE","lineNumber":837,"oldContent":"    "},{"type":"INSERT","lineNumber":820,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":821,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":822,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":823,"content":"        "},{"type":"INSERT","lineNumber":824,"content":"        if (currentStep < totalSteps) {"},{"type":"INSERT","lineNumber":825,"content":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"INSERT","lineNumber":830,"content":"    }"},{"type":"INSERT","lineNumber":831,"content":"    "},{"type":"DELETE","lineNumber":848,"oldContent":"        for (pathItem in currentRoute.route.path) {"},{"type":"DELETE","lineNumber":849,"oldContent":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":833,"content":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":834,"content":"     */"},{"type":"DELETE","lineNumber":852,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":854,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":855,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":856,"oldContent":"        "},{"type":"DELETE","lineNumber":857,"oldContent":"        if (currentStep < totalSteps) {"},{"type":"DELETE","lineNumber":859,"oldContent":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"DELETE","lineNumber":864,"oldContent":"    }"},{"type":"INSERT","lineNumber":844,"content":"    }"},{"type":"DELETE","lineNumber":867,"oldContent":"    "},{"type":"DELETE","lineNumber":869,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":847,"content":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":877,"oldContent":"    }"},{"type":"DELETE","lineNumber":879,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":880,"oldContent":"    "},{"type":"DELETE","lineNumber":881,"oldContent":"    /**"},{"type":"DELETE","lineNumber":882,"oldContent":"     */"},{"type":"DELETE","lineNumber":883,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":886,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":890,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":892,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":893,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":894,"oldContent":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":862,"content":"    }"},{"type":"INSERT","lineNumber":863,"content":"    "},{"type":"INSERT","lineNumber":864,"content":"    /**"},{"type":"DELETE","lineNumber":896,"oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":866,"content":"     */"},{"type":"DELETE","lineNumber":899,"oldContent":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"DELETE","lineNumber":902,"oldContent":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":905,"oldContent":"            appendLine(\"=== Ende Status ===\")"},{"type":"DELETE","lineNumber":907,"oldContent":"    }"},{"type":"INSERT","lineNumber":875,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":876,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":877,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":878,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"INSERT","lineNumber":879,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":880,"content":"            }"},{"type":"INSERT","lineNumber":881,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":882,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":883,"content":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"INSERT","lineNumber":884,"content":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":885,"content":"            appendLine(\"=== Ende Status ===\")"},{"type":"INSERT","lineNumber":886,"content":"        }"},{"type":"INSERT","lineNumber":887,"content":"    }"},{"type":"INSERT","lineNumber":889,"content":"    /**"},{"type":"INSERT","lineNumber":890,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":891,"content":"     */"},{"type":"INSERT","lineNumber":894,"content":"        try {"},{"type":"DELETE","lineNumber":914,"oldContent":"            }"},{"type":"DELETE","lineNumber":919,"oldContent":"        }"},{"type":"DELETE","lineNumber":922,"oldContent":"    /**"},{"type":"DELETE","lineNumber":923,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":925,"oldContent":"     */"},{"type":"INSERT","lineNumber":904,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":905,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":906,"content":"            "},{"type":"INSERT","lineNumber":907,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":908,"content":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":928,"oldContent":"        try {"},{"type":"INSERT","lineNumber":911,"content":"                    "},{"type":"DELETE","lineNumber":937,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":938,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":940,"oldContent":"            "},{"type":"DELETE","lineNumber":941,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":943,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":946,"oldContent":"                    "},{"type":"INSERT","lineNumber":924,"content":"    "},{"type":"INSERT","lineNumber":925,"content":"    /**"},{"type":"DELETE","lineNumber":957,"oldContent":"    "},{"type":"DELETE","lineNumber":959,"oldContent":"    /**"},{"type":"INSERT","lineNumber":944,"content":"            "},{"type":"DELETE","lineNumber":971,"oldContent":"            "},{"type":"INSERT","lineNumber":959,"content":"    "},{"type":"DELETE","lineNumber":984,"oldContent":"    "},{"type":"DELETE","lineNumber":985,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":987,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":989,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":991,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":993,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":995,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":997,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"DELETE","lineNumber":999,"oldContent":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":1001,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":1003,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":1005,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":1007,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":973,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":974,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":975,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":976,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":977,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":978,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":979,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":980,"content":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":1010,"oldContent":"                        )"},{"type":"DELETE","lineNumber":1011,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1012,"oldContent":"                }"},{"type":"DELETE","lineNumber":1013,"oldContent":"            }"},{"type":"DELETE","lineNumber":1014,"oldContent":"            "},{"type":"DELETE","lineNumber":1015,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":1018,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":1021,"oldContent":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":1023,"oldContent":"            }"},{"type":"DELETE","lineNumber":1025,"oldContent":"            "},{"type":"DELETE","lineNumber":1032,"oldContent":"            routeLandmarks"},{"type":"INSERT","lineNumber":998,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":999,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":1000,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":1001,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":1002,"content":"                            )"},{"type":"INSERT","lineNumber":1003,"content":"                        )"},{"type":"INSERT","lineNumber":1004,"content":"                    }"},{"type":"INSERT","lineNumber":1005,"content":"                }"},{"type":"INSERT","lineNumber":1006,"content":"            }"},{"type":"INSERT","lineNumber":1007,"content":"            "},{"type":"INSERT","lineNumber":1008,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":1009,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1010,"content":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":1011,"content":"            }"},{"type":"INSERT","lineNumber":1012,"content":"            "},{"type":"INSERT","lineNumber":1013,"content":"            routeLandmarks"},{"type":"DELETE","lineNumber":1038,"oldContent":"                            )"},{"type":"INSERT","lineNumber":1042,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":1053,"content":"     */"},{"type":"DELETE","lineNumber":1077,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":1088,"oldContent":"     */"},{"type":"INSERT","lineNumber":1067,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1068,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":1069,"content":"    }"},{"type":"INSERT","lineNumber":1070,"content":"    "},{"type":"INSERT","lineNumber":1071,"content":"    /**"},{"type":"INSERT","lineNumber":1072,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":1073,"content":"     */"},{"type":"DELETE","lineNumber":1099,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1101,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":1102,"oldContent":"    }"},{"type":"DELETE","lineNumber":1104,"oldContent":"    "},{"type":"DELETE","lineNumber":1105,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1106,"oldContent":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":1108,"oldContent":"     */"},{"type":"INSERT","lineNumber":1086,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":1088,"content":""},{"type":"INSERT","lineNumber":1089,"content":"    /**"},{"type":"INSERT","lineNumber":1091,"content":"     */"},{"type":"INSERT","lineNumber":1093,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1095,"content":"        "},{"type":"INSERT","lineNumber":1096,"content":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"INSERT","lineNumber":1097,"content":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":1098,"content":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"INSERT","lineNumber":1099,"content":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":1100,"content":"        } else {"},{"type":"INSERT","lineNumber":1101,"content":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1102,"content":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"INSERT","lineNumber":1103,"content":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":1104,"content":"        }"},{"type":"INSERT","lineNumber":1110,"content":"    }"},{"type":"DELETE","lineNumber":1119,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":1121,"oldContent":""},{"type":"DELETE","lineNumber":1123,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1125,"oldContent":"     */"},{"type":"DELETE","lineNumber":1126,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1115,"content":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":1128,"oldContent":"        "},{"type":"DELETE","lineNumber":1129,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":1130,"oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":1132,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":1133,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":1134,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1136,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"DELETE","lineNumber":1137,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":1138,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":1140,"oldContent":"        }"},{"type":"DELETE","lineNumber":1145,"oldContent":"    }"},{"type":"DELETE","lineNumber":1150,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":1177,"oldContent":"}"},{"type":"INSERT","lineNumber":1154,"content":"            }"},{"type":"INSERT","lineNumber":1155,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1156,"content":"            Log.e(TAG, \"Fehler beim Ermitteln des Startpunkts: ${e.message}\")"},{"type":"INSERT","lineNumber":1157,"content":"            \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":1158,"content":"        }"},{"type":"DELETE","lineNumber":1179,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1180,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1182,"oldContent":"    }"},{"type":"DELETE","lineNumber":1183,"oldContent":"    "},{"type":"DELETE","lineNumber":1184,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":1185,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1186,"oldContent":"     */"},{"type":"DELETE","lineNumber":1188,"oldContent":"    }"},{"type":"DELETE","lineNumber":1189,"oldContent":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1190,"oldContent":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"DELETE","lineNumber":1191,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":1192,"oldContent":"    fun getRouteDescription(): String {"},{"type":"DELETE","lineNumber":1193,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1194,"oldContent":"    "},{"type":"DELETE","lineNumber":1195,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1196,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1197,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"DELETE","lineNumber":1198,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1162,"content":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1163,"content":"     */"},{"type":"DELETE","lineNumber":1200,"oldContent":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"DELETE","lineNumber":1201,"oldContent":"            if (summary.buildings.isNotEmpty()) {"},{"type":"DELETE","lineNumber":1202,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1165,"content":"        return try {"},{"type":"INSERT","lineNumber":1166,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1167,"content":"            if (route != null && route.route.path.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1168,"content":"                // Letzter Schritt der Route"},{"type":"INSERT","lineNumber":1169,"content":"                val lastPathItem = route.route.path.last()"},{"type":"INSERT","lineNumber":1170,"content":"                val lastRoutePart = lastPathItem.routeParts.lastOrNull()"},{"type":"INSERT","lineNumber":1171,"content":"                "},{"type":"INSERT","lineNumber":1172,"content":"                // Versuche verschiedene Quellen für den Endpunkt"},{"type":"INSERT","lineNumber":1173,"content":"                val endPoint = when {"},{"type":"INSERT","lineNumber":1174,"content":"                    // 1. Aus der letzten Anweisung"},{"type":"INSERT","lineNumber":1175,"content":"                    !lastRoutePart?.instructionDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1176,"content":"                        extractLocationFromInstruction(lastRoutePart!!.instructionDe!!)"},{"type":"INSERT","lineNumber":1177,"content":"                    }"},{"type":"INSERT","lineNumber":1178,"content":"                    !lastRoutePart?.instructionEn.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1204,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1206,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1208,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1210,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1212,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1214,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1216,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1218,"oldContent":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1189,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1190,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1191,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1193,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1194,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1195,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1196,"content":"                    }"},{"type":"INSERT","lineNumber":1197,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1198,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1199,"content":"                    }"},{"type":"DELETE","lineNumber":1223,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1232,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1267,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1255,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1256,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1288,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1290,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1314,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":1292,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":1317,"oldContent":"            }"},{"type":"DELETE","lineNumber":1319,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1321,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"DELETE","lineNumber":1323,"oldContent":"            0"},{"type":"DELETE","lineNumber":1325,"oldContent":"        }"},{"type":"DELETE","lineNumber":1327,"oldContent":"    }"},{"type":"DELETE","lineNumber":1329,"oldContent":"    "},{"type":"DELETE","lineNumber":1331,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1333,"oldContent":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"DELETE","lineNumber":1335,"oldContent":"     */"},{"type":"DELETE","lineNumber":1337,"oldContent":"    fun getRouteBuildings(): List<String> {"},{"type":"INSERT","lineNumber":1305,"content":"            }"},{"type":"INSERT","lineNumber":1306,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1307,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"INSERT","lineNumber":1308,"content":"            0"},{"type":"INSERT","lineNumber":1309,"content":"        }"},{"type":"INSERT","lineNumber":1310,"content":"    }"},{"type":"INSERT","lineNumber":1311,"content":"    "},{"type":"INSERT","lineNumber":1312,"content":"    /**"},{"type":"INSERT","lineNumber":1313,"content":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"INSERT","lineNumber":1314,"content":"     */"},{"type":"INSERT","lineNumber":1315,"content":"    fun getRouteBuildings(): List<String> {"},{"type":"DELETE","lineNumber":1355,"oldContent":"}"},{"type":"INSERT","lineNumber":1332,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1333,"content":"                buildingList"},{"type":"INSERT","lineNumber":1334,"content":"            } else {"},{"type":"INSERT","lineNumber":1335,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1336,"content":"            }"},{"type":"INSERT","lineNumber":1337,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1338,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Gebäude: ${e.message}\")"},{"type":"INSERT","lineNumber":1339,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1340,"content":"        }"},{"type":"DELETE","lineNumber":1357,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1358,"oldContent":"     */"},{"type":"DELETE","lineNumber":1359,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1361,"oldContent":"    }"},{"type":"DELETE","lineNumber":1362,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1363,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1364,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":1365,"oldContent":"        "},{"type":"DELETE","lineNumber":1366,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1367,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1369,"oldContent":"    "},{"type":"DELETE","lineNumber":1370,"oldContent":"        }"},{"type":"DELETE","lineNumber":1371,"oldContent":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1372,"oldContent":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"DELETE","lineNumber":1373,"oldContent":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"DELETE","lineNumber":1374,"oldContent":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1344,"content":"     * Gibt die Stockwerke zurück, durch die die Route führt"},{"type":"DELETE","lineNumber":1376,"oldContent":"}"},{"type":"DELETE","lineNumber":1377,"oldContent":""},{"type":"DELETE","lineNumber":1378,"oldContent":"        }"},{"type":"INSERT","lineNumber":1346,"content":"    fun getRouteFloors(): List<String> {"},{"type":"INSERT","lineNumber":1347,"content":"        return try {"},{"type":"INSERT","lineNumber":1348,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1349,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1350,"content":"                val floors = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1351,"content":"                route.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":1352,"content":"                    pathItem.levelInfo?.let { levelInfo ->"},{"type":"INSERT","lineNumber":1353,"content":"                        val floorName = levelInfo.storeyNameDe "},{"type":"INSERT","lineNumber":1354,"content":"                            ?: levelInfo.storeyName "},{"type":"DELETE","lineNumber":1383,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1389,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1394,"oldContent":"                buildings = getRouteBuildings(),"},{"type":"DELETE","lineNumber":1396,"oldContent":"                floors = getRouteFloors(),"},{"type":"DELETE","lineNumber":1398,"oldContent":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1400,"oldContent":"            )"},{"type":"DELETE","lineNumber":1402,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1404,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1405,"oldContent":"            RouteSummary("},{"type":"INSERT","lineNumber":1373,"content":"        }"},{"type":"INSERT","lineNumber":1374,"content":"    }"},{"type":"DELETE","lineNumber":1409,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1378,"content":"     */"},{"type":"DELETE","lineNumber":1411,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1415,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1418,"oldContent":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1386,"content":"                buildings = getRouteBuildings(),"},{"type":"INSERT","lineNumber":1387,"content":"                floors = getRouteFloors(),"},{"type":"INSERT","lineNumber":1388,"content":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1390,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1391,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"INSERT","lineNumber":1392,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1393,"content":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1394,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1395,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":1396,"content":"                estimatedTime = 0,"},{"type":"INSERT","lineNumber":1397,"content":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":1398,"content":"                floors = emptyList(),"},{"type":"INSERT","lineNumber":1399,"content":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1400,"content":"            )"},{"type":"DELETE","lineNumber":1430,"oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":1431,"oldContent":"                buildings = emptyList(),"},{"type":"DELETE","lineNumber":1433,"oldContent":"                floors = emptyList(),"},{"type":"INSERT","lineNumber":1412,"content":"            }"},{"type":"DELETE","lineNumber":1440,"oldContent":"}"},{"type":"DELETE","lineNumber":1441,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1442,"oldContent":"     */"},{"type":"INSERT","lineNumber":1418,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1419,"content":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"INSERT","lineNumber":1421,"content":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1422,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1423,"content":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"INSERT","lineNumber":1424,"content":"            }"},{"type":"INSERT","lineNumber":1425,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1426,"content":"    }"},{"type":"INSERT","lineNumber":1427,"content":"    "},{"type":"INSERT","lineNumber":1428,"content":"    /**"},{"type":"DELETE","lineNumber":1447,"oldContent":"            }"},{"type":"DELETE","lineNumber":1453,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"DELETE","lineNumber":1454,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1456,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"INSERT","lineNumber":1438,"content":"        }"},{"type":"DELETE","lineNumber":1459,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1460,"oldContent":"    }"},{"type":"DELETE","lineNumber":1462,"oldContent":"    "},{"type":"DELETE","lineNumber":1463,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1464,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1465,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1466,"oldContent":"    "},{"type":"DELETE","lineNumber":1467,"oldContent":"        }"},{"type":"DELETE","lineNumber":1468,"oldContent":"    }"},{"type":"DELETE","lineNumber":1469,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1470,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1471,"oldContent":"     */"},{"type":"DELETE","lineNumber":1473,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1475,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1477,"oldContent":"    }"},{"type":"DELETE","lineNumber":1478,"oldContent":"        }"},{"type":"DELETE","lineNumber":1479,"oldContent":"            0f"},{"type":"INSERT","lineNumber":1445,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1446,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1481,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":1450,"content":"        } else {"},{"type":"INSERT","lineNumber":1451,"content":"            0f"},{"type":"INSERT","lineNumber":1452,"content":"        }"},{"type":"INSERT","lineNumber":1453,"content":"    }"},{"type":"INSERT","lineNumber":1454,"content":"    "},{"type":"INSERT","lineNumber":1455,"content":"    /**"},{"type":"INSERT","lineNumber":1456,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1457,"content":"     */"},{"type":"INSERT","lineNumber":1458,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1459,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1460,"content":"    }"},{"type":"INSERT","lineNumber":1461,"content":""},{"type":"INSERT","lineNumber":1462,"content":"}"}]},{"timestamp":1754923930368,"changes":[{"type":"MODIFY","lineNumber":78,"content":"    private val _isFeatureMappingEnabled = MutableStateFlow(false)","oldContent":""},{"type":"MODIFY","lineNumber":122,"content":"                    val routeData = routeRepository?.getRouteFromAssets(\"models/final-route.json\")","oldContent":"    }"},{"type":"DELETE","lineNumber":225,"oldContent":"    }"},{"type":"DELETE","lineNumber":226,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":227,"oldContent":"    /**"},{"type":"DELETE","lineNumber":228,"oldContent":"    }"},{"type":"DELETE","lineNumber":229,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":225,"content":"                }"},{"type":"INSERT","lineNumber":226,"content":"                "},{"type":"INSERT","lineNumber":227,"content":"                // Zusätzliche Landmarks aus landmarks-Array"},{"type":"INSERT","lineNumber":228,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":229,"content":"                    landmark.id?.let { landmarkId ->"},{"type":"INSERT","lineNumber":286,"content":"                // Feature-Matching Engine initialisieren"},{"type":"DELETE","lineNumber":287,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"MODIFY","lineNumber":291,"content":"                arTrackingSystem = ARTrackingSystem()","oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"MODIFY","lineNumber":294,"content":"                // Engine initialisieren und Landmarks laden","oldContent":"                // Engine initialisieren und Landmarks laden"},{"type":"DELETE","lineNumber":305,"oldContent":"                }"},{"type":"MODIFY","lineNumber":307,"content":"                } else {","oldContent":"                "},{"type":"INSERT","lineNumber":308,"content":"                    Log.e(TAG, \"❌ FeatureMatchingEngine Initialisierung fehlgeschlagen\")"},{"type":"INSERT","lineNumber":309,"content":"                    _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":310,"content":"                }"},{"type":"INSERT","lineNumber":311,"content":"                "},{"type":"DELETE","lineNumber":311,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":314,"oldContent":"                    Log.e(TAG, \"❌ FeatureMatchingEngine Initialisierung fehlgeschlagen\")"},{"type":"DELETE","lineNumber":316,"oldContent":"                    _isFeatureMappingEnabled.value = false"},{"type":"DELETE","lineNumber":318,"oldContent":"                _isFeatureMappingEnabled.value = false"},{"type":"DELETE","lineNumber":320,"oldContent":"            }"},{"type":"DELETE","lineNumber":322,"oldContent":"        }"},{"type":"INSERT","lineNumber":321,"content":"                _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":322,"content":"            }"},{"type":"INSERT","lineNumber":323,"content":"        }"},{"type":"MODIFY","lineNumber":328,"content":"     */","oldContent":"     */"},{"type":"MODIFY","lineNumber":334,"content":"                    Log.w(TAG, \"❌ FeatureMatchingEngine nicht initialisiert\")","oldContent":"                    Log.w(TAG, \"❌ FeatureMatchingEngine nicht initialisiert\")"},{"type":"INSERT","lineNumber":336,"content":"                }"},{"type":"INSERT","lineNumber":338,"content":"                Log.i(TAG, \"✅ FeatureMatchingEngine ist verfügbar\")"},{"type":"INSERT","lineNumber":339,"content":"                "},{"type":"DELETE","lineNumber":338,"oldContent":"                }"},{"type":"DELETE","lineNumber":340,"oldContent":"                Log.i(TAG, \"✅ FeatureMatchingEngine ist verfügbar\")"},{"type":"DELETE","lineNumber":342,"oldContent":"                "},{"type":"DELETE","lineNumber":351,"oldContent":"                                routePart.landmarks?.forEachIndexed { lIndex, landmark ->"},{"type":"DELETE","lineNumber":352,"oldContent":"                                    Log.w(TAG, \"    Landmark $lIndex: id=${landmark.id}\")"},{"type":"DELETE","lineNumber":353,"oldContent":"                                }"},{"type":"DELETE","lineNumber":354,"oldContent":"                            }"},{"type":"DELETE","lineNumber":355,"oldContent":"                        }"},{"type":"DELETE","lineNumber":356,"oldContent":"                        Log.i(TAG, featureMatchingEngine!!.getDebugInfo())"},{"type":"DELETE","lineNumber":357,"oldContent":"                    } else {"},{"type":"DELETE","lineNumber":358,"oldContent":"                        Log.w(TAG, \"❌ Keine Landmarks zum Laden gefunden\")"},{"type":"DELETE","lineNumber":359,"oldContent":"                        Log.w(TAG, \"🔍 Prüfe Route-Struktur...\")"},{"type":"DELETE","lineNumber":360,"oldContent":"                        // Debug: Zeige Route-Struktur"},{"type":"DELETE","lineNumber":361,"oldContent":"                        currentRoute.route.path.forEachIndexed { index, pathItem ->"},{"type":"DELETE","lineNumber":362,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"DELETE","lineNumber":363,"oldContent":"                            Log.w(TAG, \"PathItem $index: ${pathItem.xmlName}\")"},{"type":"DELETE","lineNumber":364,"oldContent":"                            pathItem.routeParts.forEachIndexed { rpIndex, routePart ->"},{"type":"DELETE","lineNumber":365,"oldContent":"                                Log.w(TAG, \"  RoutePart $rpIndex: landmarkFromInstruction=${routePart.landmarkFromInstruction}\")"},{"type":"DELETE","lineNumber":366,"oldContent":"                    }"},{"type":"DELETE","lineNumber":367,"oldContent":"                    "},{"type":"DELETE","lineNumber":368,"oldContent":"                    // Feature-Mapping ist verfügbar wenn Landmarks geladen wurden"},{"type":"DELETE","lineNumber":369,"oldContent":"                    _isFeatureMappingEnabled.value = processedLandmarks.isNotEmpty()"},{"type":"DELETE","lineNumber":370,"oldContent":"                    "},{"type":"DELETE","lineNumber":371,"oldContent":"     */"},{"type":"DELETE","lineNumber":372,"oldContent":"                    Log.i(TAG, \"Landmarks für aktuelle Route erfolgreich geladen: ${processedLandmarks.size} Landmarks\")"},{"type":"DELETE","lineNumber":373,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":374,"oldContent":"                    "},{"type":"DELETE","lineNumber":375,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":376,"oldContent":"                    // Automatischer Feature-Matching Test"},{"type":"DELETE","lineNumber":377,"oldContent":"                    testFeatureMatchingWithLandmarkImage(context)"},{"type":"DELETE","lineNumber":379,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":380,"oldContent":"                    Log.w(TAG, \"Keine Route verfügbar für Landmark-Loading\")"},{"type":"DELETE","lineNumber":381,"oldContent":"                    _isFeatureMappingEnabled.value = false"},{"type":"DELETE","lineNumber":382,"oldContent":"                }"},{"type":"DELETE","lineNumber":383,"oldContent":"                "},{"type":"INSERT","lineNumber":353,"content":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"INSERT","lineNumber":361,"content":"     */"},{"type":"INSERT","lineNumber":362,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":363,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":366,"content":"                "},{"type":"DELETE","lineNumber":428,"oldContent":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":441,"oldContent":"    /**"},{"type":"INSERT","lineNumber":424,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":455,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":457,"oldContent":"                val saveResult = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":459,"oldContent":"                    bitmap = bitmap,"},{"type":"DELETE","lineNumber":461,"oldContent":"                    landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":463,"oldContent":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":435,"content":"    /**"},{"type":"DELETE","lineNumber":477,"oldContent":"}"},{"type":"INSERT","lineNumber":445,"content":"    ): Boolean {"},{"type":"DELETE","lineNumber":481,"oldContent":"            "},{"type":"DELETE","lineNumber":482,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":483,"oldContent":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":484,"oldContent":"            false"},{"type":"DELETE","lineNumber":485,"oldContent":"        }"},{"type":"INSERT","lineNumber":449,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":450,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":451,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":452,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":453,"content":"                    landmarkName = landmarkName,"},{"type":"DELETE","lineNumber":487,"oldContent":"    "},{"type":"DELETE","lineNumber":489,"oldContent":""},{"type":"DELETE","lineNumber":491,"oldContent":"    "},{"type":"DELETE","lineNumber":492,"oldContent":"        }"},{"type":"DELETE","lineNumber":493,"oldContent":""},{"type":"DELETE","lineNumber":494,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":495,"oldContent":"    "},{"type":"DELETE","lineNumber":496,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":457,"content":"                "},{"type":"INSERT","lineNumber":458,"content":"                when (saveResult) {"},{"type":"INSERT","lineNumber":459,"content":"                    is SaveResult.Success -> {"},{"type":"DELETE","lineNumber":499,"oldContent":"                            )"},{"type":"DELETE","lineNumber":500,"oldContent":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"DELETE","lineNumber":501,"oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":502,"oldContent":"            "},{"type":"DELETE","lineNumber":503,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":504,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":505,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":506,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":462,"content":"                    }"},{"type":"INSERT","lineNumber":463,"content":"                    is SaveResult.Error -> {"},{"type":"INSERT","lineNumber":464,"content":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"INSERT","lineNumber":465,"content":"                        false"},{"type":"INSERT","lineNumber":466,"content":"                    }"},{"type":"INSERT","lineNumber":467,"content":"                }"},{"type":"INSERT","lineNumber":468,"content":"            } else {"},{"type":"INSERT","lineNumber":472,"content":"            "},{"type":"INSERT","lineNumber":473,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":474,"content":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":475,"content":"            false"},{"type":"INSERT","lineNumber":476,"content":"        }"},{"type":"DELETE","lineNumber":514,"oldContent":"                    matches.take(2).forEach { match ->"},{"type":"INSERT","lineNumber":481,"content":""},{"type":"INSERT","lineNumber":482,"content":"    "},{"type":"DELETE","lineNumber":516,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":517,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":521,"oldContent":"     */"},{"type":"DELETE","lineNumber":522,"oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":487,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":524,"oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":527,"oldContent":"    "},{"type":"INSERT","lineNumber":496,"content":"    "},{"type":"INSERT","lineNumber":497,"content":""},{"type":"INSERT","lineNumber":498,"content":"    "},{"type":"DELETE","lineNumber":536,"oldContent":"     */"},{"type":"INSERT","lineNumber":502,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":503,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":538,"oldContent":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":542,"oldContent":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":543,"oldContent":"        "},{"type":"INSERT","lineNumber":508,"content":"     */"},{"type":"INSERT","lineNumber":509,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":510,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":511,"content":"    }"},{"type":"INSERT","lineNumber":512,"content":"    "},{"type":"DELETE","lineNumber":546,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":518,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":"     */"},{"type":"INSERT","lineNumber":524,"content":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":555,"oldContent":"                "},{"type":"DELETE","lineNumber":558,"oldContent":"     */"},{"type":"INSERT","lineNumber":528,"content":"            \"Storage-System nicht verfügbar\""},{"type":"INSERT","lineNumber":529,"content":"        }"},{"type":"DELETE","lineNumber":560,"oldContent":"            "},{"type":"INSERT","lineNumber":531,"content":"    "},{"type":"INSERT","lineNumber":535,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":568,"oldContent":"    "},{"type":"DELETE","lineNumber":573,"oldContent":"    /**"},{"type":"INSERT","lineNumber":546,"content":"                "},{"type":"DELETE","lineNumber":579,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":583,"oldContent":"    }"},{"type":"DELETE","lineNumber":585,"oldContent":"    "},{"type":"DELETE","lineNumber":588,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":590,"oldContent":"     */"},{"type":"DELETE","lineNumber":595,"oldContent":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":597,"oldContent":"    ): Boolean {"},{"type":"INSERT","lineNumber":562,"content":"    "},{"type":"DELETE","lineNumber":602,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":567,"content":"    /**"},{"type":"DELETE","lineNumber":604,"oldContent":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":572,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":609,"oldContent":"                )"},{"type":"DELETE","lineNumber":611,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":575,"content":"    }"},{"type":"INSERT","lineNumber":576,"content":"    "},{"type":"INSERT","lineNumber":578,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":579,"content":"     */"},{"type":"DELETE","lineNumber":614,"oldContent":"            }"},{"type":"DELETE","lineNumber":618,"oldContent":"        }"},{"type":"DELETE","lineNumber":619,"oldContent":"    }"},{"type":"INSERT","lineNumber":584,"content":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":585,"content":"    ): Boolean {"},{"type":"DELETE","lineNumber":621,"oldContent":"    "},{"type":"DELETE","lineNumber":622,"oldContent":"    /**"},{"type":"DELETE","lineNumber":624,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":589,"content":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":590,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":595,"content":"                )"},{"type":"INSERT","lineNumber":597,"content":"            } else {"},{"type":"INSERT","lineNumber":599,"content":"            }"},{"type":"INSERT","lineNumber":603,"content":"        }"},{"type":"INSERT","lineNumber":604,"content":"    }"},{"type":"INSERT","lineNumber":605,"content":"    "},{"type":"INSERT","lineNumber":606,"content":"    /**"},{"type":"INSERT","lineNumber":607,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":646,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"DELETE","lineNumber":655,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":658,"oldContent":"            }"},{"type":"DELETE","lineNumber":660,"oldContent":"        }"},{"type":"DELETE","lineNumber":662,"oldContent":"    }"},{"type":"DELETE","lineNumber":673,"oldContent":"                "},{"type":"INSERT","lineNumber":641,"content":"                val featureRoute = FeatureNavigationRoute("},{"type":"DELETE","lineNumber":681,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":649,"content":"                "},{"type":"INSERT","lineNumber":650,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":683,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":684,"oldContent":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":652,"content":"            }"},{"type":"INSERT","lineNumber":653,"content":"        }"},{"type":"INSERT","lineNumber":654,"content":"    }"},{"type":"INSERT","lineNumber":655,"content":"    "},{"type":"INSERT","lineNumber":656,"content":"    /**"},{"type":"INSERT","lineNumber":664,"content":"                "},{"type":"DELETE","lineNumber":698,"oldContent":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":707,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":713,"oldContent":"            return"},{"type":"DELETE","lineNumber":715,"oldContent":"        }"},{"type":"INSERT","lineNumber":693,"content":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":729,"oldContent":"                Log.d(TAG, \"Frame size: ${frame.rows()}x${frame.cols()}\")"},{"type":"DELETE","lineNumber":733,"oldContent":"                    // Debug: Prüfe Status der FeatureMatchingEngine"},{"type":"INSERT","lineNumber":702,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":735,"oldContent":"                    Log.d(TAG, \"FeatureMatchingEngine Debug Info:\")"},{"type":"DELETE","lineNumber":736,"oldContent":"                    Log.d(TAG, featureMatchingEngine!!.getDebugInfo())"},{"type":"DELETE","lineNumber":738,"oldContent":"                    "},{"type":"INSERT","lineNumber":707,"content":"            return"},{"type":"INSERT","lineNumber":708,"content":"        }"},{"type":"DELETE","lineNumber":753,"oldContent":"                    // Debug: Zeige warum keine Matches gefunden wurden"},{"type":"INSERT","lineNumber":721,"content":"                Log.d(TAG, \"Frame size: ${frame.rows()}x${frame.cols()}\")"},{"type":"DELETE","lineNumber":755,"oldContent":"                    if (featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":757,"oldContent":"                        val debugInfo = featureMatchingEngine!!.getDebugInfo()"},{"type":"INSERT","lineNumber":724,"content":"                    // Debug: Prüfe Status der FeatureMatchingEngine"},{"type":"INSERT","lineNumber":725,"content":"                    Log.d(TAG, \"FeatureMatchingEngine Debug Info:\")"},{"type":"INSERT","lineNumber":726,"content":"                    Log.d(TAG, featureMatchingEngine!!.getDebugInfo())"},{"type":"INSERT","lineNumber":727,"content":"                    "},{"type":"DELETE","lineNumber":759,"oldContent":"                        if (debugInfo.contains(\"Größe: 0\")) {"},{"type":"DELETE","lineNumber":761,"oldContent":"                            Log.w(TAG, \"❌ Keine Landmark-Features geladen - das ist der Grund für fehlende Matches!\")"},{"type":"DELETE","lineNumber":763,"oldContent":"                        }"},{"type":"DELETE","lineNumber":765,"oldContent":"                    }"},{"type":"DELETE","lineNumber":770,"oldContent":"                Log.e(TAG, \"Exception details: \", e)"},{"type":"DELETE","lineNumber":771,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":773,"oldContent":"            }"},{"type":"DELETE","lineNumber":774,"oldContent":"        }"},{"type":"DELETE","lineNumber":776,"oldContent":"    }"},{"type":"INSERT","lineNumber":744,"content":"                    // Debug: Zeige warum keine Matches gefunden wurden"},{"type":"INSERT","lineNumber":745,"content":"                    if (featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":746,"content":"                        val debugInfo = featureMatchingEngine!!.getDebugInfo()"},{"type":"INSERT","lineNumber":747,"content":"                        if (debugInfo.contains(\"Größe: 0\")) {"},{"type":"INSERT","lineNumber":748,"content":"                            Log.w(TAG, \"❌ Keine Landmark-Features geladen - das ist der Grund für fehlende Matches!\")"},{"type":"INSERT","lineNumber":749,"content":"                        }"},{"type":"INSERT","lineNumber":750,"content":"                    }"},{"type":"DELETE","lineNumber":787,"oldContent":"        "},{"type":"INSERT","lineNumber":755,"content":"                Log.e(TAG, \"Exception details: \", e)"},{"type":"INSERT","lineNumber":756,"content":"                _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":757,"content":"            }"},{"type":"INSERT","lineNumber":758,"content":"        }"},{"type":"INSERT","lineNumber":759,"content":"    }"},{"type":"DELETE","lineNumber":791,"oldContent":"    "},{"type":"DELETE","lineNumber":800,"oldContent":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":771,"content":"        "},{"type":"DELETE","lineNumber":802,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":803,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":805,"oldContent":"        "},{"type":"DELETE","lineNumber":807,"oldContent":"        if (currentStep < totalSteps) {"},{"type":"DELETE","lineNumber":809,"oldContent":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"INSERT","lineNumber":776,"content":"    "},{"type":"DELETE","lineNumber":815,"oldContent":"    }"},{"type":"DELETE","lineNumber":817,"oldContent":"    "},{"type":"DELETE","lineNumber":820,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":821,"oldContent":"     */"},{"type":"INSERT","lineNumber":793,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":794,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":795,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":796,"content":"        "},{"type":"INSERT","lineNumber":797,"content":"        if (currentStep < totalSteps) {"},{"type":"INSERT","lineNumber":798,"content":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"DELETE","lineNumber":831,"oldContent":"    }"},{"type":"DELETE","lineNumber":835,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":803,"content":"    }"},{"type":"INSERT","lineNumber":804,"content":"    "},{"type":"INSERT","lineNumber":806,"content":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":807,"content":"     */"},{"type":"DELETE","lineNumber":843,"oldContent":"    }"},{"type":"DELETE","lineNumber":845,"oldContent":"    "},{"type":"DELETE","lineNumber":847,"oldContent":"    /**"},{"type":"DELETE","lineNumber":849,"oldContent":"     */"},{"type":"INSERT","lineNumber":817,"content":"    }"},{"type":"INSERT","lineNumber":820,"content":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":857,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":859,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":861,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":862,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":864,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":865,"oldContent":"            }"},{"type":"DELETE","lineNumber":866,"oldContent":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"DELETE","lineNumber":867,"oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"DELETE","lineNumber":868,"oldContent":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"DELETE","lineNumber":869,"oldContent":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":871,"oldContent":"            appendLine(\"=== Ende Status ===\")"},{"type":"DELETE","lineNumber":873,"oldContent":"        }"},{"type":"DELETE","lineNumber":874,"oldContent":"    }"},{"type":"DELETE","lineNumber":877,"oldContent":"    /**"},{"type":"DELETE","lineNumber":879,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":880,"oldContent":"     */"},{"type":"DELETE","lineNumber":882,"oldContent":"        try {"},{"type":"INSERT","lineNumber":835,"content":"    }"},{"type":"INSERT","lineNumber":836,"content":"    "},{"type":"INSERT","lineNumber":837,"content":"    /**"},{"type":"INSERT","lineNumber":839,"content":"     */"},{"type":"DELETE","lineNumber":889,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":891,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":892,"oldContent":"            "},{"type":"DELETE","lineNumber":894,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":895,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":848,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":849,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":850,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":851,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"INSERT","lineNumber":852,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":853,"content":"            }"},{"type":"INSERT","lineNumber":854,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":855,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":856,"content":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"INSERT","lineNumber":857,"content":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":858,"content":"            appendLine(\"=== Ende Status ===\")"},{"type":"INSERT","lineNumber":859,"content":"        }"},{"type":"INSERT","lineNumber":860,"content":"    }"},{"type":"INSERT","lineNumber":862,"content":"    /**"},{"type":"INSERT","lineNumber":863,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":864,"content":"     */"},{"type":"DELETE","lineNumber":899,"oldContent":"                    "},{"type":"INSERT","lineNumber":867,"content":"        try {"},{"type":"DELETE","lineNumber":909,"oldContent":"    "},{"type":"DELETE","lineNumber":911,"oldContent":"    /**"},{"type":"INSERT","lineNumber":877,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":878,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":879,"content":"            "},{"type":"INSERT","lineNumber":880,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":881,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":884,"content":"                    "},{"type":"DELETE","lineNumber":924,"oldContent":"            "},{"type":"INSERT","lineNumber":897,"content":"    "},{"type":"INSERT","lineNumber":898,"content":"    /**"},{"type":"DELETE","lineNumber":938,"oldContent":"    "},{"type":"INSERT","lineNumber":917,"content":"            "},{"type":"DELETE","lineNumber":951,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":953,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":955,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":957,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":959,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":961,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":963,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"DELETE","lineNumber":965,"oldContent":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":932,"content":"    "},{"type":"DELETE","lineNumber":976,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":978,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":979,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":981,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":982,"oldContent":"                            )"},{"type":"DELETE","lineNumber":984,"oldContent":"                        )"},{"type":"DELETE","lineNumber":985,"oldContent":"                    }"},{"type":"DELETE","lineNumber":987,"oldContent":"                }"},{"type":"DELETE","lineNumber":988,"oldContent":"            }"},{"type":"DELETE","lineNumber":990,"oldContent":"            "},{"type":"DELETE","lineNumber":991,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":946,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":947,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":948,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":949,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":950,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":951,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":952,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":953,"content":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":993,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":995,"oldContent":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":996,"oldContent":"            }"},{"type":"DELETE","lineNumber":997,"oldContent":"            "},{"type":"DELETE","lineNumber":998,"oldContent":"            routeLandmarks"},{"type":"INSERT","lineNumber":971,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":972,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":973,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":974,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":975,"content":"                            )"},{"type":"INSERT","lineNumber":976,"content":"                        )"},{"type":"INSERT","lineNumber":977,"content":"                    }"},{"type":"INSERT","lineNumber":978,"content":"                }"},{"type":"INSERT","lineNumber":979,"content":"            }"},{"type":"INSERT","lineNumber":980,"content":"            "},{"type":"INSERT","lineNumber":981,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":982,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":983,"content":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":984,"content":"            }"},{"type":"INSERT","lineNumber":985,"content":"            "},{"type":"INSERT","lineNumber":986,"content":"            routeLandmarks"},{"type":"DELETE","lineNumber":1019,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":1031,"oldContent":"     */"},{"type":"INSERT","lineNumber":1015,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":1046,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1048,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":1050,"oldContent":"    }"},{"type":"DELETE","lineNumber":1052,"oldContent":"    "},{"type":"DELETE","lineNumber":1054,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1056,"oldContent":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":1058,"oldContent":"     */"},{"type":"INSERT","lineNumber":1026,"content":"     */"},{"type":"DELETE","lineNumber":1071,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":1074,"oldContent":""},{"type":"DELETE","lineNumber":1075,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1077,"oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1040,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1041,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":1042,"content":"    }"},{"type":"INSERT","lineNumber":1043,"content":"    "},{"type":"INSERT","lineNumber":1044,"content":"    /**"},{"type":"INSERT","lineNumber":1045,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":1047,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1081,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"DELETE","lineNumber":1084,"oldContent":"        "},{"type":"DELETE","lineNumber":1086,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":1088,"oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":1090,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":1092,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":1093,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1095,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"DELETE","lineNumber":1096,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":1097,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":1099,"oldContent":"        }"},{"type":"INSERT","lineNumber":1059,"content":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":1102,"oldContent":"    }"},{"type":"INSERT","lineNumber":1061,"content":""},{"type":"INSERT","lineNumber":1062,"content":"    /**"},{"type":"INSERT","lineNumber":1064,"content":"     */"},{"type":"INSERT","lineNumber":1066,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1068,"content":"        "},{"type":"INSERT","lineNumber":1069,"content":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"INSERT","lineNumber":1070,"content":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":1071,"content":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"INSERT","lineNumber":1072,"content":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":1073,"content":"        } else {"},{"type":"INSERT","lineNumber":1074,"content":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1075,"content":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"INSERT","lineNumber":1076,"content":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":1077,"content":"        }"},{"type":"DELETE","lineNumber":1108,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1083,"content":"    }"},{"type":"INSERT","lineNumber":1088,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1104,"content":"                    }"},{"type":"INSERT","lineNumber":1105,"content":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1106,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"INSERT","lineNumber":1107,"content":"                    }"},{"type":"INSERT","lineNumber":1108,"content":"                    // 2. Aus dem ersten Node"},{"type":"INSERT","lineNumber":1109,"content":"                    firstRoutePart?.nodes?.firstOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1110,"content":"                        firstRoutePart.nodes.firstOrNull()?.node?.name ?: \"Unbekannter Startpunkt\""},{"type":"INSERT","lineNumber":1111,"content":"                    }"},{"type":"INSERT","lineNumber":1112,"content":"                    // 3. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1113,"content":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1114,"content":"                        firstPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1115,"content":"                    }"},{"type":"INSERT","lineNumber":1116,"content":"                    !firstPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1117,"content":"                        firstPathItem.xmlName"},{"type":"INSERT","lineNumber":1118,"content":"                    }"},{"type":"INSERT","lineNumber":1119,"content":"                    else -> \"Startpunkt aus Route\""},{"type":"INSERT","lineNumber":1120,"content":"                }"},{"type":"INSERT","lineNumber":1121,"content":"                "},{"type":"INSERT","lineNumber":1122,"content":"                Log.d(TAG, \"Startpunkt aus JSON: $startPoint\")"},{"type":"INSERT","lineNumber":1123,"content":"                startPoint"},{"type":"INSERT","lineNumber":1124,"content":"            } else {"},{"type":"INSERT","lineNumber":1125,"content":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Startpunkt\")"},{"type":"INSERT","lineNumber":1126,"content":"                \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1132,"oldContent":""},{"type":"DELETE","lineNumber":1134,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1136,"oldContent":"     */"},{"type":"DELETE","lineNumber":1138,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1141,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1142,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1143,"oldContent":"        "},{"type":"INSERT","lineNumber":1133,"content":"    "},{"type":"INSERT","lineNumber":1134,"content":"    /**"},{"type":"DELETE","lineNumber":1145,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1147,"oldContent":"     */"},{"type":"DELETE","lineNumber":1148,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1137,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1150,"oldContent":"    }"},{"type":"DELETE","lineNumber":1152,"oldContent":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1154,"oldContent":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"DELETE","lineNumber":1156,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":1158,"oldContent":"    fun getRouteDescription(): String {"},{"type":"DELETE","lineNumber":1160,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1162,"oldContent":"    "},{"type":"DELETE","lineNumber":1164,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1166,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"DELETE","lineNumber":1168,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"DELETE","lineNumber":1170,"oldContent":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"DELETE","lineNumber":1172,"oldContent":"            if (summary.buildings.isNotEmpty()) {"},{"type":"DELETE","lineNumber":1175,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1176,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1177,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1178,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1179,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1180,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1181,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1182,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1183,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1184,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1185,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1186,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1187,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1188,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1162,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1163,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1164,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1166,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1167,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1168,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1169,"content":"                    }"},{"type":"INSERT","lineNumber":1170,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1171,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1172,"content":"                    }"},{"type":"DELETE","lineNumber":1209,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1233,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1205,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1235,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1228,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1229,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1269,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1283,"oldContent":"            }"},{"type":"DELETE","lineNumber":1285,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1287,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"DELETE","lineNumber":1289,"oldContent":"            0"},{"type":"DELETE","lineNumber":1291,"oldContent":"        }"},{"type":"DELETE","lineNumber":1293,"oldContent":"    }"},{"type":"DELETE","lineNumber":1295,"oldContent":"    "},{"type":"DELETE","lineNumber":1297,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1299,"oldContent":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"DELETE","lineNumber":1301,"oldContent":"     */"},{"type":"DELETE","lineNumber":1302,"oldContent":"    fun getRouteBuildings(): List<String> {"},{"type":"INSERT","lineNumber":1265,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":1312,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1314,"oldContent":"                buildingList"},{"type":"DELETE","lineNumber":1315,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1317,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":1318,"oldContent":"            }"},{"type":"DELETE","lineNumber":1320,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1321,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Gebäude: ${e.message}\")"},{"type":"DELETE","lineNumber":1323,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1324,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1278,"content":"            }"},{"type":"INSERT","lineNumber":1279,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1280,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"INSERT","lineNumber":1281,"content":"            0"},{"type":"INSERT","lineNumber":1283,"content":"    }"},{"type":"INSERT","lineNumber":1284,"content":"    "},{"type":"INSERT","lineNumber":1285,"content":"    /**"},{"type":"INSERT","lineNumber":1286,"content":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"INSERT","lineNumber":1287,"content":"     */"},{"type":"INSERT","lineNumber":1288,"content":"    fun getRouteBuildings(): List<String> {"},{"type":"INSERT","lineNumber":1289,"content":"        return try {"},{"type":"DELETE","lineNumber":1330,"oldContent":"     * Gibt die Stockwerke zurück, durch die die Route führt"},{"type":"DELETE","lineNumber":1333,"oldContent":"    fun getRouteFloors(): List<String> {"},{"type":"DELETE","lineNumber":1335,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1297,"content":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1298,"content":"                    "},{"type":"INSERT","lineNumber":1299,"content":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1300,"content":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1301,"content":"                    }"},{"type":"INSERT","lineNumber":1302,"content":"                }"},{"type":"INSERT","lineNumber":1303,"content":"                "},{"type":"INSERT","lineNumber":1304,"content":"                val buildingList = buildings.toList()"},{"type":"INSERT","lineNumber":1305,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1306,"content":"                buildingList"},{"type":"INSERT","lineNumber":1307,"content":"            } else {"},{"type":"INSERT","lineNumber":1308,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1309,"content":"            }"},{"type":"INSERT","lineNumber":1310,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1311,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Gebäude: ${e.message}\")"},{"type":"INSERT","lineNumber":1312,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1313,"content":"        }"},{"type":"INSERT","lineNumber":1315,"content":"    "},{"type":"INSERT","lineNumber":1316,"content":"    /**"},{"type":"INSERT","lineNumber":1317,"content":"     * Gibt die Stockwerke zurück, durch die die Route führt"},{"type":"INSERT","lineNumber":1318,"content":"     */"},{"type":"INSERT","lineNumber":1319,"content":"    fun getRouteFloors(): List<String> {"},{"type":"INSERT","lineNumber":1320,"content":"        return try {"},{"type":"DELETE","lineNumber":1338,"oldContent":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1340,"oldContent":"            summary.floors.isNotEmpty() -> \"Route über ${summary.floors.size} Stockwerk${if (summary.floors.size > 1) \"e\" else \"\"}\""},{"type":"DELETE","lineNumber":1342,"oldContent":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"DELETE","lineNumber":1344,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":1346,"oldContent":"     */"},{"type":"DELETE","lineNumber":1348,"oldContent":"}"},{"type":"DELETE","lineNumber":1350,"oldContent":""},{"type":"DELETE","lineNumber":1351,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1352,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1353,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1354,"oldContent":"        }"},{"type":"DELETE","lineNumber":1355,"oldContent":"    }"},{"type":"DELETE","lineNumber":1356,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1357,"oldContent":"     */"},{"type":"DELETE","lineNumber":1364,"oldContent":"                buildings = getRouteBuildings(),"},{"type":"DELETE","lineNumber":1366,"oldContent":"                floors = getRouteFloors(),"},{"type":"DELETE","lineNumber":1368,"oldContent":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1370,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1372,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1374,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1376,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1378,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1379,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1381,"oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":1382,"oldContent":"                buildings = emptyList(),"},{"type":"DELETE","lineNumber":1384,"oldContent":"                floors = emptyList(),"},{"type":"DELETE","lineNumber":1385,"oldContent":"                totalSteps = 0"},{"type":"DELETE","lineNumber":1387,"oldContent":"            )"},{"type":"INSERT","lineNumber":1346,"content":"        }"},{"type":"INSERT","lineNumber":1347,"content":"    }"},{"type":"INSERT","lineNumber":1351,"content":"     */"},{"type":"DELETE","lineNumber":1394,"oldContent":"            }"},{"type":"DELETE","lineNumber":1400,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1401,"oldContent":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"INSERT","lineNumber":1359,"content":"                buildings = getRouteBuildings(),"},{"type":"INSERT","lineNumber":1360,"content":"                floors = getRouteFloors(),"},{"type":"INSERT","lineNumber":1361,"content":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1404,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1363,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1364,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"INSERT","lineNumber":1365,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1366,"content":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1367,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1368,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":1369,"content":"                estimatedTime = 0,"},{"type":"INSERT","lineNumber":1370,"content":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":1371,"content":"                floors = emptyList(),"},{"type":"INSERT","lineNumber":1372,"content":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1373,"content":"            )"},{"type":"DELETE","lineNumber":1406,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1408,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"DELETE","lineNumber":1410,"oldContent":"            }"},{"type":"DELETE","lineNumber":1412,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1379,"content":"     */"},{"type":"INSERT","lineNumber":1380,"content":"    fun getFormattedRouteInfo(): String {"},{"type":"INSERT","lineNumber":1381,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1382,"content":"        return buildString {"},{"type":"INSERT","lineNumber":1383,"content":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1384,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1385,"content":"            }"},{"type":"INSERT","lineNumber":1386,"content":"            if (summary.estimatedTime > 0) {"},{"type":"INSERT","lineNumber":1387,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1388,"content":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"INSERT","lineNumber":1389,"content":"            }"},{"type":"INSERT","lineNumber":1390,"content":"            if (summary.buildings.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1391,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1392,"content":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"INSERT","lineNumber":1393,"content":"            }"},{"type":"INSERT","lineNumber":1394,"content":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1395,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1396,"content":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"INSERT","lineNumber":1397,"content":"            }"},{"type":"INSERT","lineNumber":1398,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1415,"oldContent":""},{"type":"DELETE","lineNumber":1417,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1419,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1420,"oldContent":"    }"},{"type":"DELETE","lineNumber":1421,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1422,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1423,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":1424,"oldContent":"        "},{"type":"DELETE","lineNumber":1425,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1402,"content":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"INSERT","lineNumber":1403,"content":"     */"},{"type":"INSERT","lineNumber":1404,"content":"    fun getRouteDescription(): String {"},{"type":"INSERT","lineNumber":1405,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1406,"content":"        return when {"},{"type":"INSERT","lineNumber":1407,"content":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"INSERT","lineNumber":1408,"content":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"INSERT","lineNumber":1409,"content":"            summary.floors.isNotEmpty() -> \"Route über ${summary.floors.size} Stockwerk${if (summary.floors.size > 1) \"e\" else \"\"}\""},{"type":"INSERT","lineNumber":1410,"content":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1428,"oldContent":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1429,"oldContent":"            }"},{"type":"DELETE","lineNumber":1430,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1431,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1413,"content":"    "},{"type":"INSERT","lineNumber":1414,"content":"    /**"},{"type":"INSERT","lineNumber":1415,"content":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"INSERT","lineNumber":1417,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1418,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1434,"oldContent":""},{"type":"DELETE","lineNumber":1435,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1436,"oldContent":"     */"},{"type":"INSERT","lineNumber":1420,"content":"        "},{"type":"INSERT","lineNumber":1421,"content":"        return if (totalSteps > 0) {"},{"type":"INSERT","lineNumber":1422,"content":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1438,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1440,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1442,"oldContent":"     */"},{"type":"DELETE","lineNumber":1446,"oldContent":"    "},{"type":"DELETE","lineNumber":1449,"oldContent":"    }"},{"type":"DELETE","lineNumber":1451,"oldContent":"    "},{"type":"DELETE","lineNumber":1455,"oldContent":""},{"type":"DELETE","lineNumber":1457,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"}]},{"timestamp":1754923957889,"changes":[{"type":"INSERT","lineNumber":4,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":6,"oldContent":"import android.util.Log"},{"type":"MODIFY","lineNumber":200,"content":"     * Konvertiert RouteData zu NavigationRoute und extrahiert Landmark-IDs","oldContent":"    "},{"type":"DELETE","lineNumber":206,"oldContent":"                    category = \"Training\""},{"type":"DELETE","lineNumber":207,"oldContent":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":206,"content":"        // Sammle alle Landmark-IDs für Feature-Matching"},{"type":"INSERT","lineNumber":207,"content":"        val allLandmarkIds = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":218,"oldContent":"            steps = steps,"},{"type":"DELETE","lineNumber":219,"oldContent":"            description = \"Generated from final-route.json\","},{"type":"DELETE","lineNumber":220,"oldContent":"            id = \"route_${System.currentTimeMillis()}\","},{"type":"DELETE","lineNumber":221,"oldContent":"        "},{"type":"DELETE","lineNumber":222,"oldContent":"        Log.i(TAG, \"Extrahiert ${allLandmarkIds.size} eindeutige Landmark-IDs: ${allLandmarkIds.take(5)}\")"},{"type":"DELETE","lineNumber":223,"oldContent":"        "},{"type":"DELETE","lineNumber":224,"oldContent":"        }"},{"type":"INSERT","lineNumber":218,"content":"                // Extrahiere Landmark-IDs aus der neuen Struktur"},{"type":"INSERT","lineNumber":219,"content":"                val landmarkIds = mutableListOf<String>()"},{"type":"INSERT","lineNumber":220,"content":"                "},{"type":"INSERT","lineNumber":221,"content":"                // Hauptlandmark aus landmarkFromInstruction"},{"type":"INSERT","lineNumber":222,"content":"                routePart.landmarkFromInstruction?.let { landmarkId ->"},{"type":"INSERT","lineNumber":223,"content":"                    landmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":224,"content":"                    allLandmarkIds.add(landmarkId)"},{"type":"DELETE","lineNumber":247,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":248,"oldContent":"    "},{"type":"DELETE","lineNumber":249,"oldContent":"    }"},{"type":"DELETE","lineNumber":250,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":251,"oldContent":"                            )"},{"type":"DELETE","lineNumber":252,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":253,"oldContent":"            "},{"type":"DELETE","lineNumber":254,"oldContent":"            "},{"type":"DELETE","lineNumber":255,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":256,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":257,"oldContent":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":258,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":259,"oldContent":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"DELETE","lineNumber":260,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":261,"oldContent":"    }"},{"type":"DELETE","lineNumber":262,"oldContent":"                            angle = (Math.random() * 360f).toFloat(),"},{"type":"DELETE","lineNumber":263,"oldContent":"     */"},{"type":"DELETE","lineNumber":264,"oldContent":"    /**"},{"type":"DELETE","lineNumber":265,"oldContent":"                        Log.v(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":247,"content":"                        distance = distance,"},{"type":"INSERT","lineNumber":248,"content":"                        estimatedTime = (distance * 1.2).toInt().coerceAtLeast(10) // ~1.2m/s Gehgeschwindigkeit"},{"type":"INSERT","lineNumber":249,"content":"                    )"},{"type":"INSERT","lineNumber":250,"content":"                )"},{"type":"INSERT","lineNumber":251,"content":"            }"},{"type":"INSERT","lineNumber":252,"content":"        }"},{"type":"INSERT","lineNumber":253,"content":"        "},{"type":"INSERT","lineNumber":254,"content":"        // Erstelle ProcessedLandmarks für alle gefundenen IDs"},{"type":"INSERT","lineNumber":255,"content":"        processedLandmarks.clear()"},{"type":"INSERT","lineNumber":256,"content":"        allLandmarkIds.forEach { landmarkId ->"},{"type":"INSERT","lineNumber":257,"content":"            processedLandmarks.add(ProcessedLandmark(landmarkId, landmarkId))"},{"type":"INSERT","lineNumber":258,"content":"        }"},{"type":"INSERT","lineNumber":259,"content":"        "},{"type":"INSERT","lineNumber":260,"content":"        Log.i(TAG, \"Extrahiert ${allLandmarkIds.size} eindeutige Landmark-IDs: ${allLandmarkIds.take(5)}\")"},{"type":"INSERT","lineNumber":261,"content":"        "},{"type":"INSERT","lineNumber":262,"content":"        return NavigationRoute("},{"type":"INSERT","lineNumber":263,"content":"            id = \"route_${System.currentTimeMillis()}\","},{"type":"INSERT","lineNumber":264,"content":"            name = \"Navigation Route\","},{"type":"INSERT","lineNumber":265,"content":"            description = \"Generated from final-route.json\","},{"type":"INSERT","lineNumber":290,"content":"                // AR-Tracking System initialisieren"},{"type":"DELETE","lineNumber":291,"oldContent":"                arTrackingSystem = ARTrackingSystem()"},{"type":"INSERT","lineNumber":293,"content":"                "},{"type":"DELETE","lineNumber":294,"oldContent":"                // Engine initialisieren und Landmarks laden"},{"type":"INSERT","lineNumber":306,"content":"                    "},{"type":"DELETE","lineNumber":308,"oldContent":"                    "},{"type":"DELETE","lineNumber":310,"oldContent":"                // Storage-Status loggen"},{"type":"MODIFY","lineNumber":312,"content":"                // Storage-Status loggen","oldContent":"                val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":313,"content":"                val status = storageManager!!.getStorageStatus()"},{"type":"DELETE","lineNumber":319,"oldContent":"                _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":320,"content":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"INSERT","lineNumber":321,"content":"                _isFeatureMappingEnabled.value = false"},{"type":"DELETE","lineNumber":323,"oldContent":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"INSERT","lineNumber":327,"content":"     * Lädt Landmarks für die aktuelle Route (vereinfacht)"},{"type":"DELETE","lineNumber":328,"oldContent":"     */"},{"type":"INSERT","lineNumber":333,"content":"                if (featureMatchingEngine == null) {"},{"type":"DELETE","lineNumber":334,"oldContent":"                    Log.w(TAG, \"❌ FeatureMatchingEngine nicht initialisiert\")"},{"type":"DELETE","lineNumber":338,"oldContent":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"INSERT","lineNumber":340,"content":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"DELETE","lineNumber":351,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"DELETE","lineNumber":352,"oldContent":"     */"},{"type":"DELETE","lineNumber":353,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":354,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":356,"oldContent":"                "},{"type":"INSERT","lineNumber":353,"content":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"INSERT","lineNumber":361,"content":"     */"},{"type":"INSERT","lineNumber":362,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":363,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":366,"content":"                "},{"type":"DELETE","lineNumber":397,"oldContent":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":408,"oldContent":"    /**"},{"type":"DELETE","lineNumber":418,"oldContent":"    ): Boolean {"},{"type":"DELETE","lineNumber":423,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":425,"oldContent":"                val saveResult = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":427,"oldContent":"                    bitmap = bitmap,"},{"type":"DELETE","lineNumber":429,"oldContent":"                    landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":431,"oldContent":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":424,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":435,"oldContent":"                "},{"type":"DELETE","lineNumber":436,"oldContent":"                when (saveResult) {"},{"type":"DELETE","lineNumber":438,"oldContent":"                    is SaveResult.Success -> {"},{"type":"DELETE","lineNumber":440,"oldContent":"                    }"},{"type":"DELETE","lineNumber":442,"oldContent":"                    is SaveResult.Error -> {"},{"type":"DELETE","lineNumber":443,"oldContent":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"DELETE","lineNumber":445,"oldContent":"                        false"},{"type":"DELETE","lineNumber":447,"oldContent":"                    }"},{"type":"DELETE","lineNumber":449,"oldContent":"                }"},{"type":"DELETE","lineNumber":451,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":435,"content":"    /**"},{"type":"DELETE","lineNumber":456,"oldContent":"            "},{"type":"DELETE","lineNumber":458,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":460,"oldContent":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":462,"oldContent":"            false"},{"type":"DELETE","lineNumber":464,"oldContent":"        }"},{"type":"INSERT","lineNumber":445,"content":"    ): Boolean {"},{"type":"DELETE","lineNumber":469,"oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":"    "},{"type":"DELETE","lineNumber":471,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":472,"oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":449,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":450,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":451,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":452,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":453,"content":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":454,"content":"                    description = description,"},{"type":"DELETE","lineNumber":475,"oldContent":"    "},{"type":"DELETE","lineNumber":476,"oldContent":""},{"type":"INSERT","lineNumber":457,"content":"                "},{"type":"INSERT","lineNumber":458,"content":"                when (saveResult) {"},{"type":"INSERT","lineNumber":459,"content":"                    is SaveResult.Success -> {"},{"type":"DELETE","lineNumber":478,"oldContent":"    "},{"type":"DELETE","lineNumber":480,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":481,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":462,"content":"                    }"},{"type":"INSERT","lineNumber":463,"content":"                    is SaveResult.Error -> {"},{"type":"INSERT","lineNumber":464,"content":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"INSERT","lineNumber":465,"content":"                        false"},{"type":"INSERT","lineNumber":466,"content":"                    }"},{"type":"INSERT","lineNumber":467,"content":"                }"},{"type":"INSERT","lineNumber":468,"content":"            } else {"},{"type":"DELETE","lineNumber":483,"oldContent":"     */"},{"type":"DELETE","lineNumber":484,"oldContent":"            // Stoppe Navigation"},{"type":"DELETE","lineNumber":485,"oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":470,"content":"                false"},{"type":"INSERT","lineNumber":471,"content":"            }"},{"type":"DELETE","lineNumber":487,"oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":473,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":474,"content":"            Log.e(TAG, \"Fehler beim Hinzufügen des Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":475,"content":"            false"},{"type":"INSERT","lineNumber":476,"content":"        }"},{"type":"DELETE","lineNumber":489,"oldContent":"    }"},{"type":"INSERT","lineNumber":479,"content":""},{"type":"DELETE","lineNumber":495,"oldContent":"    }"},{"type":"DELETE","lineNumber":499,"oldContent":"     */"},{"type":"INSERT","lineNumber":487,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":501,"oldContent":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":504,"oldContent":"            \"Storage-System nicht verfügbar\""},{"type":"DELETE","lineNumber":506,"oldContent":"        }"},{"type":"DELETE","lineNumber":509,"oldContent":"    "},{"type":"INSERT","lineNumber":496,"content":"    "},{"type":"INSERT","lineNumber":497,"content":""},{"type":"INSERT","lineNumber":498,"content":"    "},{"type":"DELETE","lineNumber":514,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":502,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":503,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":508,"content":"     */"},{"type":"INSERT","lineNumber":509,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":510,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":511,"content":"    }"},{"type":"INSERT","lineNumber":512,"content":"    "},{"type":"DELETE","lineNumber":522,"oldContent":"                "},{"type":"INSERT","lineNumber":518,"content":"    }"},{"type":"INSERT","lineNumber":522,"content":"     */"},{"type":"INSERT","lineNumber":524,"content":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":528,"content":"            \"Storage-System nicht verfügbar\""},{"type":"INSERT","lineNumber":529,"content":"        }"},{"type":"DELETE","lineNumber":535,"oldContent":"    "},{"type":"INSERT","lineNumber":532,"content":"    /**"},{"type":"INSERT","lineNumber":535,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":542,"oldContent":"    /**"},{"type":"DELETE","lineNumber":546,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":549,"oldContent":"    }"},{"type":"DELETE","lineNumber":551,"oldContent":"    "},{"type":"INSERT","lineNumber":546,"content":"                "},{"type":"DELETE","lineNumber":554,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":556,"oldContent":"     */"},{"type":"DELETE","lineNumber":560,"oldContent":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":562,"oldContent":"    ): Boolean {"},{"type":"DELETE","lineNumber":565,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":567,"oldContent":"                    bitmap = bitmap,"},{"type":"DELETE","lineNumber":572,"oldContent":"                )"},{"type":"DELETE","lineNumber":574,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":562,"content":"    "},{"type":"DELETE","lineNumber":576,"oldContent":"            }"},{"type":"DELETE","lineNumber":580,"oldContent":"        }"},{"type":"INSERT","lineNumber":567,"content":"    /**"},{"type":"DELETE","lineNumber":582,"oldContent":"    }"},{"type":"DELETE","lineNumber":583,"oldContent":"    "},{"type":"DELETE","lineNumber":585,"oldContent":"    /**"},{"type":"DELETE","lineNumber":587,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":572,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":575,"content":"    }"},{"type":"INSERT","lineNumber":576,"content":"    "},{"type":"DELETE","lineNumber":592,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":578,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":579,"content":"     */"},{"type":"INSERT","lineNumber":580,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":584,"content":"        bitmap: Bitmap"},{"type":"INSERT","lineNumber":585,"content":"    ): Boolean {"},{"type":"INSERT","lineNumber":589,"content":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":590,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":595,"content":"                )"},{"type":"INSERT","lineNumber":597,"content":"            } else {"},{"type":"INSERT","lineNumber":599,"content":"            }"},{"type":"INSERT","lineNumber":603,"content":"        }"},{"type":"INSERT","lineNumber":604,"content":"    }"},{"type":"INSERT","lineNumber":605,"content":"    "},{"type":"INSERT","lineNumber":606,"content":"    /**"},{"type":"INSERT","lineNumber":607,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":614,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"DELETE","lineNumber":622,"oldContent":"                "},{"type":"DELETE","lineNumber":624,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":627,"oldContent":"            }"},{"type":"DELETE","lineNumber":629,"oldContent":"        }"},{"type":"DELETE","lineNumber":631,"oldContent":"    }"},{"type":"DELETE","lineNumber":633,"oldContent":"    "},{"type":"DELETE","lineNumber":634,"oldContent":"    /**"},{"type":"DELETE","lineNumber":640,"oldContent":"                "},{"type":"DELETE","lineNumber":647,"oldContent":"    "},{"type":"INSERT","lineNumber":638,"content":"                    )"},{"type":"INSERT","lineNumber":641,"content":"                val featureRoute = FeatureNavigationRoute("},{"type":"DELETE","lineNumber":652,"oldContent":""},{"type":"DELETE","lineNumber":653,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":654,"oldContent":"        "},{"type":"DELETE","lineNumber":655,"oldContent":"    /**"},{"type":"INSERT","lineNumber":644,"content":"                    steps = demoSteps"},{"type":"INSERT","lineNumber":645,"content":"                )"},{"type":"INSERT","lineNumber":646,"content":"                "},{"type":"INSERT","lineNumber":647,"content":"                _featureNavigationRoute.value = featureRoute"},{"type":"INSERT","lineNumber":649,"content":"                "},{"type":"INSERT","lineNumber":650,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":652,"content":"            }"},{"type":"INSERT","lineNumber":653,"content":"        }"},{"type":"INSERT","lineNumber":654,"content":"    }"},{"type":"INSERT","lineNumber":655,"content":"    "},{"type":"INSERT","lineNumber":656,"content":"    /**"},{"type":"INSERT","lineNumber":664,"content":"                "},{"type":"DELETE","lineNumber":666,"oldContent":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":675,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":681,"oldContent":"            return"},{"type":"DELETE","lineNumber":682,"oldContent":"        }"},{"type":"DELETE","lineNumber":694,"oldContent":"                Log.d(TAG, \"Frame size: ${frame.rows()}x${frame.cols()}\")"},{"type":"DELETE","lineNumber":698,"oldContent":"                    // Debug: Prüfe Status der FeatureMatchingEngine"},{"type":"INSERT","lineNumber":693,"content":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":700,"oldContent":"                    Log.d(TAG, \"FeatureMatchingEngine Debug Info:\")"},{"type":"DELETE","lineNumber":702,"oldContent":"                    Log.d(TAG, featureMatchingEngine!!.getDebugInfo())"},{"type":"DELETE","lineNumber":704,"oldContent":"                    "},{"type":"DELETE","lineNumber":705,"oldContent":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (optimiert)"},{"type":"INSERT","lineNumber":697,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (komplett überarbeitet)"},{"type":"DELETE","lineNumber":708,"oldContent":"        Log.d(TAG, \"processFrameForFeatureMatching called\")"},{"type":"DELETE","lineNumber":709,"oldContent":"        "},{"type":"INSERT","lineNumber":700,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":711,"oldContent":"            Log.d(TAG, \"Feature mapping not enabled, skipping frame processing\")"},{"type":"DELETE","lineNumber":712,"oldContent":"            Log.d(TAG, \"Debug: FeatureMatchingEngine available: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":713,"oldContent":"            Log.d(TAG, \"Debug: Processed landmarks count: ${processedLandmarks.size}\")"},{"type":"INSERT","lineNumber":702,"content":"            Log.v(TAG, \"⚠️ Feature mapping nicht aktiviert, überspringe Frame\")"},{"type":"INSERT","lineNumber":703,"content":"            return"},{"type":"INSERT","lineNumber":704,"content":"        }"},{"type":"INSERT","lineNumber":706,"content":"        if (featureMatchingEngine == null) {"},{"type":"INSERT","lineNumber":707,"content":"            Log.v(TAG, \"⚠️ FeatureMatchingEngine nicht initialisiert, überspringe Frame\")"},{"type":"INSERT","lineNumber":708,"content":"            return"},{"type":"INSERT","lineNumber":709,"content":"        }"},{"type":"INSERT","lineNumber":710,"content":"        "},{"type":"DELETE","lineNumber":717,"oldContent":"                    // Debug: Zeige warum keine Matches gefunden wurden"},{"type":"DELETE","lineNumber":719,"oldContent":"                    if (featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":720,"oldContent":"            Log.d(TAG, \"Frame processing throttled (${currentTime - lastFrameProcessTime}ms < ${frameProcessingInterval}ms)\")"},{"type":"DELETE","lineNumber":721,"oldContent":"                        val debugInfo = featureMatchingEngine!!.getDebugInfo()"},{"type":"DELETE","lineNumber":722,"oldContent":"            return"},{"type":"DELETE","lineNumber":723,"oldContent":"                        if (debugInfo.contains(\"Größe: 0\")) {"},{"type":"INSERT","lineNumber":714,"content":"            return // Stilles Throttling"},{"type":"DELETE","lineNumber":725,"oldContent":"                            Log.w(TAG, \"❌ Keine Landmark-Features geladen - das ist der Grund für fehlende Matches!\")"},{"type":"DELETE","lineNumber":727,"oldContent":"                        }"},{"type":"DELETE","lineNumber":729,"oldContent":"                    }"},{"type":"DELETE","lineNumber":732,"oldContent":"                Log.i(TAG, \"Processing frame for feature matching...\")"},{"type":"INSERT","lineNumber":720,"content":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":734,"oldContent":"                Log.e(TAG, \"Exception details: \", e)"},{"type":"DELETE","lineNumber":735,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":736,"oldContent":"                val matches = if (featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":737,"oldContent":"            }"},{"type":"DELETE","lineNumber":738,"oldContent":"        }"},{"type":"DELETE","lineNumber":739,"oldContent":"                    // Nur echtes Feature-Matching mit OpenCV"},{"type":"DELETE","lineNumber":740,"oldContent":"    }"},{"type":"DELETE","lineNumber":741,"oldContent":"                    featureMatchingEngine!!.processFrame(frame)"},{"type":"DELETE","lineNumber":742,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":743,"oldContent":"                    Log.w(TAG, \"FeatureMatchingEngine not initialized\")"},{"type":"DELETE","lineNumber":744,"oldContent":"                    emptyList()"},{"type":"DELETE","lineNumber":745,"oldContent":"                }"},{"type":"INSERT","lineNumber":722,"content":"                // Verarbeite Frame mit der neuen Engine"},{"type":"INSERT","lineNumber":723,"content":"                val matches = featureMatchingEngine!!.processFrame(frame)"},{"type":"INSERT","lineNumber":725,"content":"                // Update UI State"},{"type":"DELETE","lineNumber":748,"oldContent":"        "},{"type":"INSERT","lineNumber":728,"content":"                // Logge nur bei erfolgreichen Matches"},{"type":"DELETE","lineNumber":751,"oldContent":"    "},{"type":"DELETE","lineNumber":752,"oldContent":"                    Log.i(TAG, \"Found ${matches.size} landmark matches\")"},{"type":"DELETE","lineNumber":753,"oldContent":"                    matches.take(2).forEach { match ->"},{"type":"DELETE","lineNumber":754,"oldContent":"                        Log.i(TAG, \"- ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":730,"content":"                    Log.i(TAG, \"🎯 ${matches.size} Landmark-Matches gefunden:\")"},{"type":"INSERT","lineNumber":731,"content":"                    matches.take(3).forEach { match ->"},{"type":"INSERT","lineNumber":732,"content":"                        Log.i(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}% Confidence\")"},{"type":"DELETE","lineNumber":756,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":757,"oldContent":"                    Log.d(TAG, \"No matches found in current frame\")"},{"type":"INSERT","lineNumber":734,"content":"                    "},{"type":"INSERT","lineNumber":735,"content":"                    // Trigger AR-Updates für beste Matches"},{"type":"INSERT","lineNumber":736,"content":"                    val bestMatch = matches.firstOrNull()"},{"type":"INSERT","lineNumber":737,"content":"                    if (bestMatch != null && bestMatch.confidence > 0.7f) {"},{"type":"INSERT","lineNumber":738,"content":"                        Log.i(TAG, \"🎉 Starke Landmark-Erkennung: ${bestMatch.landmarkId} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":739,"content":"                        // Hier könnte AR-Positionierung getriggert werden"},{"type":"INSERT","lineNumber":740,"content":"                    }"},{"type":"DELETE","lineNumber":761,"oldContent":"                Log.e(TAG, \"Fehler beim Feature-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":744,"content":"                Log.e(TAG, \"❌ Fehler beim Frame-Processing: ${e.message}\", e)"},{"type":"INSERT","lineNumber":745,"content":"                _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":746,"content":"            }"},{"type":"INSERT","lineNumber":747,"content":"        }"},{"type":"INSERT","lineNumber":748,"content":"    }"},{"type":"DELETE","lineNumber":766,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":768,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":770,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":772,"oldContent":"        "},{"type":"DELETE","lineNumber":774,"oldContent":"        if (currentStep < totalSteps) {"},{"type":"DELETE","lineNumber":776,"oldContent":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"INSERT","lineNumber":760,"content":"        "},{"type":"DELETE","lineNumber":780,"oldContent":"    }"},{"type":"DELETE","lineNumber":781,"oldContent":"    "},{"type":"DELETE","lineNumber":783,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":785,"oldContent":"     */"},{"type":"INSERT","lineNumber":765,"content":"    "},{"type":"DELETE","lineNumber":793,"oldContent":"    }"},{"type":"DELETE","lineNumber":796,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":782,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":783,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":784,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":785,"content":"        "},{"type":"INSERT","lineNumber":786,"content":"        if (currentStep < totalSteps) {"},{"type":"INSERT","lineNumber":787,"content":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"DELETE","lineNumber":812,"oldContent":"    /**"},{"type":"INSERT","lineNumber":795,"content":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":796,"content":"     */"},{"type":"DELETE","lineNumber":815,"oldContent":"     */"},{"type":"DELETE","lineNumber":822,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":824,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":825,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":806,"content":"    }"},{"type":"DELETE","lineNumber":827,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":829,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":809,"content":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":831,"oldContent":"            }"},{"type":"DELETE","lineNumber":833,"oldContent":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"DELETE","lineNumber":835,"oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"DELETE","lineNumber":837,"oldContent":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"DELETE","lineNumber":839,"oldContent":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":840,"oldContent":"            appendLine(\"=== Ende Status ===\")"},{"type":"DELETE","lineNumber":842,"oldContent":"        }"},{"type":"DELETE","lineNumber":843,"oldContent":"    }"},{"type":"DELETE","lineNumber":846,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":847,"oldContent":"    /**"},{"type":"DELETE","lineNumber":848,"oldContent":"     */"},{"type":"DELETE","lineNumber":849,"oldContent":"        try {"},{"type":"DELETE","lineNumber":854,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":855,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":857,"oldContent":"            "},{"type":"DELETE","lineNumber":858,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":859,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":824,"content":"    }"},{"type":"INSERT","lineNumber":825,"content":"    "},{"type":"INSERT","lineNumber":826,"content":"    /**"},{"type":"DELETE","lineNumber":862,"oldContent":"                    "},{"type":"INSERT","lineNumber":828,"content":"     */"},{"type":"INSERT","lineNumber":837,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":838,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":839,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":840,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"INSERT","lineNumber":841,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":842,"content":"            }"},{"type":"INSERT","lineNumber":843,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":844,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":845,"content":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"INSERT","lineNumber":846,"content":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":847,"content":"            appendLine(\"=== Ende Status ===\")"},{"type":"INSERT","lineNumber":848,"content":"        }"},{"type":"INSERT","lineNumber":849,"content":"    }"},{"type":"DELETE","lineNumber":872,"oldContent":"    "},{"type":"INSERT","lineNumber":852,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":853,"content":"     */"},{"type":"INSERT","lineNumber":856,"content":"        try {"},{"type":"INSERT","lineNumber":866,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":867,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":868,"content":"            "},{"type":"INSERT","lineNumber":869,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":870,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":873,"content":"                    "},{"type":"DELETE","lineNumber":890,"oldContent":"            "},{"type":"INSERT","lineNumber":886,"content":"    "},{"type":"INSERT","lineNumber":887,"content":"    /**"},{"type":"DELETE","lineNumber":905,"oldContent":"    "},{"type":"DELETE","lineNumber":919,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":906,"content":"            "},{"type":"DELETE","lineNumber":921,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":923,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":925,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":927,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":929,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":930,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"DELETE","lineNumber":932,"oldContent":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":921,"content":"    "},{"type":"DELETE","lineNumber":944,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":946,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":948,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":950,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":952,"oldContent":"                            )"},{"type":"DELETE","lineNumber":954,"oldContent":"                        )"},{"type":"DELETE","lineNumber":955,"oldContent":"                    }"},{"type":"DELETE","lineNumber":957,"oldContent":"                }"},{"type":"DELETE","lineNumber":958,"oldContent":"            }"},{"type":"DELETE","lineNumber":959,"oldContent":"            "},{"type":"DELETE","lineNumber":961,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":962,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":963,"oldContent":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":965,"oldContent":"            }"},{"type":"DELETE","lineNumber":966,"oldContent":"            "},{"type":"DELETE","lineNumber":967,"oldContent":"            routeLandmarks"},{"type":"INSERT","lineNumber":935,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":936,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":937,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":938,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":939,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":940,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":941,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":942,"content":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":960,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":961,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":962,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":963,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":964,"content":"                            )"},{"type":"INSERT","lineNumber":965,"content":"                        )"},{"type":"INSERT","lineNumber":966,"content":"                    }"},{"type":"INSERT","lineNumber":967,"content":"                }"},{"type":"INSERT","lineNumber":968,"content":"            }"},{"type":"INSERT","lineNumber":969,"content":"            "},{"type":"INSERT","lineNumber":970,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":971,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":972,"content":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":973,"content":"            }"},{"type":"INSERT","lineNumber":974,"content":"            "},{"type":"INSERT","lineNumber":975,"content":"            routeLandmarks"},{"type":"DELETE","lineNumber":988,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":999,"oldContent":"     */"},{"type":"DELETE","lineNumber":1013,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1015,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":1017,"oldContent":"    }"},{"type":"DELETE","lineNumber":1019,"oldContent":"    "},{"type":"DELETE","lineNumber":1021,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1004,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":1023,"oldContent":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":1025,"oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1032,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":1035,"oldContent":""},{"type":"INSERT","lineNumber":1015,"content":"     */"},{"type":"DELETE","lineNumber":1037,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1040,"oldContent":"     */"},{"type":"DELETE","lineNumber":1043,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"DELETE","lineNumber":1046,"oldContent":"        "},{"type":"DELETE","lineNumber":1048,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":1050,"oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":1052,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":1053,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":1055,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1057,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"DELETE","lineNumber":1058,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":1059,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":1061,"oldContent":"        }"},{"type":"INSERT","lineNumber":1029,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1030,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":1031,"content":"    }"},{"type":"INSERT","lineNumber":1032,"content":"    "},{"type":"INSERT","lineNumber":1033,"content":"    /**"},{"type":"INSERT","lineNumber":1034,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"INSERT","lineNumber":1036,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1066,"oldContent":"    }"},{"type":"DELETE","lineNumber":1070,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1048,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":1050,"content":""},{"type":"INSERT","lineNumber":1051,"content":"    /**"},{"type":"DELETE","lineNumber":1078,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1053,"content":"     */"},{"type":"DELETE","lineNumber":1080,"oldContent":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1055,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1056,"content":"        initializeStorage(context)"},{"type":"INSERT","lineNumber":1057,"content":"        "},{"type":"INSERT","lineNumber":1058,"content":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"INSERT","lineNumber":1059,"content":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":1060,"content":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"INSERT","lineNumber":1061,"content":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":1062,"content":"        } else {"},{"type":"INSERT","lineNumber":1063,"content":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1064,"content":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"INSERT","lineNumber":1065,"content":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":1066,"content":"        }"},{"type":"INSERT","lineNumber":1068,"content":"    "},{"type":"INSERT","lineNumber":1069,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1070,"content":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"INSERT","lineNumber":1071,"content":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"INSERT","lineNumber":1072,"content":"    }"},{"type":"INSERT","lineNumber":1073,"content":"    "},{"type":"INSERT","lineNumber":1074,"content":"    /**"},{"type":"INSERT","lineNumber":1075,"content":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1076,"content":"     */"},{"type":"INSERT","lineNumber":1077,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1078,"content":"        return try {"},{"type":"INSERT","lineNumber":1079,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1080,"content":"            if (route != null && route.route.path.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1081,"content":"                // Erster Schritt der Route"},{"type":"INSERT","lineNumber":1082,"content":"                val firstPathItem = route.route.path.first()"},{"type":"INSERT","lineNumber":1083,"content":"                val firstRoutePart = firstPathItem.routeParts.firstOrNull()"},{"type":"INSERT","lineNumber":1084,"content":"                "},{"type":"INSERT","lineNumber":1085,"content":"                // Versuche verschiedene Quellen für den Startpunkt"},{"type":"INSERT","lineNumber":1086,"content":"                val startPoint = when {"},{"type":"INSERT","lineNumber":1087,"content":"                    // 1. Aus der ersten Anweisung"},{"type":"INSERT","lineNumber":1088,"content":"                    !firstRoutePart?.instructionDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1089,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instructionDe!!)"},{"type":"INSERT","lineNumber":1090,"content":"                    }"},{"type":"INSERT","lineNumber":1091,"content":"                    !firstRoutePart?.instructionEn.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1092,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instructionEn!!)"},{"type":"INSERT","lineNumber":1093,"content":"                    }"},{"type":"INSERT","lineNumber":1094,"content":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1083,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1085,"oldContent":"    "},{"type":"DELETE","lineNumber":1088,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":1090,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1092,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1094,"oldContent":"    "},{"type":"DELETE","lineNumber":1096,"oldContent":"        }"},{"type":"DELETE","lineNumber":1098,"oldContent":"            summary.floors.isNotEmpty() -> \"Route über ${summary.floors.size} Stockwerk${if (summary.floors.size > 1) \"e\" else \"\"}\""},{"type":"DELETE","lineNumber":1100,"oldContent":"     */"},{"type":"DELETE","lineNumber":1102,"oldContent":"    fun getRouteDescription(): String {"},{"type":"DELETE","lineNumber":1104,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1106,"oldContent":"    "},{"type":"DELETE","lineNumber":1108,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1110,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"DELETE","lineNumber":1112,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"DELETE","lineNumber":1114,"oldContent":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"DELETE","lineNumber":1116,"oldContent":"            if (summary.buildings.isNotEmpty()) {"},{"type":"DELETE","lineNumber":1118,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"DELETE","lineNumber":1120,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1122,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1123,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1124,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1125,"oldContent":"     * Gibt formatierte Routeninformationen für die UI zurück"},{"type":"DELETE","lineNumber":1126,"oldContent":"    "},{"type":"DELETE","lineNumber":1128,"oldContent":"    "},{"type":"DELETE","lineNumber":1130,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1132,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1135,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1121,"content":"    }"},{"type":"INSERT","lineNumber":1122,"content":"    "},{"type":"INSERT","lineNumber":1123,"content":"    /**"},{"type":"INSERT","lineNumber":1126,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1145,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1146,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1148,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1150,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1151,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1153,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1154,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1156,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1157,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1160,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1151,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1152,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1153,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1155,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1156,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1157,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1158,"content":"                    }"},{"type":"INSERT","lineNumber":1159,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1160,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1161,"content":"                    }"},{"type":"DELETE","lineNumber":1178,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1201,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1203,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1194,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1217,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1218,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1238,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1251,"oldContent":"            }"},{"type":"DELETE","lineNumber":1253,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1255,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"DELETE","lineNumber":1257,"oldContent":"            0"},{"type":"INSERT","lineNumber":1244,"content":"            0.0"},{"type":"INSERT","lineNumber":1245,"content":"        }"},{"type":"DELETE","lineNumber":1262,"oldContent":"            0.0"},{"type":"DELETE","lineNumber":1264,"oldContent":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"DELETE","lineNumber":1265,"oldContent":"        }"},{"type":"INSERT","lineNumber":1249,"content":"     * Gibt die geschätzte Gehzeit der Route zurück (in Minuten)"},{"type":"DELETE","lineNumber":1267,"oldContent":"    fun getRouteBuildings(): List<String> {"},{"type":"DELETE","lineNumber":1268,"oldContent":"    }"},{"type":"INSERT","lineNumber":1251,"content":"    fun getEstimatedWalkingTime(): Int {"},{"type":"INSERT","lineNumber":1253,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1254,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1255,"content":"                // Verwende routeInfo falls verfügbar"},{"type":"INSERT","lineNumber":1256,"content":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"INSERT","lineNumber":1257,"content":"                "},{"type":"INSERT","lineNumber":1258,"content":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"INSERT","lineNumber":1259,"content":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1260,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1261,"content":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"INSERT","lineNumber":1262,"content":"                "},{"type":"INSERT","lineNumber":1263,"content":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"INSERT","lineNumber":1264,"content":"                timeInMinutes"},{"type":"INSERT","lineNumber":1265,"content":"            } else {"},{"type":"INSERT","lineNumber":1266,"content":"                0"},{"type":"INSERT","lineNumber":1267,"content":"            }"},{"type":"INSERT","lineNumber":1268,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1269,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"INSERT","lineNumber":1270,"content":"            0"},{"type":"INSERT","lineNumber":1271,"content":"        }"},{"type":"INSERT","lineNumber":1272,"content":"    }"},{"type":"DELETE","lineNumber":1272,"oldContent":"     * Gibt die geschätzte Gehzeit der Route zurück (in Minuten)"},{"type":"INSERT","lineNumber":1275,"content":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"INSERT","lineNumber":1277,"content":"    fun getRouteBuildings(): List<String> {"},{"type":"INSERT","lineNumber":1278,"content":"        return try {"},{"type":"INSERT","lineNumber":1279,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1280,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1281,"content":"                val buildings = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1282,"content":"                route.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":1283,"content":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":1284,"content":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1285,"content":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1276,"oldContent":"    fun getEstimatedWalkingTime(): Int {"},{"type":"DELETE","lineNumber":1279,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":1283,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":1285,"oldContent":"                // Verwende routeInfo falls verfügbar"},{"type":"DELETE","lineNumber":1287,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":1289,"oldContent":"                "},{"type":"DELETE","lineNumber":1291,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":1293,"oldContent":"                val totalLength = getRouteLength()"},{"type":"DELETE","lineNumber":1295,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1297,"oldContent":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"DELETE","lineNumber":1299,"oldContent":"                "},{"type":"DELETE","lineNumber":1302,"oldContent":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"INSERT","lineNumber":1303,"content":"    }"},{"type":"DELETE","lineNumber":1305,"oldContent":"                timeInMinutes"},{"type":"DELETE","lineNumber":1309,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1311,"oldContent":"                0"},{"type":"DELETE","lineNumber":1312,"oldContent":"        }"},{"type":"DELETE","lineNumber":1315,"oldContent":"                val buildings = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1316,"oldContent":"                route.route.path.forEach { pathItem ->"},{"type":"DELETE","lineNumber":1317,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1318,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1319,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1320,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1321,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":1322,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1326,"oldContent":"        }"},{"type":"DELETE","lineNumber":1327,"oldContent":"    }"},{"type":"DELETE","lineNumber":1330,"oldContent":"     */"},{"type":"DELETE","lineNumber":1332,"oldContent":"                buildings = getRouteBuildings(),"},{"type":"DELETE","lineNumber":1334,"oldContent":"                floors = getRouteFloors(),"},{"type":"DELETE","lineNumber":1336,"oldContent":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1339,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1323,"content":"                    }"},{"type":"INSERT","lineNumber":1324,"content":"                }"},{"type":"INSERT","lineNumber":1325,"content":"                "},{"type":"INSERT","lineNumber":1326,"content":"                val floorList = floors.toList()"},{"type":"INSERT","lineNumber":1327,"content":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"INSERT","lineNumber":1328,"content":"                floorList"},{"type":"INSERT","lineNumber":1329,"content":"            } else {"},{"type":"INSERT","lineNumber":1330,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1331,"content":"            }"},{"type":"INSERT","lineNumber":1332,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1333,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1334,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1335,"content":"        }"},{"type":"INSERT","lineNumber":1336,"content":"    }"},{"type":"INSERT","lineNumber":1337,"content":"    "},{"type":"INSERT","lineNumber":1338,"content":"    /**"},{"type":"INSERT","lineNumber":1339,"content":"     * Gibt eine Zusammenfassung der Route für die Drawer List zurück"},{"type":"INSERT","lineNumber":1340,"content":"     */"},{"type":"INSERT","lineNumber":1341,"content":"    fun getRouteSummary(): RouteSummary {"},{"type":"INSERT","lineNumber":1342,"content":"        return try {"},{"type":"INSERT","lineNumber":1343,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1344,"content":"                startPoint = getCurrentStartPoint(),"},{"type":"INSERT","lineNumber":1345,"content":"                endPoint = getCurrentEndPoint(),"},{"type":"INSERT","lineNumber":1346,"content":"                totalLength = getRouteLength(),"},{"type":"INSERT","lineNumber":1347,"content":"                estimatedTime = getEstimatedWalkingTime(),"},{"type":"INSERT","lineNumber":1348,"content":"                buildings = getRouteBuildings(),"},{"type":"INSERT","lineNumber":1349,"content":"                floors = getRouteFloors(),"},{"type":"INSERT","lineNumber":1350,"content":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1351,"content":"            )"},{"type":"INSERT","lineNumber":1352,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1343,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1346,"oldContent":"                }"},{"type":"DELETE","lineNumber":1349,"oldContent":"                "},{"type":"DELETE","lineNumber":1352,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1355,"oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"DELETE","lineNumber":1356,"oldContent":"                floorList"},{"type":"DELETE","lineNumber":1357,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1363,"content":"        }"},{"type":"INSERT","lineNumber":1364,"content":"    }"},{"type":"INSERT","lineNumber":1365,"content":"    "},{"type":"INSERT","lineNumber":1366,"content":"    /**"},{"type":"INSERT","lineNumber":1367,"content":"     * Gibt formatierte Routeninformationen für die UI zurück"},{"type":"DELETE","lineNumber":1360,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":1364,"oldContent":"            }"},{"type":"DELETE","lineNumber":1368,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1371,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1373,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1375,"oldContent":"    "},{"type":"DELETE","lineNumber":1377,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1379,"oldContent":"     * Gibt eine Zusammenfassung der Route für die Drawer List zurück"},{"type":"DELETE","lineNumber":1381,"oldContent":"    fun getRouteSummary(): RouteSummary {"},{"type":"DELETE","lineNumber":1384,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":1386,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1388,"oldContent":"                startPoint = getCurrentStartPoint(),"},{"type":"DELETE","lineNumber":1390,"oldContent":"                endPoint = getCurrentEndPoint(),"},{"type":"DELETE","lineNumber":1391,"oldContent":"                totalLength = getRouteLength(),"},{"type":"INSERT","lineNumber":1388,"content":"    }"},{"type":"INSERT","lineNumber":1389,"content":"    "},{"type":"INSERT","lineNumber":1390,"content":"    /**"},{"type":"DELETE","lineNumber":1393,"oldContent":"                estimatedTime = getEstimatedWalkingTime(),"},{"type":"DELETE","lineNumber":1395,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1398,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1401,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"DELETE","lineNumber":1404,"oldContent":"        }"},{"type":"DELETE","lineNumber":1406,"oldContent":"            else -> \"Navigationsroute\""},{"type":"INSERT","lineNumber":1400,"content":"        }"},{"type":"INSERT","lineNumber":1401,"content":"    }"},{"type":"DELETE","lineNumber":1408,"oldContent":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"DELETE","lineNumber":1410,"oldContent":"    }"},{"type":"DELETE","lineNumber":1412,"oldContent":"    "},{"type":"INSERT","lineNumber":1405,"content":"     */"},{"type":"DELETE","lineNumber":1415,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1408,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1419,"oldContent":"        }"},{"type":"DELETE","lineNumber":1420,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1421,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1422,"oldContent":"        val currentStep = _currentNavigationStep.value"}]},{"timestamp":1754925546988,"changes":[{"type":"DELETE","lineNumber":209,"oldContent":"                        true"},{"type":"DELETE","lineNumber":210,"oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":209,"content":"        // Durchlaufe alle PathItems und RouteParts"},{"type":"INSERT","lineNumber":210,"content":"        routeData.route.path.forEach { pathItem ->"},{"type":"MODIFY","lineNumber":213,"content":"                val instruction = routePart.instructionDe ?: routePart.instructionEn ?: routePart.instruction ?: \"Folgen Sie der Route\"","oldContent":"            try {"},{"type":"DELETE","lineNumber":231,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":232,"oldContent":"    "},{"type":"DELETE","lineNumber":233,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":234,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":235,"oldContent":"            initialize(context)"},{"type":"DELETE","lineNumber":236,"oldContent":"            "},{"type":"DELETE","lineNumber":237,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":231,"content":"                        allLandmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":232,"content":"                    }"},{"type":"INSERT","lineNumber":233,"content":"                }"},{"type":"INSERT","lineNumber":234,"content":"                "},{"type":"INSERT","lineNumber":235,"content":"                // Berechne Distanz aus Nodes falls verfügbar"},{"type":"INSERT","lineNumber":236,"content":"                val distance = routePart.nodes?.sumOf { node ->"},{"type":"INSERT","lineNumber":237,"content":"                    node.edge?.lengthInMeters?.toDoubleOrNull() ?: 0.0"},{"type":"DELETE","lineNumber":276,"oldContent":"                "},{"type":"DELETE","lineNumber":277,"oldContent":"                }"},{"type":"DELETE","lineNumber":278,"oldContent":"                availableLandmarks.take(5).forEach { landmark ->"},{"type":"DELETE","lineNumber":279,"oldContent":"}"},{"type":"INSERT","lineNumber":276,"content":"     */"},{"type":"INSERT","lineNumber":277,"content":"    fun initializeStorage(context: Context) {"},{"type":"INSERT","lineNumber":278,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":279,"content":"            try {"},{"type":"INSERT","lineNumber":307,"content":"                    // Test mit einem leeren Frame"},{"type":"INSERT","lineNumber":308,"content":"                    testFeatureMatching()"},{"type":"INSERT","lineNumber":309,"content":"                    "},{"type":"INSERT","lineNumber":314,"content":"                "},{"type":"DELETE","lineNumber":313,"oldContent":"                "},{"type":"DELETE","lineNumber":319,"oldContent":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"INSERT","lineNumber":323,"content":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"DELETE","lineNumber":339,"oldContent":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"INSERT","lineNumber":343,"content":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"DELETE","lineNumber":351,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"INSERT","lineNumber":356,"content":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"DELETE","lineNumber":357,"oldContent":"     */"},{"type":"DELETE","lineNumber":359,"oldContent":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"DELETE","lineNumber":361,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":364,"content":"     */"},{"type":"INSERT","lineNumber":365,"content":"    fun loadAvailableLandmarks(context: Context) {"},{"type":"INSERT","lineNumber":366,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":365,"oldContent":"                "},{"type":"INSERT","lineNumber":369,"content":"                "},{"type":"DELETE","lineNumber":420,"oldContent":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"INSERT","lineNumber":427,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":428,"oldContent":"    /**"},{"type":"DELETE","lineNumber":433,"oldContent":"    ): Boolean {"},{"type":"INSERT","lineNumber":437,"content":"    "},{"type":"INSERT","lineNumber":438,"content":"    /**"},{"type":"INSERT","lineNumber":439,"content":"     * Fügt einen neuen Landmark hinzu (nur lokale Speicherung)"},{"type":"INSERT","lineNumber":440,"content":"     */"},{"type":"INSERT","lineNumber":441,"content":"    suspend fun addLandmark("},{"type":"INSERT","lineNumber":442,"content":"        context: Context,"},{"type":"INSERT","lineNumber":443,"content":"        bitmap: Bitmap,"},{"type":"INSERT","lineNumber":444,"content":"        landmarkId: String,"},{"type":"INSERT","lineNumber":445,"content":"        landmarkName: String,"},{"type":"INSERT","lineNumber":446,"content":"        description: String,"},{"type":"INSERT","lineNumber":447,"content":"        onProgress: (String) -> Unit = {}"},{"type":"INSERT","lineNumber":448,"content":"    ): Boolean {"},{"type":"INSERT","lineNumber":449,"content":"        return try {"},{"type":"INSERT","lineNumber":450,"content":"            Log.i(TAG, \"Füge neuen Landmark hinzu: $landmarkId\")"},{"type":"INSERT","lineNumber":451,"content":"            "},{"type":"DELETE","lineNumber":438,"oldContent":"    "},{"type":"DELETE","lineNumber":441,"oldContent":"     * Fügt einen neuen Landmark hinzu (nur lokale Speicherung)"},{"type":"DELETE","lineNumber":443,"oldContent":"     */"},{"type":"DELETE","lineNumber":445,"oldContent":"    suspend fun addLandmark("},{"type":"DELETE","lineNumber":446,"oldContent":"        context: Context,"},{"type":"INSERT","lineNumber":458,"content":"                    category = \"Training\""},{"type":"INSERT","lineNumber":459,"content":"                )"},{"type":"DELETE","lineNumber":448,"oldContent":"        bitmap: Bitmap,"},{"type":"DELETE","lineNumber":451,"oldContent":"        landmarkId: String,"},{"type":"DELETE","lineNumber":452,"oldContent":"        landmarkName: String,"},{"type":"INSERT","lineNumber":463,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":464,"content":"                        true"},{"type":"DELETE","lineNumber":455,"oldContent":"        description: String,"},{"type":"DELETE","lineNumber":458,"oldContent":"        onProgress: (String) -> Unit = {}"},{"type":"DELETE","lineNumber":460,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":462,"oldContent":"            Log.i(TAG, \"Füge neuen Landmark hinzu: $landmarkId\")"},{"type":"DELETE","lineNumber":464,"oldContent":"            "},{"type":"INSERT","lineNumber":472,"content":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"INSERT","lineNumber":475,"content":"            "},{"type":"DELETE","lineNumber":468,"oldContent":""},{"type":"DELETE","lineNumber":470,"oldContent":"                )"},{"type":"DELETE","lineNumber":473,"oldContent":"    /**"},{"type":"DELETE","lineNumber":474,"oldContent":""},{"type":"DELETE","lineNumber":475,"oldContent":"                        true"},{"type":"DELETE","lineNumber":476,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":477,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":478,"oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"INSERT","lineNumber":482,"content":""},{"type":"DELETE","lineNumber":484,"oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"DELETE","lineNumber":485,"oldContent":"    "},{"type":"INSERT","lineNumber":486,"content":"    /**"},{"type":"DELETE","lineNumber":487,"oldContent":""},{"type":"DELETE","lineNumber":489,"oldContent":"    "},{"type":"INSERT","lineNumber":490,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":492,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":494,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"DELETE","lineNumber":498,"oldContent":"     */"},{"type":"DELETE","lineNumber":500,"oldContent":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":501,"oldContent":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"DELETE","lineNumber":504,"oldContent":"    }"},{"type":"INSERT","lineNumber":500,"content":""},{"type":"INSERT","lineNumber":501,"content":"    "},{"type":"INSERT","lineNumber":505,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":506,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"MODIFY","lineNumber":511,"content":"     */","oldContent":"    }"},{"type":"INSERT","lineNumber":512,"content":"    suspend fun loadFullImage(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":513,"content":"        return storageManager?.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":514,"content":"    }"},{"type":"INSERT","lineNumber":515,"content":"    "},{"type":"DELETE","lineNumber":517,"oldContent":"     */"},{"type":"DELETE","lineNumber":518,"oldContent":"        return if (storageManager != null) {"},{"type":"INSERT","lineNumber":521,"content":"    }"},{"type":"DELETE","lineNumber":523,"oldContent":"            \"Storage-System nicht verfügbar\""},{"type":"MODIFY","lineNumber":525,"content":"     */","oldContent":"        }"},{"type":"INSERT","lineNumber":527,"content":"        return if (storageManager != null) {"},{"type":"DELETE","lineNumber":529,"oldContent":"    /**"},{"type":"INSERT","lineNumber":531,"content":"            \"Storage-System nicht verfügbar\""},{"type":"INSERT","lineNumber":532,"content":"        }"},{"type":"DELETE","lineNumber":532,"oldContent":"        // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":533,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"INSERT","lineNumber":534,"content":"    "},{"type":"INSERT","lineNumber":535,"content":"    /**"},{"type":"INSERT","lineNumber":538,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":543,"oldContent":"                "},{"type":"INSERT","lineNumber":549,"content":"                "},{"type":"DELETE","lineNumber":548,"oldContent":"    fun getStatus(): String {"},{"type":"DELETE","lineNumber":549,"oldContent":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"DELETE","lineNumber":550,"oldContent":"        _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":551,"oldContent":"        setFeatureMappingEnabled(false)"},{"type":"DELETE","lineNumber":552,"oldContent":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"DELETE","lineNumber":553,"oldContent":"    fun stopNavigation() {"},{"type":"DELETE","lineNumber":554,"oldContent":"    "},{"type":"INSERT","lineNumber":551,"content":"                    val landmarks = storageManager!!.getAvailableProjectLandmarks()"},{"type":"INSERT","lineNumber":552,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"INSERT","lineNumber":553,"content":"                    "},{"type":"INSERT","lineNumber":554,"content":"                    val status = storageManager!!.getStorageStatus()"},{"type":"INSERT","lineNumber":555,"content":"                    Log.i(TAG, \"Storage-Status: ${status.getHealthStatus()}\")"},{"type":"INSERT","lineNumber":556,"content":"                } else {"},{"type":"DELETE","lineNumber":558,"oldContent":"    /**"},{"type":"DELETE","lineNumber":563,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"MODIFY","lineNumber":565,"content":"    ","oldContent":"    }"},{"type":"DELETE","lineNumber":568,"oldContent":"    "},{"type":"DELETE","lineNumber":569,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"DELETE","lineNumber":571,"oldContent":"     */"},{"type":"DELETE","lineNumber":573,"oldContent":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":570,"content":"    /**"},{"type":"DELETE","lineNumber":575,"oldContent":"        bitmap: Bitmap"},{"type":"DELETE","lineNumber":577,"oldContent":"    ): Boolean {"},{"type":"DELETE","lineNumber":580,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":575,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":582,"oldContent":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"INSERT","lineNumber":579,"content":"    "},{"type":"INSERT","lineNumber":581,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":582,"content":"     */"},{"type":"INSERT","lineNumber":583,"content":"    suspend fun createLandmark("},{"type":"MODIFY","lineNumber":587,"content":"        bitmap: Bitmap","oldContent":"                )"},{"type":"INSERT","lineNumber":588,"content":"    ): Boolean {"},{"type":"DELETE","lineNumber":590,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":593,"oldContent":"            }"},{"type":"INSERT","lineNumber":592,"content":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":593,"content":"                    bitmap = bitmap,"},{"type":"MODIFY","lineNumber":598,"content":"                )","oldContent":"        }"},{"type":"MODIFY","lineNumber":600,"content":"            } else {","oldContent":"    }"},{"type":"MODIFY","lineNumber":602,"content":"            }","oldContent":"    "},{"type":"DELETE","lineNumber":604,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":606,"content":"        }","oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"INSERT","lineNumber":607,"content":"    }"},{"type":"INSERT","lineNumber":608,"content":"    "},{"type":"INSERT","lineNumber":609,"content":"    /**"},{"type":"INSERT","lineNumber":610,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":630,"oldContent":"                    )"},{"type":"DELETE","lineNumber":632,"oldContent":"}"},{"type":"DELETE","lineNumber":633,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":634,"content":"                        instruction = \"Gehen Sie die Treppe hoch zu Stockwerk $floor\","},{"type":"DELETE","lineNumber":636,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":637,"oldContent":"                    steps = demoSteps"},{"type":"DELETE","lineNumber":638,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":639,"oldContent":"                )"},{"type":"INSERT","lineNumber":637,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":638,"content":"                        stepNumber = 4,"},{"type":"DELETE","lineNumber":641,"oldContent":"                "},{"type":"DELETE","lineNumber":643,"oldContent":"                _featureNavigationRoute.value = featureRoute"},{"type":"INSERT","lineNumber":641,"content":"                    )"},{"type":"DELETE","lineNumber":646,"oldContent":"                "},{"type":"DELETE","lineNumber":647,"oldContent":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":644,"content":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":647,"content":"                    steps = demoSteps"},{"type":"INSERT","lineNumber":648,"content":"                )"},{"type":"INSERT","lineNumber":649,"content":"                "},{"type":"INSERT","lineNumber":650,"content":"                _featureNavigationRoute.value = featureRoute"},{"type":"INSERT","lineNumber":651,"content":"                Log.i(TAG, \"Feature-Navigation Route geladen: ${demoSteps.size} Schritte\")"},{"type":"INSERT","lineNumber":652,"content":"                "},{"type":"INSERT","lineNumber":653,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":654,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":655,"oldContent":"                Log.i(TAG, \"Feature-Navigation Route geladen: ${demoSteps.size} Schritte\")"},{"type":"DELETE","lineNumber":656,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":663,"oldContent":"                "},{"type":"INSERT","lineNumber":667,"content":"                "},{"type":"DELETE","lineNumber":689,"oldContent":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":693,"oldContent":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (komplett überarbeitet)"},{"type":"INSERT","lineNumber":696,"content":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":696,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"INSERT","lineNumber":699,"content":"    /**"},{"type":"INSERT","lineNumber":700,"content":"     * Verarbeitet einen Kamera-Frame für echtes Feature-Matching (komplett überarbeitet)"},{"type":"INSERT","lineNumber":701,"content":"     */"},{"type":"INSERT","lineNumber":702,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"INSERT","lineNumber":703,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"INSERT","lineNumber":704,"content":"        if (!_isFeatureMappingEnabled.value) {"},{"type":"DELETE","lineNumber":700,"oldContent":"    /**"},{"type":"INSERT","lineNumber":708,"content":"        "},{"type":"DELETE","lineNumber":703,"oldContent":"     */"},{"type":"DELETE","lineNumber":705,"oldContent":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":709,"oldContent":"        if (!_isFeatureMappingEnabled.value) {"},{"type":"DELETE","lineNumber":710,"oldContent":"            return // Stilles Throttling"},{"type":"DELETE","lineNumber":711,"oldContent":"        "},{"type":"INSERT","lineNumber":717,"content":"            return // Stilles Throttling"},{"type":"INSERT","lineNumber":718,"content":"        }"},{"type":"INSERT","lineNumber":719,"content":"        lastFrameProcessTime = currentTime"},{"type":"INSERT","lineNumber":720,"content":"        "},{"type":"INSERT","lineNumber":721,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":722,"content":"            try {"},{"type":"INSERT","lineNumber":724,"content":"                "},{"type":"DELETE","lineNumber":718,"oldContent":"        }"},{"type":"INSERT","lineNumber":727,"content":"                "},{"type":"DELETE","lineNumber":720,"oldContent":"        lastFrameProcessTime = currentTime"},{"type":"INSERT","lineNumber":729,"content":"                _currentMatches.value = matches"},{"type":"INSERT","lineNumber":730,"content":"                "},{"type":"DELETE","lineNumber":722,"oldContent":"        "},{"type":"INSERT","lineNumber":732,"content":"                if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":724,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":726,"oldContent":"            try {"},{"type":"DELETE","lineNumber":728,"oldContent":"                "},{"type":"INSERT","lineNumber":736,"content":"                    }"},{"type":"INSERT","lineNumber":744,"content":"                }"},{"type":"INSERT","lineNumber":745,"content":"                "},{"type":"INSERT","lineNumber":746,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":739,"oldContent":"                "},{"type":"DELETE","lineNumber":741,"oldContent":"                _currentMatches.value = matches"},{"type":"DELETE","lineNumber":743,"oldContent":"                "},{"type":"DELETE","lineNumber":744,"oldContent":"                if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":745,"oldContent":"                    }"},{"type":"DELETE","lineNumber":746,"oldContent":"                }"},{"type":"DELETE","lineNumber":747,"oldContent":"                "},{"type":"DELETE","lineNumber":748,"oldContent":"        "},{"type":"DELETE","lineNumber":749,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":753,"oldContent":"    "},{"type":"INSERT","lineNumber":763,"content":"        "},{"type":"DELETE","lineNumber":763,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":765,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":766,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":768,"oldContent":"        "},{"type":"DELETE","lineNumber":769,"oldContent":"        if (currentStep < totalSteps) {"},{"type":"DELETE","lineNumber":771,"oldContent":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"INSERT","lineNumber":768,"content":"    "},{"type":"DELETE","lineNumber":779,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":781,"oldContent":"     */"},{"type":"INSERT","lineNumber":785,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":786,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":787,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":788,"content":"        "},{"type":"INSERT","lineNumber":789,"content":"        if (currentStep < totalSteps) {"},{"type":"INSERT","lineNumber":790,"content":"            setCurrentNavigationStep(currentStep + 1)"},{"type":"DELETE","lineNumber":791,"oldContent":"    }"},{"type":"DELETE","lineNumber":795,"oldContent":"     * Startet die Navigation von Anfang an"},{"type":"INSERT","lineNumber":798,"content":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":799,"content":"     */"},{"type":"DELETE","lineNumber":811,"oldContent":"    "},{"type":"INSERT","lineNumber":812,"content":"     * Startet die Navigation von Anfang an"},{"type":"DELETE","lineNumber":813,"oldContent":"    /**"},{"type":"DELETE","lineNumber":814,"oldContent":"     */"},{"type":"DELETE","lineNumber":818,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":819,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":821,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":822,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":823,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":825,"oldContent":"            }"},{"type":"DELETE","lineNumber":826,"oldContent":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"DELETE","lineNumber":827,"oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"DELETE","lineNumber":829,"oldContent":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"DELETE","lineNumber":831,"oldContent":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":832,"oldContent":"            appendLine(\"=== Ende Status ===\")"},{"type":"DELETE","lineNumber":833,"oldContent":"        }"},{"type":"DELETE","lineNumber":834,"oldContent":"    }"},{"type":"DELETE","lineNumber":837,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":839,"oldContent":"     */"},{"type":"DELETE","lineNumber":841,"oldContent":"        try {"},{"type":"INSERT","lineNumber":827,"content":"    }"},{"type":"INSERT","lineNumber":828,"content":"    "},{"type":"INSERT","lineNumber":829,"content":"    /**"},{"type":"INSERT","lineNumber":831,"content":"     */"},{"type":"DELETE","lineNumber":848,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":850,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":852,"oldContent":"            "},{"type":"DELETE","lineNumber":854,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":856,"oldContent":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":840,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":841,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":842,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":843,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"INSERT","lineNumber":844,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":845,"content":"            }"},{"type":"INSERT","lineNumber":846,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":847,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":848,"content":"            appendLine(\"Storage-Manager: ${storageManager != null}\")"},{"type":"INSERT","lineNumber":849,"content":"            appendLine(\"Feature-Matching-Engine: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":850,"content":"            appendLine(\"=== Ende Status ===\")"},{"type":"INSERT","lineNumber":851,"content":"        }"},{"type":"INSERT","lineNumber":852,"content":"    }"},{"type":"DELETE","lineNumber":859,"oldContent":"                    "},{"type":"INSERT","lineNumber":855,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":856,"content":"     */"},{"type":"INSERT","lineNumber":859,"content":"        try {"},{"type":"INSERT","lineNumber":869,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":870,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":871,"content":"            "},{"type":"INSERT","lineNumber":872,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":873,"content":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":873,"oldContent":"    "},{"type":"DELETE","lineNumber":875,"oldContent":"    /**"},{"type":"INSERT","lineNumber":876,"content":"                    "},{"type":"INSERT","lineNumber":889,"content":"    "},{"type":"INSERT","lineNumber":890,"content":"    /**"},{"type":"DELETE","lineNumber":894,"oldContent":"            "},{"type":"INSERT","lineNumber":909,"content":"            "},{"type":"DELETE","lineNumber":908,"oldContent":"    "},{"type":"DELETE","lineNumber":916,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":918,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":920,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":922,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":924,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":926,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":928,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":924,"content":"    "},{"type":"DELETE","lineNumber":930,"oldContent":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":939,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":941,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":942,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":943,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":944,"oldContent":"                            )"},{"type":"DELETE","lineNumber":946,"oldContent":"                        )"},{"type":"DELETE","lineNumber":947,"oldContent":"                    }"},{"type":"DELETE","lineNumber":948,"oldContent":"                }"},{"type":"DELETE","lineNumber":949,"oldContent":"            }"},{"type":"DELETE","lineNumber":951,"oldContent":"            "},{"type":"DELETE","lineNumber":953,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":938,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":939,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":940,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":941,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":942,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":943,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":944,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":945,"content":"                                description = \"Landmark\","},{"type":"DELETE","lineNumber":955,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":957,"oldContent":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":959,"oldContent":"            }"},{"type":"DELETE","lineNumber":961,"oldContent":"            "},{"type":"MODIFY","lineNumber":963,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),","oldContent":"            routeLandmarks"},{"type":"INSERT","lineNumber":964,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":965,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":966,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":967,"content":"                            )"},{"type":"INSERT","lineNumber":968,"content":"                        )"},{"type":"INSERT","lineNumber":969,"content":"                    }"},{"type":"INSERT","lineNumber":970,"content":"                }"},{"type":"INSERT","lineNumber":971,"content":"            }"},{"type":"INSERT","lineNumber":972,"content":"            "},{"type":"INSERT","lineNumber":973,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":974,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":975,"content":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":976,"content":"            }"},{"type":"INSERT","lineNumber":977,"content":"            "},{"type":"INSERT","lineNumber":978,"content":"            routeLandmarks"},{"type":"DELETE","lineNumber":991,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":1002,"oldContent":"     */"},{"type":"INSERT","lineNumber":1007,"content":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":1011,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1013,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":1015,"oldContent":"    }"},{"type":"DELETE","lineNumber":1017,"oldContent":"    "},{"type":"DELETE","lineNumber":1019,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1020,"oldContent":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":1022,"oldContent":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1018,"content":"     */"},{"type":"DELETE","lineNumber":1031,"oldContent":"        return landmarkIds.toList()"},{"type":"DELETE","lineNumber":1033,"oldContent":""},{"type":"INSERT","lineNumber":1029,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":1030,"content":"     */"},{"type":"INSERT","lineNumber":1031,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1032,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1033,"content":"        return emptyList()"},{"type":"INSERT","lineNumber":1034,"content":"    }"},{"type":"INSERT","lineNumber":1035,"content":"    "},{"type":"INSERT","lineNumber":1037,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":1037,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":1039,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1040,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":1041,"content":"        "},{"type":"INSERT","lineNumber":1042,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1043,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":1044,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":1045,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1046,"content":"                    landmark.id?.let { landmarkIds.add(it) } // landmarks ist List<RouteLandmarkData>, verwende .id"},{"type":"INSERT","lineNumber":1047,"content":"                }"},{"type":"INSERT","lineNumber":1048,"content":"            }"},{"type":"INSERT","lineNumber":1049,"content":"        }"},{"type":"INSERT","lineNumber":1050,"content":"        "},{"type":"INSERT","lineNumber":1051,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":1052,"content":"    }"},{"type":"INSERT","lineNumber":1053,"content":""},{"type":"INSERT","lineNumber":1054,"content":"    /**"},{"type":"INSERT","lineNumber":1055,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":1056,"content":"     */"},{"type":"INSERT","lineNumber":1057,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":1040,"oldContent":"     */"},{"type":"DELETE","lineNumber":1045,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1048,"oldContent":"     */"},{"type":"DELETE","lineNumber":1050,"oldContent":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"DELETE","lineNumber":1052,"oldContent":"        "},{"type":"DELETE","lineNumber":1054,"oldContent":"        val landmarkIds = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1056,"oldContent":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":1070,"content":"    }"},{"type":"DELETE","lineNumber":1058,"oldContent":"            for (routePart in pathItem.routeParts) {"},{"type":"DELETE","lineNumber":1060,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":1063,"oldContent":"                    landmark.id?.let { landmarkIds.add(it) } // landmarks ist List<RouteLandmarkData>, verwende .id"},{"type":"DELETE","lineNumber":1065,"oldContent":"                }"},{"type":"DELETE","lineNumber":1067,"oldContent":"            }"},{"type":"DELETE","lineNumber":1069,"oldContent":"        }"},{"type":"DELETE","lineNumber":1071,"oldContent":"        "},{"type":"DELETE","lineNumber":1073,"oldContent":"    }"},{"type":"DELETE","lineNumber":1075,"oldContent":"     * Fehlende Methoden für Navigation.kt"},{"type":"DELETE","lineNumber":1078,"oldContent":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":1081,"oldContent":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"DELETE","lineNumber":1083,"oldContent":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1086,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1089,"oldContent":"                    // 2. Aus dem ersten Node"},{"type":"DELETE","lineNumber":1091,"oldContent":"                    firstRoutePart?.nodes?.firstOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1094,"oldContent":"                        firstRoutePart.nodes.firstOrNull()?.node?.name ?: \"Unbekannter Startpunkt\""},{"type":"DELETE","lineNumber":1097,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1100,"oldContent":"                    // 3. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1098,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"INSERT","lineNumber":1099,"content":"                    }"},{"type":"INSERT","lineNumber":1100,"content":"                    // 2. Aus dem ersten Node"},{"type":"INSERT","lineNumber":1101,"content":"                    firstRoutePart?.nodes?.firstOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1102,"content":"                        firstRoutePart.nodes.firstOrNull()?.node?.name ?: \"Unbekannter Startpunkt\""},{"type":"INSERT","lineNumber":1103,"content":"                    }"},{"type":"INSERT","lineNumber":1104,"content":"                    // 3. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1115,"oldContent":"    }"},{"type":"DELETE","lineNumber":1117,"oldContent":"    "},{"type":"DELETE","lineNumber":1118,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1119,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1124,"content":"    }"},{"type":"INSERT","lineNumber":1125,"content":"    "},{"type":"INSERT","lineNumber":1126,"content":"    /**"},{"type":"INSERT","lineNumber":1129,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1136,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1137,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1139,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1140,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1142,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1143,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1144,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1146,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1148,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1149,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1154,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1155,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1156,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1158,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1159,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1160,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1161,"content":"                    }"},{"type":"INSERT","lineNumber":1162,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1163,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1164,"content":"                    }"},{"type":"DELETE","lineNumber":1182,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1197,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1204,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1206,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1220,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1221,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1232,"oldContent":"            0.0"},{"type":"DELETE","lineNumber":1234,"oldContent":"        }"},{"type":"DELETE","lineNumber":1239,"oldContent":"     * Gibt die geschätzte Gehzeit der Route zurück (in Minuten)"},{"type":"DELETE","lineNumber":1242,"oldContent":"    fun getEstimatedWalkingTime(): Int {"},{"type":"INSERT","lineNumber":1243,"content":"                0.0"},{"type":"INSERT","lineNumber":1244,"content":"            }"},{"type":"INSERT","lineNumber":1245,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1246,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"INSERT","lineNumber":1247,"content":"            0.0"},{"type":"INSERT","lineNumber":1248,"content":"        }"},{"type":"INSERT","lineNumber":1249,"content":"    }"},{"type":"INSERT","lineNumber":1250,"content":"    "},{"type":"INSERT","lineNumber":1251,"content":"    /**"},{"type":"INSERT","lineNumber":1252,"content":"     * Gibt die geschätzte Gehzeit der Route zurück (in Minuten)"},{"type":"INSERT","lineNumber":1253,"content":"     */"},{"type":"INSERT","lineNumber":1254,"content":"    fun getEstimatedWalkingTime(): Int {"},{"type":"INSERT","lineNumber":1255,"content":"        return try {"},{"type":"DELETE","lineNumber":1246,"oldContent":"                0.0"},{"type":"DELETE","lineNumber":1249,"oldContent":"            }"},{"type":"DELETE","lineNumber":1252,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1254,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"DELETE","lineNumber":1256,"oldContent":"    }"},{"type":"DELETE","lineNumber":1258,"oldContent":"    "},{"type":"DELETE","lineNumber":1261,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1265,"oldContent":"     */"},{"type":"DELETE","lineNumber":1269,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":1271,"oldContent":"    "},{"type":"DELETE","lineNumber":1273,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1275,"oldContent":"     */"},{"type":"MODIFY","lineNumber":1276,"content":"    ","oldContent":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1277,"content":"    /**"},{"type":"DELETE","lineNumber":1278,"oldContent":"                    "},{"type":"INSERT","lineNumber":1279,"content":"     */"},{"type":"DELETE","lineNumber":1280,"oldContent":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1282,"oldContent":"                        buildings.add(buildingName)"},{"type":"DELETE","lineNumber":1285,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1287,"oldContent":"                }"},{"type":"DELETE","lineNumber":1289,"oldContent":"                "},{"type":"DELETE","lineNumber":1292,"oldContent":"                val buildingList = buildings.toList()"},{"type":"INSERT","lineNumber":1289,"content":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1290,"content":"                    "},{"type":"INSERT","lineNumber":1291,"content":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1292,"content":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1293,"content":"                    }"},{"type":"INSERT","lineNumber":1294,"content":"                }"},{"type":"INSERT","lineNumber":1295,"content":"                "},{"type":"INSERT","lineNumber":1296,"content":"                val buildingList = buildings.toList()"},{"type":"DELETE","lineNumber":1310,"oldContent":"    }"},{"type":"DELETE","lineNumber":1311,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1312,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1313,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1314,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":1314,"oldContent":"                }"},{"type":"DELETE","lineNumber":1316,"oldContent":"                "},{"type":"INSERT","lineNumber":1318,"content":"                        val floorName = levelInfo.storeyNameDe "},{"type":"INSERT","lineNumber":1319,"content":"                            ?: levelInfo.storeyName "},{"type":"INSERT","lineNumber":1320,"content":"                            ?: levelInfo.storeyNameEn"},{"type":"INSERT","lineNumber":1321,"content":"                            ?: levelInfo.storey"},{"type":"INSERT","lineNumber":1322,"content":"                        "},{"type":"INSERT","lineNumber":1323,"content":"                        if (!floorName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1324,"content":"                            floors.add(floorName)"},{"type":"INSERT","lineNumber":1325,"content":"                        }"},{"type":"INSERT","lineNumber":1326,"content":"                    }"},{"type":"INSERT","lineNumber":1327,"content":"                }"},{"type":"INSERT","lineNumber":1328,"content":"                "},{"type":"DELETE","lineNumber":1321,"oldContent":"                        val floorName = levelInfo.storeyNameDe "},{"type":"DELETE","lineNumber":1323,"oldContent":"                            ?: levelInfo.storeyName "},{"type":"DELETE","lineNumber":1326,"oldContent":"                            ?: levelInfo.storeyNameEn"},{"type":"DELETE","lineNumber":1329,"oldContent":"                            ?: levelInfo.storey"},{"type":"DELETE","lineNumber":1332,"oldContent":"                        "},{"type":"DELETE","lineNumber":1335,"oldContent":"                        if (!floorName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1337,"oldContent":"                            floors.add(floorName)"},{"type":"DELETE","lineNumber":1340,"oldContent":"                        }"},{"type":"DELETE","lineNumber":1342,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1345,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1347,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1349,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1352,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1354,"oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":1357,"oldContent":"                buildings = emptyList(),"},{"type":"DELETE","lineNumber":1359,"oldContent":"                floors = emptyList(),"},{"type":"INSERT","lineNumber":1356,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"INSERT","lineNumber":1357,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1358,"content":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1359,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1360,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":1361,"content":"                estimatedTime = 0,"},{"type":"INSERT","lineNumber":1362,"content":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":1363,"content":"                floors = emptyList(),"},{"type":"INSERT","lineNumber":1366,"content":"        }"},{"type":"INSERT","lineNumber":1367,"content":"    }"},{"type":"INSERT","lineNumber":1368,"content":"    "},{"type":"INSERT","lineNumber":1369,"content":"    /**"},{"type":"INSERT","lineNumber":1370,"content":"     * Gibt formatierte Routeninformationen für die UI zurück"},{"type":"DELETE","lineNumber":1367,"oldContent":"        }"},{"type":"DELETE","lineNumber":1369,"oldContent":"    }"},{"type":"DELETE","lineNumber":1370,"oldContent":"    "},{"type":"DELETE","lineNumber":1372,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1374,"oldContent":"     * Gibt formatierte Routeninformationen für die UI zurück"},{"type":"INSERT","lineNumber":1390,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1389,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1396,"oldContent":"        }"},{"type":"DELETE","lineNumber":1398,"oldContent":"    }"},{"type":"DELETE","lineNumber":1401,"oldContent":"     */"},{"type":"INSERT","lineNumber":1403,"content":"        }"},{"type":"INSERT","lineNumber":1404,"content":"    }"},{"type":"DELETE","lineNumber":1404,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1408,"content":"     */"},{"type":"INSERT","lineNumber":1411,"content":"        val currentStep = _currentNavigationStep.value"}]},{"timestamp":1754925567265,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import kotlinx.coroutines.flow.MutableStateFlow","oldContent":"import android.content.Context"},{"type":"MODIFY","lineNumber":203,"content":"        val steps = mutableListOf<NavigationStep>()","oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"MODIFY","lineNumber":208,"content":"        ","oldContent":"     */"},{"type":"MODIFY","lineNumber":212,"content":"                // Verwende die deutsche Anweisung als primäre Anweisung","oldContent":"        "},{"type":"DELETE","lineNumber":215,"oldContent":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"DELETE","lineNumber":216,"oldContent":"    }"},{"type":"DELETE","lineNumber":217,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":215,"content":"                // Extrahiere Stockwerk aus levelInfo falls verfügbar"},{"type":"INSERT","lineNumber":216,"content":"                val floor = pathItem.levelInfo?.storey?.toIntOrNull() ?: 0"},{"type":"INSERT","lineNumber":217,"content":"                "},{"type":"MODIFY","lineNumber":246,"content":"                        landmarks = landmarkIds, // Jetzt echte Landmark-IDs","oldContent":"    suspend fun createLandmark("},{"type":"DELETE","lineNumber":269,"oldContent":"                val currentRoute = _currentRoute.value"},{"type":"DELETE","lineNumber":270,"oldContent":"     * Initialisiert das neue Storage-System und Feature-Matching (ersetzt Feature-Mapping)"},{"type":"INSERT","lineNumber":269,"content":"        )"},{"type":"INSERT","lineNumber":270,"content":"    }"},{"type":"MODIFY","lineNumber":273,"content":"    ","oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":308,"oldContent":"                } else {"},{"type":"MODIFY","lineNumber":310,"content":"                } else {","oldContent":"                    Log.e(TAG, \"❌ FeatureMatchingEngine Initialisierung fehlgeschlagen\")"},{"type":"INSERT","lineNumber":311,"content":"                    Log.e(TAG, \"❌ FeatureMatchingEngine Initialisierung fehlgeschlagen\")"},{"type":"INSERT","lineNumber":314,"content":"                "},{"type":"DELETE","lineNumber":316,"oldContent":"                "},{"type":"INSERT","lineNumber":323,"content":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"DELETE","lineNumber":325,"oldContent":"                Log.e(TAG, \"❌ Fehler bei Storage-Initialisierung: ${e.message}\", e)"},{"type":"INSERT","lineNumber":343,"content":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"DELETE","lineNumber":345,"oldContent":"                // Da die neue Engine alle verfügbaren Landmarks automatisch lädt,"},{"type":"INSERT","lineNumber":356,"content":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"DELETE","lineNumber":358,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Route-Landmarks: ${e.message}\", e)"},{"type":"DELETE","lineNumber":365,"oldContent":"            try {"},{"type":"INSERT","lineNumber":367,"content":"            try {"},{"type":"INSERT","lineNumber":369,"content":"                "},{"type":"DELETE","lineNumber":371,"oldContent":"                "},{"type":"INSERT","lineNumber":427,"content":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":429,"oldContent":"                Log.d(TAG, \"Landmark-Thumbnail geladen: $landmarkId (${thumbnail.width}x${thumbnail.height})\")"},{"type":"DELETE","lineNumber":437,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":439,"oldContent":"                val saveResult = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":442,"oldContent":"                    bitmap = bitmap,"},{"type":"DELETE","lineNumber":444,"oldContent":"                    landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":447,"oldContent":"                    landmarkName = landmarkName,"},{"type":"DELETE","lineNumber":450,"oldContent":"                    description = description,"},{"type":"DELETE","lineNumber":454,"oldContent":"                "},{"type":"DELETE","lineNumber":457,"oldContent":"                when (saveResult) {"},{"type":"DELETE","lineNumber":459,"oldContent":"                    is SaveResult.Success -> {"},{"type":"INSERT","lineNumber":452,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":453,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":454,"content":"                    bitmap = bitmap,"},{"type":"INSERT","lineNumber":455,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":456,"content":"                    landmarkName = landmarkName,"},{"type":"INSERT","lineNumber":457,"content":"                    description = description,"},{"type":"INSERT","lineNumber":458,"content":"                    category = \"Training\""},{"type":"INSERT","lineNumber":459,"content":"                )"},{"type":"INSERT","lineNumber":460,"content":"                "},{"type":"INSERT","lineNumber":461,"content":"                when (saveResult) {"},{"type":"INSERT","lineNumber":462,"content":"                    is SaveResult.Success -> {"},{"type":"INSERT","lineNumber":463,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":464,"content":"                        true"},{"type":"DELETE","lineNumber":465,"oldContent":"                    category = \"Training\""},{"type":"DELETE","lineNumber":466,"oldContent":"                )"},{"type":"DELETE","lineNumber":469,"oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"DELETE","lineNumber":471,"oldContent":"                        true"},{"type":"INSERT","lineNumber":472,"content":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"INSERT","lineNumber":475,"content":"            "},{"type":"DELETE","lineNumber":477,"oldContent":"                Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":479,"oldContent":"            "},{"type":"INSERT","lineNumber":482,"content":""},{"type":"DELETE","lineNumber":484,"oldContent":""},{"type":"MODIFY","lineNumber":490,"content":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||","oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":497,"oldContent":""},{"type":"DELETE","lineNumber":498,"oldContent":"    "},{"type":"DELETE","lineNumber":501,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"DELETE","lineNumber":503,"oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":500,"content":""},{"type":"INSERT","lineNumber":501,"content":"    "},{"type":"INSERT","lineNumber":505,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"INSERT","lineNumber":506,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":509,"content":"    /**"},{"type":"INSERT","lineNumber":510,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":511,"oldContent":"    /**"},{"type":"DELETE","lineNumber":513,"oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"MODIFY","lineNumber":516,"content":"    /**","oldContent":"    /**"},{"type":"MODIFY","lineNumber":533,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":536,"content":"     * Bereinigt Cache und defekte Dateien","oldContent":"     * Bereinigt Cache und defekte Dateien"},{"type":"INSERT","lineNumber":538,"content":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"DELETE","lineNumber":540,"oldContent":"    suspend fun cleanup(): CleanupSummary? {"},{"type":"MODIFY","lineNumber":550,"content":"                if (storageManager != null) {","oldContent":"                if (storageManager != null) {"},{"type":"MODIFY","lineNumber":557,"content":"                    Log.w(TAG, \"Storage-Manager nicht verfügbar\")","oldContent":"                    Log.w(TAG, \"Storage-Manager nicht verfügbar\")"},{"type":"DELETE","lineNumber":568,"oldContent":"    /**"},{"type":"INSERT","lineNumber":570,"content":"    /**"},{"type":"DELETE","lineNumber":572,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":574,"oldContent":"    }"},{"type":"DELETE","lineNumber":576,"oldContent":"    "},{"type":"DELETE","lineNumber":578,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":575,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"DELETE","lineNumber":580,"oldContent":"     */"},{"type":"DELETE","lineNumber":581,"oldContent":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":578,"content":"    }"},{"type":"INSERT","lineNumber":579,"content":"    "},{"type":"DELETE","lineNumber":584,"oldContent":"        Log.d(TAG, \"getCurrentStep called (stub)\")"},{"type":"INSERT","lineNumber":581,"content":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":582,"content":"     */"},{"type":"INSERT","lineNumber":583,"content":"    suspend fun createLandmark("},{"type":"INSERT","lineNumber":584,"content":"        landmarkId: String,"},{"type":"INSERT","lineNumber":586,"content":"        description: String,"},{"type":"DELETE","lineNumber":588,"oldContent":"        description: String,"},{"type":"MODIFY","lineNumber":592,"content":"                val result = storageManager!!.saveImage(","oldContent":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":605,"content":"            false"},{"type":"DELETE","lineNumber":607,"oldContent":"            false"},{"type":"DELETE","lineNumber":609,"oldContent":"     */"},{"type":"MODIFY","lineNumber":611,"content":"     */","oldContent":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"INSERT","lineNumber":612,"content":"    fun loadFeatureNavigationRoute(context: Context, building: String, floor: Int) {"},{"type":"DELETE","lineNumber":631,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":632,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":633,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":631,"content":"                    ),"},{"type":"INSERT","lineNumber":632,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":633,"content":"                        stepNumber = 3,"},{"type":"DELETE","lineNumber":640,"oldContent":"                    )"},{"type":"DELETE","lineNumber":642,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":641,"content":"                    )"},{"type":"INSERT","lineNumber":644,"content":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":645,"content":"                    id = \"demo_route\","},{"type":"INSERT","lineNumber":646,"content":"                    name = \"Demo Route\","},{"type":"DELETE","lineNumber":647,"oldContent":"                    id = \"demo_route\","},{"type":"DELETE","lineNumber":649,"oldContent":"                    name = \"Demo Route\","},{"type":"DELETE","lineNumber":651,"oldContent":"            }"},{"type":"DELETE","lineNumber":653,"oldContent":"        }"},{"type":"DELETE","lineNumber":655,"oldContent":"    }"},{"type":"DELETE","lineNumber":657,"oldContent":"    "},{"type":"INSERT","lineNumber":655,"content":"            }"},{"type":"INSERT","lineNumber":656,"content":"        }"},{"type":"INSERT","lineNumber":657,"content":"    }"},{"type":"INSERT","lineNumber":658,"content":"    "},{"type":"INSERT","lineNumber":667,"content":"                "},{"type":"DELETE","lineNumber":669,"oldContent":"                "},{"type":"MODIFY","lineNumber":697,"content":"    private val frameProcessingInterval = 200L // Verarbeite nur alle 200ms (5 FPS) - weniger aggressiv für bessere Logs","oldContent":"    private val frameProcessingInterval = 200L // Verarbeite nur alle 200ms (5 FPS) - weniger aggressiv für bessere Logs"},{"type":"DELETE","lineNumber":699,"oldContent":"            Log.v(TAG, \"⚠️ Feature mapping nicht aktiviert, überspringe Frame\")"},{"type":"DELETE","lineNumber":701,"oldContent":"            return"},{"type":"DELETE","lineNumber":704,"oldContent":"        }"},{"type":"DELETE","lineNumber":706,"oldContent":"        if (featureMatchingEngine == null) {"},{"type":"INSERT","lineNumber":705,"content":"            Log.v(TAG, \"⚠️ Feature mapping nicht aktiviert, überspringe Frame\")"},{"type":"INSERT","lineNumber":706,"content":"            return"},{"type":"INSERT","lineNumber":707,"content":"        }"},{"type":"INSERT","lineNumber":708,"content":"        "},{"type":"INSERT","lineNumber":709,"content":"        if (featureMatchingEngine == null) {"},{"type":"DELETE","lineNumber":713,"oldContent":"        "},{"type":"DELETE","lineNumber":717,"oldContent":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":718,"oldContent":"                // Verarbeite Frame mit der neuen Engine"},{"type":"DELETE","lineNumber":720,"oldContent":"                val matches = featureMatchingEngine!!.processFrame(frame)"},{"type":"DELETE","lineNumber":723,"oldContent":"                // Update UI State"},{"type":"DELETE","lineNumber":726,"oldContent":"                // Logge nur bei erfolgreichen Matches"},{"type":"DELETE","lineNumber":728,"oldContent":"                    Log.i(TAG, \"🎯 ${matches.size} Landmark-Matches gefunden:\")"},{"type":"INSERT","lineNumber":723,"content":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":730,"oldContent":"                    matches.take(3).forEach { match ->"},{"type":"INSERT","lineNumber":725,"content":"                // Verarbeite Frame mit der neuen Engine"},{"type":"INSERT","lineNumber":726,"content":"                val matches = featureMatchingEngine!!.processFrame(frame)"},{"type":"DELETE","lineNumber":732,"oldContent":"                        Log.i(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}% Confidence\")"},{"type":"INSERT","lineNumber":728,"content":"                // Update UI State"},{"type":"DELETE","lineNumber":734,"oldContent":"                    "},{"type":"INSERT","lineNumber":731,"content":"                // Logge nur bei erfolgreichen Matches"},{"type":"INSERT","lineNumber":732,"content":"                if (matches.isNotEmpty()) {"},{"type":"INSERT","lineNumber":733,"content":"                    Log.i(TAG, \"🎯 ${matches.size} Landmark-Matches gefunden:\")"},{"type":"INSERT","lineNumber":734,"content":"                    matches.take(3).forEach { match ->"},{"type":"INSERT","lineNumber":735,"content":"                        Log.i(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}% Confidence\")"},{"type":"INSERT","lineNumber":736,"content":"                    }"},{"type":"INSERT","lineNumber":737,"content":"                    "},{"type":"DELETE","lineNumber":738,"oldContent":"                if (matches.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":744,"content":"                }","oldContent":"                    }"},{"type":"INSERT","lineNumber":745,"content":"                "},{"type":"INSERT","lineNumber":746,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":749,"oldContent":"                }"},{"type":"DELETE","lineNumber":750,"oldContent":"                "},{"type":"DELETE","lineNumber":751,"oldContent":"            } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":764,"content":"        if (!enabled) {","oldContent":"        if (!enabled) {"},{"type":"MODIFY","lineNumber":768,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":780,"oldContent":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":782,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":784,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":786,"oldContent":"        "},{"type":"DELETE","lineNumber":788,"oldContent":"        if (currentStep < totalSteps) {"},{"type":"INSERT","lineNumber":785,"content":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":786,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":787,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":788,"content":"        "},{"type":"INSERT","lineNumber":789,"content":"        if (currentStep < totalSteps) {"},{"type":"MODIFY","lineNumber":798,"content":"     * Geht zum vorherigen Navigationsschritt","oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":819,"oldContent":"    }"},{"type":"DELETE","lineNumber":821,"oldContent":"    "},{"type":"DELETE","lineNumber":823,"oldContent":"    /**"},{"type":"DELETE","lineNumber":824,"oldContent":"     */"},{"type":"DELETE","lineNumber":828,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"INSERT","lineNumber":825,"content":"        setFeatureMappingEnabled(false)"},{"type":"INSERT","lineNumber":826,"content":"        _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":827,"content":"    }"},{"type":"INSERT","lineNumber":828,"content":"    "},{"type":"INSERT","lineNumber":829,"content":"    /**"},{"type":"INSERT","lineNumber":830,"content":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"INSERT","lineNumber":831,"content":"     */"},{"type":"INSERT","lineNumber":832,"content":"    fun getStatus(): String {"},{"type":"INSERT","lineNumber":833,"content":"        val route = _currentRoute.value"},{"type":"INSERT","lineNumber":834,"content":"        val step = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":835,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":836,"content":"        val matchesCount = _currentMatches.value.size"},{"type":"INSERT","lineNumber":837,"content":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"INSERT","lineNumber":838,"content":"        "},{"type":"INSERT","lineNumber":839,"content":"        return buildString {"},{"type":"INSERT","lineNumber":840,"content":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"DELETE","lineNumber":832,"oldContent":"        setFeatureMappingEnabled(false)"},{"type":"DELETE","lineNumber":834,"oldContent":"        _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":836,"oldContent":"     * Gibt den aktuellen Status der RouteViewModel zurück"},{"type":"DELETE","lineNumber":838,"oldContent":"    fun getStatus(): String {"},{"type":"DELETE","lineNumber":840,"oldContent":"        val route = _currentRoute.value"},{"type":"DELETE","lineNumber":842,"oldContent":"        val step = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":845,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":848,"oldContent":"        val matchesCount = _currentMatches.value.size"},{"type":"DELETE","lineNumber":850,"oldContent":"        val isFeatureMappingEnabled = _isFeatureMappingEnabled.value"},{"type":"DELETE","lineNumber":851,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"MODIFY","lineNumber":853,"content":"    ","oldContent":"        "},{"type":"INSERT","lineNumber":854,"content":"    /**"},{"type":"INSERT","lineNumber":855,"content":"     * Test-Methode für Feature-Matching"},{"type":"DELETE","lineNumber":854,"oldContent":"        return buildString {"},{"type":"INSERT","lineNumber":857,"content":"    private fun testFeatureMatching() {"},{"type":"INSERT","lineNumber":858,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":859,"content":"            try {"},{"type":"INSERT","lineNumber":860,"content":"                Log.i(TAG, \"🧪 Teste Feature-Matching Engine...\")"},{"type":"INSERT","lineNumber":861,"content":"                "},{"type":"INSERT","lineNumber":862,"content":"                // Erstelle einen Test-Frame (schwarzes Bild)"},{"type":"INSERT","lineNumber":863,"content":"                val testFrame = org.opencv.core.Mat(480, 640, org.opencv.core.CvType.CV_8UC3)"},{"type":"INSERT","lineNumber":864,"content":"                testFrame.setTo(org.opencv.core.Scalar(0.0, 0.0, 0.0))"},{"type":"INSERT","lineNumber":865,"content":"                "},{"type":"INSERT","lineNumber":866,"content":"                val matches = featureMatchingEngine?.processFrame(testFrame) ?: emptyList()"},{"type":"INSERT","lineNumber":867,"content":"                Log.i(TAG, \"🧪 Test-Frame Ergebnis: ${matches.size} Matches\")"},{"type":"INSERT","lineNumber":868,"content":"                "},{"type":"INSERT","lineNumber":869,"content":"                if (matches.isEmpty()) {"},{"type":"INSERT","lineNumber":870,"content":"                    Log.i(TAG, \"✅ Korrekt: Schwarzer Frame erzeugt keine Matches\")"},{"type":"INSERT","lineNumber":871,"content":"                } else {"},{"type":"INSERT","lineNumber":872,"content":"                    Log.w(TAG, \"⚠️ Unerwartete Matches bei schwarzem Frame:\")"},{"type":"INSERT","lineNumber":873,"content":"                    matches.forEach { match ->"},{"type":"INSERT","lineNumber":874,"content":"                        Log.w(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":875,"content":"                    }"},{"type":"INSERT","lineNumber":876,"content":"                }"},{"type":"INSERT","lineNumber":877,"content":"                "},{"type":"INSERT","lineNumber":878,"content":"                testFrame.release()"},{"type":"INSERT","lineNumber":879,"content":"                "},{"type":"INSERT","lineNumber":880,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":881,"content":"                Log.e(TAG, \"❌ Fehler beim Feature-Matching Test: ${e.message}\", e)"},{"type":"INSERT","lineNumber":882,"content":"            }"},{"type":"INSERT","lineNumber":883,"content":"        }"},{"type":"INSERT","lineNumber":884,"content":"    }"},{"type":"DELETE","lineNumber":856,"oldContent":"        try {"},{"type":"INSERT","lineNumber":887,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":888,"content":"     */"},{"type":"INSERT","lineNumber":891,"content":"        try {"},{"type":"DELETE","lineNumber":866,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":868,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":901,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":902,"content":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":873,"oldContent":"                try {"},{"type":"INSERT","lineNumber":906,"content":"                try {"},{"type":"DELETE","lineNumber":889,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":891,"oldContent":"     */"},{"type":"INSERT","lineNumber":923,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":924,"content":"     */"},{"type":"DELETE","lineNumber":909,"oldContent":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":942,"content":"            // Test 4: Navigation starten"},{"type":"DELETE","lineNumber":922,"oldContent":"    "},{"type":"INSERT","lineNumber":956,"content":"    "},{"type":"DELETE","lineNumber":933,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":966,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":967,"content":"            "},{"type":"INSERT","lineNumber":968,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":969,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":970,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":937,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":943,"oldContent":"            "},{"type":"DELETE","lineNumber":944,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":945,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":983,"content":"                }"},{"type":"INSERT","lineNumber":984,"content":"            }"},{"type":"INSERT","lineNumber":985,"content":"            "},{"type":"INSERT","lineNumber":986,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":987,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":988,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":989,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":990,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":991,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":992,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":993,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":994,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":953,"oldContent":"                }"},{"type":"DELETE","lineNumber":955,"oldContent":"            }"},{"type":"DELETE","lineNumber":957,"oldContent":"            "},{"type":"DELETE","lineNumber":959,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":961,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":963,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":965,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":967,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":969,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":971,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":973,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":975,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":977,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":979,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1011,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1012,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":1007,"oldContent":"        try {"},{"type":"INSERT","lineNumber":1040,"content":"        try {"},{"type":"DELETE","lineNumber":1016,"oldContent":"     */"},{"type":"INSERT","lineNumber":1050,"content":"     */"},{"type":"DELETE","lineNumber":1025,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"DELETE","lineNumber":1027,"oldContent":"     */"},{"type":"INSERT","lineNumber":1059,"content":"    "},{"type":"INSERT","lineNumber":1060,"content":"    /**"},{"type":"INSERT","lineNumber":1061,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":1062,"content":"     */"},{"type":"DELETE","lineNumber":1031,"oldContent":"    "},{"type":"DELETE","lineNumber":1034,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1037,"oldContent":"     */"},{"type":"DELETE","lineNumber":1039,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1070,"content":"     */"},{"type":"DELETE","lineNumber":1041,"oldContent":"        initializeStorage(context)"},{"type":"DELETE","lineNumber":1044,"oldContent":"        "},{"type":"DELETE","lineNumber":1046,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":1048,"oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":1050,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":1053,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":1055,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1058,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"DELETE","lineNumber":1061,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":1064,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":1067,"oldContent":"        }"},{"type":"INSERT","lineNumber":1090,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1091,"content":"        initializeStorage(context)"},{"type":"INSERT","lineNumber":1092,"content":"        "},{"type":"INSERT","lineNumber":1093,"content":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"INSERT","lineNumber":1094,"content":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":1095,"content":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"INSERT","lineNumber":1096,"content":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":1097,"content":"        } else {"},{"type":"INSERT","lineNumber":1098,"content":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1099,"content":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"INSERT","lineNumber":1100,"content":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":1101,"content":"        }"},{"type":"INSERT","lineNumber":1102,"content":"    }"},{"type":"DELETE","lineNumber":1077,"oldContent":"    }"},{"type":"DELETE","lineNumber":1095,"oldContent":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"INSERT","lineNumber":1129,"content":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1130,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1101,"oldContent":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1103,"oldContent":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1105,"oldContent":"                        firstPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1137,"content":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1138,"content":"                        firstPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1123,"oldContent":"    }"},{"type":"INSERT","lineNumber":1156,"content":"    }"},{"type":"DELETE","lineNumber":1126,"oldContent":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1159,"content":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1161,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1131,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1147,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1149,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1151,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1154,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1156,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1158,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1186,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1187,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1188,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1190,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1191,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1192,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1163,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"DELETE","lineNumber":1165,"oldContent":"                }"},{"type":"INSERT","lineNumber":1197,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1198,"content":"                }"},{"type":"DELETE","lineNumber":1192,"oldContent":"}"},{"type":"DELETE","lineNumber":1193,"oldContent":"    }"},{"type":"DELETE","lineNumber":1194,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1195,"oldContent":"     */"},{"type":"DELETE","lineNumber":1196,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1224,"content":"        val locationPatterns = listOf("},{"type":"INSERT","lineNumber":1225,"content":"            Regex(\"(?:zu|zum|zur|in|im|an|am)\\\\s+([^.]+?)(?:\\\\s+(?:gehen|folgen|wenden)|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1226,"content":"            Regex(\"(?:Büro|Office|Raum|Room)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1227,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1228,"content":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1229,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1199,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1220,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":1222,"oldContent":"    }"},{"type":"INSERT","lineNumber":1254,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1255,"content":"    }"},{"type":"DELETE","lineNumber":1242,"oldContent":"                0.0"},{"type":"INSERT","lineNumber":1275,"content":"                0.0"},{"type":"DELETE","lineNumber":1245,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":1247,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1250,"oldContent":"                // Verwende routeInfo falls verfügbar"},{"type":"DELETE","lineNumber":1252,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":1255,"oldContent":"                "},{"type":"DELETE","lineNumber":1257,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":1260,"oldContent":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1288,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1289,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1290,"content":"                // Verwende routeInfo falls verfügbar"},{"type":"INSERT","lineNumber":1291,"content":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"INSERT","lineNumber":1292,"content":"                "},{"type":"INSERT","lineNumber":1293,"content":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"INSERT","lineNumber":1294,"content":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1318,"content":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":1319,"content":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1320,"content":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1288,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1290,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1293,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1295,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1297,"oldContent":"                buildingList"},{"type":"INSERT","lineNumber":1329,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1330,"content":"                buildingList"},{"type":"DELETE","lineNumber":1314,"oldContent":"                val floors = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1347,"content":"                val floors = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1319,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1321,"oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"DELETE","lineNumber":1323,"oldContent":"                floorList"},{"type":"DELETE","lineNumber":1326,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1329,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":1331,"oldContent":"            }"},{"type":"DELETE","lineNumber":1334,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1361,"content":"                val floorList = floors.toList()"},{"type":"INSERT","lineNumber":1362,"content":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"INSERT","lineNumber":1363,"content":"                floorList"},{"type":"INSERT","lineNumber":1364,"content":"            } else {"},{"type":"INSERT","lineNumber":1365,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1366,"content":"            }"},{"type":"INSERT","lineNumber":1367,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1353,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"INSERT","lineNumber":1386,"content":"            )"},{"type":"INSERT","lineNumber":1387,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1388,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1357,"oldContent":"            )"},{"type":"DELETE","lineNumber":1360,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1362,"oldContent":"                totalSteps = 0"},{"type":"DELETE","lineNumber":1364,"oldContent":"            )"},{"type":"DELETE","lineNumber":1366,"oldContent":"     */"},{"type":"DELETE","lineNumber":1367,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1368,"oldContent":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1396,"content":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1397,"content":"            )"},{"type":"DELETE","lineNumber":1370,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1373,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1403,"content":"     */"},{"type":"INSERT","lineNumber":1404,"content":"    fun getFormattedRouteInfo(): String {"},{"type":"INSERT","lineNumber":1405,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1406,"content":"        return buildString {"},{"type":"INSERT","lineNumber":1407,"content":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1422,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1392,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1404,"oldContent":"    "},{"type":"INSERT","lineNumber":1437,"content":"    "},{"type":"DELETE","lineNumber":1408,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1441,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1443,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1413,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1459,"content":"}"}]},{"timestamp":1754925628471,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import kotlinx.coroutines.runBlocking","oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"DELETE","lineNumber":190,"oldContent":"                        true"},{"type":"MODIFY","lineNumber":190,"content":"            Log.d(TAG, \"  - Floor: ${step.floor}\")","oldContent":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"INSERT","lineNumber":191,"content":"            Log.d(TAG, \"  - Distance: ${step.distance}m\")"},{"type":"MODIFY","lineNumber":230,"content":"                        landmarkIds.add(landmarkId)","oldContent":"            for (routePart in pathItem.routeParts) {"},{"type":"DELETE","lineNumber":240,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":241,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"DELETE","lineNumber":242,"oldContent":"        }"},{"type":"INSERT","lineNumber":240,"content":"                steps.add("},{"type":"INSERT","lineNumber":241,"content":"                    NavigationStep("},{"type":"INSERT","lineNumber":242,"content":"                        stepNumber = stepNumber++,"},{"type":"MODIFY","lineNumber":266,"content":"            totalLength = steps.sumOf { it.distance },","oldContent":"    }"},{"type":"DELETE","lineNumber":271,"oldContent":"            Log.i(TAG, \"Vorheriger Schritt: ${currentStep - 1}\")"},{"type":"MODIFY","lineNumber":272,"content":"","oldContent":"            setCurrentNavigationStep(currentStep - 1)"},{"type":"INSERT","lineNumber":273,"content":"    "},{"type":"INSERT","lineNumber":309,"content":"                    "},{"type":"DELETE","lineNumber":311,"oldContent":"                    "},{"type":"MODIFY","lineNumber":367,"content":"            try {","oldContent":"            try {"},{"type":"DELETE","lineNumber":446,"oldContent":"            if (storageManager != null) {"},{"type":"MODIFY","lineNumber":448,"content":"    ): Boolean {","oldContent":"                val saveResult = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":449,"content":"        return try {"},{"type":"INSERT","lineNumber":450,"content":"            Log.i(TAG, \"Füge neuen Landmark hinzu: $landmarkId\")"},{"type":"INSERT","lineNumber":451,"content":"            "},{"type":"INSERT","lineNumber":452,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":453,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":452,"oldContent":"    ): Boolean {"},{"type":"DELETE","lineNumber":454,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":457,"oldContent":"            Log.i(TAG, \"Füge neuen Landmark hinzu: $landmarkId\")"},{"type":"DELETE","lineNumber":460,"oldContent":"            "},{"type":"DELETE","lineNumber":462,"oldContent":"                    }"},{"type":"DELETE","lineNumber":464,"oldContent":"                    is SaveResult.Error -> {"},{"type":"DELETE","lineNumber":466,"oldContent":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"INSERT","lineNumber":465,"content":"                    }"},{"type":"INSERT","lineNumber":466,"content":"                    is SaveResult.Error -> {"},{"type":"INSERT","lineNumber":467,"content":"                        Log.e(TAG, \"Fehler beim lokalen Speichern: ${saveResult.message}\")"},{"type":"MODIFY","lineNumber":476,"content":"        } catch (e: Exception) {","oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":489,"content":"    private fun isEmulatorDevice(): Boolean {"},{"type":"DELETE","lineNumber":490,"oldContent":"        return (android.os.Build.FINGERPRINT.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":498,"oldContent":""},{"type":"INSERT","lineNumber":500,"content":""},{"type":"DELETE","lineNumber":503,"oldContent":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {"},{"type":"MODIFY","lineNumber":505,"content":"    suspend fun loadThumbnail(landmarkId: String): android.graphics.Bitmap? {","oldContent":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"INSERT","lineNumber":506,"content":"        return storageManager?.loadThumbnail(landmarkId)"},{"type":"MODIFY","lineNumber":511,"content":"     */","oldContent":"     */"},{"type":"INSERT","lineNumber":515,"content":"    "},{"type":"DELETE","lineNumber":516,"oldContent":"    /**"},{"type":"INSERT","lineNumber":532,"content":"        }"},{"type":"DELETE","lineNumber":533,"oldContent":"    }"},{"type":"MODIFY","lineNumber":535,"content":"    /**","oldContent":"}"},{"type":"MODIFY","lineNumber":540,"content":"    }","oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":543,"oldContent":"    "},{"type":"DELETE","lineNumber":544,"oldContent":"    }"},{"type":"DELETE","lineNumber":545,"oldContent":"        return \"Haupteingang\""},{"type":"INSERT","lineNumber":543,"content":"     * Lädt verfügbare Landmarks aus dem Storage-System"},{"type":"INSERT","lineNumber":544,"content":"     */"},{"type":"INSERT","lineNumber":545,"content":"    private fun loadAvailableStorageData() {"},{"type":"INSERT","lineNumber":549,"content":"                "},{"type":"DELETE","lineNumber":550,"oldContent":"                if (storageManager != null) {"},{"type":"MODIFY","lineNumber":556,"content":"                } else {","oldContent":"            for (routePart in pathItem.routeParts) {"},{"type":"MODIFY","lineNumber":570,"content":"    /**","oldContent":"    /**"},{"type":"DELETE","lineNumber":573,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":575,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":576,"content":"        val byteArray = byteArrayOutputStream.toByteArray()"},{"type":"INSERT","lineNumber":577,"content":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"DELETE","lineNumber":578,"oldContent":"        val byteArray = byteArrayOutputStream.toByteArray()"},{"type":"INSERT","lineNumber":580,"content":"    /**"},{"type":"DELETE","lineNumber":581,"oldContent":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"DELETE","lineNumber":583,"oldContent":"    /**"},{"type":"INSERT","lineNumber":591,"content":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":592,"oldContent":"                val result = storageManager!!.saveImage("},{"type":"INSERT","lineNumber":610,"content":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"DELETE","lineNumber":612,"oldContent":"     * Lädt Feature-Navigation Route für ein bestimmtes Gebäude und Stockwerk"},{"type":"MODIFY","lineNumber":641,"content":"                    )","oldContent":"                    )"},{"type":"MODIFY","lineNumber":644,"content":"                val featureRoute = FeatureNavigationRoute(","oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"MODIFY","lineNumber":647,"content":"                    steps = demoSteps","oldContent":"                    steps = demoSteps"},{"type":"INSERT","lineNumber":653,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":654,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":655,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":658,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"INSERT","lineNumber":696,"content":"    private var lastFrameProcessTime = 0L"},{"type":"DELETE","lineNumber":697,"oldContent":"    private val frameProcessingInterval = 200L // Verarbeite nur alle 200ms (5 FPS) - weniger aggressiv für bessere Logs"},{"type":"DELETE","lineNumber":702,"oldContent":"            Log.v(TAG, \"⚠️ Feature mapping nicht aktiviert, überspringe Frame\")"},{"type":"INSERT","lineNumber":703,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"INSERT","lineNumber":704,"content":"        if (!_isFeatureMappingEnabled.value) {"},{"type":"INSERT","lineNumber":705,"content":"            Log.v(TAG, \"⚠️ Feature mapping nicht aktiviert, überspringe Frame\")"},{"type":"DELETE","lineNumber":706,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"DELETE","lineNumber":708,"oldContent":"        if (!_isFeatureMappingEnabled.value) {"},{"type":"MODIFY","lineNumber":710,"content":"            Log.w(TAG, \"⚠️ FeatureMatchingEngine nicht initialisiert, überspringe Frame\")","oldContent":"            Log.v(TAG, \"⚠️ FeatureMatchingEngine nicht initialisiert, überspringe Frame\")"},{"type":"INSERT","lineNumber":714,"content":"        Log.d(TAG, \"📸 Frame empfangen: ${frame.cols()}x${frame.rows()}, Channels: ${frame.channels()}\")"},{"type":"INSERT","lineNumber":715,"content":"        "},{"type":"DELETE","lineNumber":720,"oldContent":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":722,"oldContent":"                // Verarbeite Frame mit der neuen Engine"},{"type":"DELETE","lineNumber":724,"oldContent":"                val matches = featureMatchingEngine!!.processFrame(frame)"},{"type":"INSERT","lineNumber":725,"content":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"INSERT","lineNumber":726,"content":"                "},{"type":"INSERT","lineNumber":727,"content":"                // Verarbeite Frame mit der neuen Engine"},{"type":"INSERT","lineNumber":728,"content":"                val matches = featureMatchingEngine!!.processFrame(frame)"},{"type":"INSERT","lineNumber":729,"content":"                "},{"type":"INSERT","lineNumber":731,"content":"                _currentMatches.value = matches"},{"type":"DELETE","lineNumber":729,"oldContent":"                "},{"type":"DELETE","lineNumber":732,"oldContent":"                _currentMatches.value = matches"},{"type":"DELETE","lineNumber":735,"oldContent":"                "},{"type":"DELETE","lineNumber":737,"oldContent":"                    // Trigger AR-Updates für beste Matches"},{"type":"INSERT","lineNumber":740,"content":"                    // Trigger AR-Updates für beste Matches"},{"type":"DELETE","lineNumber":744,"oldContent":"                    }"},{"type":"DELETE","lineNumber":747,"oldContent":"                _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":749,"content":"                Log.e(TAG, \"❌ Fehler beim Frame-Processing: ${e.message}\", e)"},{"type":"INSERT","lineNumber":750,"content":"                _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":765,"content":"        "},{"type":"DELETE","lineNumber":764,"oldContent":"        if (!enabled) {"},{"type":"INSERT","lineNumber":769,"content":"    }"},{"type":"DELETE","lineNumber":768,"oldContent":"    "},{"type":"DELETE","lineNumber":782,"oldContent":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":785,"content":"     * Geht zum nächsten Navigationsschritt"},{"type":"INSERT","lineNumber":786,"content":"     */"},{"type":"INSERT","lineNumber":787,"content":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":786,"oldContent":"     * Geht zum nächsten Navigationsschritt"},{"type":"DELETE","lineNumber":789,"oldContent":"     */"},{"type":"INSERT","lineNumber":799,"content":"    /**"},{"type":"DELETE","lineNumber":798,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"DELETE","lineNumber":821,"oldContent":"        setFeatureMappingEnabled(false)"},{"type":"DELETE","lineNumber":823,"oldContent":"        _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":825,"oldContent":"    }"},{"type":"INSERT","lineNumber":826,"content":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"INSERT","lineNumber":827,"content":"        setFeatureMappingEnabled(false)"},{"type":"INSERT","lineNumber":828,"content":"        _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":829,"content":"    }"},{"type":"DELETE","lineNumber":829,"oldContent":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"DELETE","lineNumber":831,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"DELETE","lineNumber":833,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":836,"oldContent":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"DELETE","lineNumber":839,"oldContent":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"DELETE","lineNumber":842,"oldContent":"            }"},{"type":"DELETE","lineNumber":845,"oldContent":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"INSERT","lineNumber":843,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":844,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":845,"content":"                appendLine(\"Route Pfad-Elemente: ${route.route.path.size}\")"},{"type":"INSERT","lineNumber":846,"content":"                appendLine(\"Aktueller Schritt: $step von $totalSteps\")"},{"type":"INSERT","lineNumber":847,"content":"            }"},{"type":"INSERT","lineNumber":848,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"DELETE","lineNumber":853,"oldContent":"        "},{"type":"DELETE","lineNumber":857,"oldContent":"    "},{"type":"INSERT","lineNumber":858,"content":"     */"},{"type":"DELETE","lineNumber":859,"oldContent":"    /**"},{"type":"DELETE","lineNumber":861,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":863,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":865,"oldContent":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"DELETE","lineNumber":867,"oldContent":"            "},{"type":"DELETE","lineNumber":869,"oldContent":"            // Stoppe Navigation"},{"type":"DELETE","lineNumber":871,"oldContent":"            stopNavigation()"},{"type":"DELETE","lineNumber":873,"oldContent":"            "},{"type":"DELETE","lineNumber":875,"oldContent":"            // Bereinige Ressourcen"},{"type":"DELETE","lineNumber":878,"oldContent":"            arTrackingSystem?.resetTracking()"},{"type":"DELETE","lineNumber":881,"oldContent":"            processedLandmarks.clear()"},{"type":"DELETE","lineNumber":883,"oldContent":"            "},{"type":"DELETE","lineNumber":885,"oldContent":"            "},{"type":"DELETE","lineNumber":887,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":890,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":892,"oldContent":"                    storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":894,"oldContent":"                    "},{"type":"DELETE","lineNumber":896,"oldContent":"                    // Feature-Storage wird automatisch bereinigt"},{"type":"DELETE","lineNumber":898,"oldContent":"                    "},{"type":"DELETE","lineNumber":900,"oldContent":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"DELETE","lineNumber":902,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":904,"oldContent":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"DELETE","lineNumber":906,"oldContent":"                }"},{"type":"DELETE","lineNumber":908,"oldContent":"            }"},{"type":"INSERT","lineNumber":887,"content":"    "},{"type":"INSERT","lineNumber":888,"content":"    /**"},{"type":"INSERT","lineNumber":889,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":890,"content":"     */"},{"type":"INSERT","lineNumber":891,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":892,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":893,"content":"        try {"},{"type":"INSERT","lineNumber":894,"content":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"INSERT","lineNumber":896,"content":"            // Stoppe Navigation"},{"type":"INSERT","lineNumber":897,"content":"            stopNavigation()"},{"type":"INSERT","lineNumber":898,"content":"            "},{"type":"INSERT","lineNumber":899,"content":"            // Bereinige Ressourcen"},{"type":"INSERT","lineNumber":900,"content":"            arTrackingSystem?.resetTracking()"},{"type":"INSERT","lineNumber":901,"content":"            processedLandmarks.clear()"},{"type":"INSERT","lineNumber":902,"content":"            "},{"type":"INSERT","lineNumber":903,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":904,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":905,"content":"            "},{"type":"INSERT","lineNumber":906,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":907,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":908,"content":"                try {"},{"type":"INSERT","lineNumber":909,"content":"                    storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":910,"content":"                    "},{"type":"INSERT","lineNumber":911,"content":"                    // Feature-Storage wird automatisch bereinigt"},{"type":"INSERT","lineNumber":912,"content":"                    "},{"type":"INSERT","lineNumber":913,"content":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":914,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":915,"content":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"INSERT","lineNumber":916,"content":"                }"},{"type":"INSERT","lineNumber":917,"content":"            }"},{"type":"INSERT","lineNumber":918,"content":"            "},{"type":"DELETE","lineNumber":913,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":915,"oldContent":"     */"},{"type":"DELETE","lineNumber":918,"oldContent":"        try {"},{"type":"INSERT","lineNumber":925,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":926,"content":"     */"},{"type":"DELETE","lineNumber":928,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":930,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":935,"oldContent":"                try {"},{"type":"INSERT","lineNumber":944,"content":"            // Test 4: Navigation starten"},{"type":"DELETE","lineNumber":951,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":953,"oldContent":"     */"},{"type":"INSERT","lineNumber":958,"content":"    "},{"type":"INSERT","lineNumber":968,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":969,"content":"            "},{"type":"INSERT","lineNumber":970,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":971,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":972,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":970,"oldContent":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":985,"content":"                }"},{"type":"INSERT","lineNumber":986,"content":"            }"},{"type":"INSERT","lineNumber":987,"content":"            "},{"type":"INSERT","lineNumber":988,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":989,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":990,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":991,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":992,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":993,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":994,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":995,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":996,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":980,"oldContent":"    "},{"type":"DELETE","lineNumber":986,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":989,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":990,"oldContent":"            "},{"type":"DELETE","lineNumber":991,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":992,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":1013,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1014,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":1001,"oldContent":"                }"},{"type":"DELETE","lineNumber":1003,"oldContent":"            }"},{"type":"DELETE","lineNumber":1005,"oldContent":"            "},{"type":"DELETE","lineNumber":1007,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":1009,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":1011,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":1013,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":1015,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":1017,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":1019,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":1021,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":1023,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":1042,"content":"        try {"},{"type":"DELETE","lineNumber":1041,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1042,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1052,"content":"     */"},{"type":"INSERT","lineNumber":1061,"content":"    "},{"type":"INSERT","lineNumber":1062,"content":"    /**"},{"type":"INSERT","lineNumber":1063,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":1064,"content":"     */"},{"type":"DELETE","lineNumber":1064,"oldContent":"        try {"},{"type":"INSERT","lineNumber":1072,"content":"     */"},{"type":"DELETE","lineNumber":1071,"oldContent":"     */"},{"type":"DELETE","lineNumber":1077,"oldContent":"    "},{"type":"DELETE","lineNumber":1079,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1081,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"DELETE","lineNumber":1082,"oldContent":"     */"},{"type":"DELETE","lineNumber":1089,"oldContent":"     */"},{"type":"INSERT","lineNumber":1092,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1093,"content":"        initializeStorage(context)"},{"type":"INSERT","lineNumber":1094,"content":"        "},{"type":"INSERT","lineNumber":1095,"content":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"INSERT","lineNumber":1096,"content":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":1097,"content":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"INSERT","lineNumber":1098,"content":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":1099,"content":"        } else {"},{"type":"INSERT","lineNumber":1100,"content":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1101,"content":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"INSERT","lineNumber":1102,"content":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":1103,"content":"        }"},{"type":"INSERT","lineNumber":1104,"content":"    }"},{"type":"DELETE","lineNumber":1109,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"DELETE","lineNumber":1111,"oldContent":"        initializeStorage(context)"},{"type":"DELETE","lineNumber":1113,"oldContent":"        "},{"type":"DELETE","lineNumber":1115,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":1117,"oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":1119,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":1120,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":1122,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1124,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1131,"content":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1132,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1126,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":1128,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":1130,"oldContent":"        }"},{"type":"DELETE","lineNumber":1131,"oldContent":"    }"},{"type":"INSERT","lineNumber":1139,"content":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1140,"content":"                        firstPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1158,"content":"    }"},{"type":"INSERT","lineNumber":1161,"content":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"DELETE","lineNumber":1155,"oldContent":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1163,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1157,"oldContent":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1164,"oldContent":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1166,"oldContent":"                        firstPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1181,"oldContent":"    }"},{"type":"DELETE","lineNumber":1183,"oldContent":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1188,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1189,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1190,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1186,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1192,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1193,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1194,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1199,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1200,"content":"                }"},{"type":"DELETE","lineNumber":1207,"oldContent":"}"},{"type":"DELETE","lineNumber":1208,"oldContent":"    }"},{"type":"DELETE","lineNumber":1209,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1210,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1211,"oldContent":"     */"},{"type":"DELETE","lineNumber":1212,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1213,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1214,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"DELETE","lineNumber":1215,"oldContent":"    }"},{"type":"DELETE","lineNumber":1216,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1217,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1218,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1219,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1217,"content":"    private fun extractLocationFromInstruction(instruction: String): String {"},{"type":"INSERT","lineNumber":1218,"content":"        // Entferne HTML-Tags"},{"type":"INSERT","lineNumber":1219,"content":"        val cleanInstruction = instruction"},{"type":"INSERT","lineNumber":1220,"content":"            .replace(\"<b>\", \"\")"},{"type":"INSERT","lineNumber":1221,"content":"            .replace(\"</b>\", \"\")"},{"type":"INSERT","lineNumber":1222,"content":"            .replace(\"<\\\\/b>\", \"\")"},{"type":"INSERT","lineNumber":1223,"content":"            .replace(Regex(\"<[^>]*>\"), \"\")"},{"type":"DELETE","lineNumber":1221,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1222,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1225,"content":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"INSERT","lineNumber":1226,"content":"        val locationPatterns = listOf("},{"type":"INSERT","lineNumber":1227,"content":"            Regex(\"(?:zu|zum|zur|in|im|an|am)\\\\s+([^.]+?)(?:\\\\s+(?:gehen|folgen|wenden)|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1228,"content":"            Regex(\"(?:Büro|Office|Raum|Room)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1229,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1230,"content":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1231,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1224,"oldContent":"                }"},{"type":"DELETE","lineNumber":1248,"oldContent":"        val locationPatterns = listOf("},{"type":"INSERT","lineNumber":1256,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1257,"content":"    }"},{"type":"DELETE","lineNumber":1250,"oldContent":"            Regex(\"(?:zu|zum|zur|in|im|an|am)\\\\s+([^.]+?)(?:\\\\s+(?:gehen|folgen|wenden)|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1252,"oldContent":"            Regex(\"(?:Büro|Office|Raum|Room)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1254,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1256,"oldContent":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1258,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1277,"content":"                0.0"},{"type":"DELETE","lineNumber":1279,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":1281,"oldContent":"    }"},{"type":"INSERT","lineNumber":1290,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1291,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1292,"content":"                // Verwende routeInfo falls verfügbar"},{"type":"INSERT","lineNumber":1293,"content":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"INSERT","lineNumber":1294,"content":"                "},{"type":"INSERT","lineNumber":1295,"content":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"INSERT","lineNumber":1296,"content":"                val totalLength = getRouteLength()"},{"type":"DELETE","lineNumber":1299,"oldContent":"                0.0"},{"type":"INSERT","lineNumber":1320,"content":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":1321,"content":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1322,"content":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1313,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":1314,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1316,"oldContent":"                // Verwende routeInfo falls verfügbar"},{"type":"DELETE","lineNumber":1317,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":1319,"oldContent":"                "},{"type":"DELETE","lineNumber":1321,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":1322,"oldContent":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1331,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1332,"content":"                buildingList"},{"type":"INSERT","lineNumber":1349,"content":"                val floors = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1344,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1346,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1347,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1354,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1355,"oldContent":"                buildingList"},{"type":"INSERT","lineNumber":1363,"content":"                val floorList = floors.toList()"},{"type":"INSERT","lineNumber":1364,"content":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"INSERT","lineNumber":1365,"content":"                floorList"},{"type":"INSERT","lineNumber":1366,"content":"            } else {"},{"type":"INSERT","lineNumber":1367,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1368,"content":"            }"},{"type":"INSERT","lineNumber":1369,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1371,"oldContent":"                val floors = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1388,"content":"            )"},{"type":"INSERT","lineNumber":1389,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1390,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1383,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1385,"oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"DELETE","lineNumber":1386,"oldContent":"                floorList"},{"type":"DELETE","lineNumber":1388,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1389,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":1391,"oldContent":"            }"},{"type":"DELETE","lineNumber":1392,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1398,"content":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1399,"content":"            )"},{"type":"INSERT","lineNumber":1405,"content":"     */"},{"type":"INSERT","lineNumber":1406,"content":"    fun getFormattedRouteInfo(): String {"},{"type":"INSERT","lineNumber":1407,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1408,"content":"        return buildString {"},{"type":"INSERT","lineNumber":1409,"content":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1408,"oldContent":"            )"},{"type":"DELETE","lineNumber":1410,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1412,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"INSERT","lineNumber":1424,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1420,"oldContent":"                totalSteps = 0"},{"type":"DELETE","lineNumber":1422,"oldContent":"            )"},{"type":"DELETE","lineNumber":1429,"oldContent":"     */"},{"type":"DELETE","lineNumber":1431,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1432,"oldContent":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":1434,"oldContent":"        return buildString {"},{"type":"INSERT","lineNumber":1439,"content":"    "},{"type":"DELETE","lineNumber":1436,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1443,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1445,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1450,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1459,"content":"    }"},{"type":"INSERT","lineNumber":1460,"content":""},{"type":"DELETE","lineNumber":1455,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1456,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1457,"oldContent":"    "}]},{"timestamp":1754925936191,"changes":[{"type":"MODIFY","lineNumber":11,"content":"import kotlinx.coroutines.delay","oldContent":"import kotlinx.coroutines.flow.StateFlow"},{"type":"MODIFY","lineNumber":15,"content":"import com.example.arwalking.storage.SaveResult","oldContent":""},{"type":"MODIFY","lineNumber":18,"content":"import com.example.arwalking.data.RouteData","oldContent":"    // Feature Map Manager"},{"type":"MODIFY","lineNumber":20,"content":"","oldContent":"    private var featureMapManager: FeatureMapManager? = null"},{"type":"DELETE","lineNumber":69,"oldContent":""},{"type":"DELETE","lineNumber":70,"oldContent":"    // Konvertierung von RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":71,"oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":72,"oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"DELETE","lineNumber":73,"oldContent":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":74,"oldContent":""},{"type":"DELETE","lineNumber":75,"oldContent":"        routeData.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":69,"content":"    val currentRoute: StateFlow<RouteData?> = _currentRoute.asStateFlow()"},{"type":"INSERT","lineNumber":70,"content":"    "},{"type":"INSERT","lineNumber":71,"content":"    // State für Feature-Navigation"},{"type":"INSERT","lineNumber":72,"content":"    private val _featureNavigationRoute = MutableStateFlow<FeatureNavigationRoute?>(null)"},{"type":"INSERT","lineNumber":73,"content":"    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()"},{"type":"INSERT","lineNumber":74,"content":"    "},{"type":"INSERT","lineNumber":75,"content":"    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())"},{"type":"MODIFY","lineNumber":191,"content":"            Log.d(TAG, \"  - Distance: ${step.distance}m\")","oldContent":"            Log.i(TAG, \"Vorheriger Schritt: ${currentStep - 1}\")"},{"type":"MODIFY","lineNumber":199,"content":"    /**","oldContent":"        }"},{"type":"MODIFY","lineNumber":211,"content":"            pathItem.routeParts.forEach { routePart ->","oldContent":"        _currentNavigationStep.value = validStep"},{"type":"MODIFY","lineNumber":214,"content":"                ","oldContent":"        "},{"type":"DELETE","lineNumber":243,"oldContent":""},{"type":"DELETE","lineNumber":244,"oldContent":"    }"},{"type":"INSERT","lineNumber":243,"content":"                        instruction = instruction,"},{"type":"INSERT","lineNumber":244,"content":"                        building = pathItem.xmlName,"},{"type":"MODIFY","lineNumber":267,"content":"            steps = steps,","oldContent":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"INSERT","lineNumber":271,"content":"    "},{"type":"DELETE","lineNumber":273,"oldContent":"    "},{"type":"MODIFY","lineNumber":274,"content":"    /**","oldContent":"    "},{"type":"DELETE","lineNumber":307,"oldContent":"                    // Test mit einem leeren Frame"},{"type":"DELETE","lineNumber":308,"oldContent":"                    testFeatureMatching()"},{"type":"INSERT","lineNumber":307,"content":"                    // Test-System aktiviert"},{"type":"INSERT","lineNumber":308,"content":"                    Log.i(TAG, \"🧪 Feature-Matching Test-System bereit\")"},{"type":"INSERT","lineNumber":366,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":367,"oldContent":"            try {"},{"type":"INSERT","lineNumber":447,"content":"        onProgress: (String) -> Unit = {}"},{"type":"DELETE","lineNumber":449,"oldContent":"        onProgress: (String) -> Unit = {}"},{"type":"DELETE","lineNumber":451,"oldContent":"                    bitmap = bitmap,"},{"type":"MODIFY","lineNumber":454,"content":"                    bitmap = bitmap,","oldContent":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":455,"content":"                    landmarkId = landmarkId,"},{"type":"DELETE","lineNumber":463,"oldContent":"                    }"},{"type":"INSERT","lineNumber":464,"content":"                        true"},{"type":"INSERT","lineNumber":465,"content":"                    }"},{"type":"DELETE","lineNumber":467,"oldContent":"                        true"},{"type":"INSERT","lineNumber":475,"content":"            "},{"type":"DELETE","lineNumber":476,"oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":487,"content":"     * Prüft ob die App im Emulator läuft","oldContent":"        Log.d(TAG, \"getCurrentStartPoint called (stub)\")"},{"type":"DELETE","lineNumber":491,"oldContent":"    }"},{"type":"DELETE","lineNumber":492,"oldContent":"                }"},{"type":"DELETE","lineNumber":493,"oldContent":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":491,"content":"                android.os.Build.FINGERPRINT.startsWith(\"unknown\") ||"},{"type":"INSERT","lineNumber":492,"content":"                android.os.Build.MODEL.contains(\"google_sdk\") ||"},{"type":"INSERT","lineNumber":493,"content":"                android.os.Build.MODEL.contains(\"Emulator\") ||"},{"type":"INSERT","lineNumber":499,"content":"    "},{"type":"DELETE","lineNumber":501,"oldContent":"    "},{"type":"INSERT","lineNumber":504,"content":"     */"},{"type":"DELETE","lineNumber":506,"oldContent":"     */"},{"type":"INSERT","lineNumber":510,"content":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":511,"oldContent":"     */"},{"type":"DELETE","lineNumber":529,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":530,"oldContent":"            "},{"type":"INSERT","lineNumber":529,"content":"            \"Storage-Status: ${status.getHealthStatus()}, Bilder: ${status.totalImages}, Cache-Hit-Rate: ${String.format(\"%.1f\", status.cacheHitRate)}%\""},{"type":"INSERT","lineNumber":530,"content":"        } else {"},{"type":"INSERT","lineNumber":569,"content":"    "},{"type":"DELETE","lineNumber":570,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":575,"content":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)","oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"MODIFY","lineNumber":578,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":581,"content":"     * Erstellt einen neuen Landmark (vereinfacht)","oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":640,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":641,"oldContent":"                    )"},{"type":"INSERT","lineNumber":643,"content":"                "},{"type":"DELETE","lineNumber":644,"oldContent":"                val featureRoute = FeatureNavigationRoute("},{"type":"INSERT","lineNumber":646,"content":"                    name = \"Demo Route\","},{"type":"DELETE","lineNumber":647,"oldContent":"                    steps = demoSteps"},{"type":"MODIFY","lineNumber":655,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":703,"content":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist","oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"MODIFY","lineNumber":706,"content":"            return","oldContent":"            return"},{"type":"MODIFY","lineNumber":716,"content":"        // Throttle Frame-Processing für bessere Performance","oldContent":"        // Throttle Frame-Processing für bessere Performance"},{"type":"MODIFY","lineNumber":725,"content":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")","oldContent":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":727,"oldContent":"                // Update UI State"},{"type":"DELETE","lineNumber":729,"oldContent":"                "},{"type":"DELETE","lineNumber":731,"oldContent":"                // Logge nur bei erfolgreichen Matches"},{"type":"DELETE","lineNumber":733,"oldContent":"                if (matches.isNotEmpty()) {"},{"type":"INSERT","lineNumber":730,"content":"                // Update UI State"},{"type":"INSERT","lineNumber":732,"content":"                "},{"type":"INSERT","lineNumber":733,"content":"                // Logge nur bei erfolgreichen Matches"},{"type":"INSERT","lineNumber":734,"content":"                if (matches.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":741,"content":"                    val bestMatch = matches.firstOrNull()","oldContent":"                    val bestMatch = matches.firstOrNull()"},{"type":"MODIFY","lineNumber":751,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":766,"content":"        if (!enabled) {","oldContent":"        if (!enabled) {"},{"type":"MODIFY","lineNumber":770,"content":"    ","oldContent":"    "},{"type":"DELETE","lineNumber":785,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"MODIFY","lineNumber":788,"content":"        val currentStep = _currentNavigationStep.value","oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":789,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"MODIFY","lineNumber":800,"content":"     * Geht zum vorherigen Navigationsschritt","oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"MODIFY","lineNumber":826,"content":"        Log.i(TAG, \"Navigation gestoppt\")","oldContent":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"DELETE","lineNumber":828,"oldContent":"    "},{"type":"MODIFY","lineNumber":830,"content":"    ","oldContent":"    /**"},{"type":"INSERT","lineNumber":831,"content":"    /**"},{"type":"DELETE","lineNumber":840,"oldContent":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"MODIFY","lineNumber":842,"content":"            appendLine(\"=== RouteViewModel Status ===\")","oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":843,"content":"            appendLine(\"Route geladen: ${route != null}\")"},{"type":"INSERT","lineNumber":844,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":846,"oldContent":"            appendLine(\"=== RouteViewModel Status ===\")"},{"type":"MODIFY","lineNumber":849,"content":"            appendLine(\"Aktuelle Matches: $matchesCount\")","oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"INSERT","lineNumber":875,"content":"                    matches.forEach { match ->"},{"type":"INSERT","lineNumber":876,"content":"                        Log.w(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":877,"content":"                    }"},{"type":"INSERT","lineNumber":878,"content":"                }"},{"type":"INSERT","lineNumber":879,"content":"                "},{"type":"INSERT","lineNumber":880,"content":"                testFrame.release()"},{"type":"INSERT","lineNumber":881,"content":"                "},{"type":"INSERT","lineNumber":882,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":883,"content":"                Log.e(TAG, \"❌ Fehler beim Feature-Matching Test: ${e.message}\", e)"},{"type":"INSERT","lineNumber":884,"content":"            }"},{"type":"INSERT","lineNumber":885,"content":"        }"},{"type":"INSERT","lineNumber":886,"content":"    }"},{"type":"DELETE","lineNumber":877,"oldContent":"                    matches.forEach { match ->"},{"type":"DELETE","lineNumber":879,"oldContent":"                        Log.w(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"DELETE","lineNumber":882,"oldContent":"                    }"},{"type":"DELETE","lineNumber":885,"oldContent":"                }"},{"type":"DELETE","lineNumber":887,"oldContent":"                "},{"type":"INSERT","lineNumber":895,"content":"            "},{"type":"DELETE","lineNumber":890,"oldContent":"                testFrame.release()"},{"type":"DELETE","lineNumber":893,"oldContent":"                "},{"type":"DELETE","lineNumber":896,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":899,"oldContent":"                Log.e(TAG, \"❌ Fehler beim Feature-Matching Test: ${e.message}\", e)"},{"type":"DELETE","lineNumber":902,"oldContent":"            }"},{"type":"DELETE","lineNumber":905,"oldContent":"        }"},{"type":"DELETE","lineNumber":908,"oldContent":"    }"},{"type":"DELETE","lineNumber":910,"oldContent":"            "},{"type":"DELETE","lineNumber":912,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":914,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":917,"oldContent":"        }"},{"type":"DELETE","lineNumber":920,"oldContent":"    }"},{"type":"DELETE","lineNumber":922,"oldContent":"    "},{"type":"INSERT","lineNumber":919,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":920,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"INSERT","lineNumber":921,"content":"        }"},{"type":"INSERT","lineNumber":922,"content":"    }"},{"type":"INSERT","lineNumber":923,"content":"    "},{"type":"INSERT","lineNumber":925,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":926,"content":"     */"},{"type":"DELETE","lineNumber":930,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":932,"oldContent":"     */"},{"type":"INSERT","lineNumber":944,"content":"            // Test 4: Navigation starten"},{"type":"DELETE","lineNumber":948,"oldContent":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":958,"content":"    "},{"type":"DELETE","lineNumber":962,"oldContent":"    "},{"type":"INSERT","lineNumber":968,"content":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"INSERT","lineNumber":969,"content":"            "},{"type":"INSERT","lineNumber":970,"content":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"INSERT","lineNumber":971,"content":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"INSERT","lineNumber":972,"content":"                pathItem.routeParts.forEach { routePart ->"},{"type":"DELETE","lineNumber":972,"oldContent":"            val routeLandmarks = mutableListOf<FeatureLandmark>()"},{"type":"DELETE","lineNumber":974,"oldContent":"            "},{"type":"DELETE","lineNumber":976,"oldContent":"            // Sammle alle Landmark-IDs aus der aktuellen Route"},{"type":"DELETE","lineNumber":977,"oldContent":"            _currentRoute.value?.route?.path?.forEach { pathItem ->"},{"type":"DELETE","lineNumber":979,"oldContent":"                pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":985,"content":"                }"},{"type":"INSERT","lineNumber":986,"content":"            }"},{"type":"INSERT","lineNumber":987,"content":"            "},{"type":"INSERT","lineNumber":988,"content":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"INSERT","lineNumber":989,"content":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":990,"content":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"INSERT","lineNumber":991,"content":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":992,"content":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"INSERT","lineNumber":993,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":994,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":995,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":996,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":993,"oldContent":"                }"},{"type":"DELETE","lineNumber":996,"oldContent":"            }"},{"type":"DELETE","lineNumber":997,"oldContent":"            // Zusätzlich: Lade verfügbare Bilder aus dem Storage-System"},{"type":"DELETE","lineNumber":998,"oldContent":"            "},{"type":"DELETE","lineNumber":999,"oldContent":"            if (storageManager != null) {"},{"type":"DELETE","lineNumber":1000,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":1001,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":1002,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":1003,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":1005,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":1007,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":1009,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":1013,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1014,"content":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":1021,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1022,"oldContent":"            Log.e(TAG, \"Fehler beim Laden der verfügbaren Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1042,"content":"        try {"},{"type":"DELETE","lineNumber":1045,"oldContent":"        try {"},{"type":"INSERT","lineNumber":1052,"content":"     */"},{"type":"DELETE","lineNumber":1055,"oldContent":"     */"},{"type":"INSERT","lineNumber":1061,"content":"    "},{"type":"INSERT","lineNumber":1062,"content":"    /**"},{"type":"INSERT","lineNumber":1063,"content":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"INSERT","lineNumber":1064,"content":"     */"},{"type":"DELETE","lineNumber":1066,"oldContent":"    "},{"type":"DELETE","lineNumber":1068,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1069,"oldContent":"     * Gibt die aktuell geladenen Landmark-IDs zurück (für Debugging)"},{"type":"DELETE","lineNumber":1078,"oldContent":"     */"},{"type":"INSERT","lineNumber":1092,"content":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"INSERT","lineNumber":1093,"content":"        initializeStorage(context)"},{"type":"INSERT","lineNumber":1094,"content":"        "},{"type":"INSERT","lineNumber":1095,"content":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"INSERT","lineNumber":1096,"content":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"INSERT","lineNumber":1097,"content":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"INSERT","lineNumber":1098,"content":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":1099,"content":"        } else {"},{"type":"INSERT","lineNumber":1100,"content":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":1101,"content":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"INSERT","lineNumber":1102,"content":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":1103,"content":"        }"},{"type":"INSERT","lineNumber":1104,"content":"    }"},{"type":"DELETE","lineNumber":1094,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"DELETE","lineNumber":1096,"oldContent":"        initializeStorage(context)"},{"type":"DELETE","lineNumber":1098,"oldContent":"        "},{"type":"DELETE","lineNumber":1100,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":1102,"oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"DELETE","lineNumber":1104,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":1106,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":1108,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1110,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"DELETE","lineNumber":1112,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":1114,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":1116,"oldContent":"        }"},{"type":"DELETE","lineNumber":1118,"oldContent":"    }"},{"type":"INSERT","lineNumber":1131,"content":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1132,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1134,"oldContent":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1135,"oldContent":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"INSERT","lineNumber":1139,"content":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1140,"content":"                        firstPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1143,"oldContent":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1145,"oldContent":"                        firstPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1158,"content":"    }"},{"type":"INSERT","lineNumber":1161,"content":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1163,"content":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1162,"oldContent":"    }"},{"type":"DELETE","lineNumber":1166,"oldContent":"     * Gibt den Endpunkt der Route aus der JSON-Datei zurück"},{"type":"DELETE","lineNumber":1169,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1188,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1189,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1190,"content":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1192,"content":"                    // 4. Aus dem Gebäudenamen"},{"type":"INSERT","lineNumber":1193,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1194,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1190,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1192,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1194,"oldContent":"                        lastRoutePart.nodes.last().node?.name!!"},{"type":"INSERT","lineNumber":1199,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1200,"content":"                }"},{"type":"DELETE","lineNumber":1197,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1199,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1201,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1206,"oldContent":"}"},{"type":"DELETE","lineNumber":1207,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1208,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1209,"content":"            Log.e(TAG, \"Fehler beim Ermitteln des Endpunkts: ${e.message}\")"},{"type":"INSERT","lineNumber":1210,"content":"            \"Haupteingang\""},{"type":"INSERT","lineNumber":1211,"content":"        }"},{"type":"DELETE","lineNumber":1209,"oldContent":"                }"},{"type":"DELETE","lineNumber":1210,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1211,"oldContent":"     */"},{"type":"INSERT","lineNumber":1213,"content":"    "},{"type":"DELETE","lineNumber":1213,"oldContent":"    }"},{"type":"DELETE","lineNumber":1214,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1215,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1216,"oldContent":"        return if (totalSteps > 0) {"},{"type":"INSERT","lineNumber":1215,"content":"     * Extrahiert Ortsangaben aus Navigationsanweisungen"},{"type":"INSERT","lineNumber":1216,"content":"     */"},{"type":"DELETE","lineNumber":1221,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1225,"oldContent":"        )"},{"type":"MODIFY","lineNumber":1225,"content":"        // Suche nach bekannten Mustern für Ortsangaben","oldContent":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"DELETE","lineNumber":1229,"oldContent":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":1231,"oldContent":"            val match = pattern.find(cleanInstruction)"},{"type":"DELETE","lineNumber":1233,"oldContent":"            if (match != null) {"},{"type":"DELETE","lineNumber":1235,"oldContent":"                val location = match.groupValues[1].trim()"},{"type":"DELETE","lineNumber":1237,"oldContent":"                if (location.isNotBlank() && location.length > 2) {"},{"type":"INSERT","lineNumber":1232,"content":"        )"},{"type":"INSERT","lineNumber":1233,"content":"        "},{"type":"INSERT","lineNumber":1234,"content":"        for (pattern in locationPatterns) {"},{"type":"INSERT","lineNumber":1235,"content":"            val match = pattern.find(cleanInstruction)"},{"type":"INSERT","lineNumber":1236,"content":"            if (match != null) {"},{"type":"INSERT","lineNumber":1237,"content":"                val location = match.groupValues[1].trim()"},{"type":"INSERT","lineNumber":1238,"content":"                if (location.isNotBlank() && location.length > 2) {"},{"type":"INSERT","lineNumber":1256,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1257,"content":"    }"},{"type":"DELETE","lineNumber":1260,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":1261,"oldContent":"    }"},{"type":"INSERT","lineNumber":1277,"content":"                0.0"},{"type":"DELETE","lineNumber":1281,"oldContent":"                0.0"},{"type":"INSERT","lineNumber":1290,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1291,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1292,"content":"                // Verwende routeInfo falls verfügbar"},{"type":"INSERT","lineNumber":1293,"content":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"INSERT","lineNumber":1294,"content":"                "},{"type":"INSERT","lineNumber":1295,"content":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"INSERT","lineNumber":1296,"content":"                val totalLength = getRouteLength()"},{"type":"DELETE","lineNumber":1293,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":1295,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1297,"oldContent":"                // Verwende routeInfo falls verfügbar"},{"type":"DELETE","lineNumber":1299,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":1301,"oldContent":"                "},{"type":"DELETE","lineNumber":1303,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":1305,"oldContent":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1320,"content":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":1321,"content":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1322,"content":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1324,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1326,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1327,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"INSERT","lineNumber":1331,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1332,"content":"                buildingList"},{"type":"DELETE","lineNumber":1336,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1338,"oldContent":"                buildingList"},{"type":"INSERT","lineNumber":1349,"content":"                val floors = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1353,"oldContent":"                val floors = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1363,"content":"                val floorList = floors.toList()"},{"type":"INSERT","lineNumber":1364,"content":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"INSERT","lineNumber":1365,"content":"                floorList"},{"type":"INSERT","lineNumber":1366,"content":"            } else {"},{"type":"INSERT","lineNumber":1367,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1368,"content":"            }"},{"type":"INSERT","lineNumber":1369,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1366,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1368,"oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"DELETE","lineNumber":1370,"oldContent":"                floorList"},{"type":"DELETE","lineNumber":1372,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1374,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":1376,"oldContent":"            }"},{"type":"DELETE","lineNumber":1378,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1388,"content":"            )"},{"type":"INSERT","lineNumber":1389,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1390,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1394,"oldContent":"            )"},{"type":"DELETE","lineNumber":1395,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1396,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"INSERT","lineNumber":1398,"content":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1399,"content":"            )"},{"type":"DELETE","lineNumber":1403,"oldContent":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1405,"content":"     */"},{"type":"INSERT","lineNumber":1406,"content":"    fun getFormattedRouteInfo(): String {"},{"type":"INSERT","lineNumber":1407,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1408,"content":"        return buildString {"},{"type":"INSERT","lineNumber":1409,"content":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1405,"oldContent":"            )"},{"type":"DELETE","lineNumber":1412,"oldContent":"     */"},{"type":"DELETE","lineNumber":1414,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1416,"oldContent":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":1418,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1419,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1424,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1431,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1439,"content":"    "},{"type":"DELETE","lineNumber":1442,"oldContent":"    "},{"type":"INSERT","lineNumber":1443,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1445,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1447,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1450,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1458,"oldContent":"}"},{"type":"DELETE","lineNumber":1459,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1458,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1460,"content":""},{"type":"INSERT","lineNumber":1461,"content":"}"}]},{"timestamp":1754925946731,"changes":[{"type":"MODIFY","lineNumber":17,"content":"import com.example.arwalking.data.RouteRepository","oldContent":"    "},{"type":"MODIFY","lineNumber":196,"content":"        Log.i(TAG, \"=== Ende Route Details ===\")","oldContent":"                    "},{"type":"MODIFY","lineNumber":201,"content":"     */","oldContent":"                        true"},{"type":"MODIFY","lineNumber":205,"content":"        ","oldContent":"                "},{"type":"MODIFY","lineNumber":238,"content":"                } ?: 0.0","oldContent":"    /**"},{"type":"MODIFY","lineNumber":452,"content":"            if (storageManager != null) {","oldContent":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":453,"content":"                val saveResult = storageManager!!.saveImage("},{"type":"DELETE","lineNumber":455,"oldContent":"                val saveResult = storageManager!!.saveImage("},{"type":"MODIFY","lineNumber":464,"content":"                        true","oldContent":"                        true"},{"type":"INSERT","lineNumber":574,"content":"        val byteArrayOutputStream = ByteArrayOutputStream()"},{"type":"DELETE","lineNumber":575,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":577,"content":"        return android.util.Base64.encodeToString(byteArray, android.util.Base64.DEFAULT)"},{"type":"DELETE","lineNumber":578,"oldContent":"    }"},{"type":"INSERT","lineNumber":580,"content":"    /**"},{"type":"DELETE","lineNumber":581,"oldContent":"     * Erstellt einen neuen Landmark (vereinfacht)"},{"type":"INSERT","lineNumber":654,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature-Navigation Route: ${e.message}\")"},{"type":"DELETE","lineNumber":655,"oldContent":"            }"},{"type":"INSERT","lineNumber":702,"content":"    fun processFrameForFeatureMatching(frame: org.opencv.core.Mat) {"},{"type":"DELETE","lineNumber":703,"oldContent":"        // Nur verarbeiten wenn Feature-Mapping aktiviert ist"},{"type":"INSERT","lineNumber":705,"content":"            Log.v(TAG, \"⚠️ Feature mapping nicht aktiviert, überspringe Frame\")"},{"type":"DELETE","lineNumber":706,"oldContent":"            return"},{"type":"INSERT","lineNumber":715,"content":"        "},{"type":"DELETE","lineNumber":716,"oldContent":"        // Throttle Frame-Processing für bessere Performance"},{"type":"INSERT","lineNumber":724,"content":"            try {"},{"type":"DELETE","lineNumber":725,"oldContent":"                Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":728,"oldContent":"                // Update UI State"},{"type":"INSERT","lineNumber":730,"content":"                // Update UI State"},{"type":"INSERT","lineNumber":731,"content":"                _currentMatches.value = matches"},{"type":"DELETE","lineNumber":734,"oldContent":"                _currentMatches.value = matches"},{"type":"INSERT","lineNumber":740,"content":"                    // Trigger AR-Updates für beste Matches"},{"type":"DELETE","lineNumber":741,"oldContent":"                    val bestMatch = matches.firstOrNull()"},{"type":"INSERT","lineNumber":750,"content":"                _currentMatches.value = emptyList()"},{"type":"DELETE","lineNumber":751,"oldContent":"            }"},{"type":"INSERT","lineNumber":765,"content":"        "},{"type":"DELETE","lineNumber":766,"oldContent":"        if (!enabled) {"},{"type":"INSERT","lineNumber":769,"content":"    }"},{"type":"DELETE","lineNumber":770,"oldContent":"    "},{"type":"MODIFY","lineNumber":786,"content":"     */","oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":787,"content":"    fun nextNavigationStep() {"},{"type":"DELETE","lineNumber":789,"oldContent":"    fun nextNavigationStep() {"},{"type":"INSERT","lineNumber":799,"content":"    /**"},{"type":"DELETE","lineNumber":800,"oldContent":"     * Geht zum vorherigen Navigationsschritt"},{"type":"INSERT","lineNumber":825,"content":"    fun stopNavigation() {"},{"type":"DELETE","lineNumber":826,"oldContent":"        Log.i(TAG, \"Navigation gestoppt\")"},{"type":"INSERT","lineNumber":829,"content":"    }"},{"type":"DELETE","lineNumber":831,"oldContent":"    }"},{"type":"INSERT","lineNumber":841,"content":"        return buildString {"},{"type":"DELETE","lineNumber":843,"oldContent":"        return buildString {"},{"type":"INSERT","lineNumber":848,"content":"            appendLine(\"Feature-Mapping: ${if (isFeatureMappingEnabled) \"Aktiviert\" else \"Deaktiviert\"}\")"},{"type":"DELETE","lineNumber":849,"oldContent":"            appendLine(\"Aktuelle Matches: $matchesCount\")"},{"type":"DELETE","lineNumber":856,"oldContent":"    /**"},{"type":"DELETE","lineNumber":857,"oldContent":"     * Test-Methode für Feature-Matching"},{"type":"DELETE","lineNumber":858,"oldContent":"     */"},{"type":"DELETE","lineNumber":859,"oldContent":"    private fun testFeatureMatching() {"},{"type":"DELETE","lineNumber":860,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":861,"oldContent":"            try {"},{"type":"DELETE","lineNumber":862,"oldContent":"                Log.i(TAG, \"🧪 Teste Feature-Matching Engine...\")"},{"type":"DELETE","lineNumber":863,"oldContent":"                "},{"type":"DELETE","lineNumber":864,"oldContent":"                // Erstelle einen Test-Frame (schwarzes Bild)"},{"type":"DELETE","lineNumber":865,"oldContent":"                val testFrame = org.opencv.core.Mat(480, 640, org.opencv.core.CvType.CV_8UC3)"},{"type":"DELETE","lineNumber":866,"oldContent":"                testFrame.setTo(org.opencv.core.Scalar(0.0, 0.0, 0.0))"},{"type":"DELETE","lineNumber":867,"oldContent":"                "},{"type":"DELETE","lineNumber":868,"oldContent":"                val matches = featureMatchingEngine?.processFrame(testFrame) ?: emptyList()"},{"type":"DELETE","lineNumber":869,"oldContent":"                Log.i(TAG, \"🧪 Test-Frame Ergebnis: ${matches.size} Matches\")"},{"type":"DELETE","lineNumber":870,"oldContent":"                "},{"type":"DELETE","lineNumber":871,"oldContent":"                if (matches.isEmpty()) {"},{"type":"DELETE","lineNumber":872,"oldContent":"                    Log.i(TAG, \"✅ Korrekt: Schwarzer Frame erzeugt keine Matches\")"},{"type":"DELETE","lineNumber":873,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":874,"oldContent":"                    Log.w(TAG, \"⚠️ Unerwartete Matches bei schwarzem Frame:\")"},{"type":"DELETE","lineNumber":875,"oldContent":"                    matches.forEach { match ->"},{"type":"INSERT","lineNumber":856,"content":""},{"type":"DELETE","lineNumber":877,"oldContent":"                        Log.w(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"DELETE","lineNumber":879,"oldContent":"                    }"},{"type":"DELETE","lineNumber":880,"oldContent":"                }"},{"type":"DELETE","lineNumber":882,"oldContent":"                "},{"type":"DELETE","lineNumber":883,"oldContent":"                testFrame.release()"},{"type":"DELETE","lineNumber":885,"oldContent":"                "},{"type":"DELETE","lineNumber":887,"oldContent":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":888,"oldContent":"                Log.e(TAG, \"❌ Fehler beim Feature-Matching Test: ${e.message}\", e)"},{"type":"DELETE","lineNumber":890,"oldContent":"            }"},{"type":"DELETE","lineNumber":892,"oldContent":"        }"},{"type":"DELETE","lineNumber":893,"oldContent":"    }"},{"type":"INSERT","lineNumber":865,"content":"            "},{"type":"DELETE","lineNumber":900,"oldContent":"            "},{"type":"DELETE","lineNumber":916,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":887,"content":"            }"},{"type":"INSERT","lineNumber":888,"content":"            "},{"type":"INSERT","lineNumber":889,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":920,"oldContent":"            }"},{"type":"DELETE","lineNumber":923,"oldContent":"            "},{"type":"DELETE","lineNumber":926,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":897,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":969,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":971,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":973,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":975,"oldContent":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":943,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":944,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":945,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":946,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":986,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":988,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":990,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":992,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":994,"oldContent":"                            )"},{"type":"DELETE","lineNumber":996,"oldContent":"                        )"},{"type":"DELETE","lineNumber":998,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1000,"oldContent":"                }"},{"type":"DELETE","lineNumber":1003,"oldContent":"            }"},{"type":"DELETE","lineNumber":1005,"oldContent":"            "},{"type":"INSERT","lineNumber":967,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":968,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":969,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":970,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":971,"content":"                            )"},{"type":"INSERT","lineNumber":972,"content":"                        )"},{"type":"INSERT","lineNumber":973,"content":"                    }"},{"type":"INSERT","lineNumber":974,"content":"                }"},{"type":"INSERT","lineNumber":975,"content":"            }"},{"type":"INSERT","lineNumber":976,"content":"            "},{"type":"DELETE","lineNumber":1014,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":985,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1062,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1064,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1066,"oldContent":"        return emptyList()"},{"type":"INSERT","lineNumber":1035,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1036,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1037,"content":"        return emptyList()"},{"type":"DELETE","lineNumber":1093,"oldContent":"    "},{"type":"DELETE","lineNumber":1095,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":1098,"oldContent":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"DELETE","lineNumber":1101,"oldContent":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"DELETE","lineNumber":1104,"oldContent":"    }"},{"type":"DELETE","lineNumber":1107,"oldContent":"    "},{"type":"DELETE","lineNumber":1110,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1075,"content":"    "},{"type":"INSERT","lineNumber":1076,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1077,"content":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"INSERT","lineNumber":1078,"content":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"INSERT","lineNumber":1079,"content":"    }"},{"type":"INSERT","lineNumber":1080,"content":"    "},{"type":"INSERT","lineNumber":1081,"content":"    /**"},{"type":"DELETE","lineNumber":1132,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1103,"content":"                    }"},{"type":"DELETE","lineNumber":1140,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1111,"content":"                    }"},{"type":"DELETE","lineNumber":1161,"oldContent":"     */"},{"type":"DELETE","lineNumber":1163,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1132,"content":"     */"},{"type":"INSERT","lineNumber":1134,"content":"        return try {"},{"type":"DELETE","lineNumber":1187,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":1188,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1158,"content":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1191,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1193,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1161,"content":"                    }"},{"type":"DELETE","lineNumber":1196,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1199,"oldContent":"     */"},{"type":"DELETE","lineNumber":1200,"oldContent":"    "},{"type":"INSERT","lineNumber":1166,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1167,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1168,"content":"                    }"},{"type":"DELETE","lineNumber":1203,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1204,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1205,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1206,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1207,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1171,"content":"                "},{"type":"INSERT","lineNumber":1172,"content":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1173,"content":"                endPoint"},{"type":"INSERT","lineNumber":1174,"content":"            } else {"},{"type":"INSERT","lineNumber":1175,"content":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Endpunkt\")"},{"type":"INSERT","lineNumber":1176,"content":"                \"Haupteingang\""},{"type":"INSERT","lineNumber":1177,"content":"            }"},{"type":"DELETE","lineNumber":1209,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1213,"oldContent":"     * Gibt die Gebäude zurück, durch die die Route führt"},{"type":"INSERT","lineNumber":1182,"content":"    }"},{"type":"INSERT","lineNumber":1184,"content":"    /**"},{"type":"DELETE","lineNumber":1224,"oldContent":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"INSERT","lineNumber":1195,"content":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"DELETE","lineNumber":1228,"oldContent":"        )"},{"type":"INSERT","lineNumber":1199,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1200,"content":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1201,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1202,"content":"        )"},{"type":"DELETE","lineNumber":1232,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1235,"oldContent":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1238,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1257,"oldContent":"    "},{"type":"INSERT","lineNumber":1228,"content":"    "},{"type":"DELETE","lineNumber":1291,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1293,"oldContent":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"DELETE","lineNumber":1295,"oldContent":"                "},{"type":"DELETE","lineNumber":1298,"oldContent":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"INSERT","lineNumber":1267,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1268,"content":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"INSERT","lineNumber":1269,"content":"                "},{"type":"INSERT","lineNumber":1270,"content":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"DELETE","lineNumber":1321,"oldContent":"                        ?: pathItem.xmlName"},{"type":"DELETE","lineNumber":1323,"oldContent":"                    "},{"type":"INSERT","lineNumber":1293,"content":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1294,"content":"                    "},{"type":"DELETE","lineNumber":1332,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1303,"content":"            } else {"},{"type":"DELETE","lineNumber":1364,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1366,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1368,"oldContent":"        }"},{"type":"DELETE","lineNumber":1371,"oldContent":"    }"},{"type":"INSERT","lineNumber":1340,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1341,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1342,"content":"        }"},{"type":"INSERT","lineNumber":1343,"content":"    }"},{"type":"DELETE","lineNumber":1389,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1391,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1361,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1362,"content":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1399,"oldContent":"        }"},{"type":"INSERT","lineNumber":1370,"content":"        }"},{"type":"DELETE","lineNumber":1405,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1408,"oldContent":"            }"},{"type":"DELETE","lineNumber":1410,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1412,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1380,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1381,"content":"            }"},{"type":"INSERT","lineNumber":1382,"content":"            if (summary.estimatedTime > 0) {"},{"type":"INSERT","lineNumber":1383,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1445,"oldContent":"        "},{"type":"INSERT","lineNumber":1416,"content":"        "},{"type":"DELETE","lineNumber":1457,"oldContent":"}"},{"type":"INSERT","lineNumber":1427,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1429,"content":"    }"}]},{"timestamp":1754926116365,"changes":[{"type":"MODIFY","lineNumber":81,"content":"    // State für aktuellen Navigationsschritt","oldContent":"                steps.add(step)"},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"        return NavigationRoute("},{"type":"DELETE","lineNumber":88,"oldContent":"            totalLength = routeData.route.routeInfo.routeLength,"},{"type":"DELETE","lineNumber":89,"oldContent":"            steps = steps"},{"type":"DELETE","lineNumber":90,"oldContent":"        )"},{"type":"DELETE","lineNumber":91,"oldContent":"    }"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"    // Optional: Für Debugging - die alte Logging-Funktion angepasst"},{"type":"DELETE","lineNumber":94,"oldContent":"    fun logNavigationRoute(navigationRoute: NavigationRoute) {"},{"type":"INSERT","lineNumber":86,"content":"     * Initialisiert die RouteViewModel mit dem gegebenen Context"},{"type":"INSERT","lineNumber":87,"content":"     */"},{"type":"INSERT","lineNumber":88,"content":"    fun initialize(context: Context) {"},{"type":"INSERT","lineNumber":89,"content":"        try {"},{"type":"INSERT","lineNumber":90,"content":"            Log.i(TAG, \"Initialisiere RouteViewModel...\")"},{"type":"INSERT","lineNumber":91,"content":"            "},{"type":"INSERT","lineNumber":92,"content":"            // Initialisiere RouteRepository"},{"type":"INSERT","lineNumber":93,"content":"            if (routeRepository == null) {"},{"type":"INSERT","lineNumber":94,"content":"                routeRepository = RouteRepository(context)"},{"type":"INSERT","lineNumber":463,"content":"                        Log.i(TAG, \"Landmark erfolgreich lokal gespeichert: $landmarkId\")"},{"type":"DELETE","lineNumber":464,"oldContent":"                        true"},{"type":"MODIFY","lineNumber":714,"content":"        Log.d(TAG, \"📸 Frame empfangen: ${frame.cols()}x${frame.rows()}\")","oldContent":"        Log.d(TAG, \"📸 Frame empfangen: ${frame.cols()}x${frame.rows()}, Channels: ${frame.channels()}\")"},{"type":"MODIFY","lineNumber":730,"content":"                // Update UI State","oldContent":"                // Update UI State"},{"type":"DELETE","lineNumber":857,"oldContent":"            "},{"type":"DELETE","lineNumber":863,"oldContent":"            }"},{"type":"DELETE","lineNumber":864,"oldContent":"            "},{"type":"MODIFY","lineNumber":865,"content":"            ","oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":871,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":887,"content":"            }"},{"type":"INSERT","lineNumber":888,"content":"            "},{"type":"INSERT","lineNumber":889,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":897,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":913,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":915,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":917,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":919,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":941,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":943,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":945,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":946,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":948,"oldContent":"                            )"},{"type":"DELETE","lineNumber":949,"oldContent":"                        )"},{"type":"DELETE","lineNumber":951,"oldContent":"                    }"},{"type":"DELETE","lineNumber":952,"oldContent":"                }"},{"type":"DELETE","lineNumber":954,"oldContent":"            }"},{"type":"DELETE","lineNumber":955,"oldContent":"            "},{"type":"INSERT","lineNumber":943,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":944,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":945,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":946,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":965,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":967,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":968,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":969,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":970,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":971,"content":"                            )"},{"type":"INSERT","lineNumber":972,"content":"                        )"},{"type":"INSERT","lineNumber":973,"content":"                    }"},{"type":"INSERT","lineNumber":974,"content":"                }"},{"type":"INSERT","lineNumber":975,"content":"            }"},{"type":"INSERT","lineNumber":976,"content":"            "},{"type":"INSERT","lineNumber":985,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1005,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1007,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1009,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":1016,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1017,"oldContent":"        "},{"type":"INSERT","lineNumber":1013,"content":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":1014,"content":"            // Stub implementation - verhindert Crashes"},{"type":"DELETE","lineNumber":1019,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1020,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1016,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1017,"content":"        }"},{"type":"DELETE","lineNumber":1026,"oldContent":"                var totalLength = 0.0"},{"type":"DELETE","lineNumber":1027,"oldContent":"                // Berechne Gesamtlänge aus allen RouteParts"},{"type":"DELETE","lineNumber":1028,"oldContent":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1023,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":1024,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":1025,"content":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":1035,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1036,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1037,"content":"        return emptyList()"},{"type":"DELETE","lineNumber":1045,"oldContent":"    "},{"type":"DELETE","lineNumber":1047,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":1049,"oldContent":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"DELETE","lineNumber":1051,"oldContent":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"DELETE","lineNumber":1053,"oldContent":"    }"},{"type":"DELETE","lineNumber":1055,"oldContent":"    "},{"type":"DELETE","lineNumber":1057,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1076,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1082,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1075,"content":"    "},{"type":"INSERT","lineNumber":1076,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1077,"content":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"INSERT","lineNumber":1078,"content":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"INSERT","lineNumber":1079,"content":"    }"},{"type":"INSERT","lineNumber":1080,"content":"    "},{"type":"INSERT","lineNumber":1081,"content":"    /**"},{"type":"DELETE","lineNumber":1104,"oldContent":"     */"},{"type":"DELETE","lineNumber":1106,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1103,"content":"                    }"},{"type":"INSERT","lineNumber":1111,"content":"                    }"},{"type":"DELETE","lineNumber":1130,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1134,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1132,"content":"     */"},{"type":"INSERT","lineNumber":1134,"content":"        return try {"},{"type":"DELETE","lineNumber":1138,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1140,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1142,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1146,"oldContent":"                "},{"type":"DELETE","lineNumber":1148,"oldContent":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"DELETE","lineNumber":1150,"oldContent":"                endPoint"},{"type":"DELETE","lineNumber":1152,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1154,"oldContent":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Endpunkt\")"},{"type":"DELETE","lineNumber":1156,"oldContent":"                \"Haupteingang\""},{"type":"DELETE","lineNumber":1158,"oldContent":"            }"},{"type":"DELETE","lineNumber":1164,"oldContent":"    }"},{"type":"DELETE","lineNumber":1167,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1158,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1161,"content":"                    }"},{"type":"DELETE","lineNumber":1175,"oldContent":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"DELETE","lineNumber":1179,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1180,"oldContent":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1181,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1166,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1167,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1168,"content":"                    }"},{"type":"DELETE","lineNumber":1183,"oldContent":"        )"},{"type":"INSERT","lineNumber":1171,"content":"                "},{"type":"INSERT","lineNumber":1172,"content":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1173,"content":"                endPoint"},{"type":"INSERT","lineNumber":1174,"content":"            } else {"},{"type":"INSERT","lineNumber":1175,"content":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Endpunkt\")"},{"type":"INSERT","lineNumber":1176,"content":"                \"Haupteingang\""},{"type":"INSERT","lineNumber":1177,"content":"            }"},{"type":"INSERT","lineNumber":1182,"content":"    }"},{"type":"INSERT","lineNumber":1184,"content":"    /**"},{"type":"INSERT","lineNumber":1195,"content":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"DELETE","lineNumber":1202,"oldContent":"    "},{"type":"INSERT","lineNumber":1199,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1200,"content":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1201,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1202,"content":"        )"},{"type":"INSERT","lineNumber":1228,"content":"    "},{"type":"DELETE","lineNumber":1237,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1239,"oldContent":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"DELETE","lineNumber":1241,"oldContent":"                "},{"type":"DELETE","lineNumber":1243,"oldContent":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"DELETE","lineNumber":1266,"oldContent":"                        ?: pathItem.xmlName"},{"type":"MODIFY","lineNumber":1267,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()","oldContent":"                    "},{"type":"INSERT","lineNumber":1268,"content":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"INSERT","lineNumber":1269,"content":"                "},{"type":"INSERT","lineNumber":1270,"content":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"DELETE","lineNumber":1275,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1293,"content":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1294,"content":"                    "},{"type":"INSERT","lineNumber":1303,"content":"            } else {"},{"type":"DELETE","lineNumber":1310,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1312,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1314,"oldContent":"        }"},{"type":"DELETE","lineNumber":1316,"oldContent":"    }"},{"type":"DELETE","lineNumber":1335,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1337,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1343,"oldContent":"        }"},{"type":"INSERT","lineNumber":1340,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1341,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1342,"content":"        }"},{"type":"INSERT","lineNumber":1343,"content":"    }"},{"type":"DELETE","lineNumber":1353,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1355,"oldContent":"            }"},{"type":"DELETE","lineNumber":1357,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1359,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1361,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1362,"content":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1370,"content":"        }"},{"type":"INSERT","lineNumber":1380,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1381,"content":"            }"},{"type":"INSERT","lineNumber":1382,"content":"            if (summary.estimatedTime > 0) {"},{"type":"INSERT","lineNumber":1383,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1386,"oldContent":"        "},{"type":"DELETE","lineNumber":1398,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1401,"oldContent":"    }"},{"type":"INSERT","lineNumber":1416,"content":"        "},{"type":"DELETE","lineNumber":1423,"oldContent":"}"},{"type":"DELETE","lineNumber":1424,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1425,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1426,"oldContent":"    "},{"type":"DELETE","lineNumber":1427,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1421,"content":"        }"},{"type":"INSERT","lineNumber":1423,"content":"    "},{"type":"INSERT","lineNumber":1424,"content":"    /**"},{"type":"INSERT","lineNumber":1425,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1426,"content":"     */"},{"type":"INSERT","lineNumber":1427,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1429,"content":"    }"},{"type":"INSERT","lineNumber":1430,"content":""},{"type":"INSERT","lineNumber":1431,"content":"}"}]},{"timestamp":1754926577635,"changes":[{"type":"MODIFY","lineNumber":67,"content":"    // State für geladene Route aus JSON","oldContent":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {"},{"type":"DELETE","lineNumber":83,"oldContent":"                steps.add(step)"},{"type":"DELETE","lineNumber":84,"oldContent":"            }"},{"type":"DELETE","lineNumber":85,"oldContent":"        }"},{"type":"INSERT","lineNumber":83,"content":"    val currentNavigationStep: StateFlow<Int> = _currentNavigationStep.asStateFlow()"},{"type":"INSERT","lineNumber":84,"content":""},{"type":"INSERT","lineNumber":85,"content":"    /**"},{"type":"MODIFY","lineNumber":239,"content":"                ","oldContent":"        return \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"MODIFY","lineNumber":245,"content":"                        floor = floor,","oldContent":"                }"},{"type":"MODIFY","lineNumber":268,"content":"            estimatedTime = steps.sumOf { it.estimatedTime }","oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":729,"content":"                "},{"type":"DELETE","lineNumber":730,"oldContent":"                // Update UI State"},{"type":"INSERT","lineNumber":733,"content":"                // Prüfe auf Landmark-Erkennung und springe automatisch zum nächsten Schritt"},{"type":"INSERT","lineNumber":734,"content":"                checkForLandmarkRecognitionAndAdvance(matches)"},{"type":"INSERT","lineNumber":735,"content":"                "},{"type":"DELETE","lineNumber":862,"oldContent":"            "},{"type":"INSERT","lineNumber":868,"content":"            "},{"type":"DELETE","lineNumber":883,"oldContent":"            }"},{"type":"DELETE","lineNumber":885,"oldContent":"            "},{"type":"DELETE","lineNumber":887,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":890,"content":"            }"},{"type":"INSERT","lineNumber":891,"content":"            "},{"type":"INSERT","lineNumber":892,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":896,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":900,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":938,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":939,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":941,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":942,"oldContent":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":946,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":947,"content":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"INSERT","lineNumber":948,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":949,"content":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":956,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":958,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":960,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"DELETE","lineNumber":962,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":964,"oldContent":"                            )"},{"type":"DELETE","lineNumber":966,"oldContent":"                        )"},{"type":"DELETE","lineNumber":968,"oldContent":"                    }"},{"type":"DELETE","lineNumber":970,"oldContent":"                }"},{"type":"DELETE","lineNumber":972,"oldContent":"            }"},{"type":"DELETE","lineNumber":974,"oldContent":"            "},{"type":"INSERT","lineNumber":970,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":971,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":972,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":973,"content":"                                imageUrl = \"\""},{"type":"INSERT","lineNumber":974,"content":"                            )"},{"type":"INSERT","lineNumber":975,"content":"                        )"},{"type":"INSERT","lineNumber":976,"content":"                    }"},{"type":"INSERT","lineNumber":977,"content":"                }"},{"type":"INSERT","lineNumber":978,"content":"            }"},{"type":"INSERT","lineNumber":979,"content":"            "},{"type":"DELETE","lineNumber":984,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":988,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1010,"oldContent":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"DELETE","lineNumber":1012,"oldContent":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1016,"content":"            Log.d(TAG, \"reloadLandmarksForRoute called (stub)\")"},{"type":"INSERT","lineNumber":1017,"content":"            // Stub implementation - verhindert Crashes"},{"type":"INSERT","lineNumber":1018,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1017,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1020,"oldContent":"    fun updateLandmarksForCurrentRoute() {"},{"type":"DELETE","lineNumber":1022,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":1024,"oldContent":"            val currentRoute = _currentRoute.value"},{"type":"INSERT","lineNumber":1026,"content":"    fun updateLandmarksForCurrentRoute() {"},{"type":"INSERT","lineNumber":1027,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":1028,"content":"            val currentRoute = _currentRoute.value"},{"type":"DELETE","lineNumber":1032,"oldContent":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"DELETE","lineNumber":1034,"oldContent":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"DELETE","lineNumber":1036,"oldContent":"        return emptyList()"},{"type":"INSERT","lineNumber":1038,"content":"    fun getCurrentlyLoadedLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1039,"content":"        Log.d(TAG, \"getCurrentlyLoadedLandmarkIds called (stub)\")"},{"type":"INSERT","lineNumber":1040,"content":"        return emptyList()"},{"type":"DELETE","lineNumber":1068,"oldContent":"    "},{"type":"DELETE","lineNumber":1070,"oldContent":"    fun startFrameProcessing() {"},{"type":"DELETE","lineNumber":1071,"oldContent":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"DELETE","lineNumber":1073,"oldContent":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"DELETE","lineNumber":1075,"oldContent":"    }"},{"type":"DELETE","lineNumber":1077,"oldContent":"    "},{"type":"DELETE","lineNumber":1079,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1078,"content":"    "},{"type":"INSERT","lineNumber":1079,"content":"    fun startFrameProcessing() {"},{"type":"INSERT","lineNumber":1080,"content":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"INSERT","lineNumber":1081,"content":"        // Feature-Matching ist bereits in initializeStorage() aktiviert"},{"type":"INSERT","lineNumber":1082,"content":"    }"},{"type":"INSERT","lineNumber":1083,"content":"    "},{"type":"INSERT","lineNumber":1084,"content":"    /**"},{"type":"DELETE","lineNumber":1101,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1106,"content":"                    }"},{"type":"DELETE","lineNumber":1108,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1114,"content":"                    }"},{"type":"DELETE","lineNumber":1129,"oldContent":"     */"},{"type":"DELETE","lineNumber":1132,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1135,"content":"     */"},{"type":"INSERT","lineNumber":1137,"content":"        return try {"},{"type":"DELETE","lineNumber":1147,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1151,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1155,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1157,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1158,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1162,"oldContent":"                "},{"type":"DELETE","lineNumber":1164,"oldContent":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1161,"content":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1166,"oldContent":"                endPoint"},{"type":"DELETE","lineNumber":1168,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1164,"content":"                    }"},{"type":"DELETE","lineNumber":1170,"oldContent":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Endpunkt\")"},{"type":"DELETE","lineNumber":1171,"oldContent":"                \"Haupteingang\""},{"type":"DELETE","lineNumber":1173,"oldContent":"            }"},{"type":"DELETE","lineNumber":1176,"oldContent":"    }"},{"type":"INSERT","lineNumber":1169,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1170,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1171,"content":"                    }"},{"type":"DELETE","lineNumber":1178,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1174,"content":"                "},{"type":"INSERT","lineNumber":1175,"content":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1176,"content":"                endPoint"},{"type":"INSERT","lineNumber":1177,"content":"            } else {"},{"type":"INSERT","lineNumber":1178,"content":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Endpunkt\")"},{"type":"INSERT","lineNumber":1179,"content":"                \"Haupteingang\""},{"type":"INSERT","lineNumber":1180,"content":"            }"},{"type":"INSERT","lineNumber":1185,"content":"    }"},{"type":"INSERT","lineNumber":1187,"content":"    /**"},{"type":"DELETE","lineNumber":1190,"oldContent":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"DELETE","lineNumber":1195,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1197,"oldContent":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1198,"content":"        // Suche nach bekannten Mustern für Ortsangaben"},{"type":"DELETE","lineNumber":1199,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1201,"oldContent":"        )"},{"type":"INSERT","lineNumber":1202,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1203,"content":"            Regex(\"([A-Z][^.]*(?:eingang|Eingang|entrance|Entrance))\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1204,"content":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":1205,"content":"        )"},{"type":"DELETE","lineNumber":1227,"oldContent":"    "},{"type":"INSERT","lineNumber":1231,"content":"    "},{"type":"DELETE","lineNumber":1262,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1263,"oldContent":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"DELETE","lineNumber":1265,"oldContent":"                "},{"type":"DELETE","lineNumber":1267,"oldContent":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"INSERT","lineNumber":1270,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1271,"content":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"INSERT","lineNumber":1272,"content":"                "},{"type":"INSERT","lineNumber":1273,"content":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"DELETE","lineNumber":1290,"oldContent":"                        ?: pathItem.xmlName"},{"type":"DELETE","lineNumber":1292,"oldContent":"                    "},{"type":"INSERT","lineNumber":1296,"content":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1297,"content":"                    "},{"type":"DELETE","lineNumber":1302,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1306,"content":"            } else {"},{"type":"DELETE","lineNumber":1334,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1336,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1338,"oldContent":"        }"},{"type":"DELETE","lineNumber":1340,"oldContent":"    }"},{"type":"INSERT","lineNumber":1343,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1344,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1345,"content":"        }"},{"type":"INSERT","lineNumber":1346,"content":"    }"},{"type":"DELETE","lineNumber":1354,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1356,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"INSERT","lineNumber":1364,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1365,"content":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1365,"oldContent":"        }"},{"type":"INSERT","lineNumber":1373,"content":"        }"},{"type":"DELETE","lineNumber":1376,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1378,"oldContent":"            }"},{"type":"DELETE","lineNumber":1380,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1382,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1383,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1384,"content":"            }"},{"type":"INSERT","lineNumber":1385,"content":"            if (summary.estimatedTime > 0) {"},{"type":"INSERT","lineNumber":1386,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1413,"oldContent":"        "},{"type":"INSERT","lineNumber":1419,"content":"        "},{"type":"INSERT","lineNumber":1422,"content":"        } else {"},{"type":"INSERT","lineNumber":1423,"content":"            0f"},{"type":"DELETE","lineNumber":1420,"oldContent":"}"},{"type":"DELETE","lineNumber":1421,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1425,"content":"    }"},{"type":"DELETE","lineNumber":1427,"oldContent":"}"},{"type":"DELETE","lineNumber":1428,"oldContent":"    }"},{"type":"INSERT","lineNumber":1432,"content":"    }"}]},{"timestamp":1754926621259,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import com.example.arwalking.storage.CleanupSummary","oldContent":"    private val TAG = \"RouteViewModel\""},{"type":"MODIFY","lineNumber":21,"content":"/**","oldContent":"    "},{"type":"MODIFY","lineNumber":68,"content":"    private val _currentRoute = MutableStateFlow<RouteData?>(null)","oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"MODIFY","lineNumber":95,"content":"                Log.d(TAG, \"RouteRepository initialisiert\")","oldContent":"        Log.i(TAG, \"=== NAVIGATION ROUTE START ===\")"},{"type":"DELETE","lineNumber":100,"oldContent":"        navigationRoute.steps.forEach { step ->"},{"type":"DELETE","lineNumber":101,"oldContent":"            Log.i(TAG, \"Schritt ${step.stepNumber}: ${step.instruction}\")"},{"type":"DELETE","lineNumber":102,"oldContent":"            Log.i(TAG, \"  Gebäude: ${step.building}\")"},{"type":"DELETE","lineNumber":103,"oldContent":"            if (step.landmarkIds.isNotEmpty()) {"},{"type":"INSERT","lineNumber":100,"content":"            "},{"type":"INSERT","lineNumber":101,"content":"            Log.i(TAG, \"RouteViewModel erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":102,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":103,"content":"            Log.e(TAG, \"Fehler bei der Initialisierung: ${e.message}\")"},{"type":"MODIFY","lineNumber":202,"content":"    private fun convertToNavigationRoute(routeData: RouteData): NavigationRoute {","oldContent":"        }"},{"type":"DELETE","lineNumber":734,"oldContent":"                // Logge nur bei erfolgreichen Matches"},{"type":"MODIFY","lineNumber":736,"content":"                // Logge nur bei erfolgreichen Matches","oldContent":"                if (matches.isNotEmpty()) {"},{"type":"INSERT","lineNumber":737,"content":"                if (matches.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":859,"content":"    /**","oldContent":""},{"type":"INSERT","lineNumber":860,"content":"     * Prüft erkannte Landmarks und springt automatisch zum nächsten Schritt"},{"type":"INSERT","lineNumber":861,"content":"     */"},{"type":"INSERT","lineNumber":862,"content":"    private fun checkForLandmarkRecognitionAndAdvance(matches: List<FeatureMatchResult>) {"},{"type":"INSERT","lineNumber":863,"content":"        if (matches.isEmpty()) return"},{"type":"INSERT","lineNumber":864,"content":"        "},{"type":"INSERT","lineNumber":865,"content":"        try {"},{"type":"INSERT","lineNumber":866,"content":"            val currentRoute = _currentRoute.value ?: return"},{"type":"INSERT","lineNumber":867,"content":"            val currentStepIndex = _currentStepNumber.value - 1 // 0-basiert"},{"type":"INSERT","lineNumber":868,"content":"            val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":869,"content":"            "},{"type":"INSERT","lineNumber":870,"content":"            if (currentStepIndex < 0 || currentStepIndex >= steps.size) return"},{"type":"INSERT","lineNumber":871,"content":"            "},{"type":"INSERT","lineNumber":872,"content":"            val currentStep = steps[currentStepIndex]"},{"type":"INSERT","lineNumber":873,"content":"            "},{"type":"INSERT","lineNumber":874,"content":"            // Finde die beste Landmark-Erkennung"},{"type":"INSERT","lineNumber":875,"content":"            val bestMatch = matches.maxByOrNull { it.confidence }"},{"type":"INSERT","lineNumber":876,"content":"            if (bestMatch == null || bestMatch.confidence < 0.6f) return"},{"type":"INSERT","lineNumber":877,"content":"            "},{"type":"INSERT","lineNumber":878,"content":"            Log.i(TAG, \"🎯 Beste Landmark-Erkennung: ${bestMatch.landmarkId} (${(bestMatch.confidence * 100).toInt()}%)\")"},{"type":"INSERT","lineNumber":879,"content":"            "},{"type":"INSERT","lineNumber":880,"content":"            // Prüfe, ob diese Landmark zum aktuellen Schritt gehört"},{"type":"INSERT","lineNumber":881,"content":"            val expectedLandmarkId = extractLandmarkIdFromStep(currentStep)"},{"type":"INSERT","lineNumber":882,"content":"            "},{"type":"INSERT","lineNumber":883,"content":"            if (expectedLandmarkId != null && bestMatch.landmarkId == expectedLandmarkId) {"},{"type":"INSERT","lineNumber":884,"content":"                Log.i(TAG, \"✅ Landmark erkannt! Springe zum nächsten Schritt: $expectedLandmarkId\")"},{"type":"INSERT","lineNumber":885,"content":"                "},{"type":"INSERT","lineNumber":886,"content":"                // Automatisch zum nächsten Schritt springen"},{"type":"INSERT","lineNumber":887,"content":"                if (currentStepIndex + 1 < steps.size) {"},{"type":"INSERT","lineNumber":888,"content":"                    _currentStepNumber.value = currentStepIndex + 2 // 1-basiert"},{"type":"INSERT","lineNumber":889,"content":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 2} gesprungen\")"},{"type":"INSERT","lineNumber":890,"content":"                } else {"},{"type":"INSERT","lineNumber":891,"content":"                    Log.i(TAG, \"🏁 Route abgeschlossen!\")"},{"type":"INSERT","lineNumber":892,"content":"                }"},{"type":"INSERT","lineNumber":893,"content":"            } else {"},{"type":"INSERT","lineNumber":894,"content":"                Log.d(TAG, \"🔍 Erkannte Landmark (${bestMatch.landmarkId}) gehört nicht zum aktuellen Schritt (erwartet: $expectedLandmarkId)\")"},{"type":"INSERT","lineNumber":895,"content":"            }"},{"type":"INSERT","lineNumber":896,"content":"            "},{"type":"INSERT","lineNumber":897,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":898,"content":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"INSERT","lineNumber":899,"content":"        }"},{"type":"INSERT","lineNumber":900,"content":"    }"},{"type":"INSERT","lineNumber":903,"content":"     * Extrahiert die Landmark-ID aus einem Navigationsschritt"},{"type":"INSERT","lineNumber":904,"content":"     */"},{"type":"INSERT","lineNumber":905,"content":"    private fun extractLandmarkIdFromStep(step: NavigationStep): String? {"},{"type":"INSERT","lineNumber":906,"content":"        return try {"},{"type":"INSERT","lineNumber":907,"content":"            // Suche nach Landmark-Referenzen in der Anweisung"},{"type":"INSERT","lineNumber":908,"content":"            val instruction = step.instruction.lowercase()"},{"type":"INSERT","lineNumber":909,"content":"            "},{"type":"INSERT","lineNumber":910,"content":"            // Muster: PT-1-XXX"},{"type":"INSERT","lineNumber":911,"content":"            val landmarkPattern = Regex(\"pt-1-\\\\d+\")"},{"type":"INSERT","lineNumber":912,"content":"            val match = landmarkPattern.find(instruction)"},{"type":"INSERT","lineNumber":913,"content":"            "},{"type":"INSERT","lineNumber":914,"content":"            if (match != null) {"},{"type":"INSERT","lineNumber":915,"content":"                val landmarkId = match.value.uppercase()"},{"type":"INSERT","lineNumber":916,"content":"                Log.d(TAG, \"🏷️ Landmark-ID aus Schritt extrahiert: $landmarkId\")"},{"type":"INSERT","lineNumber":917,"content":"                return landmarkId"},{"type":"INSERT","lineNumber":918,"content":"            }"},{"type":"INSERT","lineNumber":919,"content":"            "},{"type":"INSERT","lineNumber":920,"content":"            Log.d(TAG, \"🔍 Keine Landmark-ID in Anweisung gefunden: $instruction\")"},{"type":"INSERT","lineNumber":921,"content":"            null"},{"type":"INSERT","lineNumber":922,"content":"            "},{"type":"INSERT","lineNumber":923,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":924,"content":"            Log.e(TAG, \"❌ Fehler beim Extrahieren der Landmark-ID: ${e.message}\")"},{"type":"INSERT","lineNumber":925,"content":"            null"},{"type":"INSERT","lineNumber":926,"content":"        }"},{"type":"INSERT","lineNumber":927,"content":"    }"},{"type":"INSERT","lineNumber":928,"content":"    "},{"type":"INSERT","lineNumber":929,"content":"    /**"},{"type":"INSERT","lineNumber":936,"content":"            "},{"type":"DELETE","lineNumber":871,"oldContent":"            "},{"type":"DELETE","lineNumber":891,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":893,"oldContent":"        }"},{"type":"INSERT","lineNumber":961,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"INSERT","lineNumber":962,"content":"        }"},{"type":"INSERT","lineNumber":968,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":902,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":945,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1014,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":948,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":950,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":1018,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":1019,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":1034,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":1035,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":1036,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":1037,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":968,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":971,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":974,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":976,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":978,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":980,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1048,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":1049,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1056,"content":"            emptyList()"},{"type":"DELETE","lineNumber":990,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1016,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":1018,"oldContent":"        }"},{"type":"INSERT","lineNumber":1087,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1088,"content":"        }"},{"type":"DELETE","lineNumber":1027,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":1029,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":1097,"content":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":1098,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":1039,"oldContent":"    }"},{"type":"DELETE","lineNumber":1041,"oldContent":"    "},{"type":"INSERT","lineNumber":1109,"content":"    }"},{"type":"INSERT","lineNumber":1110,"content":"    "},{"type":"DELETE","lineNumber":1075,"oldContent":"    "},{"type":"INSERT","lineNumber":1144,"content":"        }"},{"type":"INSERT","lineNumber":1145,"content":"    }"},{"type":"INSERT","lineNumber":1146,"content":"    "},{"type":"DELETE","lineNumber":1079,"oldContent":"        }"},{"type":"DELETE","lineNumber":1082,"oldContent":"    }"},{"type":"DELETE","lineNumber":1083,"oldContent":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"DELETE","lineNumber":1085,"oldContent":"     */"},{"type":"INSERT","lineNumber":1153,"content":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1154,"content":"     */"},{"type":"INSERT","lineNumber":1174,"content":"                    }"},{"type":"DELETE","lineNumber":1108,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1182,"content":"                    }"},{"type":"DELETE","lineNumber":1117,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1135,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1204,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1205,"content":"        return try {"},{"type":"DELETE","lineNumber":1139,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":1159,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1162,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1229,"content":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1165,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1232,"content":"                    }"},{"type":"INSERT","lineNumber":1234,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1235,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1236,"content":"                    }"},{"type":"INSERT","lineNumber":1237,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1169,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1240,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1241,"content":"                }"},{"type":"DELETE","lineNumber":1171,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1173,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1176,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"DELETE","lineNumber":1179,"oldContent":"                }"},{"type":"DELETE","lineNumber":1185,"oldContent":"    "},{"type":"INSERT","lineNumber":1254,"content":"    "},{"type":"INSERT","lineNumber":1255,"content":"    /**"},{"type":"DELETE","lineNumber":1189,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1201,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1270,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1204,"oldContent":"        "},{"type":"DELETE","lineNumber":1206,"oldContent":"        for (pattern in locationPatterns) {"},{"type":"INSERT","lineNumber":1274,"content":"        "},{"type":"INSERT","lineNumber":1275,"content":"        for (pattern in locationPatterns) {"},{"type":"INSERT","lineNumber":1299,"content":"    "},{"type":"DELETE","lineNumber":1233,"oldContent":"    "},{"type":"DELETE","lineNumber":1269,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1338,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1272,"oldContent":"                timeInMinutes"},{"type":"DELETE","lineNumber":1274,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1342,"content":"                timeInMinutes"},{"type":"INSERT","lineNumber":1343,"content":"            } else {"},{"type":"DELETE","lineNumber":1296,"oldContent":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1298,"oldContent":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1366,"content":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1367,"content":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1374,"content":"            } else {"},{"type":"DELETE","lineNumber":1308,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1342,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1411,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1345,"oldContent":"    "},{"type":"DELETE","lineNumber":1347,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1415,"content":"    "},{"type":"INSERT","lineNumber":1416,"content":"    /**"},{"type":"DELETE","lineNumber":1364,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1366,"oldContent":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":1434,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1435,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":1441,"content":"        }"},{"type":"DELETE","lineNumber":1375,"oldContent":"        }"},{"type":"DELETE","lineNumber":1382,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1451,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1385,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"DELETE","lineNumber":1387,"oldContent":"            }"},{"type":"INSERT","lineNumber":1455,"content":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"INSERT","lineNumber":1456,"content":"            }"},{"type":"INSERT","lineNumber":1487,"content":"        "},{"type":"DELETE","lineNumber":1421,"oldContent":"        "},{"type":"DELETE","lineNumber":1422,"oldContent":"        }"},{"type":"DELETE","lineNumber":1424,"oldContent":"    "},{"type":"INSERT","lineNumber":1492,"content":"        }"},{"type":"INSERT","lineNumber":1493,"content":"    }"},{"type":"INSERT","lineNumber":1494,"content":"    "},{"type":"DELETE","lineNumber":1428,"oldContent":"    }"},{"type":"INSERT","lineNumber":1500,"content":"    }"},{"type":"DELETE","lineNumber":1434,"oldContent":"    }"}]},{"timestamp":1754926638154,"changes":[{"type":"MODIFY","lineNumber":1,"content":"","oldContent":"package com.example.arwalking"},{"type":"DELETE","lineNumber":130,"oldContent":"    "},{"type":"DELETE","lineNumber":131,"oldContent":"    }"},{"type":"DELETE","lineNumber":132,"oldContent":"        }"},{"type":"DELETE","lineNumber":133,"oldContent":"            0f"},{"type":"DELETE","lineNumber":134,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":135,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":136,"oldContent":"        return if (totalSteps > 0) {"},{"type":"INSERT","lineNumber":130,"content":"                        "},{"type":"INSERT","lineNumber":131,"content":"                        // Logge Route-Details"},{"type":"INSERT","lineNumber":132,"content":"                        logNavigationRoute(navigationRoute)"},{"type":"INSERT","lineNumber":133,"content":"                        "},{"type":"INSERT","lineNumber":134,"content":"                        // Setze ersten Schritt als aktiv"},{"type":"INSERT","lineNumber":135,"content":"                        _currentNavigationStep.value = 1"},{"type":"INSERT","lineNumber":136,"content":"                        "},{"type":"MODIFY","lineNumber":197,"content":"    }","oldContent":"        }"},{"type":"INSERT","lineNumber":735,"content":"                "},{"type":"DELETE","lineNumber":737,"oldContent":"                "},{"type":"DELETE","lineNumber":861,"oldContent":"    "},{"type":"DELETE","lineNumber":863,"oldContent":"    /**"},{"type":"DELETE","lineNumber":865,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"DELETE","lineNumber":867,"oldContent":"     */"},{"type":"DELETE","lineNumber":869,"oldContent":"    override fun onCleared() {"},{"type":"DELETE","lineNumber":871,"oldContent":"        super.onCleared()"},{"type":"DELETE","lineNumber":873,"oldContent":"        try {"},{"type":"DELETE","lineNumber":875,"oldContent":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"DELETE","lineNumber":877,"oldContent":"            // Stoppe Navigation"},{"type":"DELETE","lineNumber":879,"oldContent":"            stopNavigation()"},{"type":"DELETE","lineNumber":882,"oldContent":"            "},{"type":"DELETE","lineNumber":884,"oldContent":"            // Bereinige Ressourcen"},{"type":"DELETE","lineNumber":886,"oldContent":"            arTrackingSystem?.resetTracking()"},{"type":"DELETE","lineNumber":888,"oldContent":"            processedLandmarks.clear()"},{"type":"DELETE","lineNumber":890,"oldContent":"            "},{"type":"DELETE","lineNumber":892,"oldContent":"            // Bereinige FeatureMatchingEngine"},{"type":"DELETE","lineNumber":894,"oldContent":"            featureMatchingEngine?.cleanup()"},{"type":"DELETE","lineNumber":897,"oldContent":"            "},{"type":"DELETE","lineNumber":898,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":900,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":902,"oldContent":"                try {"},{"type":"DELETE","lineNumber":904,"oldContent":"                    storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":906,"oldContent":"                    "},{"type":"DELETE","lineNumber":908,"oldContent":"                    // Feature-Storage wird automatisch bereinigt"},{"type":"DELETE","lineNumber":910,"oldContent":"                    "},{"type":"DELETE","lineNumber":912,"oldContent":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"DELETE","lineNumber":914,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":916,"oldContent":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"DELETE","lineNumber":918,"oldContent":"                }"},{"type":"DELETE","lineNumber":920,"oldContent":"            }"},{"type":"DELETE","lineNumber":923,"oldContent":"            "},{"type":"DELETE","lineNumber":926,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":896,"content":"            "},{"type":"INSERT","lineNumber":897,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":898,"content":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"INSERT","lineNumber":899,"content":"        }"},{"type":"INSERT","lineNumber":901,"content":"    "},{"type":"INSERT","lineNumber":902,"content":"    /**"},{"type":"INSERT","lineNumber":903,"content":"     * Extrahiert die Landmark-ID aus einem Navigationsschritt"},{"type":"INSERT","lineNumber":904,"content":"     */"},{"type":"INSERT","lineNumber":905,"content":"    private fun extractLandmarkIdFromStep(step: NavigationStep): String? {"},{"type":"INSERT","lineNumber":906,"content":"        return try {"},{"type":"INSERT","lineNumber":907,"content":"            val currentRoute = _currentRoute.value ?: return null"},{"type":"INSERT","lineNumber":908,"content":"            val currentStepIndex = _currentStepNumber.value - 1"},{"type":"INSERT","lineNumber":910,"content":"            // Durchsuche die JSON-Route nach dem aktuellen Schritt"},{"type":"INSERT","lineNumber":911,"content":"            for (pathElement in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":912,"content":"                for ((index, routePart) in pathElement.routeParts.withIndex()) {"},{"type":"INSERT","lineNumber":913,"content":"                    if (index == currentStepIndex) {"},{"type":"INSERT","lineNumber":914,"content":"                        // Prüfe landmarkFromInstruction"},{"type":"INSERT","lineNumber":915,"content":"                        val landmarkId = routePart.landmarkFromInstruction"},{"type":"INSERT","lineNumber":916,"content":"                        if (!landmarkId.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":917,"content":"                            Log.d(TAG, \"🏷️ Landmark-ID aus JSON gefunden: $landmarkId\")"},{"type":"INSERT","lineNumber":918,"content":"                            return landmarkId"},{"type":"INSERT","lineNumber":919,"content":"                        }"},{"type":"INSERT","lineNumber":920,"content":"                        "},{"type":"INSERT","lineNumber":921,"content":"                        // Prüfe landmarks Array"},{"type":"INSERT","lineNumber":922,"content":"                        if (routePart.landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":923,"content":"                            val firstLandmark = routePart.landmarks[0].id"},{"type":"INSERT","lineNumber":924,"content":"                            Log.d(TAG, \"🏷️ Landmark-ID aus landmarks Array: $firstLandmark\")"},{"type":"INSERT","lineNumber":925,"content":"                            return firstLandmark"},{"type":"INSERT","lineNumber":926,"content":"                        }"},{"type":"INSERT","lineNumber":927,"content":"                    }"},{"type":"INSERT","lineNumber":928,"content":"                }"},{"type":"INSERT","lineNumber":929,"content":"            }"},{"type":"INSERT","lineNumber":930,"content":"            "},{"type":"INSERT","lineNumber":931,"content":"            // Fallback: Suche in der Anweisung"},{"type":"INSERT","lineNumber":932,"content":"            val instruction = step.instruction.lowercase()"},{"type":"INSERT","lineNumber":933,"content":"            val landmarkPattern = Regex(\"pt-1-\\\\d+\")"},{"type":"INSERT","lineNumber":934,"content":"            val match = landmarkPattern.find(instruction)"},{"type":"INSERT","lineNumber":935,"content":"            "},{"type":"INSERT","lineNumber":936,"content":"            if (match != null) {"},{"type":"INSERT","lineNumber":937,"content":"                val landmarkId = match.value.uppercase()"},{"type":"INSERT","lineNumber":938,"content":"                Log.d(TAG, \"🏷️ Landmark-ID aus Anweisung extrahiert: $landmarkId\")"},{"type":"INSERT","lineNumber":939,"content":"                return landmarkId"},{"type":"INSERT","lineNumber":940,"content":"            }"},{"type":"INSERT","lineNumber":941,"content":"            "},{"type":"INSERT","lineNumber":942,"content":"            Log.d(TAG, \"🔍 Keine Landmark-ID für Schritt $currentStepIndex gefunden\")"},{"type":"INSERT","lineNumber":943,"content":"            null"},{"type":"INSERT","lineNumber":944,"content":"            "},{"type":"INSERT","lineNumber":945,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":946,"content":"            Log.e(TAG, \"❌ Fehler beim Extrahieren der Landmark-ID: ${e.message}\")"},{"type":"INSERT","lineNumber":947,"content":"            null"},{"type":"INSERT","lineNumber":948,"content":"        }"},{"type":"INSERT","lineNumber":949,"content":"    }"},{"type":"INSERT","lineNumber":951,"content":"    /**"},{"type":"INSERT","lineNumber":952,"content":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":953,"content":"     */"},{"type":"INSERT","lineNumber":954,"content":"    override fun onCleared() {"},{"type":"INSERT","lineNumber":955,"content":"        super.onCleared()"},{"type":"INSERT","lineNumber":956,"content":"        try {"},{"type":"INSERT","lineNumber":957,"content":"            Log.i(TAG, \"RouteViewModel wird bereinigt...\")"},{"type":"INSERT","lineNumber":958,"content":"            "},{"type":"INSERT","lineNumber":959,"content":"            // Stoppe Navigation"},{"type":"INSERT","lineNumber":960,"content":"            stopNavigation()"},{"type":"INSERT","lineNumber":961,"content":"            "},{"type":"INSERT","lineNumber":962,"content":"            // Bereinige Ressourcen"},{"type":"INSERT","lineNumber":963,"content":"            arTrackingSystem?.resetTracking()"},{"type":"INSERT","lineNumber":964,"content":"            processedLandmarks.clear()"},{"type":"INSERT","lineNumber":965,"content":"            "},{"type":"INSERT","lineNumber":966,"content":"            // Bereinige FeatureMatchingEngine"},{"type":"INSERT","lineNumber":967,"content":"            featureMatchingEngine?.cleanup()"},{"type":"INSERT","lineNumber":968,"content":"            "},{"type":"INSERT","lineNumber":969,"content":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"INSERT","lineNumber":970,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":971,"content":"                try {"},{"type":"INSERT","lineNumber":972,"content":"                    storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":973,"content":"                    "},{"type":"INSERT","lineNumber":974,"content":"                    // Feature-Storage wird automatisch bereinigt"},{"type":"INSERT","lineNumber":975,"content":"                    "},{"type":"INSERT","lineNumber":976,"content":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":977,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":978,"content":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"INSERT","lineNumber":979,"content":"                }"},{"type":"INSERT","lineNumber":980,"content":"            }"},{"type":"INSERT","lineNumber":981,"content":"            "},{"type":"INSERT","lineNumber":983,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"INSERT","lineNumber":984,"content":"        }"},{"type":"INSERT","lineNumber":985,"content":"    }"},{"type":"INSERT","lineNumber":986,"content":"    "},{"type":"DELETE","lineNumber":933,"oldContent":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"DELETE","lineNumber":935,"oldContent":"        }"},{"type":"DELETE","lineNumber":937,"oldContent":"    }"},{"type":"INSERT","lineNumber":990,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":940,"oldContent":"     * Extrahiert die Landmark-ID aus einem Navigationsschritt"},{"type":"DELETE","lineNumber":942,"oldContent":"     */"},{"type":"DELETE","lineNumber":944,"oldContent":"    private fun extractLandmarkIdFromStep(step: NavigationStep): String? {"},{"type":"DELETE","lineNumber":946,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":948,"oldContent":"            // Suche nach Landmark-Referenzen in der Anweisung"},{"type":"DELETE","lineNumber":950,"oldContent":"            val instruction = step.instruction.lowercase()"},{"type":"DELETE","lineNumber":952,"oldContent":"            "},{"type":"DELETE","lineNumber":954,"oldContent":"            // Muster: PT-1-XXX"},{"type":"DELETE","lineNumber":956,"oldContent":"            val landmarkPattern = Regex(\"pt-1-\\\\d+\")"},{"type":"DELETE","lineNumber":958,"oldContent":"            val match = landmarkPattern.find(instruction)"},{"type":"DELETE","lineNumber":960,"oldContent":"            "},{"type":"DELETE","lineNumber":962,"oldContent":"            if (match != null) {"},{"type":"DELETE","lineNumber":964,"oldContent":"                val landmarkId = match.value.uppercase()"},{"type":"DELETE","lineNumber":966,"oldContent":"                Log.d(TAG, \"🏷️ Landmark-ID aus Schritt extrahiert: $landmarkId\")"},{"type":"DELETE","lineNumber":968,"oldContent":"                return landmarkId"},{"type":"DELETE","lineNumber":970,"oldContent":"            }"},{"type":"DELETE","lineNumber":972,"oldContent":"            "},{"type":"DELETE","lineNumber":974,"oldContent":"            Log.d(TAG, \"🔍 Keine Landmark-ID in Anweisung gefunden: $instruction\")"},{"type":"DELETE","lineNumber":976,"oldContent":"            null"},{"type":"DELETE","lineNumber":978,"oldContent":"            "},{"type":"DELETE","lineNumber":980,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":982,"oldContent":"            Log.e(TAG, \"❌ Fehler beim Extrahieren der Landmark-ID: ${e.message}\")"},{"type":"DELETE","lineNumber":984,"oldContent":"            null"},{"type":"DELETE","lineNumber":986,"oldContent":"        }"},{"type":"DELETE","lineNumber":988,"oldContent":"    }"},{"type":"DELETE","lineNumber":990,"oldContent":"    "},{"type":"DELETE","lineNumber":992,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1000,"oldContent":"            "},{"type":"INSERT","lineNumber":1036,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1040,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":1041,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"DELETE","lineNumber":1023,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":1025,"oldContent":"        }"},{"type":"INSERT","lineNumber":1056,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":1057,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":1058,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":1059,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":1032,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":1070,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":1071,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1078,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1072,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":1076,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":1077,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"DELETE","lineNumber":1080,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1081,"oldContent":"     */"},{"type":"INSERT","lineNumber":1109,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1110,"content":"        }"},{"type":"INSERT","lineNumber":1111,"content":"    }"},{"type":"INSERT","lineNumber":1112,"content":"    "},{"type":"INSERT","lineNumber":1119,"content":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":1120,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":1091,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":1093,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":1095,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":1097,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":1131,"content":"    }"},{"type":"INSERT","lineNumber":1132,"content":"    "},{"type":"DELETE","lineNumber":1107,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":1109,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":1117,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":1166,"content":"        }"},{"type":"INSERT","lineNumber":1167,"content":"    }"},{"type":"INSERT","lineNumber":1168,"content":"    "},{"type":"DELETE","lineNumber":1144,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1175,"content":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1176,"content":"     */"},{"type":"DELETE","lineNumber":1146,"oldContent":"        }"},{"type":"DELETE","lineNumber":1156,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":1158,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":1196,"content":"                    }"},{"type":"DELETE","lineNumber":1169,"oldContent":"    }"},{"type":"DELETE","lineNumber":1171,"oldContent":"    "},{"type":"INSERT","lineNumber":1204,"content":"                    }"},{"type":"INSERT","lineNumber":1226,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1227,"content":"        return try {"},{"type":"DELETE","lineNumber":1203,"oldContent":"        }"},{"type":"DELETE","lineNumber":1205,"oldContent":"    }"},{"type":"DELETE","lineNumber":1207,"oldContent":"    "},{"type":"DELETE","lineNumber":1215,"oldContent":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"DELETE","lineNumber":1217,"oldContent":"     */"},{"type":"INSERT","lineNumber":1251,"content":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1254,"content":"                    }"},{"type":"INSERT","lineNumber":1256,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1257,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1258,"content":"                    }"},{"type":"INSERT","lineNumber":1259,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1262,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1263,"content":"                }"},{"type":"DELETE","lineNumber":1232,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1239,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1276,"content":"    "},{"type":"INSERT","lineNumber":1277,"content":"    /**"},{"type":"INSERT","lineNumber":1292,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1259,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1260,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1296,"content":"        "},{"type":"INSERT","lineNumber":1297,"content":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":1278,"oldContent":"}"},{"type":"DELETE","lineNumber":1279,"oldContent":""},{"type":"DELETE","lineNumber":1280,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1281,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1313,"content":"        }"},{"type":"INSERT","lineNumber":1314,"content":"    }"},{"type":"INSERT","lineNumber":1315,"content":"    "},{"type":"INSERT","lineNumber":1316,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1284,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"INSERT","lineNumber":1321,"content":"    "},{"type":"DELETE","lineNumber":1288,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1290,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1292,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1294,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1296,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1300,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"DELETE","lineNumber":1302,"oldContent":"                }"},{"type":"DELETE","lineNumber":1316,"oldContent":"    "},{"type":"DELETE","lineNumber":1318,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1333,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1360,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1337,"oldContent":"        "},{"type":"DELETE","lineNumber":1338,"oldContent":"        for (pattern in locationPatterns) {"},{"type":"INSERT","lineNumber":1364,"content":"                timeInMinutes"},{"type":"INSERT","lineNumber":1365,"content":"            } else {"},{"type":"DELETE","lineNumber":1361,"oldContent":"    "},{"type":"INSERT","lineNumber":1388,"content":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1389,"content":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1396,"content":"            } else {"},{"type":"DELETE","lineNumber":1400,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1405,"oldContent":"                timeInMinutes"},{"type":"DELETE","lineNumber":1406,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1433,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1437,"content":"    "},{"type":"INSERT","lineNumber":1438,"content":"    /**"},{"type":"DELETE","lineNumber":1427,"oldContent":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1428,"oldContent":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1456,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1457,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":1463,"content":"        }"},{"type":"DELETE","lineNumber":1436,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1473,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1477,"content":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"INSERT","lineNumber":1478,"content":"            }"},{"type":"DELETE","lineNumber":1470,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1473,"oldContent":"}"},{"type":"DELETE","lineNumber":1474,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1475,"oldContent":"    "},{"type":"DELETE","lineNumber":1476,"oldContent":"    "},{"type":"INSERT","lineNumber":1504,"content":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"INSERT","lineNumber":1505,"content":"     */"},{"type":"DELETE","lineNumber":1479,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1507,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1481,"oldContent":"    }"},{"type":"DELETE","lineNumber":1482,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1509,"content":"        "},{"type":"INSERT","lineNumber":1510,"content":"        return if (totalSteps > 0) {"},{"type":"INSERT","lineNumber":1511,"content":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":1514,"content":"        }"},{"type":"INSERT","lineNumber":1515,"content":"    }"},{"type":"INSERT","lineNumber":1516,"content":"    "},{"type":"INSERT","lineNumber":1520,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1521,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1489,"oldContent":"    }"},{"type":"DELETE","lineNumber":1490,"oldContent":"    "},{"type":"DELETE","lineNumber":1491,"oldContent":"    }"},{"type":"DELETE","lineNumber":1492,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1493,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1494,"oldContent":"        "},{"type":"DELETE","lineNumber":1495,"oldContent":"            }"},{"type":"DELETE","lineNumber":1496,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"DELETE","lineNumber":1497,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1498,"oldContent":"        }"},{"type":"INSERT","lineNumber":1523,"content":""},{"type":"INSERT","lineNumber":1524,"content":"}"}]},{"timestamp":1754926644189,"changes":[{"type":"MODIFY","lineNumber":19,"content":"import com.example.arwalking.data.RoutePart","oldContent":"    private var featureMapManager: FeatureMapManager? = null"},{"type":"DELETE","lineNumber":22,"oldContent":"    val featureNavigationRoute: StateFlow<FeatureNavigationRoute?> = _featureNavigationRoute.asStateFlow()"},{"type":"DELETE","lineNumber":23,"oldContent":"    private val _currentMatches = MutableStateFlow<List<FeatureMatchResult>>(emptyList())"},{"type":"DELETE","lineNumber":24,"oldContent":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()"},{"type":"DELETE","lineNumber":25,"oldContent":"    private val _isFeatureMappingEnabled = MutableStateFlow(false)"},{"type":"INSERT","lineNumber":22,"content":" * Extension property to calculate distance from RoutePart nodes"},{"type":"INSERT","lineNumber":23,"content":" */"},{"type":"INSERT","lineNumber":24,"content":"private val RoutePart.distance: Double"},{"type":"INSERT","lineNumber":25,"content":"    get() = nodes?.sumOf { node ->"},{"type":"INSERT","lineNumber":26,"content":"        node.edge?.lengthInMeters?.toDoubleOrNull() ?: 0.0"},{"type":"INSERT","lineNumber":27,"content":"    } ?: 0.0"},{"type":"DELETE","lineNumber":27,"oldContent":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"DELETE","lineNumber":28,"oldContent":"            Log.i(TAG, \"Route wird geladen...\")"},{"type":"DELETE","lineNumber":29,"oldContent":"            // JSON laden und parsen (wie vorher)"},{"type":"DELETE","lineNumber":30,"oldContent":"            val gson = Gson()"},{"type":"DELETE","lineNumber":31,"oldContent":""},{"type":"DELETE","lineNumber":32,"oldContent":"            convertToNavigationRoute(routeData)"},{"type":"INSERT","lineNumber":29,"content":"/**"},{"type":"INSERT","lineNumber":30,"content":" * Datenklasse für Routenzusammenfassung"},{"type":"INSERT","lineNumber":31,"content":" */"},{"type":"INSERT","lineNumber":32,"content":"data class RouteSummary("},{"type":"DELETE","lineNumber":327,"oldContent":"     */"},{"type":"DELETE","lineNumber":328,"oldContent":"        }"},{"type":"DELETE","lineNumber":329,"oldContent":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":327,"content":"    }"},{"type":"INSERT","lineNumber":328,"content":"    "},{"type":"INSERT","lineNumber":329,"content":"    /**"},{"type":"DELETE","lineNumber":331,"oldContent":"    fun updateLandmarksForCurrentRoute() {"},{"type":"DELETE","lineNumber":333,"oldContent":"    /**"},{"type":"INSERT","lineNumber":332,"content":"    private fun loadLandmarksForCurrentRoute(context: Context) {"},{"type":"INSERT","lineNumber":333,"content":"        Log.i(TAG, \"🔄 loadLandmarksForCurrentRoute aufgerufen\")"},{"type":"MODIFY","lineNumber":348,"content":"                ","oldContent":"            "},{"type":"DELETE","lineNumber":413,"oldContent":"                    Log.i(TAG, \"Found ${matches.size} landmark matches\")"},{"type":"DELETE","lineNumber":414,"oldContent":"                "},{"type":"INSERT","lineNumber":413,"content":"    }"},{"type":"INSERT","lineNumber":414,"content":"    "},{"type":"MODIFY","lineNumber":507,"content":"    }","oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":620,"oldContent":"    "},{"type":"DELETE","lineNumber":621,"oldContent":"    }"},{"type":"DELETE","lineNumber":622,"oldContent":"    /**"},{"type":"DELETE","lineNumber":623,"oldContent":"    "},{"type":"DELETE","lineNumber":624,"oldContent":"    }"},{"type":"DELETE","lineNumber":625,"oldContent":"            }"},{"type":"DELETE","lineNumber":626,"oldContent":"    "},{"type":"DELETE","lineNumber":627,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":620,"content":"                // Fallback: Erstelle eine Demo-Route mit Feature-Navigation"},{"type":"INSERT","lineNumber":621,"content":"                val demoSteps = listOf("},{"type":"INSERT","lineNumber":622,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":623,"content":"                        stepNumber = 1,"},{"type":"INSERT","lineNumber":624,"content":"                        instruction = \"Gehen Sie geradeaus zum Haupteingang\","},{"type":"INSERT","lineNumber":625,"content":"                        landmarks = emptyList()"},{"type":"INSERT","lineNumber":626,"content":"                    ),"},{"type":"INSERT","lineNumber":627,"content":"                    FeatureNavigationStep("},{"type":"INSERT","lineNumber":698,"content":"    "},{"type":"DELETE","lineNumber":699,"oldContent":"    /**"},{"type":"DELETE","lineNumber":716,"oldContent":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"DELETE","lineNumber":717,"oldContent":"    fun setFeatureMappingEnabled(enabled: Boolean) {"},{"type":"DELETE","lineNumber":718,"oldContent":"    /**"},{"type":"INSERT","lineNumber":716,"content":"        // Throttle Frame-Processing für bessere Performance"},{"type":"INSERT","lineNumber":717,"content":"        val currentTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":718,"content":"        if (currentTime - lastFrameProcessTime < frameProcessingInterval) {"},{"type":"MODIFY","lineNumber":769,"content":"        if (!enabled) {","oldContent":"    /**"},{"type":"INSERT","lineNumber":770,"content":"            _currentMatches.value = emptyList()"},{"type":"INSERT","lineNumber":771,"content":"        }"},{"type":"DELETE","lineNumber":771,"oldContent":"            0"},{"type":"DELETE","lineNumber":772,"oldContent":"    }"},{"type":"DELETE","lineNumber":774,"oldContent":"                0"},{"type":"DELETE","lineNumber":775,"oldContent":"                timeInMinutes"},{"type":"DELETE","lineNumber":776,"oldContent":"                "},{"type":"DELETE","lineNumber":777,"oldContent":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"DELETE","lineNumber":778,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":779,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":780,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":781,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":782,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":774,"content":"    /**"},{"type":"INSERT","lineNumber":775,"content":"     * Aktualisiert den aktuellen Navigationsschritt"},{"type":"INSERT","lineNumber":776,"content":"     */"},{"type":"INSERT","lineNumber":777,"content":"    fun setCurrentNavigationStep(step: Int) {"},{"type":"INSERT","lineNumber":778,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":779,"content":"        val validStep = step.coerceIn(1, maxOf(1, totalSteps))"},{"type":"INSERT","lineNumber":781,"content":"        _currentNavigationStep.value = validStep"},{"type":"INSERT","lineNumber":782,"content":"        Log.d(TAG, \"Navigationsschritt aktualisiert: $validStep von $totalSteps\")"},{"type":"INSERT","lineNumber":783,"content":"        "},{"type":"MODIFY","lineNumber":876,"content":"            if (bestMatch == null || bestMatch.confidence < 0.3f) return","oldContent":"            if (bestMatch == null || bestMatch.confidence < 0.6f) return"},{"type":"INSERT","lineNumber":880,"content":"            // Prüfe, ob diese Landmark zum aktuellen Schritt gehört"},{"type":"INSERT","lineNumber":881,"content":"            val expectedLandmarkId = extractLandmarkIdFromStep(currentStep)"},{"type":"INSERT","lineNumber":883,"content":"            if (expectedLandmarkId != null && bestMatch.landmarkId == expectedLandmarkId) {"},{"type":"INSERT","lineNumber":884,"content":"                Log.i(TAG, \"✅ Landmark erkannt! Springe zum nächsten Schritt: $expectedLandmarkId\")"},{"type":"INSERT","lineNumber":885,"content":"                "},{"type":"INSERT","lineNumber":886,"content":"                // Automatisch zum nächsten Schritt springen"},{"type":"INSERT","lineNumber":887,"content":"                if (currentStepIndex + 1 < steps.size) {"},{"type":"INSERT","lineNumber":888,"content":"                    _currentStepNumber.value = currentStepIndex + 2 // 1-basiert"},{"type":"INSERT","lineNumber":889,"content":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 2} gesprungen\")"},{"type":"INSERT","lineNumber":890,"content":"                } else {"},{"type":"INSERT","lineNumber":891,"content":"                    Log.i(TAG, \"🏁 Route abgeschlossen!\")"},{"type":"INSERT","lineNumber":892,"content":"                }"},{"type":"INSERT","lineNumber":893,"content":"            } else {"},{"type":"INSERT","lineNumber":894,"content":"                Log.d(TAG, \"🔍 Erkannte Landmark (${bestMatch.landmarkId}) gehört nicht zum aktuellen Schritt (erwartet: $expectedLandmarkId)\")"},{"type":"INSERT","lineNumber":895,"content":"            }"},{"type":"INSERT","lineNumber":896,"content":"            "},{"type":"DELETE","lineNumber":884,"oldContent":"            // Prüfe, ob diese Landmark zum aktuellen Schritt gehört"},{"type":"INSERT","lineNumber":900,"content":"    }"},{"type":"DELETE","lineNumber":886,"oldContent":"            val expectedLandmarkId = extractLandmarkIdFromStep(currentStep)"},{"type":"DELETE","lineNumber":889,"oldContent":"            "},{"type":"DELETE","lineNumber":892,"oldContent":"            if (expectedLandmarkId != null && bestMatch.landmarkId == expectedLandmarkId) {"},{"type":"DELETE","lineNumber":895,"oldContent":"                Log.i(TAG, \"✅ Landmark erkannt! Springe zum nächsten Schritt: $expectedLandmarkId\")"},{"type":"DELETE","lineNumber":897,"oldContent":"                "},{"type":"INSERT","lineNumber":909,"content":"            "},{"type":"DELETE","lineNumber":900,"oldContent":"                // Automatisch zum nächsten Schritt springen"},{"type":"DELETE","lineNumber":903,"oldContent":"                if (currentStepIndex + 1 < steps.size) {"},{"type":"DELETE","lineNumber":906,"oldContent":"                    _currentStepNumber.value = currentStepIndex + 2 // 1-basiert"},{"type":"DELETE","lineNumber":909,"oldContent":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 2} gesprungen\")"},{"type":"DELETE","lineNumber":912,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":915,"oldContent":"                    Log.i(TAG, \"🏁 Route abgeschlossen!\")"},{"type":"DELETE","lineNumber":917,"oldContent":"                }"},{"type":"DELETE","lineNumber":920,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":922,"oldContent":"                Log.d(TAG, \"🔍 Erkannte Landmark (${bestMatch.landmarkId}) gehört nicht zum aktuellen Schritt (erwartet: $expectedLandmarkId)\")"},{"type":"DELETE","lineNumber":925,"oldContent":"            }"},{"type":"DELETE","lineNumber":927,"oldContent":"    }"},{"type":"DELETE","lineNumber":930,"oldContent":"            "},{"type":"DELETE","lineNumber":931,"oldContent":"    "},{"type":"DELETE","lineNumber":933,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":935,"oldContent":"    /**"},{"type":"DELETE","lineNumber":938,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":941,"oldContent":"     */"},{"type":"DELETE","lineNumber":944,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":946,"oldContent":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"DELETE","lineNumber":949,"oldContent":"            "},{"type":"DELETE","lineNumber":952,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":955,"oldContent":"            initialize(context)"},{"type":"DELETE","lineNumber":958,"oldContent":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"DELETE","lineNumber":961,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":950,"content":"    "},{"type":"DELETE","lineNumber":963,"oldContent":"            // Test 2: Route laden"},{"type":"DELETE","lineNumber":966,"oldContent":"            loadNavigationRoute(context)"},{"type":"DELETE","lineNumber":969,"oldContent":"            Thread.sleep(1000) // Warte auf Coroutine"},{"type":"DELETE","lineNumber":972,"oldContent":"            Log.d(TAG, \"✓ Route-Loading gestartet\")"},{"type":"DELETE","lineNumber":975,"oldContent":"            "},{"type":"DELETE","lineNumber":978,"oldContent":"            // Test 3: Feature-Mapping aktivieren"},{"type":"DELETE","lineNumber":981,"oldContent":"            setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":984,"oldContent":"            Log.d(TAG, \"✓ Feature-Mapping aktiviert\")"},{"type":"DELETE","lineNumber":988,"oldContent":"            "},{"type":"DELETE","lineNumber":990,"oldContent":"            // Test 4: Navigation starten"},{"type":"DELETE","lineNumber":993,"oldContent":"            startNavigation()"},{"type":"DELETE","lineNumber":996,"oldContent":"            Log.d(TAG, \"✓ Navigation gestartet\")"},{"type":"DELETE","lineNumber":999,"oldContent":"            "},{"type":"DELETE","lineNumber":1002,"oldContent":"            // Test 5: Status ausgeben"},{"type":"DELETE","lineNumber":1005,"oldContent":"            Log.i(TAG, getStatus())"},{"type":"DELETE","lineNumber":1008,"oldContent":"            "},{"type":"INSERT","lineNumber":982,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1010,"oldContent":"            Log.i(TAG, \"=== Self-Test erfolgreich ===\")"},{"type":"DELETE","lineNumber":1013,"oldContent":"            true"},{"type":"INSERT","lineNumber":987,"content":"    /**"},{"type":"INSERT","lineNumber":988,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":989,"content":"     */"},{"type":"INSERT","lineNumber":990,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":991,"content":"        return try {"},{"type":"INSERT","lineNumber":992,"content":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"INSERT","lineNumber":993,"content":"            "},{"type":"INSERT","lineNumber":994,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":995,"content":"            initialize(context)"},{"type":"INSERT","lineNumber":996,"content":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"INSERT","lineNumber":997,"content":"            "},{"type":"INSERT","lineNumber":998,"content":"            // Test 2: Route laden"},{"type":"INSERT","lineNumber":999,"content":"            loadNavigationRoute(context)"},{"type":"INSERT","lineNumber":1000,"content":"            Thread.sleep(1000) // Warte auf Coroutine"},{"type":"INSERT","lineNumber":1001,"content":"            Log.d(TAG, \"✓ Route-Loading gestartet\")"},{"type":"INSERT","lineNumber":1002,"content":"            "},{"type":"INSERT","lineNumber":1003,"content":"            // Test 3: Feature-Mapping aktivieren"},{"type":"INSERT","lineNumber":1004,"content":"            setFeatureMappingEnabled(true)"},{"type":"INSERT","lineNumber":1005,"content":"            Log.d(TAG, \"✓ Feature-Mapping aktiviert\")"},{"type":"INSERT","lineNumber":1006,"content":"            "},{"type":"INSERT","lineNumber":1007,"content":"            // Test 4: Navigation starten"},{"type":"INSERT","lineNumber":1008,"content":"            startNavigation()"},{"type":"INSERT","lineNumber":1009,"content":"            Log.d(TAG, \"✓ Navigation gestartet\")"},{"type":"INSERT","lineNumber":1010,"content":"            "},{"type":"INSERT","lineNumber":1011,"content":"            // Test 5: Status ausgeben"},{"type":"INSERT","lineNumber":1012,"content":"            Log.i(TAG, getStatus())"},{"type":"INSERT","lineNumber":1013,"content":"            "},{"type":"INSERT","lineNumber":1014,"content":"            Log.i(TAG, \"=== Self-Test erfolgreich ===\")"},{"type":"INSERT","lineNumber":1015,"content":"            true"},{"type":"DELETE","lineNumber":1017,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":1036,"content":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1040,"content":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"INSERT","lineNumber":1041,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":1056,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":1057,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":1058,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":1059,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":1058,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":1063,"oldContent":"                                id = landmark.id ?: \"unknown_landmark\", // ID aus RouteLandmarkData"},{"type":"DELETE","lineNumber":1065,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"INSERT","lineNumber":1070,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":1071,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1078,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1079,"oldContent":"}"},{"type":"DELETE","lineNumber":1080,"oldContent":"        "},{"type":"DELETE","lineNumber":1081,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":1082,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1083,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":1084,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1085,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":1086,"oldContent":"     */"},{"type":"DELETE","lineNumber":1087,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":1088,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"DELETE","lineNumber":1089,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1090,"oldContent":"    }"},{"type":"DELETE","lineNumber":1091,"oldContent":"    fun getRouteDescription(): String {"},{"type":"DELETE","lineNumber":1092,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1093,"oldContent":"    "},{"type":"DELETE","lineNumber":1094,"oldContent":"    }"},{"type":"DELETE","lineNumber":1095,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1086,"content":"        return try {"},{"type":"INSERT","lineNumber":1087,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1088,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1089,"content":"                convertToNavigationRoute(route).steps"},{"type":"INSERT","lineNumber":1090,"content":"            } else {"},{"type":"INSERT","lineNumber":1091,"content":"                emptyList()"},{"type":"DELETE","lineNumber":1097,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1098,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1099,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":1100,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1101,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1093,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1094,"content":"            Log.e(TAG, \"Fehler beim Laden der Navigationsschritte: ${e.message}\")"},{"type":"INSERT","lineNumber":1095,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1096,"content":"        }"},{"type":"INSERT","lineNumber":1097,"content":"    }"},{"type":"INSERT","lineNumber":1098,"content":""},{"type":"INSERT","lineNumber":1099,"content":""},{"type":"INSERT","lineNumber":1100,"content":""},{"type":"INSERT","lineNumber":1101,"content":"    /**"},{"type":"INSERT","lineNumber":1102,"content":"     * Lädt Landmarks neu für eine spezifische Route (vereinfacht)"},{"type":"DELETE","lineNumber":1106,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":1109,"content":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"INSERT","lineNumber":1110,"content":"        }"},{"type":"INSERT","lineNumber":1111,"content":"    }"},{"type":"INSERT","lineNumber":1112,"content":"    "},{"type":"INSERT","lineNumber":1119,"content":"            if (currentRoute != null) {"},{"type":"INSERT","lineNumber":1120,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":1131,"content":"    }"},{"type":"INSERT","lineNumber":1132,"content":"    "},{"type":"DELETE","lineNumber":1131,"oldContent":"            Log.e(TAG, \"Fehler beim Neuladen der Route-Landmarks: ${e.message}\")"},{"type":"DELETE","lineNumber":1132,"oldContent":"        }"},{"type":"DELETE","lineNumber":1134,"oldContent":"    }"},{"type":"DELETE","lineNumber":1136,"oldContent":"    "},{"type":"DELETE","lineNumber":1143,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":1145,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":1157,"oldContent":"    }"},{"type":"DELETE","lineNumber":1159,"oldContent":"    "},{"type":"INSERT","lineNumber":1166,"content":"        }"},{"type":"INSERT","lineNumber":1167,"content":"    }"},{"type":"INSERT","lineNumber":1168,"content":"    "},{"type":"INSERT","lineNumber":1175,"content":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1176,"content":"     */"},{"type":"DELETE","lineNumber":1190,"oldContent":"        }"},{"type":"DELETE","lineNumber":1192,"oldContent":"    }"},{"type":"INSERT","lineNumber":1196,"content":"                    }"},{"type":"DELETE","lineNumber":1194,"oldContent":"    "},{"type":"DELETE","lineNumber":1200,"oldContent":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"DELETE","lineNumber":1202,"oldContent":"     */"},{"type":"INSERT","lineNumber":1204,"content":"                    }"},{"type":"DELETE","lineNumber":1223,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1226,"content":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":1227,"content":"        return try {"},{"type":"DELETE","lineNumber":1231,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1251,"content":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1250,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1252,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1254,"content":"                    }"},{"type":"INSERT","lineNumber":1256,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1257,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1258,"content":"                    }"},{"type":"INSERT","lineNumber":1259,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1262,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1263,"content":"                }"},{"type":"INSERT","lineNumber":1276,"content":"    "},{"type":"INSERT","lineNumber":1277,"content":"    /**"},{"type":"DELETE","lineNumber":1275,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1278,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1279,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1287,"content":"        "},{"type":"DELETE","lineNumber":1282,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1284,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1286,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1292,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1288,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1290,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"DELETE","lineNumber":1292,"oldContent":"                }"},{"type":"INSERT","lineNumber":1296,"content":"        "},{"type":"INSERT","lineNumber":1297,"content":"        for (pattern in locationPatterns) {"},{"type":"INSERT","lineNumber":1302,"content":"                    return location"},{"type":"INSERT","lineNumber":1303,"content":"                }"},{"type":"INSERT","lineNumber":1304,"content":"            }"},{"type":"DELETE","lineNumber":1298,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1299,"oldContent":"    "},{"type":"INSERT","lineNumber":1306,"content":"        "},{"type":"INSERT","lineNumber":1307,"content":"        // Fallback: Verwende die ersten Wörter der Anweisung"},{"type":"INSERT","lineNumber":1308,"content":"        val words = cleanInstruction.split(\" \").take(4)"},{"type":"INSERT","lineNumber":1309,"content":"        return if (words.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1310,"content":"            words.joinToString(\" \").trim()"},{"type":"INSERT","lineNumber":1311,"content":"        } else {"},{"type":"INSERT","lineNumber":1312,"content":"            cleanInstruction.take(50)"},{"type":"INSERT","lineNumber":1313,"content":"        }"},{"type":"DELETE","lineNumber":1301,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1302,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"DELETE","lineNumber":1303,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"DELETE","lineNumber":1304,"oldContent":"            }"},{"type":"DELETE","lineNumber":1305,"oldContent":"                floors = emptyList(),"},{"type":"DELETE","lineNumber":1307,"oldContent":"                buildings = emptyList(),"},{"type":"DELETE","lineNumber":1308,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1309,"oldContent":"                estimatedTime = 0,"},{"type":"INSERT","lineNumber":1316,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1314,"oldContent":"     * Gibt eine Zusammenfassung der Route für die Drawer List zurück"},{"type":"DELETE","lineNumber":1315,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1317,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1318,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1319,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1320,"oldContent":"        "},{"type":"DELETE","lineNumber":1321,"oldContent":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":1322,"oldContent":"            }"},{"type":"DELETE","lineNumber":1323,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1324,"oldContent":"                floorList"},{"type":"DELETE","lineNumber":1325,"oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"DELETE","lineNumber":1326,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1327,"oldContent":"                "},{"type":"DELETE","lineNumber":1328,"oldContent":"                }"},{"type":"INSERT","lineNumber":1322,"content":"    /**"},{"type":"INSERT","lineNumber":1323,"content":"     * Gibt die Gesamtlänge der Route zurück"},{"type":"INSERT","lineNumber":1324,"content":"     */"},{"type":"INSERT","lineNumber":1325,"content":"    fun getRouteLength(): Double {"},{"type":"INSERT","lineNumber":1326,"content":"        return try {"},{"type":"INSERT","lineNumber":1327,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1328,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1329,"content":"                // Berechne Gesamtlänge aus allen RouteParts"},{"type":"INSERT","lineNumber":1330,"content":"                var totalLength = 0.0"},{"type":"INSERT","lineNumber":1331,"content":"                route.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":1332,"content":"                    pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":1333,"content":"                        // Verwende die Extension Property für distance"},{"type":"INSERT","lineNumber":1334,"content":"                        totalLength += routePart.distance"},{"type":"DELETE","lineNumber":1330,"oldContent":"                        }"},{"type":"DELETE","lineNumber":1331,"oldContent":"                            floors.add(floorName)"},{"type":"DELETE","lineNumber":1332,"oldContent":"                        if (!floorName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1333,"oldContent":"                        "},{"type":"DELETE","lineNumber":1334,"oldContent":"                            ?: levelInfo.storey"},{"type":"INSERT","lineNumber":1336,"content":"                }"},{"type":"INSERT","lineNumber":1337,"content":"                Log.d(TAG, \"Gesamtlänge der Route: ${totalLength}m\")"},{"type":"INSERT","lineNumber":1338,"content":"                totalLength"},{"type":"INSERT","lineNumber":1339,"content":"            } else {"},{"type":"DELETE","lineNumber":1336,"oldContent":"        }"},{"type":"DELETE","lineNumber":1338,"oldContent":"    }"},{"type":"DELETE","lineNumber":1340,"oldContent":"    "},{"type":"DELETE","lineNumber":1342,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1347,"oldContent":"    "},{"type":"INSERT","lineNumber":1360,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1364,"content":"                timeInMinutes"},{"type":"INSERT","lineNumber":1365,"content":"            } else {"},{"type":"DELETE","lineNumber":1383,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1388,"content":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1389,"content":"                        buildings.add(buildingName)"},{"type":"DELETE","lineNumber":1387,"oldContent":"                timeInMinutes"},{"type":"DELETE","lineNumber":1389,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1396,"content":"            } else {"},{"type":"DELETE","lineNumber":1413,"oldContent":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1415,"oldContent":"                        buildings.add(buildingName)"},{"type":"DELETE","lineNumber":1423,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1433,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1437,"content":"    "},{"type":"INSERT","lineNumber":1438,"content":"    /**"},{"type":"INSERT","lineNumber":1456,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1457,"content":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1456,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1463,"content":"        }"},{"type":"DELETE","lineNumber":1461,"oldContent":"    "},{"type":"DELETE","lineNumber":1463,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1473,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1473,"oldContent":"        }"},{"type":"INSERT","lineNumber":1477,"content":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"INSERT","lineNumber":1478,"content":"            }"},{"type":"INSERT","lineNumber":1479,"content":"            if (summary.buildings.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1480,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1481,"content":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"INSERT","lineNumber":1482,"content":"            }"},{"type":"INSERT","lineNumber":1483,"content":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1484,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1485,"content":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"INSERT","lineNumber":1486,"content":"            }"},{"type":"DELETE","lineNumber":1475,"oldContent":"}"},{"type":"DELETE","lineNumber":1476,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1477,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1488,"content":"    }"},{"type":"DELETE","lineNumber":1479,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1480,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1481,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1482,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1483,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1484,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1485,"oldContent":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1490,"content":"    /**"},{"type":"INSERT","lineNumber":1491,"content":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1487,"oldContent":"            )"},{"type":"DELETE","lineNumber":1488,"oldContent":"                totalSteps = 0"},{"type":"DELETE","lineNumber":1489,"oldContent":"    }"},{"type":"INSERT","lineNumber":1493,"content":"    fun getRouteDescription(): String {"},{"type":"INSERT","lineNumber":1494,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1495,"content":"        return when {"},{"type":"INSERT","lineNumber":1496,"content":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"INSERT","lineNumber":1497,"content":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"INSERT","lineNumber":1498,"content":"            summary.floors.isNotEmpty() -> \"Route über ${summary.floors.size} Stockwerk${if (summary.floors.size > 1) \"e\" else \"\"}\""},{"type":"INSERT","lineNumber":1499,"content":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1491,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1501,"content":"    }"},{"type":"DELETE","lineNumber":1493,"oldContent":"}"},{"type":"DELETE","lineNumber":1494,"oldContent":""},{"type":"DELETE","lineNumber":1495,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1496,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1497,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1498,"oldContent":"    "},{"type":"DELETE","lineNumber":1499,"oldContent":"}"},{"type":"DELETE","lineNumber":1500,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1501,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"DELETE","lineNumber":1503,"oldContent":"            }"},{"type":"INSERT","lineNumber":1504,"content":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"DELETE","lineNumber":1505,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1506,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1507,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1508,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1509,"content":"        "},{"type":"INSERT","lineNumber":1510,"content":"        return if (totalSteps > 0) {"},{"type":"INSERT","lineNumber":1511,"content":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1507,"oldContent":"    "},{"type":"DELETE","lineNumber":1508,"oldContent":"    }"},{"type":"INSERT","lineNumber":1513,"content":"            0f"},{"type":"DELETE","lineNumber":1510,"oldContent":"            }"},{"type":"DELETE","lineNumber":1511,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"DELETE","lineNumber":1512,"oldContent":"        }"},{"type":"DELETE","lineNumber":1513,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1514,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":1515,"oldContent":"        "},{"type":"DELETE","lineNumber":1516,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1517,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"INSERT","lineNumber":1515,"content":"    }"},{"type":"INSERT","lineNumber":1516,"content":"    "},{"type":"INSERT","lineNumber":1517,"content":"    /**"},{"type":"INSERT","lineNumber":1518,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1520,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1521,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1522,"content":"    }"},{"type":"INSERT","lineNumber":1523,"content":""},{"type":"INSERT","lineNumber":1524,"content":"}"}]},{"timestamp":1754926995184,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.example.arwalking","oldContent":"// RouteViewModel.kt (erweitert)"},{"type":"DELETE","lineNumber":27,"oldContent":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"DELETE","lineNumber":50,"oldContent":"            convertToNavigationRoute(routeData)"},{"type":"DELETE","lineNumber":51,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":52,"oldContent":"            null"},{"type":"DELETE","lineNumber":53,"oldContent":"        }"},{"type":"INSERT","lineNumber":50,"content":"    // Neues Storage-System (ersetzt LocalFeatureMapManager)"},{"type":"INSERT","lineNumber":51,"content":"    private var storageManager: ArWalkingStorageManager? = null"},{"type":"INSERT","lineNumber":52,"content":"    "},{"type":"INSERT","lineNumber":53,"content":"    // Route Repository für JSON-Daten"},{"type":"INSERT","lineNumber":54,"content":"    private var routeRepository: RouteRepository? = null"},{"type":"INSERT","lineNumber":55,"content":"    "},{"type":"INSERT","lineNumber":56,"content":"    // Feature Matching System"},{"type":"INSERT","lineNumber":57,"content":"    private var featureMatchingEngine: FeatureMatchingEngine? = null"},{"type":"INSERT","lineNumber":58,"content":"    private var arTrackingSystem: ARTrackingSystem? = null"},{"type":"INSERT","lineNumber":59,"content":"    "},{"type":"INSERT","lineNumber":60,"content":"    // Verarbeitete Landmarks für schnelles Matching"},{"type":"INSERT","lineNumber":61,"content":"    private var processedLandmarks = mutableListOf<ProcessedLandmark>()"},{"type":"INSERT","lineNumber":62,"content":"    "},{"type":"DELETE","lineNumber":55,"oldContent":"    // Konvertierung von RouteData zu NavigationRoute"},{"type":"DELETE","lineNumber":56,"oldContent":"        val steps = mutableListOf<NavigationStep>()"},{"type":"DELETE","lineNumber":57,"oldContent":"        var stepNumber = 1"},{"type":"DELETE","lineNumber":58,"oldContent":"        routeData.route.path.forEach { pathItem ->"},{"type":"DELETE","lineNumber":59,"oldContent":"            pathItem.routeParts.forEach { routePart ->"},{"type":"INSERT","lineNumber":64,"content":"    "},{"type":"DELETE","lineNumber":61,"oldContent":"                val step = NavigationStep("},{"type":"DELETE","lineNumber":62,"oldContent":"                    instruction = routePart.instructionDe,"},{"type":"DELETE","lineNumber":63,"oldContent":""},{"type":"DELETE","lineNumber":64,"oldContent":"                    landmarkIds = landmarkIds"},{"type":"DELETE","lineNumber":65,"oldContent":""},{"type":"INSERT","lineNumber":104,"content":"        }"},{"type":"DELETE","lineNumber":105,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":114,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":115,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":116,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":117,"oldContent":"        "},{"type":"DELETE","lineNumber":118,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":119,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":120,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":121,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"INSERT","lineNumber":114,"content":"            Log.i(TAG, \"Lade Route aus JSON-Datei...\")"},{"type":"INSERT","lineNumber":115,"content":"            "},{"type":"INSERT","lineNumber":116,"content":"            // Stelle sicher, dass die ViewModel initialisiert ist"},{"type":"INSERT","lineNumber":117,"content":"            initialize(context)"},{"type":"INSERT","lineNumber":118,"content":"            "},{"type":"INSERT","lineNumber":119,"content":"            // Lade Route aus JSON-Datei asynchron"},{"type":"INSERT","lineNumber":120,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":121,"content":"                try {"},{"type":"DELETE","lineNumber":123,"oldContent":"    "},{"type":"DELETE","lineNumber":124,"oldContent":"        }"},{"type":"INSERT","lineNumber":123,"content":"                    _currentRoute.value = routeData"},{"type":"INSERT","lineNumber":124,"content":"                    "},{"type":"MODIFY","lineNumber":137,"content":"                        // Lade Landmarks für die neue Route","oldContent":"    /**"},{"type":"DELETE","lineNumber":140,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":141,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":142,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":143,"oldContent":"    "},{"type":"DELETE","lineNumber":144,"oldContent":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":140,"content":"                        // Logge Routeninformationen für Debugging"},{"type":"INSERT","lineNumber":141,"content":"                        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":142,"content":"                        Log.i(TAG, \"=== ROUTE SUMMARY ===\")"},{"type":"INSERT","lineNumber":143,"content":"                        Log.i(TAG, \"Start: ${summary.startPoint}\")"},{"type":"INSERT","lineNumber":144,"content":"                        Log.i(TAG, \"Ziel: ${summary.endPoint}\")"},{"type":"INSERT","lineNumber":145,"content":"                        Log.i(TAG, \"Länge: ${summary.totalLength}m\")"},{"type":"MODIFY","lineNumber":163,"content":"            NavigationRoute(","oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"MODIFY","lineNumber":283,"content":"                storageManager = ArWalkingStorageManager(context)","oldContent":"            initialize(context)"},{"type":"MODIFY","lineNumber":285,"content":"                ","oldContent":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":331,"content":"     */"},{"type":"DELETE","lineNumber":332,"oldContent":"    /**"},{"type":"DELETE","lineNumber":378,"oldContent":"                inputStream.close()"},{"type":"DELETE","lineNumber":379,"oldContent":"                "},{"type":"INSERT","lineNumber":378,"content":"                    landmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":379,"content":"                        Log.d(TAG, \"- ${landmark.id ?: \"unknown\"} (${landmark.filename})\")"},{"type":"INSERT","lineNumber":380,"content":"                    }"},{"type":"INSERT","lineNumber":381,"content":"                } else {"},{"type":"INSERT","lineNumber":382,"content":"                    Log.w(TAG, \"Keine Landmark-Bilder im Projektverzeichnis gefunden\")"},{"type":"INSERT","lineNumber":383,"content":"                    Log.i(TAG, \"Tipp: Kopiere Bilder in /Users/florian/Documents/GitHub/ar-walking/landmark_images/\")"},{"type":"DELETE","lineNumber":381,"oldContent":"                    Log.w(TAG, \"🧪 Test image not found: $testImagePath - skipping test\")"},{"type":"DELETE","lineNumber":382,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":383,"oldContent":"                val inputStream = try {"},{"type":"DELETE","lineNumber":384,"oldContent":"                val testImagePath = \"landmarken_pictures/PT-1-697.jpg\""},{"type":"DELETE","lineNumber":386,"oldContent":"                delay(1000) // Kurz warten"},{"type":"DELETE","lineNumber":387,"oldContent":"            try {"},{"type":"INSERT","lineNumber":386,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":387,"content":"                Log.e(TAG, \"Fehler beim Laden der Landmarks: ${e.message}\")"},{"type":"MODIFY","lineNumber":389,"content":"        }","oldContent":"    private fun testFeatureMatchingWithLandmarkImage(context: Context) {"},{"type":"DELETE","lineNumber":391,"oldContent":"     * Testet Feature-Matching mit einem Landmark-Bild"},{"type":"DELETE","lineNumber":392,"oldContent":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":393,"oldContent":"            }"},{"type":"DELETE","lineNumber":394,"oldContent":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"DELETE","lineNumber":395,"oldContent":"                "},{"type":"DELETE","lineNumber":396,"oldContent":"                if (storageManager != null) {"},{"type":"DELETE","lineNumber":398,"oldContent":"     * Lädt ein Vollbild (mit Cache) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":399,"oldContent":"        }"},{"type":"DELETE","lineNumber":400,"oldContent":"            null"},{"type":"DELETE","lineNumber":401,"oldContent":"            "},{"type":"DELETE","lineNumber":402,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":392,"content":"    /**"},{"type":"INSERT","lineNumber":393,"content":"     * Lädt ein Landmark-Bild für die Anzeige"},{"type":"INSERT","lineNumber":394,"content":"     */"},{"type":"INSERT","lineNumber":395,"content":"    suspend fun loadLandmarkImage(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":396,"content":"        return try {"},{"type":"INSERT","lineNumber":397,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":398,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":399,"content":"                return null"},{"type":"DELETE","lineNumber":404,"oldContent":"                Log.w(TAG, \"Landmark-Thumbnail nicht gefunden: $landmarkId\")"},{"type":"DELETE","lineNumber":406,"oldContent":"}"},{"type":"INSERT","lineNumber":402,"content":"            val image = storageManager!!.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":403,"content":"            if (image != null) {"},{"type":"INSERT","lineNumber":404,"content":"                Log.d(TAG, \"Landmark-Bild geladen: $landmarkId (${image.width}x${image.height})\")"},{"type":"INSERT","lineNumber":405,"content":"            } else {"},{"type":"INSERT","lineNumber":406,"content":"                Log.w(TAG, \"Landmark-Bild nicht gefunden: $landmarkId\")"},{"type":"INSERT","lineNumber":407,"content":"            }"},{"type":"INSERT","lineNumber":408,"content":"            image"},{"type":"INSERT","lineNumber":409,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":410,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")"},{"type":"INSERT","lineNumber":411,"content":"            null"},{"type":"INSERT","lineNumber":412,"content":"        }"},{"type":"DELETE","lineNumber":408,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":409,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":410,"oldContent":"     */"},{"type":"DELETE","lineNumber":411,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":412,"oldContent":"    /**"},{"type":"DELETE","lineNumber":413,"oldContent":"    }"},{"type":"DELETE","lineNumber":416,"oldContent":"            0f"},{"type":"DELETE","lineNumber":417,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":418,"oldContent":"        return if (totalSteps > 0) {"},{"type":"DELETE","lineNumber":419,"oldContent":"        "},{"type":"DELETE","lineNumber":420,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":421,"oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":422,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":416,"content":"     * Lädt ein Landmark-Thumbnail für die Anzeige"},{"type":"INSERT","lineNumber":417,"content":"     */"},{"type":"INSERT","lineNumber":418,"content":"    suspend fun loadLandmarkThumbnail(landmarkId: String): Bitmap? {"},{"type":"INSERT","lineNumber":419,"content":"        return try {"},{"type":"INSERT","lineNumber":420,"content":"            if (storageManager == null) {"},{"type":"INSERT","lineNumber":421,"content":"                Log.w(TAG, \"Storage-Manager nicht initialisiert\")"},{"type":"INSERT","lineNumber":422,"content":"                return null"},{"type":"DELETE","lineNumber":431,"oldContent":"    /**"},{"type":"DELETE","lineNumber":432,"oldContent":"    "},{"type":"DELETE","lineNumber":433,"oldContent":"            }"},{"type":"DELETE","lineNumber":434,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":435,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":431,"content":"            thumbnail"},{"type":"INSERT","lineNumber":432,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":433,"content":"            Log.e(TAG, \"Fehler beim Laden des Landmark-Thumbnails $landmarkId: ${e.message}\")"},{"type":"INSERT","lineNumber":434,"content":"            null"},{"type":"INSERT","lineNumber":435,"content":"        }"},{"type":"MODIFY","lineNumber":541,"content":"    ","oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"MODIFY","lineNumber":550,"content":"                if (storageManager != null) {","oldContent":"            true"},{"type":"DELETE","lineNumber":559,"oldContent":"            Log.d(TAG, \"✓ Feature-Mapping aktiviert\")"},{"type":"DELETE","lineNumber":560,"oldContent":"            // Test 3: Feature-Mapping aktivieren"},{"type":"DELETE","lineNumber":561,"oldContent":"            "},{"type":"DELETE","lineNumber":562,"oldContent":"    }"},{"type":"INSERT","lineNumber":559,"content":"                "},{"type":"INSERT","lineNumber":560,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":561,"content":"                Log.e(TAG, \"Fehler beim Laden der Feature Maps: ${e.message}\")"},{"type":"INSERT","lineNumber":563,"content":"        }"},{"type":"DELETE","lineNumber":629,"oldContent":"        "},{"type":"DELETE","lineNumber":630,"oldContent":"        Log.i(TAG, \"🔄 ensureLandmarksLoaded aufgerufen\")"},{"type":"INSERT","lineNumber":629,"content":"                        instruction = \"Biegen Sie links ab zur Treppe\","},{"type":"INSERT","lineNumber":630,"content":"                        landmarks = emptyList()"},{"type":"DELETE","lineNumber":660,"oldContent":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"DELETE","lineNumber":661,"oldContent":"        return when {"},{"type":"DELETE","lineNumber":662,"oldContent":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":660,"content":"     * Testet Feature-Matching mit einem Landmark-Bild"},{"type":"DELETE","lineNumber":664,"oldContent":"            }"},{"type":"DELETE","lineNumber":665,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":662,"content":"    private fun testFeatureMatchingWithLandmarkImage(context: Context) {"},{"type":"INSERT","lineNumber":663,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":664,"content":"            try {"},{"type":"INSERT","lineNumber":665,"content":"                Log.i(TAG, \"🧪 Starting feature matching test...\")"},{"type":"DELETE","lineNumber":671,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":672,"oldContent":"            if (summary.buildings.isNotEmpty()) {"},{"type":"INSERT","lineNumber":671,"content":"                val bitmap = android.graphics.BitmapFactory.decodeStream(inputStream)"},{"type":"INSERT","lineNumber":672,"content":"                inputStream.close()"},{"type":"INSERT","lineNumber":673,"content":"                "},{"type":"INSERT","lineNumber":674,"content":"                if (bitmap != null) {"},{"type":"INSERT","lineNumber":675,"content":"                    Log.i(TAG, \"🧪 Test image loaded: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":676,"content":"                    "},{"type":"INSERT","lineNumber":677,"content":"                    // Konvertiere zu OpenCV Mat"},{"type":"INSERT","lineNumber":678,"content":"                    val mat = org.opencv.core.Mat()"},{"type":"INSERT","lineNumber":679,"content":"                    org.opencv.android.Utils.bitmapToMat(bitmap, mat)"},{"type":"INSERT","lineNumber":680,"content":"                    "},{"type":"INSERT","lineNumber":681,"content":"                    // Teste Feature-Matching"},{"type":"INSERT","lineNumber":682,"content":"                    Log.i(TAG, \"🧪 Testing feature matching with PT-1-697 image...\")"},{"type":"INSERT","lineNumber":683,"content":"                    processFrameForFeatureMatching(mat)"},{"type":"INSERT","lineNumber":684,"content":"                    "},{"type":"INSERT","lineNumber":685,"content":"                    Log.i(TAG, \"🧪 Feature matching test completed!\")"},{"type":"INSERT","lineNumber":686,"content":"                } else {"},{"type":"INSERT","lineNumber":687,"content":"                    Log.e(TAG, \"🧪 Failed to load test image\")"},{"type":"INSERT","lineNumber":688,"content":"                }"},{"type":"INSERT","lineNumber":689,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":690,"content":"                Log.e(TAG, \"🧪 Feature matching test failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":674,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"DELETE","lineNumber":675,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":676,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":677,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":678,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":679,"oldContent":"                // Berechne Gesamtlänge aus allen RouteParts"},{"type":"DELETE","lineNumber":680,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":681,"oldContent":"     */"},{"type":"DELETE","lineNumber":682,"oldContent":"    "},{"type":"DELETE","lineNumber":683,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":684,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"INSERT","lineNumber":692,"content":"        }"},{"type":"DELETE","lineNumber":686,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":687,"oldContent":"        return if (words.isNotEmpty()) {"},{"type":"DELETE","lineNumber":688,"oldContent":"        "},{"type":"DELETE","lineNumber":689,"oldContent":"            }"},{"type":"DELETE","lineNumber":690,"oldContent":"                if (location.isNotBlank() && location.length > 2) {"},{"type":"DELETE","lineNumber":691,"oldContent":"            if (match != null) {"},{"type":"DELETE","lineNumber":692,"oldContent":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":693,"oldContent":"        "},{"type":"MODIFY","lineNumber":694,"content":"    ","oldContent":"        )"},{"type":"MODIFY","lineNumber":697,"content":"    private val frameProcessingInterval = 200L // Verarbeite nur alle 200ms (5 FPS) - weniger aggressiv für bessere Logs","oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":757,"oldContent":"        }"},{"type":"DELETE","lineNumber":758,"oldContent":"            false"},{"type":"DELETE","lineNumber":759,"oldContent":"            // Test 3: Feature-Mapping aktivieren"},{"type":"DELETE","lineNumber":760,"oldContent":"            "},{"type":"DELETE","lineNumber":761,"oldContent":"            Thread.sleep(1000) // Warte auf Coroutine"},{"type":"DELETE","lineNumber":762,"oldContent":"            loadNavigationRoute(context)"},{"type":"DELETE","lineNumber":763,"oldContent":"            "},{"type":"INSERT","lineNumber":757,"content":"    "},{"type":"INSERT","lineNumber":758,"content":""},{"type":"INSERT","lineNumber":759,"content":"    "},{"type":"INSERT","lineNumber":760,"content":""},{"type":"INSERT","lineNumber":761,"content":"    "},{"type":"INSERT","lineNumber":762,"content":"    /**"},{"type":"INSERT","lineNumber":763,"content":"     * Aktiviert/Deaktiviert das Feature-Mapping"},{"type":"MODIFY","lineNumber":765,"content":"    fun setFeatureMappingEnabled(enabled: Boolean) {","oldContent":"            "},{"type":"DELETE","lineNumber":771,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":772,"content":"    }"},{"type":"INSERT","lineNumber":780,"content":"        "},{"type":"DELETE","lineNumber":783,"oldContent":"        "},{"type":"DELETE","lineNumber":796,"oldContent":"}"},{"type":"DELETE","lineNumber":797,"oldContent":"        "},{"type":"INSERT","lineNumber":796,"content":"            Log.i(TAG, \"Nächster Schritt: ${currentStep + 1}\")"},{"type":"INSERT","lineNumber":797,"content":"        } else {"},{"type":"MODIFY","lineNumber":867,"content":"            val currentStepIndex = _currentNavigationStep.value - 1 // 0-basiert","oldContent":"            val currentStepIndex = _currentStepNumber.value - 1 // 0-basiert"},{"type":"DELETE","lineNumber":881,"oldContent":"            "},{"type":"DELETE","lineNumber":883,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":884,"oldContent":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"INSERT","lineNumber":882,"content":"            "},{"type":"DELETE","lineNumber":886,"oldContent":"        }"},{"type":"DELETE","lineNumber":889,"oldContent":"    "},{"type":"DELETE","lineNumber":892,"oldContent":"    /**"},{"type":"DELETE","lineNumber":894,"oldContent":"     * Extrahiert die Landmark-ID aus einem Navigationsschritt"},{"type":"DELETE","lineNumber":897,"oldContent":"     */"},{"type":"DELETE","lineNumber":899,"oldContent":"    private fun extractLandmarkIdFromStep(step: NavigationStep): String? {"},{"type":"DELETE","lineNumber":902,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":904,"oldContent":"            val currentRoute = _currentRoute.value ?: return null"},{"type":"INSERT","lineNumber":897,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":898,"content":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"INSERT","lineNumber":899,"content":"        }"},{"type":"INSERT","lineNumber":900,"content":"    }"},{"type":"INSERT","lineNumber":901,"content":"    "},{"type":"INSERT","lineNumber":902,"content":"    /**"},{"type":"INSERT","lineNumber":903,"content":"     * Extrahiert die Landmark-ID aus einem Navigationsschritt"},{"type":"INSERT","lineNumber":904,"content":"     */"},{"type":"INSERT","lineNumber":905,"content":"    private fun extractLandmarkIdFromStep(step: NavigationStep): String? {"},{"type":"INSERT","lineNumber":906,"content":"        return try {"},{"type":"INSERT","lineNumber":907,"content":"            val currentRoute = _currentRoute.value ?: return null"},{"type":"INSERT","lineNumber":909,"content":"            "},{"type":"DELETE","lineNumber":910,"oldContent":"    }"},{"type":"DELETE","lineNumber":917,"oldContent":"            "},{"type":"DELETE","lineNumber":942,"oldContent":"    "},{"type":"INSERT","lineNumber":950,"content":"    "},{"type":"DELETE","lineNumber":964,"oldContent":"        } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":969,"content":"            // Storage-Manager bereinigt sich selbst automatisch","oldContent":"    /**"},{"type":"INSERT","lineNumber":970,"content":"            viewModelScope.launch {"},{"type":"INSERT","lineNumber":971,"content":"                try {"},{"type":"INSERT","lineNumber":972,"content":"                    storageManager?.logPerformanceSummary()"},{"type":"INSERT","lineNumber":973,"content":"                    "},{"type":"INSERT","lineNumber":974,"content":"                    // Feature-Storage wird automatisch bereinigt"},{"type":"INSERT","lineNumber":975,"content":"                    "},{"type":"INSERT","lineNumber":976,"content":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"INSERT","lineNumber":977,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":978,"content":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"INSERT","lineNumber":979,"content":"                }"},{"type":"INSERT","lineNumber":980,"content":"            }"},{"type":"INSERT","lineNumber":981,"content":"            "},{"type":"INSERT","lineNumber":982,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":983,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"INSERT","lineNumber":984,"content":"        }"},{"type":"INSERT","lineNumber":985,"content":"    }"},{"type":"INSERT","lineNumber":986,"content":"    "},{"type":"INSERT","lineNumber":987,"content":"    /**"},{"type":"DELETE","lineNumber":973,"oldContent":"            // Storage-Manager bereinigt sich selbst automatisch"},{"type":"DELETE","lineNumber":976,"oldContent":"            viewModelScope.launch {"},{"type":"DELETE","lineNumber":978,"oldContent":"                try {"},{"type":"DELETE","lineNumber":981,"oldContent":"                    storageManager?.logPerformanceSummary()"},{"type":"DELETE","lineNumber":983,"oldContent":"                    "},{"type":"DELETE","lineNumber":986,"oldContent":"                    // Feature-Storage wird automatisch bereinigt"},{"type":"DELETE","lineNumber":988,"oldContent":"                    "},{"type":"DELETE","lineNumber":991,"oldContent":"                    Log.i(TAG, \"RouteViewModel erfolgreich bereinigt\")"},{"type":"DELETE","lineNumber":993,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":996,"oldContent":"                    Log.e(TAG, \"Fehler beim Bereinigen des Storage: ${e.message}\")"},{"type":"DELETE","lineNumber":998,"oldContent":"                }"},{"type":"DELETE","lineNumber":1001,"oldContent":"            }"},{"type":"DELETE","lineNumber":1003,"oldContent":"            "},{"type":"DELETE","lineNumber":1006,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":1009,"oldContent":"        }"},{"type":"DELETE","lineNumber":1011,"oldContent":"    }"},{"type":"DELETE","lineNumber":1014,"oldContent":"    "},{"type":"DELETE","lineNumber":1040,"oldContent":"                                description = \"Landmark\","},{"type":"MODIFY","lineNumber":1042,"content":"                                description = \"Landmark\",","oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":1043,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":1056,"content":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"INSERT","lineNumber":1057,"content":"                        routeLandmarks.add("},{"type":"INSERT","lineNumber":1058,"content":"                            FeatureLandmark("},{"type":"INSERT","lineNumber":1059,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"DELETE","lineNumber":1059,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":1061,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":1063,"oldContent":"                            FeatureLandmark("},{"type":"DELETE","lineNumber":1064,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":1070,"content":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"INSERT","lineNumber":1071,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":1074,"oldContent":"            Log.d(TAG, \"Verfügbare Landmarks: ${routeLandmarks.size}\")"},{"type":"DELETE","lineNumber":1076,"oldContent":"            routeLandmarks.forEach { landmark ->"},{"type":"INSERT","lineNumber":1078,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1084,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":1092,"content":"            }"},{"type":"DELETE","lineNumber":1096,"oldContent":"        }"},{"type":"DELETE","lineNumber":1110,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1112,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"MODIFY","lineNumber":1113,"content":"    /**","oldContent":"     */"},{"type":"INSERT","lineNumber":1114,"content":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"INSERT","lineNumber":1115,"content":"     */"},{"type":"MODIFY","lineNumber":1119,"content":"            if (currentRoute != null) {","oldContent":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1120,"content":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"DELETE","lineNumber":1121,"oldContent":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":1122,"content":"        }"},{"type":"INSERT","lineNumber":1123,"content":"    }"},{"type":"DELETE","lineNumber":1123,"oldContent":"            if (currentRoute != null) {"},{"type":"DELETE","lineNumber":1125,"oldContent":"                reloadLandmarksForRoute(currentRoute.route)"},{"type":"INSERT","lineNumber":1131,"content":"    }"},{"type":"INSERT","lineNumber":1132,"content":"    "},{"type":"DELETE","lineNumber":1137,"oldContent":"    }"},{"type":"DELETE","lineNumber":1138,"oldContent":"    "},{"type":"DELETE","lineNumber":1167,"oldContent":"    fun startFrameProcessing() {"},{"type":"MODIFY","lineNumber":1169,"content":"    fun startFrameProcessing() {","oldContent":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"INSERT","lineNumber":1170,"content":"        Log.d(TAG, \"startFrameProcessing called - Feature-Matching bereit\")"},{"type":"INSERT","lineNumber":1175,"content":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"INSERT","lineNumber":1176,"content":"     */"},{"type":"DELETE","lineNumber":1178,"oldContent":"     * Gibt den Startpunkt der Route aus der JSON-Datei zurück"},{"type":"DELETE","lineNumber":1180,"oldContent":"     */"},{"type":"INSERT","lineNumber":1196,"content":"                    }"},{"type":"DELETE","lineNumber":1198,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":1205,"content":"                    !firstPathItem.xmlName.isNullOrBlank() -> {","oldContent":"                    !firstPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1226,"oldContent":"            val route = _currentRoute.value"},{"type":"MODIFY","lineNumber":1228,"content":"            val route = _currentRoute.value","oldContent":"            if (route != null && route.route.path.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1229,"content":"            if (route != null && route.route.path.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":1241,"content":"                        extractLocationFromInstruction(lastRoutePart!!.instructionEn!!)","oldContent":""},{"type":"DELETE","lineNumber":1243,"oldContent":"     */"},{"type":"DELETE","lineNumber":1244,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1245,"oldContent":"    }"},{"type":"DELETE","lineNumber":1246,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1247,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1248,"oldContent":"        }"},{"type":"DELETE","lineNumber":1249,"oldContent":"    "},{"type":"INSERT","lineNumber":1243,"content":"                    !lastRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1244,"content":"                        extractLocationFromInstruction(lastRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1251,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1246,"content":"                    // 2. Aus dem letzten Node mit isdestination=\"true\""},{"type":"INSERT","lineNumber":1247,"content":"                    lastRoutePart?.nodes?.any { it.node?.isdestination == \"true\" } == true -> {"},{"type":"INSERT","lineNumber":1248,"content":"                        val destinationNode = lastRoutePart.nodes.find { it.node?.isdestination == \"true\" }"},{"type":"INSERT","lineNumber":1249,"content":"                        destinationNode?.node?.name ?: \"Ziel\""},{"type":"INSERT","lineNumber":1250,"content":"                    }"},{"type":"INSERT","lineNumber":1252,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1254,"content":"                    }"},{"type":"INSERT","lineNumber":1256,"content":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1257,"content":"                        lastPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1259,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1258,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1262,"content":"                    else -> \"Ziel aus Route\""},{"type":"INSERT","lineNumber":1263,"content":"                }"},{"type":"DELETE","lineNumber":1260,"oldContent":"                        lastPathItem.xmlNameDe!!"},{"type":"DELETE","lineNumber":1262,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1264,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1268,"oldContent":"                    else -> \"Ziel aus Route\""},{"type":"DELETE","lineNumber":1270,"oldContent":"                }"},{"type":"INSERT","lineNumber":1276,"content":"    "},{"type":"INSERT","lineNumber":1277,"content":"    /**"},{"type":"DELETE","lineNumber":1283,"oldContent":"    "},{"type":"DELETE","lineNumber":1285,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1287,"content":"        "},{"type":"DELETE","lineNumber":1291,"oldContent":"        "},{"type":"INSERT","lineNumber":1292,"content":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1295,"oldContent":"            Regex(\"(?:Prof\\\\.|Professor)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1296,"content":"        "},{"type":"INSERT","lineNumber":1297,"content":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":1299,"oldContent":"        "},{"type":"DELETE","lineNumber":1301,"oldContent":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":1302,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1303,"oldContent":"    fun getRouteBuildings(): List<String> {"},{"type":"INSERT","lineNumber":1305,"content":"        }"},{"type":"DELETE","lineNumber":1308,"oldContent":"    "},{"type":"DELETE","lineNumber":1313,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1315,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1317,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1315,"content":"    "},{"type":"INSERT","lineNumber":1317,"content":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1318,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1319,"content":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1320,"content":"    }"},{"type":"INSERT","lineNumber":1321,"content":"    "},{"type":"DELETE","lineNumber":1322,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1330,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1336,"oldContent":"                0.0"},{"type":"INSERT","lineNumber":1335,"content":"                    }"},{"type":"DELETE","lineNumber":1339,"oldContent":"            }"},{"type":"INSERT","lineNumber":1340,"content":"                0.0"},{"type":"INSERT","lineNumber":1341,"content":"            }"},{"type":"DELETE","lineNumber":1364,"oldContent":"                0"},{"type":"MODIFY","lineNumber":1366,"content":"                0","oldContent":"            }"},{"type":"INSERT","lineNumber":1367,"content":"            }"},{"type":"DELETE","lineNumber":1388,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":1390,"content":"                    }","oldContent":"                }"},{"type":"INSERT","lineNumber":1391,"content":"                }"},{"type":"INSERT","lineNumber":1396,"content":"            } else {"},{"type":"DELETE","lineNumber":1398,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1405,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1406,"oldContent":"    }"},{"type":"DELETE","lineNumber":1407,"oldContent":"        }"},{"type":"DELETE","lineNumber":1409,"oldContent":"    }"},{"type":"INSERT","lineNumber":1406,"content":"     * Gibt die Stockwerke zurück, durch die die Route führt"},{"type":"INSERT","lineNumber":1407,"content":"     */"},{"type":"INSERT","lineNumber":1408,"content":"    fun getRouteFloors(): List<String> {"},{"type":"INSERT","lineNumber":1409,"content":"        return try {"},{"type":"DELETE","lineNumber":1413,"oldContent":"                startPoint = getCurrentStartPoint(),"},{"type":"DELETE","lineNumber":1414,"oldContent":"            RouteSummary("},{"type":"INSERT","lineNumber":1413,"content":"                route.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":1414,"content":"                    pathItem.levelInfo?.let { levelInfo ->"},{"type":"DELETE","lineNumber":1438,"oldContent":"    "},{"type":"DELETE","lineNumber":1439,"oldContent":"    }"},{"type":"DELETE","lineNumber":1441,"oldContent":"                floors = emptyList(),"},{"type":"DELETE","lineNumber":1442,"oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":1443,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1444,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1445,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1446,"oldContent":"}"},{"type":"DELETE","lineNumber":1447,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1448,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1449,"oldContent":"    "},{"type":"DELETE","lineNumber":1450,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1439,"content":"     * Gibt eine Zusammenfassung der Route für die Drawer List zurück"},{"type":"INSERT","lineNumber":1440,"content":"     */"},{"type":"INSERT","lineNumber":1441,"content":"    fun getRouteSummary(): RouteSummary {"},{"type":"INSERT","lineNumber":1442,"content":"        return try {"},{"type":"INSERT","lineNumber":1443,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1444,"content":"                startPoint = getCurrentStartPoint(),"},{"type":"INSERT","lineNumber":1445,"content":"                endPoint = getCurrentEndPoint(),"},{"type":"INSERT","lineNumber":1446,"content":"                totalLength = getRouteLength(),"},{"type":"INSERT","lineNumber":1447,"content":"                estimatedTime = getEstimatedWalkingTime(),"},{"type":"INSERT","lineNumber":1448,"content":"                buildings = getRouteBuildings(),"},{"type":"INSERT","lineNumber":1449,"content":"                floors = getRouteFloors(),"},{"type":"INSERT","lineNumber":1450,"content":"                totalSteps = getCurrentNavigationSteps().size"},{"type":"DELETE","lineNumber":1456,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1457,"oldContent":"            )"},{"type":"MODIFY","lineNumber":1458,"content":"                estimatedTime = 0,","oldContent":"            }"},{"type":"INSERT","lineNumber":1459,"content":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":1460,"content":"                floors = emptyList(),"},{"type":"MODIFY","lineNumber":1463,"content":"        }","oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1464,"content":"    }"},{"type":"DELETE","lineNumber":1466,"oldContent":"        }"},{"type":"MODIFY","lineNumber":1467,"content":"     * Gibt formatierte Routeninformationen für die UI zurück","oldContent":"            if (summary.totalLength > 0) {"},{"type":"INSERT","lineNumber":1473,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1476,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1477,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1480,"oldContent":"}"},{"type":"DELETE","lineNumber":1489,"oldContent":"    "},{"type":"INSERT","lineNumber":1487,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1489,"content":"    "},{"type":"DELETE","lineNumber":1492,"oldContent":"        }"},{"type":"DELETE","lineNumber":1494,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":1492,"content":"     */"},{"type":"INSERT","lineNumber":1500,"content":"        }"},{"type":"INSERT","lineNumber":1502,"content":"    "},{"type":"MODIFY","lineNumber":1505,"content":"     */","oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1507,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1511,"oldContent":"        }"},{"type":"INSERT","lineNumber":1512,"content":"        } else {"},{"type":"INSERT","lineNumber":1514,"content":"        }"},{"type":"INSERT","lineNumber":1518,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1519,"content":"     */"},{"type":"INSERT","lineNumber":1520,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1521,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1522,"content":"    }"},{"type":"INSERT","lineNumber":1523,"content":""},{"type":"INSERT","lineNumber":1524,"content":"}"}]},{"timestamp":1754927025452,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import kotlinx.coroutines.flow.StateFlow","oldContent":"import com.google.gson.Gson"},{"type":"INSERT","lineNumber":9,"content":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"DELETE","lineNumber":10,"oldContent":"import kotlinx.coroutines.flow.MutableStateFlow"},{"type":"MODIFY","lineNumber":28,"content":"","oldContent":""},{"type":"DELETE","lineNumber":33,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":34,"oldContent":""},{"type":"DELETE","lineNumber":35,"oldContent":"            val jsonString = loadJSONFromAsset(context, \"route.json\")"},{"type":"DELETE","lineNumber":36,"oldContent":"            val gson = Gson()"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":38,"oldContent":"            // In NavigationRoute umwandeln"},{"type":"INSERT","lineNumber":33,"content":"    val startPoint: String,"},{"type":"INSERT","lineNumber":34,"content":"    val endPoint: String,"},{"type":"INSERT","lineNumber":35,"content":"    val totalLength: Double, // in Metern"},{"type":"INSERT","lineNumber":36,"content":"    val estimatedTime: Int, // in Minuten"},{"type":"INSERT","lineNumber":37,"content":"    val buildings: List<String>,"},{"type":"INSERT","lineNumber":38,"content":"    val floors: List<String>,"},{"type":"DELETE","lineNumber":55,"oldContent":""},{"type":"DELETE","lineNumber":62,"oldContent":"                    stepNumber = stepNumber,"},{"type":"INSERT","lineNumber":63,"content":""},{"type":"INSERT","lineNumber":65,"content":""},{"type":"DELETE","lineNumber":98,"oldContent":"    private fun loadJSONFromAsset(context: Context, filename: String): String {"},{"type":"DELETE","lineNumber":99,"oldContent":"        return context.assets.open(filename).bufferedReader().use { it.readText() }"},{"type":"INSERT","lineNumber":98,"content":"            // Verwende die bestehende initializeStorage-Funktion"},{"type":"INSERT","lineNumber":99,"content":"            initializeStorage(context)"},{"type":"DELETE","lineNumber":107,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":108,"oldContent":"     */"},{"type":"INSERT","lineNumber":107,"content":""},{"type":"INSERT","lineNumber":108,"content":""},{"type":"DELETE","lineNumber":110,"oldContent":"    /**"},{"type":"DELETE","lineNumber":111,"oldContent":"    }"},{"type":"DELETE","lineNumber":112,"oldContent":"        }"},{"type":"DELETE","lineNumber":113,"oldContent":"            0f"},{"type":"INSERT","lineNumber":110,"content":"     * Lädt die Route aus der JSON-Datei"},{"type":"INSERT","lineNumber":111,"content":"     */"},{"type":"INSERT","lineNumber":112,"content":"    fun loadNavigationRoute(context: Context): NavigationRoute? {"},{"type":"INSERT","lineNumber":113,"content":"        return try {"},{"type":"DELETE","lineNumber":128,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":129,"oldContent":"            }"},{"type":"INSERT","lineNumber":128,"content":"                        val navigationRoute = convertToNavigationRoute(routeData)"},{"type":"INSERT","lineNumber":129,"content":"                        Log.i(TAG, \"Route konvertiert: ${navigationRoute.steps.size} Schritte\")"},{"type":"DELETE","lineNumber":159,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":160,"oldContent":"                val totalLength = getRouteLength()"},{"type":"DELETE","lineNumber":161,"oldContent":"                "},{"type":"DELETE","lineNumber":162,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"INSERT","lineNumber":159,"content":"                }"},{"type":"INSERT","lineNumber":160,"content":"            }"},{"type":"INSERT","lineNumber":161,"content":"            "},{"type":"INSERT","lineNumber":162,"content":"            // Erstelle eine Standard-Route für sofortige Rückgabe"},{"type":"DELETE","lineNumber":178,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":179,"oldContent":"                Log.d(TAG, \"Gesamtlänge der Route: ${totalLength}m\")"},{"type":"DELETE","lineNumber":180,"oldContent":"                    }"},{"type":"DELETE","lineNumber":181,"oldContent":"                        // Verwende die Extension Property für distance"},{"type":"DELETE","lineNumber":182,"oldContent":"                route.route.path.forEach { pathItem ->"},{"type":"DELETE","lineNumber":183,"oldContent":"    /**"},{"type":"INSERT","lineNumber":178,"content":"     * Loggt Informationen über die geladene NavigationRoute"},{"type":"INSERT","lineNumber":179,"content":"     */"},{"type":"INSERT","lineNumber":180,"content":"    fun logNavigationRoute(navigationRoute: NavigationRoute) {"},{"type":"INSERT","lineNumber":181,"content":"        Log.i(TAG, \"=== Navigation Route Details ===\")"},{"type":"INSERT","lineNumber":182,"content":"        Log.i(TAG, \"Route ID: ${navigationRoute.id}\")"},{"type":"INSERT","lineNumber":183,"content":"        Log.i(TAG, \"Route Name: ${navigationRoute.name}\")"},{"type":"MODIFY","lineNumber":192,"content":"            Log.d(TAG, \"  - Estimated Time: ${step.estimatedTime}s\")","oldContent":"            }"},{"type":"MODIFY","lineNumber":281,"content":"                ","oldContent":"    }"},{"type":"MODIFY","lineNumber":335,"content":"            try {","oldContent":"        "},{"type":"DELETE","lineNumber":374,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":375,"oldContent":"    /**"},{"type":"DELETE","lineNumber":376,"oldContent":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":377,"oldContent":"            summary.floors.isNotEmpty() -> \"Route über ${summary.floors.size} Stockwerk${if (summary.floors.size > 1) \"e\" else \"\"}\""},{"type":"INSERT","lineNumber":374,"content":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"INSERT","lineNumber":375,"content":"                "},{"type":"INSERT","lineNumber":376,"content":"                if (landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":377,"content":"                    Log.i(TAG, \"Verfügbare Landmarks: ${landmarks.size}\")"},{"type":"DELETE","lineNumber":381,"oldContent":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":385,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":384,"content":"                }"},{"type":"INSERT","lineNumber":385,"content":"                "},{"type":"MODIFY","lineNumber":388,"content":"            }","oldContent":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"INSERT","lineNumber":391,"content":"    "},{"type":"DELETE","lineNumber":397,"oldContent":"        return buildString {"},{"type":"INSERT","lineNumber":400,"content":"            }"},{"type":"INSERT","lineNumber":401,"content":"            "},{"type":"DELETE","lineNumber":402,"oldContent":"            val route = _currentRoute.value"},{"type":"DELETE","lineNumber":405,"oldContent":"    fun getRouteLength(): Double {"},{"type":"DELETE","lineNumber":408,"oldContent":"     * Gibt die Gesamtlänge der Route zurück"},{"type":"INSERT","lineNumber":413,"content":"    }"},{"type":"DELETE","lineNumber":423,"oldContent":"        // Fallback: Verwende die ersten Wörter der Anweisung"},{"type":"DELETE","lineNumber":424,"oldContent":"        }"},{"type":"DELETE","lineNumber":425,"oldContent":"                }"},{"type":"INSERT","lineNumber":423,"content":"            }"},{"type":"INSERT","lineNumber":424,"content":"            "},{"type":"INSERT","lineNumber":425,"content":"            val thumbnail = storageManager!!.loadThumbnail(landmarkId)"},{"type":"MODIFY","lineNumber":508,"content":"    ","oldContent":"            }"},{"type":"MODIFY","lineNumber":528,"content":"            val status = runBlocking { storageManager!!.getStorageStatus() }","oldContent":"     * Geht zum nächsten Navigationsschritt"},{"type":"MODIFY","lineNumber":539,"content":"        return storageManager?.cleanup()","oldContent":"                "},{"type":"INSERT","lineNumber":562,"content":"            }"},{"type":"DELETE","lineNumber":563,"oldContent":"     */"},{"type":"MODIFY","lineNumber":566,"content":"","oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"MODIFY","lineNumber":568,"content":"","oldContent":"    /**"},{"type":"DELETE","lineNumber":617,"oldContent":"        "},{"type":"DELETE","lineNumber":618,"oldContent":"        }"},{"type":"DELETE","lineNumber":619,"oldContent":"            }"},{"type":"INSERT","lineNumber":617,"content":"                // Stub - echte Route laden würde hier implementiert werden"},{"type":"INSERT","lineNumber":618,"content":"                Log.d(TAG, \"Route loading stub for $building, floor $floor\")"},{"type":"INSERT","lineNumber":619,"content":"                "},{"type":"MODIFY","lineNumber":628,"content":"                        stepNumber = 2,","oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"MODIFY","lineNumber":636,"content":"                    ),","oldContent":"        "},{"type":"INSERT","lineNumber":661,"content":"     */"},{"type":"DELETE","lineNumber":663,"oldContent":"                }"},{"type":"DELETE","lineNumber":668,"oldContent":"                            )"},{"type":"DELETE","lineNumber":669,"oldContent":"                                imageUrl = \"\""},{"type":"DELETE","lineNumber":670,"oldContent":"                                description = \"Landmark\","},{"type":"INSERT","lineNumber":668,"content":"                // Lade ein Test-Bild (das gleiche Bild wie eines der Landmarks)"},{"type":"INSERT","lineNumber":669,"content":"                val testImagePath = \"landmark_images/PT-1-697.jpg\""},{"type":"INSERT","lineNumber":670,"content":"                val inputStream = context.assets.open(testImagePath)"},{"type":"DELETE","lineNumber":674,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":687,"oldContent":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"INSERT","lineNumber":691,"content":"            }"},{"type":"INSERT","lineNumber":693,"content":"    }"},{"type":"MODIFY","lineNumber":699,"content":"    /**","oldContent":"            processedLandmarks.clear()"},{"type":"MODIFY","lineNumber":764,"content":"     */","oldContent":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"MODIFY","lineNumber":772,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":867,"content":"            val currentStepIndex = _currentNavigationStep.value","oldContent":"            val currentStepIndex = _currentNavigationStep.value - 1 // 0-basiert"},{"type":"MODIFY","lineNumber":882,"content":"            ","oldContent":"            "},{"type":"INSERT","lineNumber":891,"content":"                    Log.i(TAG, \"🏁 Route abgeschlossen!\")"},{"type":"INSERT","lineNumber":892,"content":"                }"},{"type":"INSERT","lineNumber":893,"content":"            } else {"},{"type":"INSERT","lineNumber":894,"content":"                Log.d(TAG, \"🔍 Erkannte Landmark (${bestMatch.landmarkId}) gehört nicht zum aktuellen Schritt (erwartet: $expectedLandmarkId)\")"},{"type":"INSERT","lineNumber":895,"content":"            }"},{"type":"INSERT","lineNumber":896,"content":"            "},{"type":"DELETE","lineNumber":893,"oldContent":"                    Log.i(TAG, \"🏁 Route abgeschlossen!\")"},{"type":"DELETE","lineNumber":896,"oldContent":"                }"},{"type":"DELETE","lineNumber":898,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":901,"oldContent":"                Log.d(TAG, \"🔍 Erkannte Landmark (${bestMatch.landmarkId}) gehört nicht zum aktuellen Schritt (erwartet: $expectedLandmarkId)\")"},{"type":"DELETE","lineNumber":904,"oldContent":"            }"},{"type":"DELETE","lineNumber":906,"oldContent":"            "},{"type":"MODIFY","lineNumber":910,"content":"            // Durchsuche die JSON-Route nach dem aktuellen Schritt","oldContent":"            // Durchsuche die JSON-Route nach dem aktuellen Schritt"},{"type":"MODIFY","lineNumber":950,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":968,"content":"            "},{"type":"DELETE","lineNumber":970,"oldContent":"            "},{"type":"DELETE","lineNumber":972,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"DELETE","lineNumber":974,"oldContent":"     */"},{"type":"DELETE","lineNumber":977,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":979,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":982,"oldContent":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"DELETE","lineNumber":985,"oldContent":"            "},{"type":"DELETE","lineNumber":987,"oldContent":"            // Test 1: Initialisierung"},{"type":"DELETE","lineNumber":990,"oldContent":"            initialize(context)"},{"type":"DELETE","lineNumber":993,"oldContent":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"DELETE","lineNumber":995,"oldContent":"            "},{"type":"INSERT","lineNumber":988,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":989,"content":"     */"},{"type":"INSERT","lineNumber":990,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":991,"content":"        return try {"},{"type":"INSERT","lineNumber":992,"content":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"INSERT","lineNumber":993,"content":"            "},{"type":"INSERT","lineNumber":994,"content":"            // Test 1: Initialisierung"},{"type":"INSERT","lineNumber":995,"content":"            initialize(context)"},{"type":"INSERT","lineNumber":996,"content":"            Log.d(TAG, \"✓ Initialisierung erfolgreich\")"},{"type":"INSERT","lineNumber":997,"content":"            "},{"type":"INSERT","lineNumber":1041,"content":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"DELETE","lineNumber":1043,"oldContent":"                                name = landmark.nameDe ?: landmark.nameEn ?: landmark.id ?: \"Unknown Landmark\","},{"type":"MODIFY","lineNumber":1044,"content":"                                imageUrl = \"\"","oldContent":"    }"},{"type":"DELETE","lineNumber":1057,"oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":1059,"oldContent":"                                description = \"Verfügbares Landmark\","},{"type":"DELETE","lineNumber":1061,"oldContent":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"INSERT","lineNumber":1060,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":1061,"content":"                                description = \"Verfügbares Landmark\","},{"type":"INSERT","lineNumber":1062,"content":"                                position = Position(0.0, 0.0, 0.0),"},{"type":"MODIFY","lineNumber":1072,"content":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")","oldContent":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"DELETE","lineNumber":1079,"oldContent":"        "},{"type":"DELETE","lineNumber":1080,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1081,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"DELETE","lineNumber":1083,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1084,"oldContent":"    "},{"type":"INSERT","lineNumber":1081,"content":"    "},{"type":"INSERT","lineNumber":1082,"content":"    /**"},{"type":"INSERT","lineNumber":1083,"content":"     * Gibt die aktuellen Navigationsschritte zurück"},{"type":"INSERT","lineNumber":1084,"content":"     */"},{"type":"INSERT","lineNumber":1085,"content":"    fun getCurrentNavigationSteps(): List<NavigationStep> {"},{"type":"MODIFY","lineNumber":1103,"content":"     */","oldContent":"    "},{"type":"INSERT","lineNumber":1111,"content":"    }"},{"type":"INSERT","lineNumber":1112,"content":"    "},{"type":"DELETE","lineNumber":1114,"oldContent":"     */"},{"type":"DELETE","lineNumber":1115,"oldContent":"    "},{"type":"MODIFY","lineNumber":1121,"content":"            }","oldContent":"                            ?: levelInfo.storeyNameEn"},{"type":"MODIFY","lineNumber":1124,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":1133,"content":"    /**","oldContent":"    /**"},{"type":"INSERT","lineNumber":1168,"content":"    "},{"type":"DELETE","lineNumber":1170,"oldContent":"    "},{"type":"MODIFY","lineNumber":1177,"content":"    fun getCurrentStartPoint(): String {","oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1204,"content":"                    }"},{"type":"DELETE","lineNumber":1205,"oldContent":"                    !firstPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1227,"content":"        return try {"},{"type":"DELETE","lineNumber":1229,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":1245,"content":"                    }"},{"type":"DELETE","lineNumber":1250,"oldContent":"                    }"},{"type":"MODIFY","lineNumber":1252,"content":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {","oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1256,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1258,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1262,"oldContent":"                "},{"type":"DELETE","lineNumber":1263,"oldContent":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1260,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1261,"content":"                    }"},{"type":"INSERT","lineNumber":1264,"content":"                "},{"type":"INSERT","lineNumber":1265,"content":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"MODIFY","lineNumber":1278,"content":"     * Extrahiert Ortsangaben aus Navigationsanweisungen","oldContent":"     * Extrahiert Ortsangaben aus Navigationsanweisungen"},{"type":"MODIFY","lineNumber":1298,"content":"            val match = pattern.find(cleanInstruction)","oldContent":"            val match = pattern.find(cleanInstruction)"},{"type":"DELETE","lineNumber":1303,"oldContent":"        }"},{"type":"INSERT","lineNumber":1305,"content":"        }"},{"type":"DELETE","lineNumber":1312,"oldContent":"    "},{"type":"INSERT","lineNumber":1313,"content":"        }"},{"type":"INSERT","lineNumber":1314,"content":"    }"},{"type":"INSERT","lineNumber":1315,"content":"    "},{"type":"INSERT","lineNumber":1316,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1316,"oldContent":"        }"},{"type":"DELETE","lineNumber":1319,"oldContent":"    }"},{"type":"DELETE","lineNumber":1320,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"MODIFY","lineNumber":1322,"content":"    /**","oldContent":"                        buildings.add(buildingName)"},{"type":"MODIFY","lineNumber":1335,"content":"                    }","oldContent":"                    }"},{"type":"DELETE","lineNumber":1338,"oldContent":"                0.0"},{"type":"MODIFY","lineNumber":1340,"content":"                0.0","oldContent":"            }"},{"type":"INSERT","lineNumber":1341,"content":"            }"},{"type":"INSERT","lineNumber":1365,"content":"            } else {"},{"type":"DELETE","lineNumber":1367,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1389,"content":"                        buildings.add(buildingName)"},{"type":"DELETE","lineNumber":1391,"oldContent":"                        buildings.add(buildingName)"},{"type":"DELETE","lineNumber":1397,"oldContent":"    }"},{"type":"DELETE","lineNumber":1398,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1399,"oldContent":"     */"},{"type":"DELETE","lineNumber":1400,"oldContent":"    }"},{"type":"INSERT","lineNumber":1397,"content":"                emptyList()"},{"type":"INSERT","lineNumber":1398,"content":"            }"},{"type":"INSERT","lineNumber":1399,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1400,"content":"            Log.e(TAG, \"Fehler beim Ermitteln der Gebäude: ${e.message}\")"},{"type":"INSERT","lineNumber":1401,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1402,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"MODIFY","lineNumber":1403,"content":"    }","oldContent":"     * Gibt formatierte Routeninformationen für die UI zurück"},{"type":"INSERT","lineNumber":1404,"content":"    "},{"type":"DELETE","lineNumber":1408,"oldContent":"                floors = emptyList(),"},{"type":"DELETE","lineNumber":1420,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1421,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1422,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1423,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1424,"oldContent":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":1425,"oldContent":"     */"},{"type":"INSERT","lineNumber":1420,"content":"                        if (!floorName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1421,"content":"                            floors.add(floorName)"},{"type":"INSERT","lineNumber":1422,"content":"                        }"},{"type":"INSERT","lineNumber":1423,"content":"                    }"},{"type":"INSERT","lineNumber":1424,"content":"                }"},{"type":"INSERT","lineNumber":1425,"content":"                "},{"type":"MODIFY","lineNumber":1437,"content":"    ","oldContent":"            }"},{"type":"INSERT","lineNumber":1438,"content":"    /**"},{"type":"DELETE","lineNumber":1440,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1456,"content":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1457,"content":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1458,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1460,"oldContent":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1469,"oldContent":"    }"},{"type":"DELETE","lineNumber":1470,"oldContent":"        "},{"type":"DELETE","lineNumber":1471,"oldContent":"}"},{"type":"DELETE","lineNumber":1472,"oldContent":""},{"type":"INSERT","lineNumber":1469,"content":"    fun getFormattedRouteInfo(): String {"},{"type":"INSERT","lineNumber":1470,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1471,"content":"        return buildString {"},{"type":"INSERT","lineNumber":1472,"content":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1485,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1488,"oldContent":"    "},{"type":"INSERT","lineNumber":1487,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1489,"content":"    "},{"type":"MODIFY","lineNumber":1492,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":1498,"oldContent":"        }"},{"type":"DELETE","lineNumber":1501,"oldContent":"    "},{"type":"INSERT","lineNumber":1500,"content":"        }"},{"type":"DELETE","lineNumber":1503,"oldContent":"    }"},{"type":"INSERT","lineNumber":1502,"content":"    "},{"type":"INSERT","lineNumber":1503,"content":"    /**"},{"type":"DELETE","lineNumber":1510,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1513,"oldContent":"        }"},{"type":"INSERT","lineNumber":1512,"content":"        } else {"},{"type":"INSERT","lineNumber":1514,"content":"        }"},{"type":"DELETE","lineNumber":1516,"oldContent":"}"},{"type":"MODIFY","lineNumber":1516,"content":"    ","oldContent":""},{"type":"INSERT","lineNumber":1517,"content":"    /**"},{"type":"DELETE","lineNumber":1519,"oldContent":"    }"},{"type":"MODIFY","lineNumber":1521,"content":"        return (getRouteProgress() * 100).toInt()","oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1522,"content":"    }"},{"type":"INSERT","lineNumber":1523,"content":""},{"type":"INSERT","lineNumber":1524,"content":"}"}]},{"timestamp":1754927030763,"changes":[{"type":"MODIFY","lineNumber":14,"content":"import com.example.arwalking.storage.ArWalkingStorageManager","oldContent":"class RouteViewModel : ViewModel() {"},{"type":"INSERT","lineNumber":27,"content":"    } ?: 0.0"},{"type":"DELETE","lineNumber":28,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":47,"oldContent":"            null"},{"type":"DELETE","lineNumber":48,"oldContent":"        }"},{"type":"DELETE","lineNumber":49,"oldContent":""},{"type":"INSERT","lineNumber":46,"content":"class RouteViewModel : ViewModel() {"},{"type":"INSERT","lineNumber":47,"content":"    "},{"type":"INSERT","lineNumber":48,"content":"    private val TAG = \"RouteViewModel\""},{"type":"INSERT","lineNumber":49,"content":"    "},{"type":"DELETE","lineNumber":61,"oldContent":""},{"type":"DELETE","lineNumber":66,"oldContent":"                steps.add(step)"},{"type":"INSERT","lineNumber":65,"content":""},{"type":"INSERT","lineNumber":66,"content":"    "},{"type":"MODIFY","lineNumber":82,"content":"    private val _currentNavigationStep = MutableStateFlow(1)","oldContent":"        Log.i(TAG, \"\")"},{"type":"MODIFY","lineNumber":106,"content":"    ","oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":126,"oldContent":"     */"},{"type":"DELETE","lineNumber":127,"oldContent":"            }"},{"type":"INSERT","lineNumber":126,"content":"                        Log.i(TAG, \"Route erfolgreich aus JSON geladen\")"},{"type":"INSERT","lineNumber":127,"content":"                        // Konvertiere RouteData zu NavigationRoute für Feature-Mapping"},{"type":"MODIFY","lineNumber":139,"content":"                        ","oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":147,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":148,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":149,"oldContent":"     */"},{"type":"DELETE","lineNumber":150,"oldContent":"    /**"},{"type":"DELETE","lineNumber":151,"oldContent":"    "},{"type":"INSERT","lineNumber":147,"content":"                        Log.i(TAG, \"Gebäude: ${summary.buildings}\")"},{"type":"INSERT","lineNumber":148,"content":"                        Log.i(TAG, \"Stockwerke: ${summary.floors}\")"},{"type":"INSERT","lineNumber":149,"content":"                        Log.i(TAG, \"Schritte: ${summary.totalSteps}\")"},{"type":"INSERT","lineNumber":150,"content":"                        Log.i(TAG, \"Info: ${getFormattedRouteInfo()}\")"},{"type":"INSERT","lineNumber":151,"content":"                        Log.i(TAG, \"Beschreibung: ${getRouteDescription()}\")"},{"type":"DELETE","lineNumber":169,"oldContent":"        // Fallback: Verwende die ersten Wörter der Anweisung"},{"type":"DELETE","lineNumber":170,"oldContent":"        }"},{"type":"DELETE","lineNumber":171,"oldContent":"                }"},{"type":"DELETE","lineNumber":172,"oldContent":"                if (location.isNotBlank() && location.length > 2) {"},{"type":"INSERT","lineNumber":169,"content":"            )"},{"type":"INSERT","lineNumber":170,"content":"            "},{"type":"INSERT","lineNumber":171,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":172,"content":"            Log.e(TAG, \"Fehler beim Laden der Route: ${e.message}\")"},{"type":"DELETE","lineNumber":186,"oldContent":"        Log.d(TAG, \"enableStorageSystemImmediately called - initialisiere Storage-System\")"},{"type":"DELETE","lineNumber":187,"oldContent":"     */"},{"type":"DELETE","lineNumber":188,"oldContent":""},{"type":"INSERT","lineNumber":187,"content":"        navigationRoute.steps.forEachIndexed { index, step ->"},{"type":"INSERT","lineNumber":188,"content":"            Log.d(TAG, \"Schritt ${index + 1}: ${step.instruction}\")"},{"type":"INSERT","lineNumber":189,"content":"            Log.d(TAG, \"  - Building: ${step.building}\")"},{"type":"DELETE","lineNumber":194,"oldContent":"    /**"},{"type":"DELETE","lineNumber":195,"oldContent":"    "},{"type":"INSERT","lineNumber":194,"content":"        }"},{"type":"INSERT","lineNumber":195,"content":"        "},{"type":"MODIFY","lineNumber":355,"content":"            } catch (e: Exception) {","oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":357,"content":"                _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":358,"content":"            }"},{"type":"INSERT","lineNumber":359,"content":"        }"},{"type":"DELETE","lineNumber":358,"oldContent":"            cleanInstruction.take(50)"},{"type":"DELETE","lineNumber":359,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":360,"oldContent":"        return if (words.isNotEmpty()) {"},{"type":"MODIFY","lineNumber":384,"content":"                }","oldContent":"                }"},{"type":"MODIFY","lineNumber":402,"content":"            val image = storageManager!!.loadFullImage(landmarkId)","oldContent":"            val image = storageManager!!.loadFullImage(landmarkId)"},{"type":"MODIFY","lineNumber":413,"content":"    }","oldContent":"    }"},{"type":"DELETE","lineNumber":428,"oldContent":"                        // landmark ist ein RouteLandmarkData-Objekt, nicht ein String"},{"type":"DELETE","lineNumber":429,"oldContent":"                    routePart.landmarks?.forEach { landmark ->"},{"type":"DELETE","lineNumber":430,"oldContent":"        }"},{"type":"INSERT","lineNumber":428,"content":"            } else {"},{"type":"INSERT","lineNumber":429,"content":"                Log.w(TAG, \"Landmark-Thumbnail nicht gefunden: $landmarkId\")"},{"type":"INSERT","lineNumber":430,"content":"            }"},{"type":"DELETE","lineNumber":494,"oldContent":"            Log.d(TAG, \"Feature mapping not enabled, skipping frame processing\")"},{"type":"DELETE","lineNumber":495,"oldContent":"        "},{"type":"DELETE","lineNumber":496,"oldContent":"        Log.d(TAG, \"processFrameForFeatureMatching called\")"},{"type":"INSERT","lineNumber":494,"content":"                android.os.Build.MODEL.contains(\"Android SDK built for x86\") ||"},{"type":"INSERT","lineNumber":495,"content":"                android.os.Build.MANUFACTURER.contains(\"Genymotion\") ||"},{"type":"INSERT","lineNumber":496,"content":"                android.os.Build.BRAND.startsWith(\"generic\") && android.os.Build.DEVICE.startsWith(\"generic\") ||"},{"type":"DELETE","lineNumber":516,"oldContent":"    }"},{"type":"DELETE","lineNumber":517,"oldContent":"                }"},{"type":"INSERT","lineNumber":516,"content":"    /**"},{"type":"INSERT","lineNumber":517,"content":"     * Löscht ein Landmark - verwendet neues Storage-System"},{"type":"MODIFY","lineNumber":522,"content":"    ","oldContent":"     */"},{"type":"MODIFY","lineNumber":546,"content":"        viewModelScope.launch {","oldContent":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"DELETE","lineNumber":689,"oldContent":"            }"},{"type":"MODIFY","lineNumber":691,"content":"            }","oldContent":"    }"},{"type":"INSERT","lineNumber":693,"content":"    }"},{"type":"DELETE","lineNumber":766,"oldContent":"    /**"},{"type":"DELETE","lineNumber":767,"oldContent":"    }"},{"type":"INSERT","lineNumber":766,"content":"        _isFeatureMappingEnabled.value = enabled"},{"type":"INSERT","lineNumber":767,"content":"        Log.d(TAG, \"Feature-Mapping ${if (enabled) \"aktiviert\" else \"deaktiviert\"}\")"},{"type":"INSERT","lineNumber":771,"content":"        }"},{"type":"DELETE","lineNumber":772,"oldContent":"    }"},{"type":"DELETE","lineNumber":784,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":785,"oldContent":"            Log.i(TAG, \"🔄 Route verfügbar - lade Landmarks sofort...\")"},{"type":"DELETE","lineNumber":786,"oldContent":"        // Stelle sicher, dass Landmarks geladen werden, wenn eine Route verfügbar ist"},{"type":"DELETE","lineNumber":787,"oldContent":"        "},{"type":"INSERT","lineNumber":784,"content":"        // Matches werden nur durch echtes Feature-Matching aktualisiert"},{"type":"INSERT","lineNumber":785,"content":"    }"},{"type":"INSERT","lineNumber":786,"content":"    "},{"type":"INSERT","lineNumber":787,"content":"    /**"},{"type":"MODIFY","lineNumber":798,"content":"            Log.i(TAG, \"Bereits am letzten Schritt\")","oldContent":"    "},{"type":"INSERT","lineNumber":799,"content":"        }"},{"type":"DELETE","lineNumber":800,"oldContent":"    }"},{"type":"DELETE","lineNumber":805,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"DELETE","lineNumber":806,"oldContent":"                            )"},{"type":"INSERT","lineNumber":805,"content":"    fun previousNavigationStep() {"},{"type":"INSERT","lineNumber":806,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":808,"oldContent":"                        routeLandmarks.add("},{"type":"DELETE","lineNumber":809,"oldContent":"                    if (routeLandmarks.none { it.id == landmarkInfo.id }) {"},{"type":"DELETE","lineNumber":810,"oldContent":"                    // Füge nur hinzu, wenn nicht bereits in der Route vorhanden"},{"type":"DELETE","lineNumber":811,"oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"DELETE","lineNumber":812,"oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"DELETE","lineNumber":813,"oldContent":"            if (storageManager != null) {"},{"type":"INSERT","lineNumber":808,"content":"        if (currentStep > 1) {"},{"type":"INSERT","lineNumber":809,"content":"            setCurrentNavigationStep(currentStep - 1)"},{"type":"INSERT","lineNumber":810,"content":"            Log.i(TAG, \"Vorheriger Schritt: ${currentStep - 1}\")"},{"type":"INSERT","lineNumber":811,"content":"        } else {"},{"type":"INSERT","lineNumber":812,"content":"            Log.i(TAG, \"Bereits am ersten Schritt\")"},{"type":"INSERT","lineNumber":813,"content":"        }"},{"type":"DELETE","lineNumber":819,"oldContent":"                    }"},{"type":"DELETE","lineNumber":820,"oldContent":"                            )"},{"type":"INSERT","lineNumber":819,"content":"    fun startNavigation() {"},{"type":"INSERT","lineNumber":820,"content":"        Log.i(TAG, \"Navigation gestartet\")"},{"type":"INSERT","lineNumber":821,"content":"        setCurrentNavigationStep(1)"},{"type":"INSERT","lineNumber":822,"content":"        setFeatureMappingEnabled(true)"},{"type":"DELETE","lineNumber":822,"oldContent":"            "},{"type":"DELETE","lineNumber":823,"oldContent":"            // Test 5: Status ausgeben"},{"type":"INSERT","lineNumber":881,"content":"            val expectedLandmarkId = extractLandmarkIdFromStep(currentStep)"},{"type":"DELETE","lineNumber":882,"oldContent":"            "},{"type":"DELETE","lineNumber":888,"oldContent":"                    _currentStepNumber.value = currentStepIndex + 2 // 1-basiert"},{"type":"MODIFY","lineNumber":888,"content":"                    _currentNavigationStep.value = currentStepIndex + 1","oldContent":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 2} gesprungen\")"},{"type":"INSERT","lineNumber":889,"content":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 1} gesprungen\")"},{"type":"DELETE","lineNumber":892,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":894,"oldContent":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"DELETE","lineNumber":897,"oldContent":"        }"},{"type":"DELETE","lineNumber":899,"oldContent":"    }"},{"type":"INSERT","lineNumber":897,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":898,"content":"            Log.e(TAG, \"❌ Fehler bei Landmark-Erkennung-Check: ${e.message}\", e)"},{"type":"INSERT","lineNumber":899,"content":"        }"},{"type":"INSERT","lineNumber":900,"content":"    }"},{"type":"INSERT","lineNumber":909,"content":"            "},{"type":"DELETE","lineNumber":910,"oldContent":"            // Durchsuche die JSON-Route nach dem aktuellen Schritt"},{"type":"INSERT","lineNumber":949,"content":"    }"},{"type":"DELETE","lineNumber":950,"oldContent":"    "},{"type":"DELETE","lineNumber":981,"oldContent":"     * Testet die RouteViewModel-Funktionalität"},{"type":"MODIFY","lineNumber":983,"content":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")","oldContent":"     */"},{"type":"INSERT","lineNumber":984,"content":"        }"},{"type":"INSERT","lineNumber":985,"content":"    }"},{"type":"INSERT","lineNumber":986,"content":"    "},{"type":"INSERT","lineNumber":987,"content":"    /**"},{"type":"INSERT","lineNumber":988,"content":"     * Testet die RouteViewModel-Funktionalität"},{"type":"INSERT","lineNumber":989,"content":"     */"},{"type":"DELETE","lineNumber":987,"oldContent":"            Log.e(TAG, \"Fehler beim Bereinigen der RouteViewModel: ${e.message}\")"},{"type":"DELETE","lineNumber":989,"oldContent":"        }"},{"type":"DELETE","lineNumber":992,"oldContent":"    }"},{"type":"DELETE","lineNumber":995,"oldContent":"    "},{"type":"DELETE","lineNumber":997,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":1020,"content":"    }","oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"MODIFY","lineNumber":1023,"content":"    ","oldContent":"        if (_currentRoute.value != null && featureMatchingEngine != null) {"},{"type":"MODIFY","lineNumber":1059,"content":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname","oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"INSERT","lineNumber":1060,"content":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"DELETE","lineNumber":1062,"oldContent":"                                id = landmarkInfo.id, // Exakte ID aus Dateiname"},{"type":"INSERT","lineNumber":1071,"content":"            routeLandmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":1072,"oldContent":"                Log.d(TAG, \"- ${landmark.id ?: \"unknown\"}: ${landmark.name}\")"},{"type":"INSERT","lineNumber":1079,"content":"        }"},{"type":"INSERT","lineNumber":1080,"content":"    }"},{"type":"DELETE","lineNumber":1081,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1085,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"MODIFY","lineNumber":1113,"content":"    /**","oldContent":"    /**"},{"type":"INSERT","lineNumber":1123,"content":"    }"},{"type":"DELETE","lineNumber":1124,"oldContent":"    "},{"type":"INSERT","lineNumber":1132,"content":"    "},{"type":"DELETE","lineNumber":1133,"oldContent":"    /**"},{"type":"INSERT","lineNumber":1176,"content":"     */"},{"type":"DELETE","lineNumber":1177,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":1216,"oldContent":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":1217,"oldContent":"     */"},{"type":"DELETE","lineNumber":1218,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1219,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"DELETE","lineNumber":1220,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1216,"content":"            }"},{"type":"INSERT","lineNumber":1217,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1218,"content":"            Log.e(TAG, \"Fehler beim Ermitteln des Startpunkts: ${e.message}\")"},{"type":"INSERT","lineNumber":1219,"content":"            \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":1220,"content":"        }"},{"type":"DELETE","lineNumber":1230,"oldContent":"            )"},{"type":"DELETE","lineNumber":1231,"oldContent":"                floors = emptyList(),"},{"type":"DELETE","lineNumber":1232,"oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":1233,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"DELETE","lineNumber":1234,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1235,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1236,"oldContent":"                floors = getRouteFloors(),"},{"type":"DELETE","lineNumber":1237,"oldContent":"     */"},{"type":"DELETE","lineNumber":1238,"oldContent":"        }"},{"type":"INSERT","lineNumber":1230,"content":"                // Letzter Schritt der Route"},{"type":"INSERT","lineNumber":1231,"content":"                val lastPathItem = route.route.path.last()"},{"type":"INSERT","lineNumber":1232,"content":"                val lastRoutePart = lastPathItem.routeParts.lastOrNull()"},{"type":"INSERT","lineNumber":1233,"content":"                "},{"type":"INSERT","lineNumber":1234,"content":"                // Versuche verschiedene Quellen für den Endpunkt"},{"type":"INSERT","lineNumber":1235,"content":"                val endPoint = when {"},{"type":"INSERT","lineNumber":1236,"content":"                    // 1. Aus der letzten Anweisung"},{"type":"INSERT","lineNumber":1237,"content":"                    !lastRoutePart?.instructionDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1238,"content":"                        extractLocationFromInstruction(lastRoutePart!!.instructionDe!!)"},{"type":"MODIFY","lineNumber":1240,"content":"                    !lastRoutePart?.instructionEn.isNullOrBlank() -> {","oldContent":"     */"},{"type":"INSERT","lineNumber":1251,"content":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1252,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1258,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1260,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1262,"oldContent":"                "},{"type":"INSERT","lineNumber":1260,"content":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1261,"content":"                    }"},{"type":"MODIFY","lineNumber":1264,"content":"                ","oldContent":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1265,"content":"                Log.d(TAG, \"Endpunkt aus JSON: $endPoint\")"},{"type":"INSERT","lineNumber":1277,"content":"    /**"},{"type":"DELETE","lineNumber":1278,"oldContent":"     * Extrahiert Ortsangaben aus Navigationsanweisungen"},{"type":"INSERT","lineNumber":1297,"content":"        for (pattern in locationPatterns) {"},{"type":"DELETE","lineNumber":1298,"oldContent":"            val match = pattern.find(cleanInstruction)"},{"type":"MODIFY","lineNumber":1305,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":1313,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":1315,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"MODIFY","lineNumber":1317,"content":"        val steps = getCurrentNavigationSteps()","oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1318,"content":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1334,"content":"                        totalLength += routePart.distance"},{"type":"DELETE","lineNumber":1335,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1339,"content":"            } else {"},{"type":"DELETE","lineNumber":1341,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1368,"oldContent":"                        }"},{"type":"DELETE","lineNumber":1369,"oldContent":"                            floors.add(floorName)"},{"type":"DELETE","lineNumber":1370,"oldContent":"                        "},{"type":"DELETE","lineNumber":1371,"oldContent":"                            ?: levelInfo.storeyNameEn"},{"type":"DELETE","lineNumber":1372,"oldContent":"                        val floorName = levelInfo.storeyNameDe "},{"type":"INSERT","lineNumber":1368,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1369,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Gehzeit: ${e.message}\")"},{"type":"INSERT","lineNumber":1370,"content":"            0"},{"type":"INSERT","lineNumber":1371,"content":"        }"},{"type":"INSERT","lineNumber":1372,"content":"    }"},{"type":"MODIFY","lineNumber":1375,"content":"     * Gibt die Gebäude zurück, durch die die Route führt","oldContent":"                val buildingList = buildings.toList()"},{"type":"DELETE","lineNumber":1377,"oldContent":"                }"},{"type":"DELETE","lineNumber":1378,"oldContent":"                        buildings.add(buildingName)"},{"type":"DELETE","lineNumber":1379,"oldContent":"                    "},{"type":"DELETE","lineNumber":1380,"oldContent":"                        ?: pathItem.xmlName"},{"type":"DELETE","lineNumber":1381,"oldContent":"}"},{"type":"DELETE","lineNumber":1382,"oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1377,"content":"    fun getRouteBuildings(): List<String> {"},{"type":"INSERT","lineNumber":1378,"content":"        return try {"},{"type":"INSERT","lineNumber":1379,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1380,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1381,"content":"                val buildings = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1382,"content":"                route.route.path.forEach { pathItem ->"},{"type":"DELETE","lineNumber":1392,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1393,"oldContent":"            )"},{"type":"INSERT","lineNumber":1392,"content":"                "},{"type":"INSERT","lineNumber":1393,"content":"                val buildingList = buildings.toList()"},{"type":"MODIFY","lineNumber":1402,"content":"        }","oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"MODIFY","lineNumber":1405,"content":"    /**","oldContent":"                buildingList"},{"type":"DELETE","lineNumber":1410,"oldContent":"    }"},{"type":"MODIFY","lineNumber":1410,"content":"            val route = _currentRoute.value","oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1411,"content":"            if (route != null) {"},{"type":"DELETE","lineNumber":1415,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1416,"oldContent":"    fun getFormattedRouteInfo(): String {"},{"type":"DELETE","lineNumber":1417,"oldContent":"     */"},{"type":"DELETE","lineNumber":1418,"oldContent":"            )"},{"type":"DELETE","lineNumber":1419,"oldContent":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1415,"content":"                        val floorName = levelInfo.storeyNameDe "},{"type":"INSERT","lineNumber":1416,"content":"                            ?: levelInfo.storeyName "},{"type":"INSERT","lineNumber":1417,"content":"                            ?: levelInfo.storeyNameEn"},{"type":"INSERT","lineNumber":1418,"content":"                            ?: levelInfo.storey"},{"type":"INSERT","lineNumber":1419,"content":"                        "},{"type":"DELETE","lineNumber":1451,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1452,"oldContent":"     */"},{"type":"DELETE","lineNumber":1453,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1451,"content":"            )"},{"type":"INSERT","lineNumber":1452,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1453,"content":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"MODIFY","lineNumber":1458,"content":"                estimatedTime = 0,","oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":1461,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1462,"oldContent":"            }"},{"type":"INSERT","lineNumber":1461,"content":"                totalSteps = 0"},{"type":"INSERT","lineNumber":1462,"content":"            )"},{"type":"MODIFY","lineNumber":1468,"content":"     */","oldContent":"        } else {"},{"type":"DELETE","lineNumber":1474,"oldContent":"        }"},{"type":"DELETE","lineNumber":1476,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1475,"content":"            if (summary.estimatedTime > 0) {"},{"type":"INSERT","lineNumber":1476,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1486,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1488,"oldContent":"    "},{"type":"INSERT","lineNumber":1487,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1489,"content":"    "},{"type":"INSERT","lineNumber":1491,"content":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1492,"oldContent":"     */"},{"type":"DELETE","lineNumber":1499,"oldContent":"        }"},{"type":"DELETE","lineNumber":1501,"oldContent":"    "},{"type":"INSERT","lineNumber":1500,"content":"        }"},{"type":"INSERT","lineNumber":1502,"content":"    "},{"type":"MODIFY","lineNumber":1510,"content":"        return if (totalSteps > 0) {","oldContent":"}"},{"type":"INSERT","lineNumber":1511,"content":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1512,"oldContent":""},{"type":"INSERT","lineNumber":1513,"content":"            0f"},{"type":"DELETE","lineNumber":1515,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"MODIFY","lineNumber":1517,"content":"    /**","oldContent":"     */"},{"type":"MODIFY","lineNumber":1519,"content":"     */","oldContent":""},{"type":"INSERT","lineNumber":1520,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1522,"content":"    }"},{"type":"INSERT","lineNumber":1523,"content":""},{"type":"INSERT","lineNumber":1524,"content":"}"}]},{"timestamp":1754927035198,"changes":[{"type":"DELETE","lineNumber":40,"oldContent":"            val routeData = gson.fromJson(jsonString, RouteData::class.java)"},{"type":"DELETE","lineNumber":41,"oldContent":"            // In NavigationRoute umwandeln"},{"type":"INSERT","lineNumber":40,"content":")"},{"type":"INSERT","lineNumber":42,"content":"/**"},{"type":"INSERT","lineNumber":64,"content":"    "},{"type":"DELETE","lineNumber":66,"oldContent":"    "},{"type":"MODIFY","lineNumber":105,"content":"    }","oldContent":"        val currentStep = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":157,"oldContent":"            words.joinToString(\" \").trim()"},{"type":"DELETE","lineNumber":158,"oldContent":"        val words = cleanInstruction.split(\" \").take(4)"},{"type":"INSERT","lineNumber":157,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":158,"content":"                    Log.e(TAG, \"Fehler beim Laden der Route in Coroutine: ${e.message}\")"},{"type":"DELETE","lineNumber":164,"oldContent":"                if (location.isNotBlank() && location.length > 2) {"},{"type":"DELETE","lineNumber":165,"oldContent":"            if (match != null) {"},{"type":"INSERT","lineNumber":164,"content":"                id = \"default_route\","},{"type":"INSERT","lineNumber":165,"content":"                name = \"Standard Route\","},{"type":"MODIFY","lineNumber":176,"content":"    ","oldContent":"     */"},{"type":"MODIFY","lineNumber":184,"content":"        Log.i(TAG, \"Route Description: ${navigationRoute.description}\")","oldContent":"    "},{"type":"INSERT","lineNumber":186,"content":"        "},{"type":"DELETE","lineNumber":189,"oldContent":"            if (currentRoute != null) {"},{"type":"MODIFY","lineNumber":193,"content":"            Log.d(TAG, \"  - Landmarks: ${step.landmarks.size}\")","oldContent":"                        )"},{"type":"MODIFY","lineNumber":334,"content":"        viewModelScope.launch {","oldContent":"            if (thumbnail != null) {"},{"type":"DELETE","lineNumber":358,"oldContent":"            )"},{"type":"INSERT","lineNumber":360,"content":"    }"},{"type":"INSERT","lineNumber":383,"content":"                    Log.i(TAG, \"Tipp: Kopiere Bilder in /Users/florian/Documents/GitHub/ar-walking/landmark_images/\")"},{"type":"DELETE","lineNumber":384,"oldContent":"                }"},{"type":"INSERT","lineNumber":401,"content":"            "},{"type":"DELETE","lineNumber":402,"oldContent":"            val image = storageManager!!.loadFullImage(landmarkId)"},{"type":"INSERT","lineNumber":412,"content":"        }"},{"type":"DELETE","lineNumber":413,"oldContent":"    }"},{"type":"DELETE","lineNumber":571,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"DELETE","lineNumber":572,"oldContent":"                floors = emptyList(),"},{"type":"DELETE","lineNumber":573,"oldContent":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":571,"content":"     * Konvertiert Bitmap zu Base64 String"},{"type":"INSERT","lineNumber":572,"content":"     */"},{"type":"INSERT","lineNumber":573,"content":"    private fun bitmapToBase64(bitmap: Bitmap): String {"},{"type":"DELETE","lineNumber":589,"oldContent":"    "},{"type":"DELETE","lineNumber":590,"oldContent":"    }"},{"type":"INSERT","lineNumber":589,"content":"        return try {"},{"type":"INSERT","lineNumber":590,"content":"            Log.d(TAG, \"createLandmark called (stub): $landmarkId\")"},{"type":"DELETE","lineNumber":594,"oldContent":"            }"},{"type":"DELETE","lineNumber":595,"oldContent":"                0.0"},{"type":"DELETE","lineNumber":596,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":597,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"INSERT","lineNumber":594,"content":"                    landmarkId = landmarkId,"},{"type":"INSERT","lineNumber":595,"content":"                    landmarkName = name,"},{"type":"INSERT","lineNumber":596,"content":"                    description = description,"},{"type":"INSERT","lineNumber":597,"content":"                    category = \"Manual\""},{"type":"MODIFY","lineNumber":599,"content":"                result is SaveResult.Success","oldContent":"    /**"},{"type":"MODIFY","lineNumber":601,"content":"                false","oldContent":"    }"},{"type":"DELETE","lineNumber":603,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":604,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":603,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":604,"content":"            Log.e(TAG, \"Fehler beim Erstellen des Landmarks: ${e.message}\")"},{"type":"MODIFY","lineNumber":635,"content":"                        landmarks = emptyList()","oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"MODIFY","lineNumber":666,"content":"                delay(1000) // Kurz warten","oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":690,"content":"                Log.e(TAG, \"🧪 Feature matching test failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":691,"oldContent":"    }"},{"type":"DELETE","lineNumber":692,"oldContent":"    }"},{"type":"MODIFY","lineNumber":694,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":695,"content":"    // Frame-Processing-Throttling"},{"type":"MODIFY","lineNumber":800,"content":"    }","oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"MODIFY","lineNumber":807,"content":"        ","oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"DELETE","lineNumber":822,"oldContent":"     */"},{"type":"INSERT","lineNumber":823,"content":"    }"},{"type":"MODIFY","lineNumber":889,"content":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 1} gesprungen\")","oldContent":"                    Log.i(TAG, \"➡️ Automatisch zu Schritt ${currentStepIndex + 2} gesprungen\")"},{"type":"INSERT","lineNumber":895,"content":"            }"},{"type":"INSERT","lineNumber":896,"content":"            "},{"type":"DELETE","lineNumber":897,"oldContent":"            }"},{"type":"DELETE","lineNumber":900,"oldContent":"            "},{"type":"MODIFY","lineNumber":908,"content":"            val currentStepIndex = _currentNavigationStep.value","oldContent":"            val currentStepIndex = _currentStepNumber.value - 1"},{"type":"INSERT","lineNumber":982,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":984,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":986,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":988,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":991,"oldContent":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"INSERT","lineNumber":990,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":991,"content":"        return try {"},{"type":"INSERT","lineNumber":992,"content":"            Log.i(TAG, \"=== RouteViewModel Self-Test ===\")"},{"type":"DELETE","lineNumber":1017,"oldContent":"            }"},{"type":"DELETE","lineNumber":1018,"oldContent":"                emptyList()"},{"type":"DELETE","lineNumber":1019,"oldContent":"            } else {"},{"type":"INSERT","lineNumber":1017,"content":"            Log.e(TAG, \"=== Self-Test fehlgeschlagen: ${e.message} ===\")"},{"type":"INSERT","lineNumber":1018,"content":"            false"},{"type":"INSERT","lineNumber":1019,"content":"        }"},{"type":"MODIFY","lineNumber":1022,"content":"","oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"MODIFY","lineNumber":1024,"content":"","oldContent":"    /**"},{"type":"DELETE","lineNumber":1026,"oldContent":"            0"},{"type":"DELETE","lineNumber":1027,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1028,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1029,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"DELETE","lineNumber":1030,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1026,"content":"    /**"},{"type":"INSERT","lineNumber":1027,"content":"     * Gibt verfügbare Landmarks zurück - verwendet Landmark-IDs aus der Route"},{"type":"INSERT","lineNumber":1028,"content":"     */"},{"type":"INSERT","lineNumber":1029,"content":"    fun getAvailableLandmarks(): List<FeatureLandmark> {"},{"type":"INSERT","lineNumber":1030,"content":"        return try {"},{"type":"DELETE","lineNumber":1045,"oldContent":"                val lastRoutePart = lastPathItem.routeParts.lastOrNull()"},{"type":"DELETE","lineNumber":1046,"oldContent":"                val lastPathItem = route.route.path.last()"},{"type":"DELETE","lineNumber":1047,"oldContent":"            if (route != null && route.route.path.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1045,"content":"                            )"},{"type":"INSERT","lineNumber":1046,"content":"                        )"},{"type":"INSERT","lineNumber":1047,"content":"                    }"},{"type":"MODIFY","lineNumber":1058,"content":"                            FeatureLandmark(","oldContent":"                                name = landmarkInfo.filename.substringBeforeLast('.'),"},{"type":"MODIFY","lineNumber":1081,"content":"    ","oldContent":"    "},{"type":"INSERT","lineNumber":1112,"content":"    "},{"type":"DELETE","lineNumber":1113,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":1239,"content":"                    }","oldContent":"    }"},{"type":"INSERT","lineNumber":1259,"content":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1261,"oldContent":"                    !lastPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1263,"content":"                }"},{"type":"DELETE","lineNumber":1265,"oldContent":"                }"},{"type":"INSERT","lineNumber":1304,"content":"            }"},{"type":"DELETE","lineNumber":1305,"oldContent":"        }"},{"type":"INSERT","lineNumber":1312,"content":"            cleanInstruction.take(50)"},{"type":"DELETE","lineNumber":1313,"oldContent":"        }"},{"type":"INSERT","lineNumber":1316,"content":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1318,"oldContent":"    fun getCurrentStep(): NavigationStep? {"},{"type":"DELETE","lineNumber":1344,"oldContent":"}"},{"type":"DELETE","lineNumber":1345,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1346,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1344,"content":"            0.0"},{"type":"INSERT","lineNumber":1345,"content":"        }"},{"type":"INSERT","lineNumber":1346,"content":"    }"},{"type":"MODIFY","lineNumber":1348,"content":"    /**","oldContent":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1349,"content":"     * Gibt die geschätzte Gehzeit der Route zurück (in Minuten)"},{"type":"DELETE","lineNumber":1350,"oldContent":"            )"},{"type":"DELETE","lineNumber":1351,"oldContent":"            Log.e(TAG, \"Fehler beim Erstellen der Routenzusammenfassung: ${e.message}\")"},{"type":"DELETE","lineNumber":1352,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1351,"content":"    fun getEstimatedWalkingTime(): Int {"},{"type":"INSERT","lineNumber":1352,"content":"        return try {"},{"type":"DELETE","lineNumber":1373,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1374,"oldContent":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1373,"content":"    "},{"type":"INSERT","lineNumber":1374,"content":"    /**"},{"type":"MODIFY","lineNumber":1376,"content":"     */","oldContent":"                "},{"type":"MODIFY","lineNumber":1411,"content":"            if (route != null) {","oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1427,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1428,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1427,"content":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"INSERT","lineNumber":1428,"content":"                floorList"},{"type":"INSERT","lineNumber":1429,"content":"            } else {"},{"type":"INSERT","lineNumber":1430,"content":"                emptyList()"},{"type":"DELETE","lineNumber":1430,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1431,"oldContent":"}"},{"type":"MODIFY","lineNumber":1432,"content":"        } catch (e: Exception) {","oldContent":""},{"type":"INSERT","lineNumber":1457,"content":"                totalLength = 0.0,"},{"type":"DELETE","lineNumber":1458,"oldContent":"                estimatedTime = 0,"},{"type":"INSERT","lineNumber":1474,"content":"            }"},{"type":"DELETE","lineNumber":1475,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1486,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1488,"oldContent":"    "},{"type":"INSERT","lineNumber":1487,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1489,"content":"    "},{"type":"DELETE","lineNumber":1499,"oldContent":"        }"},{"type":"DELETE","lineNumber":1501,"oldContent":"    "},{"type":"INSERT","lineNumber":1500,"content":"        }"},{"type":"INSERT","lineNumber":1502,"content":"    "},{"type":"DELETE","lineNumber":1506,"oldContent":""},{"type":"DELETE","lineNumber":1507,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1508,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1509,"oldContent":"     */"},{"type":"INSERT","lineNumber":1506,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1507,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1508,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1509,"content":"        "},{"type":"MODIFY","lineNumber":1516,"content":"    ","oldContent":"}"},{"type":"MODIFY","lineNumber":1518,"content":"     * Gibt den Fortschritt als Prozentsatz zurück","oldContent":"    }"},{"type":"INSERT","lineNumber":1520,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1521,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1522,"content":"    }"},{"type":"INSERT","lineNumber":1523,"content":""},{"type":"INSERT","lineNumber":1524,"content":"}"}]},{"timestamp":1754927134665,"changes":[{"type":"MODIFY","lineNumber":13,"content":"import java.io.ByteArrayOutputStream","oldContent":""},{"type":"INSERT","lineNumber":41,"content":""},{"type":"DELETE","lineNumber":42,"oldContent":"            convertToNavigationRoute(routeData)"},{"type":"DELETE","lineNumber":44,"oldContent":""},{"type":"DELETE","lineNumber":45,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":44,"content":" * Verwendet das neue Storage-System - kein Trainingsmodus erforderlich!"},{"type":"INSERT","lineNumber":45,"content":" */"},{"type":"MODIFY","lineNumber":109,"content":"    /**","oldContent":"    }"},{"type":"MODIFY","lineNumber":125,"content":"                    if (routeData != null) {","oldContent":"        return when {"},{"type":"MODIFY","lineNumber":138,"content":"                        loadLandmarksForCurrentRoute(context)","oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"MODIFY","lineNumber":146,"content":"                        Log.i(TAG, \"Zeit: ${summary.estimatedTime} Min.\")","oldContent":"            } else {"},{"type":"DELETE","lineNumber":152,"oldContent":"                        // Verwende die Extension Property für distance"},{"type":"DELETE","lineNumber":153,"oldContent":"                route.route.path.forEach { pathItem ->"},{"type":"INSERT","lineNumber":152,"content":"                        Log.i(TAG, \"====================\")"},{"type":"INSERT","lineNumber":153,"content":"                        "},{"type":"DELETE","lineNumber":167,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"DELETE","lineNumber":168,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"INSERT","lineNumber":167,"content":"                totalLength = 0.0,"},{"type":"INSERT","lineNumber":168,"content":"                steps = emptyList()"},{"type":"DELETE","lineNumber":174,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":175,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":174,"content":"        }"},{"type":"INSERT","lineNumber":175,"content":"    }"},{"type":"MODIFY","lineNumber":177,"content":"    /**","oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"MODIFY","lineNumber":198,"content":"    ","oldContent":"     * Aktualisiert Landmarks wenn sich die aktuelle Route ändert"},{"type":"MODIFY","lineNumber":289,"content":"                ","oldContent":"    "},{"type":"DELETE","lineNumber":359,"oldContent":"    }"},{"type":"DELETE","lineNumber":361,"oldContent":"                estimatedTime = 0,"},{"type":"DELETE","lineNumber":362,"oldContent":"                totalLength = getRouteLength(),"},{"type":"DELETE","lineNumber":363,"oldContent":"                startPoint = getCurrentStartPoint(),"},{"type":"INSERT","lineNumber":360,"content":"    }"},{"type":"INSERT","lineNumber":361,"content":"    "},{"type":"INSERT","lineNumber":362,"content":"    /**"},{"type":"INSERT","lineNumber":363,"content":"     * Lädt verfügbare Landmarks aus dem Projektverzeichnis"},{"type":"MODIFY","lineNumber":426,"content":"            if (thumbnail != null) {","oldContent":"            }"},{"type":"MODIFY","lineNumber":488,"content":"     */","oldContent":"                        }"},{"type":"MODIFY","lineNumber":519,"content":"    suspend fun deleteLandmark(landmarkId: String): Boolean {","oldContent":"    "},{"type":"INSERT","lineNumber":520,"content":"        return storageManager?.deleteLandmark(landmarkId) ?: false"},{"type":"DELETE","lineNumber":521,"oldContent":"    }"},{"type":"DELETE","lineNumber":523,"oldContent":"}"},{"type":"DELETE","lineNumber":524,"oldContent":"    }"},{"type":"INSERT","lineNumber":523,"content":"    /**"},{"type":"INSERT","lineNumber":524,"content":"     * Gibt Performance-Informationen zurück"},{"type":"MODIFY","lineNumber":526,"content":"    fun getPerformanceInfo(): String {","oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":547,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":548,"oldContent":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":547,"content":"            try {"},{"type":"INSERT","lineNumber":548,"content":"                Log.i(TAG, \"Lade verfügbare Storage-Daten...\")"},{"type":"MODIFY","lineNumber":558,"content":"                }","oldContent":"        return try {"},{"type":"MODIFY","lineNumber":564,"content":"    }","oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"MODIFY","lineNumber":585,"content":"        name: String,","oldContent":"                "},{"type":"DELETE","lineNumber":613,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"DELETE","lineNumber":614,"oldContent":"        }"},{"type":"DELETE","lineNumber":615,"oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"DELETE","lineNumber":616,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"INSERT","lineNumber":613,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":614,"content":"            try {"},{"type":"INSERT","lineNumber":615,"content":"                Log.i(TAG, \"Lade Feature-Navigation Route für Gebäude: $building, Stockwerk: $floor\")"},{"type":"INSERT","lineNumber":616,"content":"                "},{"type":"MODIFY","lineNumber":639,"content":"                        instruction = \"Folgen Sie dem Korridor bis zum Ziel\",","oldContent":"                        routeLandmarks.add("},{"type":"MODIFY","lineNumber":642,"content":"                )","oldContent":"                landmarkInfos.forEach { landmarkInfo ->"},{"type":"INSERT","lineNumber":693,"content":"    }"},{"type":"DELETE","lineNumber":695,"oldContent":"        setFeatureMappingEnabled(false)"},{"type":"INSERT","lineNumber":730,"content":"                // Debug: Zeige immer an, was passiert"},{"type":"INSERT","lineNumber":731,"content":"                Log.d(TAG, \"🔍 Frame-Processing Ergebnis: ${matches.size} Matches\")"},{"type":"INSERT","lineNumber":732,"content":"                if (matches.isEmpty()) {"},{"type":"INSERT","lineNumber":733,"content":"                    Log.d(TAG, \"🔍 Keine Matches - Engine funktioniert korrekt (kein Match bei aktuellem Frame)\")"},{"type":"INSERT","lineNumber":734,"content":"                }"},{"type":"INSERT","lineNumber":735,"content":"                "},{"type":"DELETE","lineNumber":822,"oldContent":"    }"},{"type":"INSERT","lineNumber":829,"content":"    }"},{"type":"DELETE","lineNumber":826,"oldContent":"    }"},{"type":"DELETE","lineNumber":827,"oldContent":"        }"},{"type":"INSERT","lineNumber":832,"content":"     * Stoppt die Navigation"},{"type":"INSERT","lineNumber":833,"content":"     */"},{"type":"DELETE","lineNumber":896,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":903,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":988,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":995,"content":"     */"},{"type":"INSERT","lineNumber":996,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":992,"oldContent":"     */"},{"type":"DELETE","lineNumber":1016,"oldContent":"                buildings = emptyList(),"},{"type":"INSERT","lineNumber":1022,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1086,"content":"    }"},{"type":"DELETE","lineNumber":1081,"oldContent":"    "},{"type":"DELETE","lineNumber":1205,"oldContent":"                "},{"type":"DELETE","lineNumber":1206,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1211,"content":"                    !firstPathItem.xmlName.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1212,"content":"                        firstPathItem.xmlName"},{"type":"DELETE","lineNumber":1208,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":1209,"oldContent":"            if (route != null) {"},{"type":"DELETE","lineNumber":1210,"oldContent":"    fun getEstimatedWalkingTime(): Int {"},{"type":"DELETE","lineNumber":1211,"oldContent":"        }"},{"type":"DELETE","lineNumber":1212,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1213,"oldContent":"            Regex(\"([A-Z][^.]*(?:tür|Tür|door|Door))\", RegexOption.IGNORE_CASE)"},{"type":"DELETE","lineNumber":1214,"oldContent":"                        lastPathItem.xmlName"},{"type":"DELETE","lineNumber":1215,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1214,"content":"                    else -> \"Startpunkt aus Route\""},{"type":"INSERT","lineNumber":1215,"content":"                }"},{"type":"INSERT","lineNumber":1216,"content":"                "},{"type":"INSERT","lineNumber":1217,"content":"                Log.d(TAG, \"Startpunkt aus JSON: $startPoint\")"},{"type":"INSERT","lineNumber":1218,"content":"                startPoint"},{"type":"INSERT","lineNumber":1219,"content":"            } else {"},{"type":"INSERT","lineNumber":1220,"content":"                Log.w(TAG, \"Keine Route geladen - verwende Standard-Startpunkt\")"},{"type":"INSERT","lineNumber":1221,"content":"                \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1342,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1343,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"INSERT","lineNumber":1348,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1349,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"DELETE","lineNumber":1350,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":1356,"content":"     */"},{"type":"DELETE","lineNumber":1383,"oldContent":"        "},{"type":"DELETE","lineNumber":1384,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1385,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1389,"content":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":1390,"content":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1391,"content":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1394,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"DELETE","lineNumber":1395,"oldContent":"}"},{"type":"INSERT","lineNumber":1400,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1401,"content":"                buildingList"},{"type":"DELETE","lineNumber":1412,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln der Stockwerke: ${e.message}\")"},{"type":"INSERT","lineNumber":1418,"content":"                val floors = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1426,"oldContent":"        }"},{"type":"INSERT","lineNumber":1432,"content":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1430,"oldContent":"    "},{"type":"INSERT","lineNumber":1437,"content":"            }"},{"type":"DELETE","lineNumber":1434,"oldContent":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"INSERT","lineNumber":1440,"content":"            emptyList()"},{"type":"DELETE","lineNumber":1436,"oldContent":"                endPoint = \"Unbekanntes Ziel\","},{"type":"INSERT","lineNumber":1442,"content":"    }"},{"type":"DELETE","lineNumber":1454,"oldContent":"        "},{"type":"DELETE","lineNumber":1455,"oldContent":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"INSERT","lineNumber":1460,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1461,"content":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1466,"oldContent":""},{"type":"INSERT","lineNumber":1472,"content":"    /**"},{"type":"DELETE","lineNumber":1486,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1488,"oldContent":"    "},{"type":"INSERT","lineNumber":1493,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1490,"oldContent":"}"},{"type":"INSERT","lineNumber":1495,"content":"    "},{"type":"INSERT","lineNumber":1496,"content":"    /**"},{"type":"DELETE","lineNumber":1493,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1494,"oldContent":"     */"},{"type":"DELETE","lineNumber":1495,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1499,"content":"    fun getRouteDescription(): String {"},{"type":"INSERT","lineNumber":1500,"content":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1501,"content":"        return when {"},{"type":"INSERT","lineNumber":1502,"content":"            summary.buildings.size > 1 -> \"Route durch ${summary.buildings.joinToString(\", \")}\""},{"type":"INSERT","lineNumber":1503,"content":"            summary.buildings.size == 1 -> \"Route in ${summary.buildings.first()}\""},{"type":"INSERT","lineNumber":1504,"content":"            summary.floors.isNotEmpty() -> \"Route über ${summary.floors.size} Stockwerk${if (summary.floors.size > 1) \"e\" else \"\"}\""},{"type":"INSERT","lineNumber":1505,"content":"            else -> \"Navigationsroute\""},{"type":"DELETE","lineNumber":1497,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1498,"oldContent":"    "},{"type":"DELETE","lineNumber":1499,"oldContent":"        }"},{"type":"DELETE","lineNumber":1500,"oldContent":"}"},{"type":"DELETE","lineNumber":1501,"oldContent":"    "},{"type":"INSERT","lineNumber":1508,"content":"    "},{"type":"DELETE","lineNumber":1504,"oldContent":"        }"},{"type":"DELETE","lineNumber":1505,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":1510,"content":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"INSERT","lineNumber":1511,"content":"     */"},{"type":"DELETE","lineNumber":1512,"oldContent":"}"},{"type":"DELETE","lineNumber":1513,"oldContent":""},{"type":"INSERT","lineNumber":1518,"content":"        } else {"},{"type":"INSERT","lineNumber":1519,"content":"            0f"},{"type":"INSERT","lineNumber":1520,"content":"        }"},{"type":"DELETE","lineNumber":1515,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1523,"content":"    /**"},{"type":"INSERT","lineNumber":1524,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1525,"content":"     */"},{"type":"INSERT","lineNumber":1526,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1527,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1528,"content":"    }"},{"type":"INSERT","lineNumber":1529,"content":""},{"type":"INSERT","lineNumber":1530,"content":"}"}]},{"timestamp":1754927148232,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import android.content.Context","oldContent":""},{"type":"MODIFY","lineNumber":39,"content":"    val totalSteps: Int","oldContent":"            val routeData = gson.fromJson(jsonString, RouteData::class.java)"},{"type":"MODIFY","lineNumber":43,"content":" * ViewModel für Route-Management und Feature-Mapping","oldContent":""},{"type":"DELETE","lineNumber":155,"oldContent":"        }"},{"type":"MODIFY","lineNumber":155,"content":"                        Log.w(TAG, \"Keine Route in JSON-Datei gefunden\")","oldContent":"            Log.w(TAG, \"   FeatureMatchingEngine verfügbar: ${featureMatchingEngine != null}\")"},{"type":"INSERT","lineNumber":156,"content":"                    }"},{"type":"MODIFY","lineNumber":166,"content":"                description = \"Lade Route...\",","oldContent":"    /**"},{"type":"MODIFY","lineNumber":173,"content":"            null","oldContent":"    }"},{"type":"MODIFY","lineNumber":185,"content":"        Log.i(TAG, \"Anzahl Schritte: ${navigationRoute.steps.size}\")","oldContent":"                val landmarkInfos = runBlocking { storageManager!!.getAvailableProjectLandmarks() }"},{"type":"MODIFY","lineNumber":307,"content":"                    // Test-System aktiviert - zeige geladene Landmarks","oldContent":"                    // Test-System aktiviert"},{"type":"INSERT","lineNumber":309,"content":"                    Log.i(TAG, \"🧪 Debug-Info: ${featureMatchingEngine!!.getDebugInfo()}\")"},{"type":"INSERT","lineNumber":311,"content":"                    // Teste mit einem schwarzen Frame"},{"type":"INSERT","lineNumber":312,"content":"                    testFeatureMatchingWithBlackFrame()"},{"type":"INSERT","lineNumber":313,"content":"                    "},{"type":"DELETE","lineNumber":359,"oldContent":"    }"},{"type":"INSERT","lineNumber":364,"content":"    }"},{"type":"DELETE","lineNumber":368,"oldContent":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":372,"content":"                Log.i(TAG, \"Lade verfügbare Landmarks aus Projektverzeichnis...\")"},{"type":"DELETE","lineNumber":370,"oldContent":"        }"},{"type":"DELETE","lineNumber":371,"oldContent":"            Log.w(TAG, \"   Route verfügbar: ${_currentRoute.value != null}\")"},{"type":"DELETE","lineNumber":372,"oldContent":"            Log.w(TAG, \"⚠️ Route oder FeatureMatchingEngine nicht verfügbar für sofortiges Landmark-Loading\")"},{"type":"DELETE","lineNumber":373,"oldContent":"            loadLandmarksForCurrentRoute(context)"},{"type":"INSERT","lineNumber":374,"content":"                if (storageManager == null) {"},{"type":"INSERT","lineNumber":375,"content":"                    initializeStorage(context)"},{"type":"INSERT","lineNumber":376,"content":"                }"},{"type":"INSERT","lineNumber":377,"content":"                "},{"type":"DELETE","lineNumber":390,"oldContent":"    private suspend fun reloadLandmarksForRoute(route: com.example.arwalking.data.Route) {"},{"type":"INSERT","lineNumber":394,"content":"    }"},{"type":"DELETE","lineNumber":436,"oldContent":"     * Cleanup-Funktion für die ViewModel"},{"type":"INSERT","lineNumber":440,"content":"    }"},{"type":"DELETE","lineNumber":497,"oldContent":"                )"},{"type":"INSERT","lineNumber":501,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":502,"oldContent":"    "},{"type":"DELETE","lineNumber":503,"oldContent":"        bitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)"},{"type":"INSERT","lineNumber":506,"content":"    /**"},{"type":"INSERT","lineNumber":507,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":521,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":525,"content":"    }"},{"type":"DELETE","lineNumber":533,"oldContent":"    /**"},{"type":"INSERT","lineNumber":537,"content":"    }"},{"type":"DELETE","lineNumber":537,"oldContent":"            }"},{"type":"INSERT","lineNumber":541,"content":"     */"},{"type":"DELETE","lineNumber":731,"oldContent":"                // Update UI State"},{"type":"DELETE","lineNumber":733,"oldContent":"                _currentMatches.value = matches"},{"type":"DELETE","lineNumber":735,"oldContent":"                "},{"type":"DELETE","lineNumber":737,"oldContent":"                // Prüfe auf Landmark-Erkennung und springe automatisch zum nächsten Schritt"},{"type":"DELETE","lineNumber":739,"oldContent":"                checkForLandmarkRecognitionAndAdvance(matches)"},{"type":"INSERT","lineNumber":740,"content":"                // Update UI State"},{"type":"INSERT","lineNumber":741,"content":"                _currentMatches.value = matches"},{"type":"INSERT","lineNumber":743,"content":"                // Prüfe auf Landmark-Erkennung und springe automatisch zum nächsten Schritt"},{"type":"INSERT","lineNumber":744,"content":"                checkForLandmarkRecognitionAndAdvance(matches)"},{"type":"INSERT","lineNumber":745,"content":"                "},{"type":"INSERT","lineNumber":833,"content":"    }"},{"type":"INSERT","lineNumber":836,"content":"     * Stoppt die Navigation"},{"type":"INSERT","lineNumber":837,"content":"     */"},{"type":"DELETE","lineNumber":832,"oldContent":"    }"},{"type":"DELETE","lineNumber":836,"oldContent":"     * Stoppt die Navigation"},{"type":"DELETE","lineNumber":838,"oldContent":"     */"},{"type":"INSERT","lineNumber":907,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":908,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":999,"content":"     */"},{"type":"INSERT","lineNumber":1000,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":999,"oldContent":"     */"},{"type":"DELETE","lineNumber":1001,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":1026,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1027,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1090,"content":"    }"},{"type":"DELETE","lineNumber":1091,"oldContent":"    }"},{"type":"DELETE","lineNumber":1183,"oldContent":"     * Gibt die geschätzte Gehzeit der Route zurück (in Minuten)"},{"type":"DELETE","lineNumber":1184,"oldContent":"    "},{"type":"DELETE","lineNumber":1185,"oldContent":"    }"},{"type":"DELETE","lineNumber":1186,"oldContent":"            0.0"},{"type":"DELETE","lineNumber":1187,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"DELETE","lineNumber":1188,"oldContent":"            }"},{"type":"DELETE","lineNumber":1189,"oldContent":"        val currentStepNumber = _currentNavigationStep.value"},{"type":"DELETE","lineNumber":1190,"oldContent":"        val steps = getCurrentNavigationSteps()"},{"type":"INSERT","lineNumber":1187,"content":"    fun getCurrentStartPoint(): String {"},{"type":"INSERT","lineNumber":1188,"content":"        return try {"},{"type":"INSERT","lineNumber":1189,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1190,"content":"            if (route != null && route.route.path.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1191,"content":"                // Erster Schritt der Route"},{"type":"INSERT","lineNumber":1192,"content":"                val firstPathItem = route.route.path.first()"},{"type":"INSERT","lineNumber":1193,"content":"                val firstRoutePart = firstPathItem.routeParts.firstOrNull()"},{"type":"INSERT","lineNumber":1194,"content":"                "},{"type":"INSERT","lineNumber":1195,"content":"                // Versuche verschiedene Quellen für den Startpunkt"},{"type":"INSERT","lineNumber":1196,"content":"                val startPoint = when {"},{"type":"INSERT","lineNumber":1197,"content":"                    // 1. Aus der ersten Anweisung"},{"type":"INSERT","lineNumber":1198,"content":"                    !firstRoutePart?.instructionDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1199,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instructionDe!!)"},{"type":"DELETE","lineNumber":1192,"oldContent":"                        lastPathItem.xmlName"},{"type":"INSERT","lineNumber":1201,"content":"                    !firstRoutePart?.instructionEn.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1202,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instructionEn!!)"},{"type":"DELETE","lineNumber":1194,"oldContent":"                    !lastPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1195,"oldContent":"                    // 4. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1196,"oldContent":"                    lastRoutePart?.nodes?.lastOrNull()?.node?.name != null -> {"},{"type":"DELETE","lineNumber":1197,"oldContent":"                    // 3. Aus dem letzten Node"},{"type":"DELETE","lineNumber":1198,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1199,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1206,"oldContent":"}"},{"type":"DELETE","lineNumber":1207,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1210,"content":"                    }"},{"type":"INSERT","lineNumber":1211,"content":"                    // 3. Aus dem Gebäudenamen"},{"type":"DELETE","lineNumber":1211,"oldContent":"                    }"},{"type":"INSERT","lineNumber":1217,"content":"                    }"},{"type":"DELETE","lineNumber":1217,"oldContent":"            }"},{"type":"DELETE","lineNumber":1219,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1221,"oldContent":"            Log.e(TAG, \"Fehler beim Ermitteln des Startpunkts: ${e.message}\")"},{"type":"DELETE","lineNumber":1223,"oldContent":"            \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"MODIFY","lineNumber":1226,"content":"            }","oldContent":"        }"},{"type":"INSERT","lineNumber":1227,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1228,"content":"            Log.e(TAG, \"Fehler beim Ermitteln des Startpunkts: ${e.message}\")"},{"type":"INSERT","lineNumber":1229,"content":"            \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"INSERT","lineNumber":1230,"content":"        }"},{"type":"DELETE","lineNumber":1228,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1229,"oldContent":"                buildingList"},{"type":"INSERT","lineNumber":1232,"content":"    "},{"type":"INSERT","lineNumber":1233,"content":"    /**"},{"type":"DELETE","lineNumber":1296,"oldContent":"}"},{"type":"DELETE","lineNumber":1297,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1300,"content":"            Regex(\"(?:zu|zum|zur|in|im|an|am)\\\\s+([^.]+?)(?:\\\\s+(?:gehen|folgen|wenden)|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1301,"content":"            Regex(\"(?:Büro|Office|Raum|Room)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1352,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1353,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"DELETE","lineNumber":1352,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1354,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"INSERT","lineNumber":1360,"content":"     */"},{"type":"DELETE","lineNumber":1358,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1359,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1360,"oldContent":"        "},{"type":"DELETE","lineNumber":1361,"oldContent":"     */"},{"type":"DELETE","lineNumber":1362,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1363,"oldContent":"            if (summary.estimatedTime > 0) {"},{"type":"DELETE","lineNumber":1364,"oldContent":"            }"},{"type":"DELETE","lineNumber":1365,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1363,"content":"            val route = _currentRoute.value"},{"type":"INSERT","lineNumber":1364,"content":"            if (route != null) {"},{"type":"INSERT","lineNumber":1365,"content":"                // Verwende routeInfo falls verfügbar"},{"type":"INSERT","lineNumber":1366,"content":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"INSERT","lineNumber":1367,"content":"                "},{"type":"INSERT","lineNumber":1368,"content":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"INSERT","lineNumber":1369,"content":"                val totalLength = getRouteLength()"},{"type":"INSERT","lineNumber":1393,"content":"                    // Bevorzuge deutsche Namen"},{"type":"INSERT","lineNumber":1394,"content":"                    val buildingName = pathItem.xmlNameDe "},{"type":"INSERT","lineNumber":1395,"content":"                        ?: pathItem.xmlNameEn "},{"type":"DELETE","lineNumber":1392,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1394,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1396,"oldContent":"                        ?: pathItem.xmlNameEn "},{"type":"INSERT","lineNumber":1404,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1405,"content":"                buildingList"},{"type":"DELETE","lineNumber":1404,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1406,"oldContent":"                buildingList"},{"type":"INSERT","lineNumber":1422,"content":"                val floors = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1423,"oldContent":"                val floors = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1436,"content":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1436,"oldContent":"                val floorList = floors.toList()"},{"type":"INSERT","lineNumber":1441,"content":"            }"},{"type":"DELETE","lineNumber":1439,"oldContent":"        return (getRouteProgress() * 100).toInt()"},{"type":"DELETE","lineNumber":1440,"oldContent":"            }"},{"type":"INSERT","lineNumber":1444,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1445,"content":"        }"},{"type":"INSERT","lineNumber":1446,"content":"    }"},{"type":"DELETE","lineNumber":1444,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1447,"oldContent":"    }"},{"type":"INSERT","lineNumber":1464,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1465,"content":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1464,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1466,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1471,"oldContent":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"INSERT","lineNumber":1475,"content":"    "},{"type":"INSERT","lineNumber":1476,"content":"    /**"},{"type":"DELETE","lineNumber":1477,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1483,"oldContent":"     */"},{"type":"DELETE","lineNumber":1484,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1485,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":1486,"oldContent":"    "},{"type":"DELETE","lineNumber":1487,"oldContent":"        }"},{"type":"DELETE","lineNumber":1488,"oldContent":"     */"},{"type":"DELETE","lineNumber":1489,"oldContent":"    "},{"type":"INSERT","lineNumber":1487,"content":"                append(\"${summary.estimatedTime} Min.\")"},{"type":"INSERT","lineNumber":1488,"content":"            }"},{"type":"INSERT","lineNumber":1489,"content":"            if (summary.buildings.isNotEmpty()) {"},{"type":"INSERT","lineNumber":1490,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1491,"content":"                append(\"${summary.buildings.size} Gebäude\")"},{"type":"INSERT","lineNumber":1492,"content":"            }"},{"type":"INSERT","lineNumber":1493,"content":"            if (summary.totalSteps > 0) {"},{"type":"INSERT","lineNumber":1494,"content":"                if (isNotEmpty()) append(\" • \")"},{"type":"INSERT","lineNumber":1495,"content":"                append(\"${summary.totalSteps} Schritte\")"},{"type":"INSERT","lineNumber":1496,"content":"            }"},{"type":"DELETE","lineNumber":1491,"oldContent":""},{"type":"DELETE","lineNumber":1493,"oldContent":"        }"},{"type":"DELETE","lineNumber":1494,"oldContent":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"DELETE","lineNumber":1495,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1496,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1499,"oldContent":"    }"},{"type":"INSERT","lineNumber":1501,"content":"     * Gibt eine kurze Routenbeschreibung zurück"},{"type":"INSERT","lineNumber":1502,"content":"     */"},{"type":"DELETE","lineNumber":1504,"oldContent":""},{"type":"DELETE","lineNumber":1506,"oldContent":"    }"},{"type":"DELETE","lineNumber":1509,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"MODIFY","lineNumber":1510,"content":"        }","oldContent":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1511,"content":"    }"},{"type":"DELETE","lineNumber":1512,"oldContent":"}"},{"type":"MODIFY","lineNumber":1513,"content":"    /**","oldContent":""},{"type":"INSERT","lineNumber":1515,"content":"     */"},{"type":"INSERT","lineNumber":1516,"content":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1517,"content":"        val totalSteps = getCurrentNavigationSteps().size"},{"type":"INSERT","lineNumber":1518,"content":"        val currentStep = _currentNavigationStep.value"},{"type":"INSERT","lineNumber":1519,"content":"        "},{"type":"INSERT","lineNumber":1520,"content":"        return if (totalSteps > 0) {"},{"type":"INSERT","lineNumber":1521,"content":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"INSERT","lineNumber":1522,"content":"        } else {"},{"type":"INSERT","lineNumber":1523,"content":"            0f"},{"type":"INSERT","lineNumber":1524,"content":"        }"},{"type":"INSERT","lineNumber":1526,"content":"    "},{"type":"INSERT","lineNumber":1527,"content":"    /**"},{"type":"INSERT","lineNumber":1528,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1530,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"DELETE","lineNumber":1518,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"DELETE","lineNumber":1519,"oldContent":"        }"},{"type":"DELETE","lineNumber":1520,"oldContent":"            0f"},{"type":"DELETE","lineNumber":1521,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":1532,"content":"    }"},{"type":"INSERT","lineNumber":1533,"content":""},{"type":"INSERT","lineNumber":1534,"content":"}"}]},{"timestamp":1754927168230,"changes":[{"type":"MODIFY","lineNumber":3,"content":"import android.graphics.Bitmap","oldContent":"import RouteData"},{"type":"MODIFY","lineNumber":76,"content":"    val currentMatches: StateFlow<List<FeatureMatchResult>> = _currentMatches.asStateFlow()","oldContent":""},{"type":"MODIFY","lineNumber":154,"content":"                    } else {","oldContent":"                        }"},{"type":"MODIFY","lineNumber":156,"content":"                    }","oldContent":"                        if (!floorName.isNullOrBlank()) {"},{"type":"MODIFY","lineNumber":204,"content":"        var stepNumber = 1","oldContent":""},{"type":"DELETE","lineNumber":311,"oldContent":"                } else {"},{"type":"DELETE","lineNumber":313,"oldContent":"                    Log.e(TAG, \"❌ FeatureMatchingEngine Initialisierung fehlgeschlagen\")"},{"type":"DELETE","lineNumber":315,"oldContent":"                    _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":314,"content":"                } else {"},{"type":"INSERT","lineNumber":315,"content":"                    Log.e(TAG, \"❌ FeatureMatchingEngine Initialisierung fehlgeschlagen\")"},{"type":"INSERT","lineNumber":316,"content":"                    _isFeatureMappingEnabled.value = false"},{"type":"INSERT","lineNumber":364,"content":"    }"},{"type":"DELETE","lineNumber":367,"oldContent":"    }"},{"type":"MODIFY","lineNumber":373,"content":"                ","oldContent":"                "},{"type":"DELETE","lineNumber":375,"oldContent":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"DELETE","lineNumber":377,"oldContent":"                "},{"type":"DELETE","lineNumber":379,"oldContent":"                if (landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":378,"content":"                val landmarks = storageManager?.getAvailableProjectLandmarks() ?: emptyList()"},{"type":"INSERT","lineNumber":379,"content":"                "},{"type":"INSERT","lineNumber":380,"content":"                if (landmarks.isNotEmpty()) {"},{"type":"INSERT","lineNumber":394,"content":"    }"},{"type":"DELETE","lineNumber":397,"oldContent":"    }"},{"type":"INSERT","lineNumber":440,"content":"    }"},{"type":"DELETE","lineNumber":443,"oldContent":"    }"},{"type":"INSERT","lineNumber":501,"content":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"DELETE","lineNumber":504,"oldContent":"                \"google_sdk\" == android.os.Build.PRODUCT)"},{"type":"INSERT","lineNumber":506,"content":"    /**"},{"type":"INSERT","lineNumber":507,"content":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"DELETE","lineNumber":508,"oldContent":"    /**"},{"type":"DELETE","lineNumber":510,"oldContent":"     * Lädt ein Thumbnail (schnell) - verwendet neues Storage-System"},{"type":"INSERT","lineNumber":525,"content":"    }"},{"type":"DELETE","lineNumber":528,"oldContent":"    }"},{"type":"INSERT","lineNumber":537,"content":"    }"},{"type":"DELETE","lineNumber":540,"oldContent":"    }"},{"type":"INSERT","lineNumber":541,"content":"     */"},{"type":"DELETE","lineNumber":544,"oldContent":"     */"},{"type":"MODIFY","lineNumber":740,"content":"                // Update UI State","oldContent":"                // Update UI State"},{"type":"DELETE","lineNumber":743,"oldContent":"                // Logge nur bei erfolgreichen Matches"},{"type":"DELETE","lineNumber":745,"oldContent":"                if (matches.isNotEmpty()) {"},{"type":"DELETE","lineNumber":747,"oldContent":"                    Log.i(TAG, \"🎯 ${matches.size} Landmark-Matches gefunden:\")"},{"type":"INSERT","lineNumber":746,"content":"                // Logge nur bei erfolgreichen Matches"},{"type":"INSERT","lineNumber":747,"content":"                if (matches.isNotEmpty()) {"},{"type":"INSERT","lineNumber":748,"content":"                    Log.i(TAG, \"🎯 ${matches.size} Landmark-Matches gefunden:\")"},{"type":"MODIFY","lineNumber":811,"content":"    ","oldContent":"        return try {"},{"type":"INSERT","lineNumber":833,"content":"    }"},{"type":"INSERT","lineNumber":836,"content":"     * Stoppt die Navigation"},{"type":"INSERT","lineNumber":837,"content":"     */"},{"type":"DELETE","lineNumber":836,"oldContent":"    }"},{"type":"DELETE","lineNumber":840,"oldContent":"     * Stoppt die Navigation"},{"type":"DELETE","lineNumber":841,"oldContent":"     */"},{"type":"INSERT","lineNumber":907,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":911,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":962,"content":"     * Testet Feature-Matching mit einem schwarzen Frame"},{"type":"INSERT","lineNumber":963,"content":"     */"},{"type":"INSERT","lineNumber":964,"content":"    private fun testFeatureMatchingWithBlackFrame() {"},{"type":"INSERT","lineNumber":965,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":966,"content":"            try {"},{"type":"INSERT","lineNumber":967,"content":"                Log.i(TAG, \"🧪 Teste Feature-Matching mit schwarzem Frame...\")"},{"type":"INSERT","lineNumber":968,"content":"                "},{"type":"INSERT","lineNumber":969,"content":"                // Erstelle einen schwarzen Test-Frame"},{"type":"INSERT","lineNumber":970,"content":"                val testFrame = org.opencv.core.Mat(480, 640, org.opencv.core.CvType.CV_8UC3)"},{"type":"INSERT","lineNumber":971,"content":"                testFrame.setTo(org.opencv.core.Scalar(0.0, 0.0, 0.0))"},{"type":"INSERT","lineNumber":972,"content":"                "},{"type":"INSERT","lineNumber":973,"content":"                val matches = featureMatchingEngine?.processFrame(testFrame) ?: emptyList()"},{"type":"INSERT","lineNumber":974,"content":"                Log.i(TAG, \"🧪 Schwarzer Frame Ergebnis: ${matches.size} Matches\")"},{"type":"INSERT","lineNumber":975,"content":"                "},{"type":"INSERT","lineNumber":976,"content":"                if (matches.isEmpty()) {"},{"type":"INSERT","lineNumber":977,"content":"                    Log.i(TAG, \"✅ Korrekt: Schwarzer Frame erzeugt keine Matches\")"},{"type":"INSERT","lineNumber":978,"content":"                } else {"},{"type":"INSERT","lineNumber":979,"content":"                    Log.w(TAG, \"⚠️ Problem: Schwarzer Frame erzeugt ${matches.size} Matches:\")"},{"type":"INSERT","lineNumber":980,"content":"                    matches.forEach { match ->"},{"type":"INSERT","lineNumber":981,"content":"                        Log.w(TAG, \"  📍 ${match.landmarkId}: ${(match.confidence * 100).toInt()}%\")"},{"type":"INSERT","lineNumber":982,"content":"                    }"},{"type":"INSERT","lineNumber":983,"content":"                }"},{"type":"INSERT","lineNumber":984,"content":"                "},{"type":"INSERT","lineNumber":985,"content":"                testFrame.release()"},{"type":"INSERT","lineNumber":986,"content":"                "},{"type":"INSERT","lineNumber":987,"content":"            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":988,"content":"                Log.e(TAG, \"❌ Fehler beim Feature-Matching Test: ${e.message}\", e)"},{"type":"INSERT","lineNumber":989,"content":"            }"},{"type":"INSERT","lineNumber":990,"content":"        }"},{"type":"INSERT","lineNumber":991,"content":"    }"},{"type":"INSERT","lineNumber":992,"content":"    "},{"type":"INSERT","lineNumber":993,"content":"    /**"},{"type":"INSERT","lineNumber":1031,"content":"     */"},{"type":"INSERT","lineNumber":1032,"content":"    fun runSelfTest(context: Context): Boolean {"},{"type":"DELETE","lineNumber":1003,"oldContent":"     */"},{"type":"DELETE","lineNumber":1004,"oldContent":"    fun runSelfTest(context: Context): Boolean {"},{"type":"INSERT","lineNumber":1058,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1030,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1122,"content":"    }"},{"type":"DELETE","lineNumber":1094,"oldContent":"    }"},{"type":"DELETE","lineNumber":1144,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"INSERT","lineNumber":1176,"content":"     * Gibt die Landmark-IDs zurück, die in der aktuellen Route benötigt werden"},{"type":"DELETE","lineNumber":1146,"oldContent":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"DELETE","lineNumber":1147,"oldContent":"        return buildString {"},{"type":"DELETE","lineNumber":1148,"oldContent":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":1149,"oldContent":"     */"},{"type":"DELETE","lineNumber":1150,"oldContent":"                totalSteps = 0"},{"type":"DELETE","lineNumber":1151,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1152,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1178,"content":"    fun getRequiredLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":1179,"content":"        val currentRoute = _currentRoute.value ?: return emptyList()"},{"type":"INSERT","lineNumber":1180,"content":"        "},{"type":"INSERT","lineNumber":1181,"content":"        val landmarkIds = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1182,"content":"        for (pathItem in currentRoute.route.path) {"},{"type":"INSERT","lineNumber":1183,"content":"            for (routePart in pathItem.routeParts) {"},{"type":"INSERT","lineNumber":1184,"content":"                routePart.landmarks?.forEach { landmark ->"},{"type":"INSERT","lineNumber":1185,"content":"                    landmark.id?.let { landmarkIds.add(it) } // landmarks ist List<RouteLandmarkData>, verwende .id"},{"type":"INSERT","lineNumber":1186,"content":"                }"},{"type":"DELETE","lineNumber":1154,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":1155,"oldContent":"                Log.d(TAG, \"Route führt durch ${floorList.size} Stockwerke: $floorList\")"},{"type":"DELETE","lineNumber":1156,"oldContent":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1157,"oldContent":"                buildingList"},{"type":"DELETE","lineNumber":1158,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1159,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1160,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1161,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":1162,"oldContent":"                "},{"type":"DELETE","lineNumber":1163,"oldContent":"                // Verwende routeInfo falls verfügbar"},{"type":"DELETE","lineNumber":1164,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":1188,"content":"        }"},{"type":"INSERT","lineNumber":1189,"content":"        "},{"type":"INSERT","lineNumber":1190,"content":"        return landmarkIds.toList()"},{"type":"INSERT","lineNumber":1191,"content":"    }"},{"type":"INSERT","lineNumber":1192,"content":""},{"type":"INSERT","lineNumber":1193,"content":"    /**"},{"type":"INSERT","lineNumber":1194,"content":"     * Fehlende Methoden für Navigation.kt"},{"type":"INSERT","lineNumber":1195,"content":"     */"},{"type":"INSERT","lineNumber":1196,"content":"    fun enableStorageSystemImmediately(context: Context) {"},{"type":"DELETE","lineNumber":1192,"oldContent":"    fun getCurrentEndPoint(): String {"},{"type":"DELETE","lineNumber":1195,"oldContent":"    }"},{"type":"DELETE","lineNumber":1202,"oldContent":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1232,"content":"                    }"},{"type":"DELETE","lineNumber":1204,"oldContent":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"DELETE","lineNumber":1207,"oldContent":"    }"},{"type":"DELETE","lineNumber":1208,"oldContent":"    fun getRouteProgress(): Float {"},{"type":"DELETE","lineNumber":1209,"oldContent":"            if (summary.totalLength > 0) {"},{"type":"DELETE","lineNumber":1210,"oldContent":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"DELETE","lineNumber":1211,"oldContent":"                        firstPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1236,"content":"                    !firstRoutePart?.instruction.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1237,"content":"                        extractLocationFromInstruction(firstRoutePart!!.instruction!!)"},{"type":"INSERT","lineNumber":1239,"content":"                    // 2. Aus dem ersten Node"},{"type":"INSERT","lineNumber":1240,"content":"                    firstRoutePart?.nodes?.firstOrNull()?.node?.name != null -> {"},{"type":"INSERT","lineNumber":1241,"content":"                        firstRoutePart.nodes.firstOrNull()?.node?.name ?: \"Unbekannter Startpunkt\""},{"type":"INSERT","lineNumber":1244,"content":"                    !firstPathItem.xmlNameDe.isNullOrBlank() -> {"},{"type":"INSERT","lineNumber":1245,"content":"                        firstPathItem.xmlNameDe!!"},{"type":"INSERT","lineNumber":1246,"content":"                    }"},{"type":"INSERT","lineNumber":1249,"content":"                    }"},{"type":"DELETE","lineNumber":1220,"oldContent":"                    }"},{"type":"DELETE","lineNumber":1225,"oldContent":"        }"},{"type":"INSERT","lineNumber":1257,"content":"                \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\""},{"type":"DELETE","lineNumber":1228,"oldContent":"    }"},{"type":"INSERT","lineNumber":1263,"content":"    }"},{"type":"INSERT","lineNumber":1264,"content":"    "},{"type":"INSERT","lineNumber":1265,"content":"    /**"},{"type":"DELETE","lineNumber":1234,"oldContent":"    "},{"type":"DELETE","lineNumber":1236,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1290,"oldContent":"                    val buildingName = pathItem.xmlNameDe "},{"type":"DELETE","lineNumber":1291,"oldContent":"                    // Bevorzuge deutsche Namen"},{"type":"DELETE","lineNumber":1292,"oldContent":"                val totalLength = getRouteLength()"},{"type":"DELETE","lineNumber":1293,"oldContent":"                // Fallback: Berechne basierend auf Distanz (durchschnittlich 1.2 m/s)"},{"type":"DELETE","lineNumber":1294,"oldContent":"                route.route.routeInfo?.estimatedTime?.let { return it }"},{"type":"DELETE","lineNumber":1295,"oldContent":"                // Verwende routeInfo falls verfügbar"},{"type":"DELETE","lineNumber":1296,"oldContent":"            if (route != null) {"},{"type":"INSERT","lineNumber":1322,"content":"    private fun extractLocationFromInstruction(instruction: String): String {"},{"type":"INSERT","lineNumber":1323,"content":"        // Entferne HTML-Tags"},{"type":"INSERT","lineNumber":1324,"content":"        val cleanInstruction = instruction"},{"type":"INSERT","lineNumber":1325,"content":"            .replace(\"<b>\", \"\")"},{"type":"INSERT","lineNumber":1326,"content":"            .replace(\"</b>\", \"\")"},{"type":"INSERT","lineNumber":1327,"content":"            .replace(\"<\\\\/b>\", \"\")"},{"type":"INSERT","lineNumber":1328,"content":"            .replace(Regex(\"<[^>]*>\"), \"\")"},{"type":"DELETE","lineNumber":1299,"oldContent":"        return steps.find { it.stepNumber == currentStepNumber }"},{"type":"INSERT","lineNumber":1331,"content":"        val locationPatterns = listOf("},{"type":"INSERT","lineNumber":1332,"content":"            Regex(\"(?:zu|zum|zur|in|im|an|am)\\\\s+([^.]+?)(?:\\\\s+(?:gehen|folgen|wenden)|$)\", RegexOption.IGNORE_CASE),"},{"type":"INSERT","lineNumber":1333,"content":"            Regex(\"(?:Büro|Office|Raum|Room)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1302,"oldContent":"            Regex(\"(?:zu|zum|zur|in|im|an|am)\\\\s+([^.]+?)(?:\\\\s+(?:gehen|folgen|wenden)|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1304,"oldContent":"            Regex(\"(?:Büro|Office|Raum|Room)\\\\s+([^.]+?)(?:\\\\s|$)\", RegexOption.IGNORE_CASE),"},{"type":"DELETE","lineNumber":1308,"oldContent":"        "},{"type":"DELETE","lineNumber":1309,"oldContent":"                if (isNotEmpty()) append(\" • \")"},{"type":"DELETE","lineNumber":1310,"oldContent":"            }"},{"type":"DELETE","lineNumber":1311,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1340,"content":"            val match = pattern.find(cleanInstruction)"},{"type":"INSERT","lineNumber":1341,"content":"            if (match != null) {"},{"type":"INSERT","lineNumber":1342,"content":"                val location = match.groupValues[1].trim()"},{"type":"INSERT","lineNumber":1343,"content":"                if (location.isNotBlank() && location.length > 2) {"},{"type":"DELETE","lineNumber":1330,"oldContent":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1362,"content":"    }"},{"type":"INSERT","lineNumber":1384,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":1385,"content":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"DELETE","lineNumber":1356,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":1357,"oldContent":"            Log.e(TAG, \"Fehler beim Berechnen der Routenlänge: ${e.message}\")"},{"type":"INSERT","lineNumber":1392,"content":"     */"},{"type":"DELETE","lineNumber":1362,"oldContent":"     */"},{"type":"DELETE","lineNumber":1367,"oldContent":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"DELETE","lineNumber":1369,"oldContent":"        }"},{"type":"DELETE","lineNumber":1371,"oldContent":"            }"},{"type":"DELETE","lineNumber":1373,"oldContent":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"INSERT","lineNumber":1402,"content":"                val timeInSeconds = (totalLength / 1.2).toInt()"},{"type":"INSERT","lineNumber":1403,"content":"                val timeInMinutes = (timeInSeconds / 60).coerceAtLeast(1)"},{"type":"INSERT","lineNumber":1404,"content":"                "},{"type":"INSERT","lineNumber":1405,"content":"                Log.d(TAG, \"Geschätzte Gehzeit: ${timeInMinutes} Minuten\")"},{"type":"DELETE","lineNumber":1393,"oldContent":"            (currentStep.toFloat() / totalSteps.toFloat()).coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":1394,"oldContent":"        "},{"type":"DELETE","lineNumber":1395,"oldContent":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"DELETE","lineNumber":1397,"oldContent":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1428,"content":"                        ?: pathItem.xmlName"},{"type":"INSERT","lineNumber":1429,"content":"                    "},{"type":"INSERT","lineNumber":1430,"content":"                    if (!buildingName.isNullOrBlank()) {"},{"type":"INSERT","lineNumber":1431,"content":"                        buildings.add(buildingName)"},{"type":"INSERT","lineNumber":1436,"content":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"INSERT","lineNumber":1437,"content":"                buildingList"},{"type":"DELETE","lineNumber":1408,"oldContent":"                Log.d(TAG, \"Route führt durch ${buildingList.size} Gebäude: $buildingList\")"},{"type":"DELETE","lineNumber":1409,"oldContent":"                buildingList"},{"type":"INSERT","lineNumber":1454,"content":"                val floors = mutableSetOf<String>()"},{"type":"DELETE","lineNumber":1426,"oldContent":"                val floors = mutableSetOf<String>()"},{"type":"INSERT","lineNumber":1468,"content":"                val floorList = floors.toList()"},{"type":"DELETE","lineNumber":1440,"oldContent":"                val floorList = floors.toList()"},{"type":"INSERT","lineNumber":1473,"content":"            }"},{"type":"DELETE","lineNumber":1443,"oldContent":"            }"},{"type":"INSERT","lineNumber":1476,"content":"            emptyList()"},{"type":"INSERT","lineNumber":1477,"content":"        }"},{"type":"INSERT","lineNumber":1478,"content":"    }"},{"type":"DELETE","lineNumber":1447,"oldContent":"            emptyList()"},{"type":"DELETE","lineNumber":1448,"oldContent":"        }"},{"type":"DELETE","lineNumber":1450,"oldContent":"    }"},{"type":"INSERT","lineNumber":1496,"content":"            RouteSummary("},{"type":"INSERT","lineNumber":1497,"content":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1468,"oldContent":"            RouteSummary("},{"type":"DELETE","lineNumber":1469,"oldContent":"                startPoint = \"Unbekannter Start\","},{"type":"DELETE","lineNumber":1474,"oldContent":"}"},{"type":"INSERT","lineNumber":1506,"content":"    }"},{"type":"INSERT","lineNumber":1507,"content":"    "},{"type":"INSERT","lineNumber":1509,"content":"     * Gibt formatierte Routeninformationen für die UI zurück"},{"type":"DELETE","lineNumber":1478,"oldContent":"    "},{"type":"DELETE","lineNumber":1480,"oldContent":"    /**"},{"type":"DELETE","lineNumber":1483,"oldContent":"    "},{"type":"INSERT","lineNumber":1515,"content":"                append(\"${String.format(\"%.0f\", summary.totalLength)}m\")"},{"type":"DELETE","lineNumber":1491,"oldContent":"    "},{"type":"DELETE","lineNumber":1494,"oldContent":""},{"type":"INSERT","lineNumber":1529,"content":"        }.takeIf { it.isNotBlank() } ?: \"Route wird geladen...\""},{"type":"INSERT","lineNumber":1530,"content":"    }"},{"type":"DELETE","lineNumber":1501,"oldContent":"    fun getRouteDescription(): String {"},{"type":"DELETE","lineNumber":1503,"oldContent":"        val summary = getRouteSummary()"},{"type":"INSERT","lineNumber":1535,"content":"    fun getRouteDescription(): String {"},{"type":"INSERT","lineNumber":1536,"content":"        val summary = getRouteSummary()"},{"type":"DELETE","lineNumber":1514,"oldContent":"}"},{"type":"INSERT","lineNumber":1546,"content":"     * Gibt den aktuellen Fortschritt der Route zurück (0.0 bis 1.0)"},{"type":"DELETE","lineNumber":1516,"oldContent":""},{"type":"DELETE","lineNumber":1518,"oldContent":"    }"},{"type":"DELETE","lineNumber":1520,"oldContent":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1556,"content":"        }"},{"type":"INSERT","lineNumber":1557,"content":"    }"},{"type":"INSERT","lineNumber":1558,"content":"    "},{"type":"INSERT","lineNumber":1559,"content":"    /**"},{"type":"INSERT","lineNumber":1560,"content":"     * Gibt den Fortschritt als Prozentsatz zurück"},{"type":"INSERT","lineNumber":1561,"content":"     */"},{"type":"INSERT","lineNumber":1562,"content":"    fun getRouteProgressPercentage(): Int {"},{"type":"INSERT","lineNumber":1563,"content":"        return (getRouteProgress() * 100).toInt()"},{"type":"INSERT","lineNumber":1564,"content":"    }"},{"type":"INSERT","lineNumber":1565,"content":""},{"type":"INSERT","lineNumber":1566,"content":"}"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/AndroidManifest.xml":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/AndroidManifest.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <!-- Camera Permissions -->\n    <uses-permission android:name=\"android.permission.CAMERA\"/>\n    \n    <!-- Network Permissions für Feature-Mapping Server -->\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n    \n    <!-- Storage Permissions für lokale Feature-Maps -->\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n\n    <uses-feature android:name=\"android.hardware.camera\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.autofocus\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front\" android:required=\"false\"/>\n    <uses-feature android:name=\"android.hardware.camera.front.autofocus\" android:required=\"false\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:label=\"@string/app_name\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.ArWalking\"\n        android:usesCleartextTraffic=\"true\"\n        tools:targetApi=\"31\">\n\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.ArWalking\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\"/>\n                <category android:name=\"android.intent.category.LAUNCHER\"/>\n            </intent-filter>\n        </activity>\n        <activity android:name=\".OpenCvCameraActivity\"\n                    android:theme=\"@style/Theme.ArWalking\"/>\n\n    </application>\n</manifest>\n","baseTimestamp":1754346742687},"/Users/florian/Documents/GitHub/ar-walking/README.md":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/README.md","baseContent":"# ArWalking - Augmented Reality Navigation App\n\nArWalking is an Android application that provides augmented reality (AR) walking navigation using computer vision and feature matching. The app uses the device's camera to overlay navigation information on the real world, helping users navigate indoor environments.\n\n## 🚀 Features\n\n- **AR Navigation**: Real-time augmented reality overlays showing navigation directions\n- **Feature Matching**: Computer vision-based landmark recognition using OpenCV\n- **Indoor Navigation**: Specialized for indoor environments like university buildings\n- **Route Planning**: JSON-based route configuration with step-by-step instructions\n- **Modern UI**: Built with Jetpack Compose for a smooth, modern user experience\n- **Camera Integration**: Real-time camera preview with AR overlays\n\n## 📱 Screenshots\n\nThe app provides:\n- Home screen with route selection\n- AR camera view with navigation overlays\n- Feature matching indicators\n- Step-by-step navigation guidance\n\n## 🏗️ Architecture\n\n### Project Structure\n```\nar-walking/\n├── app/                          # Main Android application module\n│   ├── src/main/java/           # Kotlin source code\n│   │   └── com/example/arwalking/\n│   │       ├── components/      # Reusable UI components\n│   │       ├── data/           # Data models and repositories\n│   │       ├── screens/        # Screen composables\n│   │       ├── storage/        # Local storage management\n│   │       ├── ui/theme/       # UI theme and styling\n│   │       └── utils/          # Utility classes\n│   ├── src/main/res/           # Android resources\n│   │   ├── drawable/           # Vector drawables and images\n│   │   ├── layout/            # XML layouts (for OpenCV activities)\n│   │   └── values/            # Colors, strings, themes\n│   └── src/main/assets/        # Asset files\n│       ├── routes/            # Route JSON files\n│       ├── landmark_images/   # Reference landmark images\n│       └── landmark_features/ # Processed feature data\n├── opencv/                      # OpenCV Android module\n└── gradle/                     # Gradle configuration\n```\n\n### Key Components\n\n#### 1. Navigation System\n- **MainActivity.kt**: Main entry point with Compose navigation\n- **HomeScreen.kt**: Route selection interface\n- **Navigation.kt**: Camera-based AR navigation screen\n\n#### 2. AR & Computer Vision\n- **OpenCvCameraActivity.kt**: OpenCV-based camera processing\n- **FeatureMatchingEngine.kt**: Computer vision feature matching\n- **ARTrackingSystem.kt**: AR coordinate system management\n- **LandmarkFeatureStorage.kt**: Landmark data management\n\n#### 3. UI Components\n- **ARInfoIsland.kt**: AR status and information display\n- **SnapchatStyleAR3DArrow.kt**: 3D arrow navigation overlay\n- **LocationDropdown.kt**: Location selection component\n- **FeatureMatchOverlay.kt**: Feature matching visualization\n\n#### 4. Data Management\n- **RouteViewModel.kt**: Central state management\n- **RouteRepository.kt**: JSON route data handling\n- **ArWalkingStorageManager.kt**: Local storage system\n\n## 🛠️ Technical Stack\n\n### Core Technologies\n- **Language**: Kotlin 2.0.0\n- **Build System**: Gradle with Kotlin DSL\n- **UI Framework**: Jetpack Compose\n- **Computer Vision**: OpenCV for Android\n- **Architecture**: MVVM with ViewModels\n- **Navigation**: Jetpack Navigation Compose\n\n### Key Dependencies\n```kotlin\n// Core Android\nandroidx-core-ktx = \"1.16.0\"\nandroidx-lifecycle-runtime-ktx = \"2.9.1\"\n\n// Jetpack Compose\nandroidx-compose-bom = \"2024.04.01\"\nandroidx-activity-compose = \"1.10.1\"\nandroidx-navigation-compose = \"2.9.2\"\n\n// Camera\nandroidx-camera-core = \"1.4.2\"\nandroidx-camera-lifecycle = \"1.4.2\"\n\n// Coroutines\nkotlinx-coroutines-core = \"1.7.3\"\nkotlinx-coroutines-android = \"1.7.3\"\n\n// JSON Processing\ngson = \"2.10.1\"\n```\n\n### Android Configuration\n- **Minimum SDK**: 24 (Android 7.0)\n- **Target SDK**: 35 (Android 14)\n- **Compile SDK**: 36\n- **Java Compatibility**: Java 17\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Android Studio Narwhal (2025.1.2) or later\n- Java 17 or later\n- Android SDK with API level 24+\n- Physical Android device (recommended for AR features)\n\n### Installation\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/your-username/ar-walking.git\n   cd ar-walking\n   ```\n\n2. **Open in Android Studio**\n   - Launch Android Studio\n   - Select \"Open an existing project\"\n   - Navigate to the cloned directory\n\n3. **Sync project**\n   - Android Studio will automatically sync Gradle dependencies\n   - Wait for the sync to complete\n\n4. **Build the project**\n   ```bash\n   ./gradlew build\n   ```\n\n5. **Install on device**\n   ```bash\n   ./gradlew installDebug\n   ```\n\n### Required Permissions\nThe app requires the following permissions:\n- **Camera**: For AR navigation and feature matching\n- **Internet**: For potential future server-based features\n- **Storage**: For local landmark data storage\n\n## 📋 Usage\n\n### Basic Navigation Flow\n\n1. **Launch the app**\n   - The home screen displays available routes\n   - Select start and destination locations\n\n2. **Start AR Navigation**\n   - Grant camera permission when prompted\n   - Point camera at the environment\n   - Follow AR overlays and navigation instructions\n\n3. **Feature Matching**\n   - The app automatically recognizes landmarks\n   - AR indicators show recognition confidence\n   - Navigation arrows guide you to the destination\n\n### Route Configuration\n\nRoutes are defined in JSON format in `app/src/main/assets/route.json`:\n\n```json\n{\n  \"route\": {\n    \"path\": [\n      {\n        \"xmlName\": \"Building Name\",\n        \"levelInfo\": {\n          \"storey\": \"0\",\n          \"storeyName\": \"Ground Floor\"\n        },\n        \"routeParts\": [\n          {\n            \"instruction\": \"Walk straight ahead\",\n            \"instructionDe\": \"Gehen Sie geradeaus\",\n            \"distance\": 50.0,\n            \"duration\": 30,\n            \"landmarks\": [\"landmark_1\", \"landmark_2\"]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### Adding New Landmarks\n\n1. **Add landmark images** to `app/src/main/assets/landmark_images/`\n2. **Update route JSON** to reference new landmarks\n3. **Feature extraction** happens automatically on first run\n\n## 🔧 Development\n\n### Key Classes Overview\n\n#### RouteViewModel\nCentral state management for:\n- Route data loading from JSON\n- Feature matching coordination\n- AR state management\n- Navigation step tracking\n\n#### FeatureMatchingEngine\nComputer vision processing:\n- OpenCV-based feature detection\n- Landmark recognition\n- Confidence scoring\n- Real-time frame processing\n\n#### ARTrackingSystem\nAR coordinate management:\n- Camera pose estimation\n- 3D coordinate transformations\n- Overlay positioning\n- Tracking stability\n\n### Adding New Features\n\n1. **New UI Components**: Add to `components/` package\n2. **New Screens**: Add to `screens/` package with navigation setup\n3. **Data Models**: Add to `data/` package\n4. **Storage**: Extend `ArWalkingStorageManager` for new data types\n\n### Testing\n\n```bash\n# Run unit tests\n./gradlew test\n\n# Run instrumented tests\n./gradlew connectedAndroidTest\n\n# Run specific test class\n./gradlew test --tests \"com.example.arwalking.RouteViewModelTest\"\n```\n\n## 📊 Performance Considerations\n\n### Optimization Features\n- **Efficient feature matching**: Optimized OpenCV processing\n- **Memory management**: Proper bitmap recycling\n- **Background processing**: Coroutines for heavy operations\n- **Storage optimization**: Compressed landmark data\n\n### Recommended Device Specs\n- **RAM**: 4GB+ recommended\n- **Camera**: Autofocus capability\n- **Sensors**: Gyroscope and accelerometer for better AR\n- **Storage**: 100MB+ free space for landmark data\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **Camera permission denied**\n   - Check app permissions in device settings\n   - Restart the app after granting permission\n\n2. **Feature matching not working**\n   - Ensure good lighting conditions\n   - Check if landmark images are properly loaded\n   - Verify OpenCV initialization\n\n3. **AR overlays misaligned**\n   - Calibrate device sensors\n   - Ensure stable camera positioning\n   - Check device orientation handling\n\n4. **Build errors**\n   - Clean and rebuild: `./gradlew clean build`\n   - Check Java version compatibility\n   - Verify all dependencies are resolved\n\n### Debug Features\n\nEnable debug mode in `BuildConfig.DEBUG` for:\n- Detailed logging\n- Feature matching visualization\n- Performance metrics\n- Storage system diagnostics\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Code Style\n- Follow Kotlin coding conventions\n- Use meaningful variable and function names\n- Add documentation for public APIs\n- Write unit tests for new features\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- OpenCV community for computer vision capabilities\n- Android Jetpack team for modern Android development tools\n- Contributors and testers who helped improve the app\n\n## 📞 Support\n\nFor support and questions:\n- Create an issue on GitHub\n- Check the troubleshooting section\n- Review existing documentation\n\n---\n\n**Note**: This app is designed for indoor navigation and works best in well-lit environments with distinctive visual landmarks.","baseTimestamp":1754346904962,"deltas":[{"timestamp":1754346916238,"changes":[{"type":"MODIFY","lineNumber":47,"content":"### Komponenten-Übersicht","oldContent":"### Key Components"},{"type":"INSERT","lineNumber":49,"content":"Die ArWalking-App ist modular aufgebaut und besteht aus verschiedenen spezialisierten Komponenten:"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"INSERT","lineNumber":51,"content":"#### 1. Navigation & Routing System"},{"type":"INSERT","lineNumber":52,"content":"- **MainActivity.kt**: Haupteinstiegspunkt der App mit Jetpack Compose Navigation"},{"type":"INSERT","lineNumber":53,"content":"- **HomeScreen.kt**: Startbildschirm für Routenauswahl und Zielkonfiguration"},{"type":"INSERT","lineNumber":54,"content":"- **Navigation.kt**: Hauptnavigationsbildschirm mit AR-Kamera-Integration"},{"type":"INSERT","lineNumber":55,"content":"- **RouteViewModel.kt**: Zentrale Zustandsverwaltung für Routen, Feature-Matching und Navigation"},{"type":"INSERT","lineNumber":56,"content":"- **RouteRepository.kt**: Lädt und verwaltet Routendaten aus JSON-Assets"},{"type":"INSERT","lineNumber":57,"content":"- **NavigationRoute.kt**: Datenmodelle für Navigationsrouten und -schritte"},{"type":"INSERT","lineNumber":58,"content":""},{"type":"INSERT","lineNumber":59,"content":"#### 2. AR & Computer Vision"},{"type":"INSERT","lineNumber":60,"content":"- **OpenCvCameraActivity.kt**: OpenCV-basierte Kameraverarbeitung und Bildanalyse"},{"type":"INSERT","lineNumber":61,"content":"- **FeatureMatchingEngine.kt**: Computer-Vision-Engine für Landmark-Erkennung und Feature-Matching"},{"type":"INSERT","lineNumber":62,"content":"- **LandmarkFeatureStorage.kt**: Verwaltung und Speicherung von Landmark-Features und Bilddaten"},{"type":"INSERT","lineNumber":63,"content":"- **ARTrackingSystem.kt**: AR-Koordinatensystem-Management und Pose-Schätzung (Stub-Implementation)"},{"type":"INSERT","lineNumber":64,"content":""},{"type":"INSERT","lineNumber":65,"content":"#### 3. UI Components & Overlays"},{"type":"INSERT","lineNumber":66,"content":"- **ARInfoIsland.kt**: AR-Status-Anzeige mit Scan-Status und Navigationsinformationen"},{"type":"INSERT","lineNumber":67,"content":"- **AR3DArrowOverlay.kt**: 3D-Pfeil-Overlay für Richtungsanweisungen"},{"type":"INSERT","lineNumber":68,"content":"- **Animated3DArrowOverlay.kt**: Animierte Version des 3D-Pfeils mit Bewegungseffekten"},{"type":"INSERT","lineNumber":69,"content":"- **FeatureMatchOverlay.kt**: Visualisierung von Feature-Matches und Erkennungsvertrauen"},{"type":"INSERT","lineNumber":70,"content":"- **LocationDropdown.kt**: Dropdown-Komponente für Standort- und Zielauswahl"},{"type":"INSERT","lineNumber":71,"content":"- **NavigationDrawer.kt**: Seitliches Navigationsmenü"},{"type":"INSERT","lineNumber":72,"content":"- **MenuOverlay.kt**: Overlay-Menü für zusätzliche Optionen"},{"type":"INSERT","lineNumber":73,"content":"- **ARScanStatus.kt**: Status-Komponente für AR-Scanning-Feedback"},{"type":"INSERT","lineNumber":74,"content":""},{"type":"INSERT","lineNumber":75,"content":"#### 4. Storage & Data Management"},{"type":"INSERT","lineNumber":76,"content":"- **ArWalkingStorageManager.kt**: Zentrales Storage-System für Bilder und Metadaten"},{"type":"INSERT","lineNumber":77,"content":"- **LocalImageStorage.kt**: Lokale Bildspeicherung und -verwaltung"},{"type":"INSERT","lineNumber":78,"content":"- **OptimizedImageManager.kt**: Optimierte Bildverarbeitung und Komprimierung"},{"type":"INSERT","lineNumber":79,"content":"- **ProjectDirectoryImageManager.kt**: Verwaltung von Bildern im Projektverzeichnis"},{"type":"INSERT","lineNumber":80,"content":"- **FavoritesRepository.kt**: Speicherung und Verwaltung von Lieblingsrouten"},{"type":"INSERT","lineNumber":81,"content":""},{"type":"INSERT","lineNumber":82,"content":"#### 5. Data Models & Structures"},{"type":"INSERT","lineNumber":83,"content":"- **RouteData.kt**: Datenmodelle für JSON-basierte Routendefinitionen"},{"type":"INSERT","lineNumber":84,"content":"- **BuildingStructure.kt**: Gebäudestruktur-Definitionen und Stockwerk-Informationen"},{"type":"INSERT","lineNumber":85,"content":"- **FavoriteRoute.kt**: Datenmodell für gespeicherte Lieblingsrouten"},{"type":"INSERT","lineNumber":86,"content":"- **FeatureLandmark.kt**: Landmark-Definitionen mit Feature-Daten"},{"type":"INSERT","lineNumber":87,"content":"- **FeatureNavigationRoute.kt**: Spezielle Routen für Feature-basierte Navigation"},{"type":"INSERT","lineNumber":88,"content":""},{"type":"INSERT","lineNumber":89,"content":"#### 6. Utility & Configuration"},{"type":"INSERT","lineNumber":90,"content":"- **FeatureMappingConfig.kt**: Konfiguration für Feature-Mapping-Parameter"},{"type":"INSERT","lineNumber":91,"content":"- **JsonUtils.kt**: Hilfsfunktionen für JSON-Verarbeitung"},{"type":"INSERT","lineNumber":92,"content":"- **GradientUtils.kt**: UI-Hilfsfunktionen für Farbverläufe"},{"type":"INSERT","lineNumber":93,"content":"- **Color.kt**: App-weite Farbdefinitionen und Themes"},{"type":"INSERT","lineNumber":94,"content":""},{"type":"INSERT","lineNumber":95,"content":"#### 7. Debug & Development"},{"type":"INSERT","lineNumber":96,"content":"- **LandmarkDebugOverlay.kt**: Debug-Overlay für Landmark-Entwicklung"},{"type":"INSERT","lineNumber":97,"content":"- **FeatureMappingStatusIndicator.kt**: Status-Indikator für Feature-Mapping-Prozesse"},{"type":"INSERT","lineNumber":98,"content":"- **ExpandedARInfoIsland.kt**: Erweiterte AR-Info-Anzeige für detaillierte Informationen"},{"type":"INSERT","lineNumber":99,"content":""},{"type":"INSERT","lineNumber":100,"content":"### Key Components (Hauptkomponenten)"},{"type":"INSERT","lineNumber":101,"content":""},{"type":"DELETE","lineNumber":57,"oldContent":"- **ARTrackingSystem.kt**: AR coordinate system management"},{"type":"DELETE","lineNumber":62,"oldContent":"- **SnapchatStyleAR3DArrow.kt**: 3D arrow navigation overlay"},{"type":"INSERT","lineNumber":114,"content":"- **AR3DArrowOverlay.kt**: 3D arrow navigation overlay"}]}]},"/Dummy.txt":{"filePath":"/Dummy.txt","baseContent":"keyboard bug gelöst, zoom kamera hinzugefügt. erster locate button","baseTimestamp":1754346971880,"deltas":[{"timestamp":1754346979418,"changes":[{"type":"MODIFY","lineNumber":0,"content":"bug fixinf","oldContent":"keyboard bug gelöst, zoom kamera hinzugefügt. erster locate button"}]},{"timestamp":1754931611965,"changes":[{"type":"MODIFY","lineNumber":0,"content":"bugFxing-2.0-NurTest","oldContent":"bug fixinf"}]},{"timestamp":1754931621000,"changes":[{"type":"MODIFY","lineNumber":0,"content":"bug fixinf","oldContent":"bugFxing-2.0-NurTest"}]},{"timestamp":1754931633710,"changes":[{"type":"MODIFY","lineNumber":0,"content":"testing diffrent algorithm","oldContent":"bug fixinf"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/OpenCvCameraActivity.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/OpenCvCameraActivity.kt","baseContent":"package com.example.arwalking\n\nimport android.graphics.Bitmap\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.SurfaceView\nimport android.view.View\nimport android.widget.Button\nimport android.widget.TextView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.lifecycleScope\nimport kotlinx.coroutines.launch\nimport org.opencv.android.*\nimport org.opencv.core.*\nimport org.opencv.android.Utils\nimport androidx.compose.ui.platform.ComposeView\nimport androidx.compose.runtime.*\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.unit.dp\nimport com.example.arwalking.FeatureMatchResult\nimport com.example.arwalking.RouteViewModel\nimport com.example.arwalking.components.ARInfoIsland\nimport com.example.arwalking.components.ARScanStatus\nimport com.example.arwalking.components.ExpandedARInfoIsland\nimport com.example.arwalking.components.AR3DArrowOverlay\nimport com.example.arwalking.components.LandmarkDebugOverlay\nimport com.example.arwalking.components.CompactLandmarkDebugInfo\nimport com.example.arwalking.components.rememberARScanStatus\nimport com.example.arwalking.ui.theme.ARWalkingTheme\n\n\nclass OpenCvCameraActivity : AppCompatActivity(), CameraBridgeViewBase.CvCameraViewListener2 {\n\n    private lateinit var openCvCameraView: JavaCameraView\n    \n    // Feature-Mapping Integration\n    private lateinit var routeViewModel: RouteViewModel\n    private lateinit var matchInfoText: TextView\n    private lateinit var captureButton: Button\n    private lateinit var navInfoButton: Button\n    private lateinit var arInfoComposeView: ComposeView\n    private var currentFrame: Mat? = null\n    \n    // AR Status State\n    private var isARInitialized by mutableStateOf(false)\n    private var currentMatches by mutableStateOf<List<FeatureMatchResult>>(emptyList())\n    \n    // Kamera-Parameter für AR-Tracking\n    private var screenWidth = 0f\n    private var screenHeight = 0f\n    private var cameraRotation = 0f\n    private var deviceOrientation = 0f\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        OpenCVLoader.initDebug()\n\n        setContentView(R.layout.activity_opencv_camera)\n\n        // Views initialisieren\n        openCvCameraView = findViewById(R.id.camera_view)\n        matchInfoText = findViewById(R.id.match_info_text)\n        captureButton = findViewById(R.id.capture_button)\n        navInfoButton = findViewById(R.id.nav_info_button)\n        \n        // AR Info Island ComposeView erstellen und hinzufügen\n        arInfoComposeView = ComposeView(this).apply {\n            setContent {\n                ARWalkingTheme {\n                    AROverlayContent()\n                }\n            }\n        }\n        \n        // ComposeView zum Layout hinzufügen\n        val rootLayout = findViewById<android.widget.RelativeLayout>(android.R.id.content)\n        val layoutParams = android.widget.RelativeLayout.LayoutParams(\n            android.widget.RelativeLayout.LayoutParams.MATCH_PARENT,\n            android.widget.RelativeLayout.LayoutParams.WRAP_CONTENT\n        ).apply {\n            addRule(android.widget.RelativeLayout.ALIGN_PARENT_TOP)\n            topMargin = 60 // Platz für Status Bar\n        }\n        rootLayout.addView(arInfoComposeView, layoutParams)\n        \n        openCvCameraView.visibility = SurfaceView.VISIBLE\n        openCvCameraView.setCvCameraViewListener(this)\n        openCvCameraView.enableView()\n\n        // ViewModel initialisieren\n        routeViewModel = ViewModelProvider(this)[RouteViewModel::class.java]\n        \n        // Feature-Mapping initialisieren\n        routeViewModel.initializeStorage(this)\n        \n        // AR als initialisiert markieren nach kurzer Verzögerung\n        lifecycleScope.launch {\n            kotlinx.coroutines.delay(2000)\n            isARInitialized = true\n        }\n        \n        // Feature-Navigation für aktuelles Gebäude laden\n        val building = intent.getStringExtra(\"building\") ?: \"default_building\"\n        val floor = intent.getIntExtra(\"floor\", 0)\n        routeViewModel.loadFeatureNavigationRoute(this, building, floor)\n        \n        // UI Setup\n        setupUI()\n        observeFeatureMatches()\n    }\n\n    override fun onCameraViewStarted(width: Int, height: Int) {\n        screenWidth = width.toFloat()\n        screenHeight = height.toFloat()\n        Log.d(\"OpenCvCamera\", \"Kamera gestartet: ${width}x${height}\")\n    }\n\n    override fun onCameraViewStopped() {}\n\n    override fun onCameraFrame(inputFrame: CameraBridgeViewBase.CvCameraViewFrame?): Mat {\n        val frame = inputFrame!!.gray()\n        currentFrame = frame.clone() // Für Feature-Mapping speichern\n        \n        // Feature-Mapping verarbeiten\n        routeViewModel.processFrameForFeatureMatching(frame)\n        \n        // Nur Kamera-Frame zurückgeben\n        return frame\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        openCvCameraView.disableView()\n    }\n    \n    /**\n     * UI Setup für Feature-Mapping\n     */\n    private fun setupUI() {\n        // Training functionality removed\n        \n        navInfoButton.setOnClickListener {\n            showNavigationInfo()\n        }\n    }\n    \n    /**\n     * Beobachtet Feature-Matches vom ViewModel\n     */\n    private fun observeFeatureMatches() {\n        lifecycleScope.launch {\n            routeViewModel.currentMatches.collect { matches ->\n                runOnUiThread {\n                    updateMatchInfo(matches)\n                }\n            }\n        }\n    }\n    \n    /**\n     * Vollständiges AR Overlay mit Info Island, 3D-Pfeil und Debug-Info\n     */\n    @Composable\n    private fun AROverlayContent() {\n        val matches by routeViewModel.currentMatches.collectAsState()\n        val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()\n        val currentStep by routeViewModel.currentNavigationStep.collectAsState()\n        \n        // Debug-Informationen für Landmark-Loading\n        var requiredLandmarkIds by remember { mutableStateOf<List<String>>(emptyList()) }\n        var loadedLandmarkIds by remember { mutableStateOf<List<String>>(emptyList()) }\n        var showDebugOverlay by remember { mutableStateOf(false) }\n        \n        // Update current matches state\n        LaunchedEffect(matches) {\n            currentMatches = matches\n        }\n        \n        // Update debug info\n        LaunchedEffect(Unit) {\n            requiredLandmarkIds = routeViewModel.getRequiredLandmarkIds()\n            loadedLandmarkIds = routeViewModel.getCurrentlyLoadedLandmarkIds()\n        }\n        \n        val landmarkCount = matches.size\n        val bestConfidence = matches.maxOfOrNull { match -> match.confidence } ?: 0f\n        val isTracking = matches.isNotEmpty()\n        \n        // Automatischer AR-Status basierend auf aktuellen Bedingungen\n        val arStatus = rememberARScanStatus(\n            isInitialized = isARInitialized,\n            landmarkCount = landmarkCount,\n            bestConfidence = bestConfidence,\n            isTracking = isTracking\n        )\n        \n        // Vollbild-Container für AR-Overlays\n        Box(modifier = Modifier.fillMaxSize()) {\n            \n            // 3D-Pfeil Overlay (Hintergrund)\n            if (screenWidth > 0 && screenHeight > 0) {\n                AR3DArrowOverlay(\n                    matches = matches,\n                    isFeatureMappingEnabled = isFeatureMappingEnabled,\n                    screenWidth = screenWidth,\n                    screenHeight = screenHeight,\n                    currentStep = routeViewModel.currentStepIndex.collectAsState().value + 1,\n                    totalSteps = routeViewModel.routeSteps.collectAsState().value.size,\n                    currentInstruction = routeViewModel.currentInstruction.collectAsState().value,\n                    modifier = Modifier.fillMaxSize()\n                )\n            }\n            \n            // Info Island (Vordergrund, oben)\n            ExpandedARInfoIsland(\n                scanStatus = arStatus,\n                landmarkCount = landmarkCount,\n                confidence = bestConfidence,\n                isVisible = true,\n                modifier = Modifier.align(Alignment.TopCenter)\n            )\n            \n            // Kompakte Debug-Info (oben rechts)\n            val matchingCount = requiredLandmarkIds.intersect(loadedLandmarkIds.toSet()).size\n            CompactLandmarkDebugInfo(\n                requiredCount = requiredLandmarkIds.size,\n                loadedCount = loadedLandmarkIds.size,\n                matchingCount = matchingCount,\n                modifier = Modifier\n                    .align(Alignment.TopEnd)\n                    .padding(16.dp)\n            )\n            \n            // Vollständige Debug-Info (unten, nur bei Bedarf)\n            if (showDebugOverlay) {\n                LandmarkDebugOverlay(\n                    requiredLandmarkIds = requiredLandmarkIds,\n                    loadedLandmarkIds = loadedLandmarkIds,\n                    isVisible = showDebugOverlay,\n                    modifier = Modifier.align(Alignment.BottomCenter)\n                )\n            }\n        }\n    }\n\n    /**\n     * Aktualisiert Match-Informationen in der UI\n     */\n    private fun updateMatchInfo(matches: List<FeatureMatchResult>) {\n        // Verstecke die alte TextView, da wir jetzt die AR Info Island verwenden\n        matchInfoText.visibility = View.GONE\n        \n        if (matches.isEmpty()) {\n            Log.d(\"OpenCvCamera\", \"Keine Landmarks erkannt\")\n        } else {\n            val bestMatch = matches.first()\n            Log.d(\"OpenCvCamera\", \"Erkannt: ${bestMatch.landmark?.name ?: \"Unknown\"} (${(bestMatch.confidence * 100).toInt()}%)\")\n        }\n    }\n    \n\n    \n    /**\n     * Konvertiert OpenCV Mat zu Android Bitmap\n     */\n    private fun matToBitmap(mat: Mat): Bitmap {\n        val bitmap = Bitmap.createBitmap(mat.cols(), mat.rows(), Bitmap.Config.ARGB_8888)\n        Utils.matToBitmap(mat, bitmap)\n        return bitmap\n    }\n    \n    /**\n     * Zeigt Navigation-Informationen an\n     */\n    private fun showNavigationInfo() {\n        lifecycleScope.launch {\n            routeViewModel.featureNavigationRoute.value?.let { route ->\n                val info = buildString {\n                    append(\"Navigation Route: ${route.name}\\n\")\n                    append(\"Schritte: ${route.steps.size}\\n\\n\")\n                    \n                    route.steps.take(3).forEach { step ->\n                        append(\"${step.stepNumber}. ${step.instruction}\\n\")\n                    }\n                    \n                    if (route.steps.size > 3) {\n                        append(\"... und ${route.steps.size - 3} weitere Schritte\")\n                    }\n                }\n                \n                runOnUiThread {\n                    matchInfoText.text = info\n                }\n            } ?: run {\n                runOnUiThread {\n                    matchInfoText.text = \"Keine Navigation verfügbar\"\n                }\n            }\n        }\n    }\n}\n","baseTimestamp":1754557157499,"deltas":[{"timestamp":1754557358545,"changes":[{"type":"DELETE","lineNumber":212,"oldContent":"                    currentStep = routeViewModel.currentStepIndex.collectAsState().value + 1,"},{"type":"DELETE","lineNumber":213,"oldContent":"                    totalSteps = routeViewModel.routeSteps.collectAsState().value.size,"},{"type":"DELETE","lineNumber":214,"oldContent":"                    currentInstruction = routeViewModel.currentInstruction.collectAsState().value,"},{"type":"INSERT","lineNumber":212,"content":"                    currentStep = routeViewModel.currentNavigationStep.collectAsState().value,"},{"type":"INSERT","lineNumber":213,"content":"                    totalSteps = 3, // Standard-Wert, da routeSteps nicht verfügbar ist"},{"type":"INSERT","lineNumber":214,"content":"                    currentInstruction = null, // Wird später implementiert"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt","baseContent":"package com.example.arwalking\n\nimport android.content.Context\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.PointF\nimport android.util.Log\nimport org.opencv.android.Utils\nimport org.opencv.core.*\nimport org.opencv.features2d.ORB\nimport org.opencv.features2d.DescriptorMatcher\nimport org.opencv.imgproc.Imgproc\nimport kotlin.math.sqrt\n\n/**\n * Echte Feature-Matching Engine mit OpenCV ORB Features\n */\nclass FeatureMatchingEngine(private val context: Context) {\n    \n    private val TAG = \"FeatureMatchingEngine\"\n    private val orb = ORB.create(500) // Maximal 500 Features pro Bild\n    private val matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING)\n    \n    // Cache für Landmark-Features\n    private val landmarkFeatures = mutableMapOf<String, LandmarkFeatures>()\n    \n    data class LandmarkFeatures(\n        val keypoints: MatOfKeyPoint,\n        val descriptors: Mat,\n        val landmark: ProcessedLandmark\n    )\n    \n    init {\n        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")\n    }\n    \n    /**\n     * Verarbeitet einen Kamera-Frame und findet Matches\n     */\n    fun processFrame(frame: Mat): List<FeatureMatchResult> {\n        return try {\n            if (landmarkFeatures.isEmpty()) {\n                Log.d(TAG, \"Keine Landmark-Features geladen\")\n                return emptyList()\n            }\n            \n            // Extrahiere Features aus dem aktuellen Frame\n            val frameKeypoints = MatOfKeyPoint()\n            val frameDescriptors = Mat()\n            \n            orb.detectAndCompute(frame, Mat(), frameKeypoints, frameDescriptors)\n            \n            if (frameDescriptors.rows() == 0) {\n                Log.d(TAG, \"Keine Features im Frame gefunden\")\n                return emptyList()\n            }\n            \n            val matches = mutableListOf<FeatureMatchResult>()\n            \n            // Vergleiche mit allen geladenen Landmarks\n            for ((landmarkId, landmarkFeature) in landmarkFeatures) {\n                val confidence = matchWithLandmark(frameDescriptors, landmarkFeature, frame.size())\n                \n                if (confidence > 0.3f) { // Mindest-Confidence\n                    val screenPosition = calculateScreenPosition(frameKeypoints, landmarkFeature.keypoints, frame.size())\n                    \n                    matches.add(FeatureMatchResult(\n                        landmarkId = landmarkId,\n                        confidence = confidence,\n                        landmark = landmarkFeature.landmark,\n                        matchCount = frameKeypoints.toArray().size,\n                        screenPosition = screenPosition\n                    ))\n                }\n            }\n            \n            // Sortiere nach Confidence (beste zuerst)\n            matches.sortedByDescending { it.confidence }\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Frame-Processing: ${e.message}\")\n            emptyList()\n        }\n    }\n    \n    /**\n     * Matcht Frame-Descriptors mit einem Landmark\n     */\n    private fun matchWithLandmark(frameDescriptors: Mat, landmarkFeature: LandmarkFeatures, frameSize: Size): Float {\n        return try {\n            val matches = mutableListOf<DMatch>()\n            matcher.match(frameDescriptors, landmarkFeature.descriptors, MatOfDMatch(*matches.toTypedArray()))\n            \n            if (matches.isEmpty()) return 0f\n            \n            // Filtere gute Matches (Lowe's ratio test adaptiert)\n            val goodMatches = matches.filter { it.distance < 50f } // Hamming distance threshold\n            \n            val confidence = goodMatches.size.toFloat() / frameDescriptors.rows().toFloat()\n            \n            Log.v(TAG, \"Landmark ${landmarkFeature.landmark.id}: ${goodMatches.size}/${matches.size} gute Matches, Confidence: $confidence\")\n            \n            confidence.coerceIn(0f, 1f)\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Landmark-Matching: ${e.message}\")\n            0f\n        }\n    }\n    \n    /**\n     * Berechnet die Bildschirmposition eines erkannten Landmarks\n     */\n    private fun calculateScreenPosition(frameKeypoints: MatOfKeyPoint, landmarkKeypoints: MatOfKeyPoint, frameSize: Size): PointF? {\n        return try {\n            val frameKpts = frameKeypoints.toArray()\n            if (frameKpts.isEmpty()) return null\n            \n            // Verwende den Schwerpunkt der erkannten Keypoints\n            var sumX = 0f\n            var sumY = 0f\n            \n            frameKpts.forEach { kpt ->\n                sumX += kpt.pt.x.toFloat()\n                sumY += kpt.pt.y.toFloat()\n            }\n            \n            PointF(\n                sumX / frameKpts.size,\n                sumY / frameKpts.size\n            )\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei Bildschirmposition-Berechnung: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Lädt Landmark-Features aus Assets\n     */\n    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {\n        Log.i(TAG, \"Lade Features für ${landmarks.size} Landmarks...\")\n        \n        landmarks.forEach { landmark ->\n            try {\n                val bitmap = loadLandmarkImage(landmark.id)\n                if (bitmap != null) {\n                    val features = extractFeaturesFromBitmap(bitmap, landmark)\n                    if (features != null) {\n                        landmarkFeatures[landmark.id] = features\n                        Log.d(TAG, \"Features geladen für Landmark: ${landmark.id}\")\n                    }\n                }\n            } catch (e: Exception) {\n                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")\n            }\n        }\n        \n        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")\n    }\n    \n    /**\n     * Lädt ein Landmark-Bild aus den Assets\n     */\n    private fun loadLandmarkImage(landmarkId: String): Bitmap? {\n        return try {\n            // Versuche verschiedene Bildformate\n            val possiblePaths = listOf(\n                \"landmarks/$landmarkId.jpg\",\n                \"landmarks/$landmarkId.png\",\n                \"images/$landmarkId.jpg\",\n                \"images/$landmarkId.png\"\n            )\n            \n            for (path in possiblePaths) {\n                try {\n                    val inputStream = context.assets.open(path)\n                    val bitmap = BitmapFactory.decodeStream(inputStream)\n                    inputStream.close()\n                    if (bitmap != null) {\n                        Log.d(TAG, \"Landmark-Bild geladen: $path\")\n                        return bitmap\n                    }\n                } catch (e: Exception) {\n                    // Nächsten Pfad versuchen\n                }\n            }\n            \n            Log.w(TAG, \"Kein Bild gefunden für Landmark: $landmarkId\")\n            null\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler beim Laden des Landmark-Bildes $landmarkId: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Extrahiert Features aus einem Bitmap\n     */\n    private fun extractFeaturesFromBitmap(bitmap: Bitmap, landmark: ProcessedLandmark): LandmarkFeatures? {\n        return try {\n            // Konvertiere Bitmap zu OpenCV Mat\n            val mat = Mat()\n            Utils.bitmapToMat(bitmap, mat)\n            \n            // Konvertiere zu Graustufen falls nötig\n            val grayMat = Mat()\n            if (mat.channels() > 1) {\n                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)\n            } else {\n                grayMat = mat.clone()\n            }\n            \n            // Extrahiere ORB Features\n            val keypoints = MatOfKeyPoint()\n            val descriptors = Mat()\n            \n            orb.detectAndCompute(grayMat, Mat(), keypoints, descriptors)\n            \n            if (descriptors.rows() > 0) {\n                Log.d(TAG, \"Extrahiert ${keypoints.toArray().size} Features für ${landmark.id}\")\n                LandmarkFeatures(keypoints, descriptors, landmark)\n            } else {\n                Log.w(TAG, \"Keine Features extrahiert für ${landmark.id}\")\n                null\n            }\n            \n        } catch (e: Exception) {\n            Log.e(TAG, \"Fehler bei Feature-Extraktion für ${landmark.id}: ${e.message}\")\n            null\n        }\n    }\n    \n    /**\n     * Legacy-Methoden für Kompatibilität\n     */\n    fun extractFeatures(bitmap: Bitmap): LandmarkFeatures? {\n        val dummyLandmark = ProcessedLandmark(\"temp\", \"temp\")\n        return extractFeaturesFromBitmap(bitmap, dummyLandmark)\n    }\n    \n    fun matchFeatures(frame: Mat, landmarks: List<ProcessedLandmark>): List<FeatureMatchResult> {\n        return processFrame(frame)\n    }\n    \n    fun processLandmarkFeatures(landmark: Any, features: Any, bitmap: Bitmap): ProcessedLandmark? {\n        Log.d(TAG, \"processLandmarkFeatures called (legacy)\")\n        return null\n    }\n}\n\nclass LandmarkFeatureStorage(private val context: android.content.Context) {\n    \n    private val TAG = \"LandmarkFeatureStorage\"\n    \n    init {\n        Log.i(TAG, \"LandmarkFeatureStorage initialized (stub)\")\n    }\n    \n    fun importLandmarksFromAssets(): Int {\n        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")\n        return 0\n    }\n    \n    fun loadRouteSpecificLandmarks(route: com.example.arwalking.data.Route): List<ProcessedLandmark> {\n        Log.d(TAG, \"loadRouteSpecificLandmarks called (stub)\")\n        return emptyList()\n    }\n    \n    fun loadAllLandmarks(): List<ProcessedLandmark> {\n        Log.d(TAG, \"loadAllLandmarks called (stub)\")\n        return emptyList()\n    }\n    \n    fun getStorageStats(): StorageStats {\n        Log.d(TAG, \"getStorageStats called (stub)\")\n        return StorageStats()\n    }\n    \n    fun cleanup() {\n        Log.d(TAG, \"cleanup called (stub)\")\n    }\n    \n    fun saveLandmarkFeatures(landmarkId: String, landmark: Any, features: Any, bitmap: android.graphics.Bitmap): Boolean {\n        Log.d(TAG, \"saveLandmarkFeatures called (stub): $landmarkId\")\n        return true\n    }\n}\n\nclass ARTrackingSystem {\n    \n    private val TAG = \"ARTrackingSystem\"\n    \n    init {\n        Log.i(TAG, \"ARTrackingSystem initialized (stub)\")\n    }\n    \n    fun resetTracking() {\n        Log.d(TAG, \"resetTracking called (stub)\")\n    }\n    \n    fun updateTracking(matches: List<FeatureMatchResult>): List<Any> {\n        Log.d(TAG, \"updateTracking called (stub)\")\n        return emptyList()\n    }\n}\n\ndata class ProcessedLandmark(\n    val id: String,\n    val name: String\n)\n\ndata class FeatureMatchResult(\n    val landmarkId: String,\n    val confidence: Float,\n    val landmark: ProcessedLandmark? = null,\n    val matchCount: Int = 0,\n    val distance: Float? = null,\n    val angle: Float? = null,\n    val screenPosition: android.graphics.PointF? = null\n)\n\nclass StorageStats {\n    val landmarkCount: Int = 0\n    \n    fun getTotalSizeMB(): Double = 0.0\n}","baseTimestamp":1754560053369,"deltas":[{"timestamp":1754924354109,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import kotlinx.coroutines.*"},{"type":"DELETE","lineNumber":39,"oldContent":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")"},{"type":"DELETE","lineNumber":41,"oldContent":""},{"type":"DELETE","lineNumber":43,"oldContent":"    /**"},{"type":"INSERT","lineNumber":40,"content":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"    /**"},{"type":"MODIFY","lineNumber":52,"content":"            ","oldContent":"            "},{"type":"INSERT","lineNumber":54,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"DELETE","lineNumber":56,"oldContent":"                return false"},{"type":"INSERT","lineNumber":58,"content":"            var successCount = 0"},{"type":"DELETE","lineNumber":61,"oldContent":"            var successCount = 0"},{"type":"DELETE","lineNumber":64,"oldContent":"            "},{"type":"DELETE","lineNumber":66,"oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":64,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"MODIFY","lineNumber":73,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":74,"content":"    }"},{"type":"DELETE","lineNumber":77,"oldContent":"        }"},{"type":"DELETE","lineNumber":89,"oldContent":"                    Log.d(TAG, \"🏷️ Landmark-ID: $landmarkId\")"},{"type":"DELETE","lineNumber":91,"oldContent":"                }"},{"type":"INSERT","lineNumber":90,"content":"                    Log.d(TAG, \"🏷️ Landmark-ID: $landmarkId\")"},{"type":"INSERT","lineNumber":91,"content":"                }"},{"type":"INSERT","lineNumber":100,"content":""},{"type":"INSERT","lineNumber":101,"content":"    /**"},{"type":"DELETE","lineNumber":103,"oldContent":""},{"type":"DELETE","lineNumber":105,"oldContent":"    /**"},{"type":"INSERT","lineNumber":118,"content":"            Utils.bitmapToMat(bitmap, mat)"},{"type":"DELETE","lineNumber":120,"oldContent":"            "},{"type":"DELETE","lineNumber":122,"oldContent":"            val grayMat = Mat()"},{"type":"DELETE","lineNumber":123,"oldContent":"            if (mat.channels() > 1) {"},{"type":"DELETE","lineNumber":124,"oldContent":"                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":121,"content":"            val grayMat = if (mat.channels() > 1) {"},{"type":"INSERT","lineNumber":122,"content":"                val gray = Mat()"},{"type":"INSERT","lineNumber":123,"content":"                Imgproc.cvtColor(mat, gray, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":124,"content":"                gray"},{"type":"MODIFY","lineNumber":126,"content":"                mat.clone()","oldContent":"                grayMat = mat.clone()"},{"type":"INSERT","lineNumber":128,"content":"            "},{"type":"DELETE","lineNumber":129,"oldContent":"            // Features extrahieren"},{"type":"INSERT","lineNumber":135,"content":"            val keypointArray = keypoints.toArray()"},{"type":"DELETE","lineNumber":136,"oldContent":"            Log.d(TAG, \"🎯 Features: ${keypointArray.size} Keypoints, ${descriptors.rows()} Descriptors\")"},{"type":"INSERT","lineNumber":141,"content":"                    keypoints = keypoints,"},{"type":"DELETE","lineNumber":143,"oldContent":"                    keypoints = keypoints,"},{"type":"DELETE","lineNumber":145,"oldContent":"                Log.i(TAG, \"✅ Features gespeichert für: $landmarkId\")"},{"type":"MODIFY","lineNumber":147,"content":"                Log.i(TAG, \"✅ Features gespeichert für: $landmarkId\")","oldContent":"                "},{"type":"INSERT","lineNumber":148,"content":"                "},{"type":"INSERT","lineNumber":149,"content":"                // Cleanup"},{"type":"DELETE","lineNumber":151,"oldContent":"                // Cleanup"},{"type":"DELETE","lineNumber":159,"oldContent":"            }"},{"type":"INSERT","lineNumber":160,"content":"                grayMat.release()"},{"type":"INSERT","lineNumber":161,"content":"                false"},{"type":"INSERT","lineNumber":162,"content":"            }"},{"type":"DELETE","lineNumber":163,"oldContent":"                grayMat.release()"},{"type":"DELETE","lineNumber":165,"oldContent":"                false"},{"type":"INSERT","lineNumber":173,"content":"    private fun loadLandmarkBitmap(landmarkId: String): Bitmap? {"},{"type":"DELETE","lineNumber":174,"oldContent":"        val paths = listOf("},{"type":"MODIFY","lineNumber":178,"content":"        ","oldContent":"        "},{"type":"MODIFY","lineNumber":183,"content":"                    if (bitmap != null) {","oldContent":"                    if (bitmap != null) {"},{"type":"MODIFY","lineNumber":186,"content":"                    }","oldContent":"                    }"},{"type":"INSERT","lineNumber":192,"content":"        "},{"type":"DELETE","lineNumber":194,"oldContent":"        "},{"type":"DELETE","lineNumber":196,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":198,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":197,"content":"     * Verarbeitet Kamera-Frame"},{"type":"INSERT","lineNumber":199,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"MODIFY","lineNumber":202,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":204,"oldContent":"            // Frame zu Graustufen"},{"type":"DELETE","lineNumber":206,"oldContent":"            val grayFrame = Mat()"},{"type":"DELETE","lineNumber":209,"oldContent":"            if (frame.channels() > 1) {"},{"type":"DELETE","lineNumber":210,"oldContent":"                Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":207,"content":"            // Frame zu Graustufen"},{"type":"INSERT","lineNumber":208,"content":"            val grayFrame = if (frame.channels() > 1) {"},{"type":"INSERT","lineNumber":209,"content":"                val gray = Mat()"},{"type":"INSERT","lineNumber":210,"content":"                Imgproc.cvtColor(frame, gray, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":211,"content":"                gray"},{"type":"INSERT","lineNumber":213,"content":"                frame.clone()"},{"type":"DELETE","lineNumber":214,"oldContent":"                grayFrame = frame.clone()"},{"type":"INSERT","lineNumber":222,"content":"            val frameKeypointArray = frameKeypoints.toArray()"},{"type":"DELETE","lineNumber":222,"oldContent":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"DELETE","lineNumber":228,"oldContent":"            "},{"type":"DELETE","lineNumber":230,"oldContent":"            // Matche gegen Landmarks"},{"type":"INSERT","lineNumber":231,"content":"            "},{"type":"INSERT","lineNumber":232,"content":"            // Matche gegen Landmarks"},{"type":"DELETE","lineNumber":233,"oldContent":"                val matchResult = matchWithLandmark("},{"type":"DELETE","lineNumber":234,"oldContent":"                    frameKeypoints, frameDescriptors, landmarkFeature, frame"},{"type":"INSERT","lineNumber":236,"content":"                val matchResult = matchWithLandmark("},{"type":"INSERT","lineNumber":237,"content":"                    frameKeypoints, frameDescriptors, landmarkFeature, frame"},{"type":"INSERT","lineNumber":238,"content":"                )"},{"type":"DELETE","lineNumber":239,"oldContent":"                )"},{"type":"DELETE","lineNumber":241,"oldContent":"                }"},{"type":"INSERT","lineNumber":243,"content":"                }"},{"type":"DELETE","lineNumber":251,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":253,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":254,"content":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"INSERT","lineNumber":255,"content":"            emptyList()"},{"type":"DELETE","lineNumber":255,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":257,"oldContent":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"DELETE","lineNumber":270,"oldContent":"            "},{"type":"INSERT","lineNumber":272,"content":"            "},{"type":"DELETE","lineNumber":273,"oldContent":"                matches.release()"},{"type":"INSERT","lineNumber":275,"content":"                matches.release()"},{"type":"DELETE","lineNumber":276,"oldContent":"            val goodMatches = matchArray.filter { it.distance < 50.0f }"},{"type":"DELETE","lineNumber":278,"oldContent":"            if (goodMatches.size < 10) {"},{"type":"MODIFY","lineNumber":280,"content":"            val goodMatches = matchArray.filter { it.distance < 50.0f }","oldContent":"                matches.release()"},{"type":"INSERT","lineNumber":281,"content":"            if (goodMatches.size < 10) {"},{"type":"INSERT","lineNumber":282,"content":"                matches.release()"},{"type":"INSERT","lineNumber":294,"content":"            for (match in goodMatches) {"},{"type":"DELETE","lineNumber":294,"oldContent":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"INSERT","lineNumber":315,"content":"                matchCount = goodMatches.size,"},{"type":"DELETE","lineNumber":315,"oldContent":"                position = avgPosition"},{"type":"INSERT","lineNumber":318,"content":"            "},{"type":"DELETE","lineNumber":318,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":322,"oldContent":"     * Debug-Info"},{"type":"DELETE","lineNumber":324,"oldContent":"    fun getDebugInfo(): String {"},{"type":"MODIFY","lineNumber":326,"content":"     * Debug-Info","oldContent":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"DELETE","lineNumber":329,"oldContent":"     * Storage-Stats"},{"type":"INSERT","lineNumber":328,"content":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":329,"content":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"DELETE","lineNumber":331,"oldContent":"    fun getStorageStats(): StorageStats {"},{"type":"DELETE","lineNumber":333,"oldContent":"        return StorageStats(landmarkFeatures.size, 0L)"},{"type":"DELETE","lineNumber":335,"oldContent":"    }"},{"type":"DELETE","lineNumber":336,"oldContent":"}"},{"type":"INSERT","lineNumber":333,"content":"     * Storage-Stats"},{"type":"INSERT","lineNumber":335,"content":"    fun getStorageStats(): StorageStats {"},{"type":"INSERT","lineNumber":336,"content":"        return StorageStats(landmarkFeatures.size, 0L)"},{"type":"INSERT","lineNumber":337,"content":"    }"},{"type":"MODIFY","lineNumber":340,"content":"     * Legacy-Methoden","oldContent":"/**"},{"type":"MODIFY","lineNumber":342,"content":"    fun importLandmarksFromAssets(): Int = landmarkFeatures.size","oldContent":" * Storage-Statistiken Datenklasse"},{"type":"INSERT","lineNumber":343,"content":"    "},{"type":"INSERT","lineNumber":344,"content":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"DELETE","lineNumber":344,"oldContent":" */"},{"type":"DELETE","lineNumber":346,"oldContent":"data class StorageStats("},{"type":"DELETE","lineNumber":348,"oldContent":"    val landmarkCount: Int,"},{"type":"DELETE","lineNumber":349,"oldContent":"    val totalSizeBytes: Long"},{"type":"DELETE","lineNumber":351,"oldContent":") {"},{"type":"DELETE","lineNumber":352,"oldContent":"    fun getTotalSizeMB(): Double = totalSizeBytes / (1024.0 * 1024.0)"},{"type":"DELETE","lineNumber":354,"oldContent":"}"},{"type":"DELETE","lineNumber":355,"oldContent":""},{"type":"INSERT","lineNumber":350,"content":"     */"},{"type":"DELETE","lineNumber":357,"oldContent":"     * Legacy-Methoden"},{"type":"DELETE","lineNumber":360,"oldContent":"    fun importLandmarksFromAssets(): Int = landmarkFeatures.size"},{"type":"DELETE","lineNumber":361,"oldContent":"    "},{"type":"DELETE","lineNumber":363,"oldContent":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"INSERT","lineNumber":356,"content":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":368,"oldContent":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":369,"oldContent":"     */"},{"type":"INSERT","lineNumber":360,"content":""},{"type":"INSERT","lineNumber":361,"content":"/**"},{"type":"INSERT","lineNumber":362,"content":" * Storage-Statistiken Datenklasse"},{"type":"INSERT","lineNumber":363,"content":" */"},{"type":"INSERT","lineNumber":364,"content":"data class StorageStats("},{"type":"INSERT","lineNumber":365,"content":"    val landmarkCount: Int,"},{"type":"INSERT","lineNumber":366,"content":"    val totalSizeBytes: Long"},{"type":"INSERT","lineNumber":367,"content":") {"},{"type":"INSERT","lineNumber":368,"content":"    fun getTotalSizeMB(): Double = totalSizeBytes / (1024.0 * 1024.0)"},{"type":"INSERT","lineNumber":369,"content":"}"}]},{"timestamp":1754924429234,"changes":[{"type":"DELETE","lineNumber":38,"oldContent":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")"},{"type":"DELETE","lineNumber":40,"oldContent":""},{"type":"DELETE","lineNumber":42,"oldContent":"    /**"},{"type":"INSERT","lineNumber":40,"content":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")"},{"type":"INSERT","lineNumber":42,"content":""},{"type":"INSERT","lineNumber":43,"content":"    /**"},{"type":"DELETE","lineNumber":51,"oldContent":"            "},{"type":"DELETE","lineNumber":53,"oldContent":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":52,"content":"            "},{"type":"INSERT","lineNumber":54,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"MODIFY","lineNumber":58,"content":"            var successCount = 0","oldContent":"            var successCount = 0"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"DELETE","lineNumber":65,"oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":64,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":72,"content":"            false"},{"type":"DELETE","lineNumber":74,"oldContent":"            false"},{"type":"DELETE","lineNumber":88,"oldContent":"                    Log.d(TAG, \"🏷️ Landmark-ID: $landmarkId\")"},{"type":"MODIFY","lineNumber":90,"content":"                    Log.d(TAG, \"🏷️ Landmark-ID: $landmarkId\")","oldContent":"                }"},{"type":"INSERT","lineNumber":91,"content":"                }"},{"type":"MODIFY","lineNumber":100,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":118,"content":"            Utils.bitmapToMat(bitmap, mat)","oldContent":"            Utils.bitmapToMat(bitmap, mat)"},{"type":"DELETE","lineNumber":120,"oldContent":"            val grayMat = if (mat.channels() > 1) {"},{"type":"DELETE","lineNumber":122,"oldContent":"                val gray = Mat()"},{"type":"DELETE","lineNumber":123,"oldContent":"                Imgproc.cvtColor(mat, gray, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":124,"oldContent":"                gray"},{"type":"INSERT","lineNumber":121,"content":"            val grayMat = Mat()"},{"type":"INSERT","lineNumber":122,"content":"            if (mat.channels() > 1) {"},{"type":"INSERT","lineNumber":123,"content":"                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)"},{"type":"MODIFY","lineNumber":125,"content":"                mat.copyTo(grayMat)","oldContent":"                mat.clone()"},{"type":"INSERT","lineNumber":145,"content":"                landmarkFeatures[landmarkId] = landmarkFeature"},{"type":"DELETE","lineNumber":148,"oldContent":"                landmarkFeatures[landmarkId] = landmarkFeature"},{"type":"MODIFY","lineNumber":159,"content":"                grayMat.release()","oldContent":"                grayMat.release()"},{"type":"MODIFY","lineNumber":162,"content":"            ","oldContent":"            "},{"type":"INSERT","lineNumber":176,"content":"        )"},{"type":"DELETE","lineNumber":178,"oldContent":"        "},{"type":"INSERT","lineNumber":181,"content":"                    val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"DELETE","lineNumber":183,"oldContent":"                    if (bitmap != null) {"},{"type":"INSERT","lineNumber":184,"content":"                        return bitmap"},{"type":"DELETE","lineNumber":186,"oldContent":"                    }"},{"type":"DELETE","lineNumber":196,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":198,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":196,"content":"     * Verarbeitet Kamera-Frame"},{"type":"INSERT","lineNumber":198,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":200,"content":"            return emptyList()"},{"type":"DELETE","lineNumber":202,"oldContent":"        }"},{"type":"DELETE","lineNumber":205,"oldContent":"            // Frame zu Graustufen"},{"type":"DELETE","lineNumber":207,"oldContent":"            val grayFrame = if (frame.channels() > 1) {"},{"type":"INSERT","lineNumber":206,"content":"            // Frame zu Graustufen"},{"type":"INSERT","lineNumber":207,"content":"            val grayFrame = if (frame.channels() > 1) {"},{"type":"MODIFY","lineNumber":213,"content":"            }","oldContent":"            }"},{"type":"MODIFY","lineNumber":222,"content":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")","oldContent":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"MODIFY","lineNumber":230,"content":"            ","oldContent":"            "},{"type":"MODIFY","lineNumber":235,"content":"                val matchResult = matchWithLandmark(","oldContent":"                val matchResult = matchWithLandmark("},{"type":"MODIFY","lineNumber":238,"content":"                ","oldContent":"                "},{"type":"DELETE","lineNumber":254,"oldContent":"        }"},{"type":"MODIFY","lineNumber":255,"content":"        }","oldContent":"    }"},{"type":"INSERT","lineNumber":256,"content":"    }"},{"type":"INSERT","lineNumber":278,"content":"            // Filtere gute Matches"},{"type":"DELETE","lineNumber":281,"oldContent":"            // Filtere gute Matches"},{"type":"MODIFY","lineNumber":294,"content":"                if (match.queryIdx < frameKeypointArray.size) {","oldContent":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"MODIFY","lineNumber":315,"content":"                position = avgPosition","oldContent":"                position = avgPosition"},{"type":"MODIFY","lineNumber":318,"content":"        } catch (e: Exception) {","oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":325,"oldContent":"     * Debug-Info"},{"type":"DELETE","lineNumber":327,"oldContent":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":325,"content":"     * Debug-Info"},{"type":"INSERT","lineNumber":327,"content":"    fun getDebugInfo(): String {"},{"type":"MODIFY","lineNumber":332,"content":"     * Storage-Stats","oldContent":"     * Storage-Stats"},{"type":"INSERT","lineNumber":333,"content":"     */"},{"type":"DELETE","lineNumber":337,"oldContent":"     */"},{"type":"MODIFY","lineNumber":344,"content":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")","oldContent":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")"},{"type":"DELETE","lineNumber":348,"oldContent":"     */"},{"type":"DELETE","lineNumber":351,"oldContent":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":349,"content":"     */"},{"type":"INSERT","lineNumber":353,"content":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":354,"content":"        }"},{"type":"INSERT","lineNumber":355,"content":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":356,"content":"        isInitialized = false"},{"type":"INSERT","lineNumber":357,"content":"    }"},{"type":"INSERT","lineNumber":358,"content":"}"},{"type":"DELETE","lineNumber":358,"oldContent":"            feature.descriptors.release()"},{"type":"DELETE","lineNumber":361,"oldContent":"        }"},{"type":"DELETE","lineNumber":363,"oldContent":"        isInitialized = false"},{"type":"DELETE","lineNumber":365,"oldContent":"    }"},{"type":"DELETE","lineNumber":367,"oldContent":"}"}]},{"timestamp":1754924435014,"changes":[{"type":"MODIFY","lineNumber":40,"content":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")","oldContent":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")"},{"type":"INSERT","lineNumber":41,"content":"    }"},{"type":"DELETE","lineNumber":43,"oldContent":"    }"},{"type":"DELETE","lineNumber":51,"oldContent":"            "},{"type":"DELETE","lineNumber":53,"oldContent":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":52,"content":"            "},{"type":"INSERT","lineNumber":54,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":57,"content":"            "},{"type":"DELETE","lineNumber":58,"oldContent":"            var successCount = 0"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"DELETE","lineNumber":65,"oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":64,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":89,"content":"                    landmarkIds.add(landmarkId)"},{"type":"DELETE","lineNumber":91,"oldContent":"                    landmarkIds.add(landmarkId)"},{"type":"INSERT","lineNumber":99,"content":"    }"},{"type":"DELETE","lineNumber":100,"oldContent":""},{"type":"INSERT","lineNumber":117,"content":"            val mat = Mat()"},{"type":"DELETE","lineNumber":118,"oldContent":"            Utils.bitmapToMat(bitmap, mat)"},{"type":"MODIFY","lineNumber":121,"content":"            val grayMat = Mat()","oldContent":"            val grayMat = Mat()"},{"type":"INSERT","lineNumber":124,"content":"            } else {"},{"type":"DELETE","lineNumber":125,"oldContent":"                mat.clone()"},{"type":"MODIFY","lineNumber":145,"content":"                landmarkFeatures[landmarkId] = landmarkFeature","oldContent":"                landmarkFeatures[landmarkId] = landmarkFeature"},{"type":"MODIFY","lineNumber":159,"content":"                grayMat.release()","oldContent":"                grayMat.release()"},{"type":"MODIFY","lineNumber":162,"content":"            ","oldContent":"            "},{"type":"MODIFY","lineNumber":176,"content":"        )","oldContent":"        )"},{"type":"MODIFY","lineNumber":181,"content":"                    val bitmap = BitmapFactory.decodeStream(inputStream)","oldContent":"                    val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"MODIFY","lineNumber":184,"content":"                        return bitmap","oldContent":"                        return bitmap"},{"type":"DELETE","lineNumber":195,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":197,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":196,"content":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":199,"oldContent":"            return emptyList()"},{"type":"INSERT","lineNumber":198,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":200,"content":"            return emptyList()"},{"type":"DELETE","lineNumber":204,"oldContent":"            // Frame zu Graustufen"},{"type":"DELETE","lineNumber":206,"oldContent":"            val grayFrame = if (frame.channels() > 1) {"},{"type":"DELETE","lineNumber":208,"oldContent":"                val gray = Mat()"},{"type":"DELETE","lineNumber":209,"oldContent":"                Imgproc.cvtColor(frame, gray, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":210,"oldContent":"                gray"},{"type":"INSERT","lineNumber":206,"content":"            // Frame zu Graustufen"},{"type":"INSERT","lineNumber":207,"content":"            val grayFrame = Mat()"},{"type":"INSERT","lineNumber":208,"content":"            if (frame.channels() > 1) {"},{"type":"INSERT","lineNumber":209,"content":"                Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":211,"content":"                frame.copyTo(grayFrame)"},{"type":"DELETE","lineNumber":213,"oldContent":"                frame.clone()"},{"type":"MODIFY","lineNumber":221,"content":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")","oldContent":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"MODIFY","lineNumber":229,"content":"            ","oldContent":"            "},{"type":"MODIFY","lineNumber":234,"content":"                val matchResult = matchWithLandmark(","oldContent":"                val matchResult = matchWithLandmark("},{"type":"MODIFY","lineNumber":237,"content":"                ","oldContent":"                "},{"type":"INSERT","lineNumber":252,"content":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"INSERT","lineNumber":253,"content":"            emptyList()"},{"type":"DELETE","lineNumber":255,"oldContent":"    }"},{"type":"DELETE","lineNumber":256,"oldContent":"            emptyList()"},{"type":"MODIFY","lineNumber":277,"content":"            // Filtere gute Matches","oldContent":"            // Filtere gute Matches"},{"type":"MODIFY","lineNumber":293,"content":"                if (match.queryIdx < frameKeypointArray.size) {","oldContent":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"MODIFY","lineNumber":314,"content":"                position = avgPosition","oldContent":"                position = avgPosition"},{"type":"MODIFY","lineNumber":317,"content":"        } catch (e: Exception) {","oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":324,"oldContent":"     * Debug-Info"},{"type":"DELETE","lineNumber":326,"oldContent":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":324,"content":"     * Debug-Info"},{"type":"INSERT","lineNumber":326,"content":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":330,"content":"    /**"},{"type":"DELETE","lineNumber":333,"oldContent":"    /**"},{"type":"MODIFY","lineNumber":343,"content":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")","oldContent":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")"},{"type":"MODIFY","lineNumber":348,"content":"     */","oldContent":"     */"},{"type":"DELETE","lineNumber":351,"oldContent":"            feature.descriptors.release()"},{"type":"DELETE","lineNumber":353,"oldContent":"        }"},{"type":"INSERT","lineNumber":352,"content":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":353,"content":"        }"},{"type":"DELETE","lineNumber":356,"oldContent":""},{"type":"DELETE","lineNumber":358,"oldContent":"/**"},{"type":"DELETE","lineNumber":360,"oldContent":" * Storage-Statistiken Datenklasse"},{"type":"INSERT","lineNumber":358,"content":""},{"type":"INSERT","lineNumber":359,"content":"/**"},{"type":"INSERT","lineNumber":360,"content":" * Storage-Statistiken Datenklasse"}]},{"timestamp":1754924552119,"changes":[{"type":"INSERT","lineNumber":39,"content":"    init {"},{"type":"DELETE","lineNumber":40,"oldContent":"        Log.i(TAG, \"🚀 FeatureMatchingEngine initialisiert\")"},{"type":"DELETE","lineNumber":51,"oldContent":"            "},{"type":"DELETE","lineNumber":53,"oldContent":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":52,"content":"            "},{"type":"INSERT","lineNumber":54,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"DELETE","lineNumber":65,"oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":64,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":120,"content":"            // Zu Graustufen konvertieren - vereinfacht"},{"type":"DELETE","lineNumber":121,"oldContent":"            val grayMat = Mat()"},{"type":"DELETE","lineNumber":122,"oldContent":"            if (mat.channels() > 1) {"},{"type":"DELETE","lineNumber":123,"oldContent":"                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":124,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":125,"oldContent":"                mat.copyTo(grayMat)"},{"type":"DELETE","lineNumber":126,"oldContent":"            }"},{"type":"INSERT","lineNumber":122,"content":"            Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":140,"content":"                "},{"type":"DELETE","lineNumber":145,"oldContent":"                landmarkFeatures[landmarkId] = landmarkFeature"},{"type":"INSERT","lineNumber":154,"content":"                mat.release()"},{"type":"DELETE","lineNumber":159,"oldContent":"                grayMat.release()"},{"type":"INSERT","lineNumber":157,"content":"            }"},{"type":"DELETE","lineNumber":162,"oldContent":"            "},{"type":"INSERT","lineNumber":171,"content":"            \"landmarken_pictures/$landmarkId.png\""},{"type":"MODIFY","lineNumber":176,"content":"                context.assets.open(path).use { inputStream ->","oldContent":"        )"},{"type":"DELETE","lineNumber":181,"oldContent":"                    val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"INSERT","lineNumber":179,"content":"                        Log.d(TAG, \"✅ Bitmap geladen: $path\")"},{"type":"DELETE","lineNumber":184,"oldContent":"                        return bitmap"},{"type":"DELETE","lineNumber":195,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":197,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":192,"content":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":199,"oldContent":"            return emptyList()"},{"type":"INSERT","lineNumber":194,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":196,"content":"            return emptyList()"},{"type":"DELETE","lineNumber":205,"oldContent":"            // Frame zu Graustufen"},{"type":"INSERT","lineNumber":201,"content":"            "},{"type":"INSERT","lineNumber":202,"content":"            // Frame zu Graustufen - vereinfacht"},{"type":"INSERT","lineNumber":204,"content":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":208,"oldContent":"            if (frame.channels() > 1) {"},{"type":"DELETE","lineNumber":209,"oldContent":"                Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":210,"oldContent":"                frame.copyTo(grayFrame)"},{"type":"DELETE","lineNumber":211,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":212,"oldContent":"            }"},{"type":"DELETE","lineNumber":213,"oldContent":"            "},{"type":"DELETE","lineNumber":220,"oldContent":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"INSERT","lineNumber":213,"content":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"DELETE","lineNumber":228,"oldContent":"            "},{"type":"INSERT","lineNumber":221,"content":"            "},{"type":"DELETE","lineNumber":233,"oldContent":"                val matchResult = matchWithLandmark("},{"type":"INSERT","lineNumber":226,"content":"                val matchResult = matchWithLandmark("},{"type":"DELETE","lineNumber":236,"oldContent":"                "},{"type":"INSERT","lineNumber":229,"content":"                "},{"type":"DELETE","lineNumber":251,"oldContent":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"INSERT","lineNumber":244,"content":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"DELETE","lineNumber":276,"oldContent":"            // Filtere gute Matches"},{"type":"INSERT","lineNumber":269,"content":"            // Filtere gute Matches"},{"type":"DELETE","lineNumber":292,"oldContent":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"INSERT","lineNumber":285,"content":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"DELETE","lineNumber":313,"oldContent":"                position = avgPosition"},{"type":"INSERT","lineNumber":306,"content":"                position = avgPosition"},{"type":"DELETE","lineNumber":316,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":309,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":323,"oldContent":"     * Debug-Info"},{"type":"DELETE","lineNumber":325,"oldContent":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":316,"content":"     * Debug-Info"},{"type":"INSERT","lineNumber":318,"content":"    fun getDebugInfo(): String {"},{"type":"DELETE","lineNumber":329,"oldContent":"    /**"},{"type":"INSERT","lineNumber":322,"content":"    /**"},{"type":"DELETE","lineNumber":342,"oldContent":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")"},{"type":"INSERT","lineNumber":335,"content":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")"},{"type":"DELETE","lineNumber":346,"oldContent":"     */"},{"type":"DELETE","lineNumber":347,"oldContent":"     */"},{"type":"INSERT","lineNumber":338,"content":"    /**"},{"type":"INSERT","lineNumber":340,"content":"     */"},{"type":"DELETE","lineNumber":350,"oldContent":"            feature.descriptors.release()"},{"type":"DELETE","lineNumber":352,"oldContent":"        }"},{"type":"INSERT","lineNumber":344,"content":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":345,"content":"        }"},{"type":"INSERT","lineNumber":348,"content":"    }"},{"type":"INSERT","lineNumber":349,"content":"}"},{"type":"DELETE","lineNumber":358,"oldContent":"    }"},{"type":"DELETE","lineNumber":360,"oldContent":"}"}]},{"timestamp":1754925486430,"changes":[{"type":"DELETE","lineNumber":51,"oldContent":"            "},{"type":"DELETE","lineNumber":53,"oldContent":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":52,"content":"            "},{"type":"INSERT","lineNumber":54,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"DELETE","lineNumber":65,"oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":64,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"DELETE","lineNumber":136,"oldContent":"                "},{"type":"INSERT","lineNumber":140,"content":"                "},{"type":"DELETE","lineNumber":150,"oldContent":"                mat.release()"},{"type":"MODIFY","lineNumber":154,"content":"                mat.release()","oldContent":"            }"},{"type":"INSERT","lineNumber":157,"content":"            }"},{"type":"DELETE","lineNumber":167,"oldContent":"            \"landmarken_pictures/$landmarkId.png\""},{"type":"INSERT","lineNumber":171,"content":"            \"landmarken_pictures/$landmarkId.png\""},{"type":"DELETE","lineNumber":173,"oldContent":"                context.assets.open(path).use { inputStream ->"},{"type":"MODIFY","lineNumber":176,"content":"                context.assets.open(path).use { inputStream ->","oldContent":"                        Log.d(TAG, \"✅ Bitmap geladen: $path\")"},{"type":"INSERT","lineNumber":179,"content":"                        Log.d(TAG, \"✅ Bitmap geladen: $path\")"},{"type":"DELETE","lineNumber":188,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":191,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":193,"oldContent":"            return emptyList()"},{"type":"INSERT","lineNumber":192,"content":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":196,"oldContent":"        if (!isInitialized || landmarkFeatures.isEmpty()) {"},{"type":"DELETE","lineNumber":197,"oldContent":"            "},{"type":"INSERT","lineNumber":194,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":195,"content":"        if (!isInitialized) {"},{"type":"INSERT","lineNumber":196,"content":"            Log.w(TAG, \"⚠️ Engine nicht initialisiert\")"},{"type":"INSERT","lineNumber":197,"content":"            return emptyList()"},{"type":"DELETE","lineNumber":199,"oldContent":"            // Frame zu Graustufen - vereinfacht"},{"type":"INSERT","lineNumber":200,"content":"        if (landmarkFeatures.isEmpty()) {"},{"type":"INSERT","lineNumber":201,"content":"            Log.w(TAG, \"⚠️ Keine Landmark-Features geladen\")"},{"type":"INSERT","lineNumber":202,"content":"            return emptyList()"},{"type":"INSERT","lineNumber":203,"content":"        }"},{"type":"INSERT","lineNumber":204,"content":"        "},{"type":"DELETE","lineNumber":202,"oldContent":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":207,"content":"            "},{"type":"INSERT","lineNumber":208,"content":"            // Frame zu Graustufen - vereinfacht"},{"type":"INSERT","lineNumber":210,"content":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":206,"oldContent":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"DELETE","lineNumber":213,"oldContent":"            "},{"type":"INSERT","lineNumber":219,"content":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"DELETE","lineNumber":219,"oldContent":"                val matchResult = matchWithLandmark("},{"type":"DELETE","lineNumber":222,"oldContent":"                "},{"type":"INSERT","lineNumber":227,"content":"            "},{"type":"INSERT","lineNumber":232,"content":"                val matchResult = matchWithLandmark("},{"type":"INSERT","lineNumber":235,"content":"                "},{"type":"DELETE","lineNumber":236,"oldContent":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"INSERT","lineNumber":250,"content":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"DELETE","lineNumber":261,"oldContent":"            // Filtere gute Matches"},{"type":"INSERT","lineNumber":275,"content":"            // Filtere gute Matches"},{"type":"DELETE","lineNumber":277,"oldContent":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"INSERT","lineNumber":291,"content":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"DELETE","lineNumber":298,"oldContent":"                position = avgPosition"},{"type":"DELETE","lineNumber":302,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":312,"content":"                position = avgPosition"},{"type":"DELETE","lineNumber":309,"oldContent":"     * Debug-Info"},{"type":"DELETE","lineNumber":311,"oldContent":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":315,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":316,"oldContent":"    /**"},{"type":"INSERT","lineNumber":322,"content":"     * Debug-Info"},{"type":"INSERT","lineNumber":324,"content":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":328,"content":"    /**"},{"type":"DELETE","lineNumber":327,"oldContent":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")"},{"type":"DELETE","lineNumber":331,"oldContent":"    /**"},{"type":"DELETE","lineNumber":334,"oldContent":"     */"},{"type":"DELETE","lineNumber":338,"oldContent":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":341,"content":"        Log.i(TAG, \"Legacy loadLandmarkFeatures aufgerufen\")"},{"type":"DELETE","lineNumber":340,"oldContent":"        }"},{"type":"DELETE","lineNumber":342,"oldContent":"    }"},{"type":"INSERT","lineNumber":344,"content":"    /**"},{"type":"DELETE","lineNumber":344,"oldContent":"}"},{"type":"INSERT","lineNumber":346,"content":"     */"},{"type":"INSERT","lineNumber":350,"content":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":351,"content":"        }"},{"type":"INSERT","lineNumber":354,"content":"    }"},{"type":"INSERT","lineNumber":355,"content":"}"}]},{"timestamp":1754925493488,"changes":[{"type":"DELETE","lineNumber":51,"oldContent":"            "},{"type":"DELETE","lineNumber":53,"oldContent":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":52,"content":"            "},{"type":"INSERT","lineNumber":54,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"DELETE","lineNumber":65,"oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":64,"content":"            "},{"type":"INSERT","lineNumber":66,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"MODIFY","lineNumber":84,"content":"            Log.i(TAG, \"📁 Scanne landmarken_pictures Ordner...\")","oldContent":"            Log.d(TAG, \"📁 Gefundene Dateien: ${assetFiles.joinToString(\", \")}\")"},{"type":"INSERT","lineNumber":85,"content":"            Log.i(TAG, \"📁 Gefundene Dateien (${assetFiles.size}): ${assetFiles.joinToString(\", \")}\")"},{"type":"DELETE","lineNumber":139,"oldContent":"                "},{"type":"INSERT","lineNumber":141,"content":"                "},{"type":"DELETE","lineNumber":153,"oldContent":"                mat.release()"},{"type":"INSERT","lineNumber":155,"content":"                mat.release()"},{"type":"DELETE","lineNumber":156,"oldContent":"            }"},{"type":"INSERT","lineNumber":158,"content":"            }"},{"type":"DELETE","lineNumber":170,"oldContent":"            \"landmarken_pictures/$landmarkId.png\""},{"type":"INSERT","lineNumber":172,"content":"            \"landmarken_pictures/$landmarkId.png\""},{"type":"DELETE","lineNumber":175,"oldContent":"                context.assets.open(path).use { inputStream ->"},{"type":"INSERT","lineNumber":177,"content":"                context.assets.open(path).use { inputStream ->"},{"type":"DELETE","lineNumber":178,"oldContent":"                        Log.d(TAG, \"✅ Bitmap geladen: $path\")"},{"type":"INSERT","lineNumber":180,"content":"                        Log.d(TAG, \"✅ Bitmap geladen: $path\")"},{"type":"DELETE","lineNumber":190,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"DELETE","lineNumber":192,"oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":194,"oldContent":"        if (!isInitialized) {"},{"type":"INSERT","lineNumber":193,"content":"     * Verarbeitet Kamera-Frame"},{"type":"INSERT","lineNumber":195,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":196,"content":"        if (!isInitialized) {"},{"type":"DELETE","lineNumber":199,"oldContent":"        if (landmarkFeatures.isEmpty()) {"},{"type":"INSERT","lineNumber":201,"content":"        if (landmarkFeatures.isEmpty()) {"},{"type":"DELETE","lineNumber":202,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":205,"oldContent":"            Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"INSERT","lineNumber":206,"content":"        return try {"},{"type":"INSERT","lineNumber":207,"content":"            Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"INSERT","lineNumber":208,"content":"            "},{"type":"INSERT","lineNumber":209,"content":"            // Frame zu Graustufen - vereinfacht"},{"type":"INSERT","lineNumber":211,"content":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"DELETE","lineNumber":209,"oldContent":"            "},{"type":"DELETE","lineNumber":211,"oldContent":"            // Frame zu Graustufen - vereinfacht"},{"type":"DELETE","lineNumber":214,"oldContent":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":220,"content":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"DELETE","lineNumber":223,"oldContent":"            Log.v(TAG, \"🎯 Frame Features: ${frameKeypointArray.size} Keypoints\")"},{"type":"INSERT","lineNumber":228,"content":"            "},{"type":"DELETE","lineNumber":230,"oldContent":"            "},{"type":"INSERT","lineNumber":233,"content":"                val matchResult = matchWithLandmark("},{"type":"INSERT","lineNumber":236,"content":"                "},{"type":"DELETE","lineNumber":236,"oldContent":"                val matchResult = matchWithLandmark("},{"type":"DELETE","lineNumber":240,"oldContent":"                "},{"type":"INSERT","lineNumber":251,"content":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"DELETE","lineNumber":255,"oldContent":"            Log.e(TAG, \"❌ Frame-Processing Fehler: ${e.message}\", e)"},{"type":"INSERT","lineNumber":276,"content":"            // Filtere gute Matches"},{"type":"DELETE","lineNumber":280,"oldContent":"            // Filtere gute Matches"},{"type":"INSERT","lineNumber":292,"content":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"DELETE","lineNumber":296,"oldContent":"                if (match.queryIdx < frameKeypointArray.size) {"},{"type":"INSERT","lineNumber":313,"content":"                position = avgPosition"},{"type":"DELETE","lineNumber":314,"oldContent":"                position = avgPosition"},{"type":"INSERT","lineNumber":316,"content":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":318,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":323,"content":"     * Debug-Info"},{"type":"INSERT","lineNumber":325,"content":"    fun getDebugInfo(): String {"},{"type":"DELETE","lineNumber":325,"oldContent":"     * Debug-Info"},{"type":"INSERT","lineNumber":329,"content":"    /**"},{"type":"DELETE","lineNumber":328,"oldContent":"    fun getDebugInfo(): String {"},{"type":"DELETE","lineNumber":332,"oldContent":"    /**"},{"type":"DELETE","lineNumber":341,"oldContent":"    }"},{"type":"INSERT","lineNumber":343,"content":"    }"},{"type":"DELETE","lineNumber":344,"oldContent":"     * Cleanup"},{"type":"MODIFY","lineNumber":346,"content":"     * Cleanup","oldContent":"    fun cleanup() {"},{"type":"INSERT","lineNumber":348,"content":"    fun cleanup() {"},{"type":"INSERT","lineNumber":351,"content":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":352,"content":"        }"},{"type":"DELETE","lineNumber":352,"oldContent":"            feature.descriptors.release()"},{"type":"INSERT","lineNumber":355,"content":"    }"},{"type":"INSERT","lineNumber":356,"content":"}"},{"type":"DELETE","lineNumber":354,"oldContent":"        }"},{"type":"DELETE","lineNumber":358,"oldContent":"    }"},{"type":"DELETE","lineNumber":360,"oldContent":"}"}]},{"timestamp":1754925768236,"changes":[{"type":"INSERT","lineNumber":12,"content":"import com.example.arwalking.ar.SnapchatStyleARRenderer"},{"type":"DELETE","lineNumber":51,"oldContent":"            "},{"type":"MODIFY","lineNumber":53,"content":"            ","oldContent":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"INSERT","lineNumber":55,"content":"                Log.e(TAG, \"❌ Keine Landmark-Bilder gefunden!\")"},{"type":"DELETE","lineNumber":63,"oldContent":"            "},{"type":"MODIFY","lineNumber":65,"content":"            ","oldContent":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"INSERT","lineNumber":67,"content":"            Log.i(TAG, \"✅ Engine initialisiert: $successCount/${availableLandmarks.size} Landmarks geladen\")"},{"type":"DELETE","lineNumber":192,"oldContent":"     * Verarbeitet Kamera-Frame"},{"type":"MODIFY","lineNumber":194,"content":"     * Verarbeitet Kamera-Frame","oldContent":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"INSERT","lineNumber":196,"content":"    fun processFrame(frame: Mat): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":205,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":207,"content":"        return try {"},{"type":"DELETE","lineNumber":208,"oldContent":"            val grayFrame = Mat()"},{"type":"DELETE","lineNumber":210,"oldContent":"            "},{"type":"DELETE","lineNumber":212,"oldContent":"            // Frame Features extrahieren"},{"type":"INSERT","lineNumber":211,"content":"            val grayFrame = Mat()"},{"type":"INSERT","lineNumber":213,"content":"            "},{"type":"INSERT","lineNumber":214,"content":"            // Frame Features extrahieren"},{"type":"DELETE","lineNumber":220,"oldContent":"            "},{"type":"INSERT","lineNumber":222,"content":"            "},{"type":"DELETE","lineNumber":228,"oldContent":"            // Matche gegen Landmarks"},{"type":"INSERT","lineNumber":230,"content":"            // Matche gegen Landmarks"},{"type":"DELETE","lineNumber":233,"oldContent":"                    frameKeypoints, frameDescriptors, landmarkFeature, frame"},{"type":"INSERT","lineNumber":235,"content":"                    frameKeypoints, frameDescriptors, landmarkFeature, frame"},{"type":"INSERT","lineNumber":237,"content":"                "},{"type":"DELETE","lineNumber":238,"oldContent":"                "},{"type":"DELETE","lineNumber":251,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":253,"content":"            emptyList()"},{"type":"DELETE","lineNumber":276,"oldContent":"            val goodMatches = matchArray.filter { it.distance < 50.0f }"},{"type":"INSERT","lineNumber":278,"content":"            val goodMatches = matchArray.filter { it.distance < 50.0f }"},{"type":"DELETE","lineNumber":292,"oldContent":"                    val kp = frameKeypointArray[match.queryIdx]"},{"type":"INSERT","lineNumber":294,"content":"                    val kp = frameKeypointArray[match.queryIdx]"},{"type":"DELETE","lineNumber":313,"oldContent":"            )"},{"type":"INSERT","lineNumber":315,"content":"            )"},{"type":"DELETE","lineNumber":316,"oldContent":"            Log.e(TAG, \"❌ Matching Fehler mit ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"INSERT","lineNumber":318,"content":"            Log.e(TAG, \"❌ Matching Fehler mit ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"DELETE","lineNumber":323,"oldContent":"     */"},{"type":"INSERT","lineNumber":325,"content":"     */"},{"type":"INSERT","lineNumber":326,"content":"    fun getDebugInfo(): String {"},{"type":"DELETE","lineNumber":327,"oldContent":"    fun getDebugInfo(): String {"},{"type":"DELETE","lineNumber":329,"oldContent":"     * Storage-Stats"},{"type":"INSERT","lineNumber":331,"content":"     * Storage-Stats"},{"type":"DELETE","lineNumber":351,"oldContent":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":353,"oldContent":"        isInitialized = false"},{"type":"DELETE","lineNumber":355,"oldContent":""},{"type":"INSERT","lineNumber":354,"content":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":355,"content":"        isInitialized = false"},{"type":"DELETE","lineNumber":357,"oldContent":"/**"},{"type":"INSERT","lineNumber":358,"content":""},{"type":"INSERT","lineNumber":359,"content":"/**"}]},{"timestamp":1754925773455,"changes":[{"type":"INSERT","lineNumber":30,"content":"    // AR-Renderer für Snapchat-Style Tracking"},{"type":"INSERT","lineNumber":31,"content":"    private val arRenderer = SnapchatStyleARRenderer(context)"},{"type":"INSERT","lineNumber":32,"content":"    "},{"type":"DELETE","lineNumber":210,"oldContent":"            val grayFrame = Mat()"},{"type":"DELETE","lineNumber":212,"oldContent":"            "},{"type":"INSERT","lineNumber":214,"content":"            val grayFrame = Mat()"},{"type":"INSERT","lineNumber":216,"content":"            "},{"type":"DELETE","lineNumber":237,"oldContent":"                if (matchResult != null && matchResult.confidence > 0.3f) {"},{"type":"INSERT","lineNumber":241,"content":"                if (matchResult != null && matchResult.confidence > 0.3f) {"},{"type":"DELETE","lineNumber":326,"oldContent":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"INSERT","lineNumber":330,"content":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"DELETE","lineNumber":353,"oldContent":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":357,"content":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":357,"oldContent":""},{"type":"INSERT","lineNumber":361,"content":""}]},{"timestamp":1754925806471,"changes":[{"type":"DELETE","lineNumber":31,"oldContent":"    // Status"},{"type":"MODIFY","lineNumber":33,"content":"    // Status","oldContent":"    private var isInitialized = false"},{"type":"INSERT","lineNumber":34,"content":"    private var isInitialized = false"},{"type":"INSERT","lineNumber":213,"content":"            // Aktualisiere AR-Renderer Kalibrierung"},{"type":"INSERT","lineNumber":214,"content":"            arRenderer.updateCameraCalibration(frame.cols(), frame.rows())"},{"type":"INSERT","lineNumber":215,"content":"            "},{"type":"DELETE","lineNumber":214,"oldContent":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":218,"content":"            Imgproc.cvtColor(frame, grayFrame, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":219,"content":"            "},{"type":"DELETE","lineNumber":218,"oldContent":"            "},{"type":"INSERT","lineNumber":244,"content":"                if (matchResult != null && matchResult.confidence > 0.3f) {"},{"type":"DELETE","lineNumber":243,"oldContent":"                if (matchResult != null && matchResult.confidence > 0.3f) {"},{"type":"INSERT","lineNumber":333,"content":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"DELETE","lineNumber":332,"oldContent":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"INSERT","lineNumber":360,"content":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":359,"oldContent":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":364,"content":""},{"type":"DELETE","lineNumber":363,"oldContent":""}]},{"timestamp":1754925824187,"changes":[{"type":"MODIFY","lineNumber":10,"content":"import org.opencv.features2d.BFMatcher","oldContent":"import kotlin.math.sqrt"},{"type":"INSERT","lineNumber":32,"content":"    "},{"type":"DELETE","lineNumber":34,"oldContent":"    "},{"type":"DELETE","lineNumber":214,"oldContent":"            // Frame zu Graustufen - vereinfacht"},{"type":"INSERT","lineNumber":216,"content":"            // Frame zu Graustufen - vereinfacht"},{"type":"DELETE","lineNumber":218,"oldContent":"            // Frame Features extrahieren"},{"type":"DELETE","lineNumber":219,"oldContent":"            val frameKeypoints = MatOfKeyPoint()"},{"type":"INSERT","lineNumber":220,"content":"            // Frame Features extrahieren"},{"type":"INSERT","lineNumber":221,"content":"            val frameKeypoints = MatOfKeyPoint()"},{"type":"INSERT","lineNumber":244,"content":"                if (matchResult != null && matchResult.confidence > 0.3f) {"},{"type":"DELETE","lineNumber":246,"oldContent":"                if (matchResult != null && matchResult.confidence > 0.3f) {"},{"type":"MODIFY","lineNumber":294,"content":"            // Berechne Position und sammle Feature-Punkte für AR-Tracking","oldContent":"            // Berechne Position"},{"type":"INSERT","lineNumber":314,"content":"            // AR-Pose-Estimation für Snapchat-Style Tracking"},{"type":"INSERT","lineNumber":315,"content":"            var arPose: SnapchatStyleARRenderer.ARPose? = null"},{"type":"INSERT","lineNumber":316,"content":"            var arObject: SnapchatStyleARRenderer.AR3DObject? = null"},{"type":"INSERT","lineNumber":317,"content":"            "},{"type":"INSERT","lineNumber":318,"content":"            if (positions.size >= 4 && confidence > 0.5f) {"},{"type":"INSERT","lineNumber":319,"content":"                try {"},{"type":"INSERT","lineNumber":320,"content":"                    // Schätze 3D-Pose des Landmarks"},{"type":"INSERT","lineNumber":321,"content":"                    arPose = arRenderer.estimateLandmarkPose(positions.take(4))"},{"type":"INSERT","lineNumber":322,"content":"                    "},{"type":"INSERT","lineNumber":323,"content":"                    if (arPose != null && arPose.confidence > 0.3f) {"},{"type":"INSERT","lineNumber":324,"content":"                        // Berechne AR-Pfeil-Position (zeigt nach rechts als Beispiel)"},{"type":"INSERT","lineNumber":325,"content":"                        arObject = arRenderer.calculateArrowPosition("},{"type":"INSERT","lineNumber":326,"content":"                            arPose, "},{"type":"INSERT","lineNumber":327,"content":"                            navigationDirection = 90f,  // 90° = rechts"},{"type":"INSERT","lineNumber":328,"content":"                            distance = 1.5f"},{"type":"INSERT","lineNumber":329,"content":"                        )"},{"type":"INSERT","lineNumber":330,"content":"                        "},{"type":"INSERT","lineNumber":331,"content":"                        Log.d(TAG, \"🎯 AR-Tracking: ${landmarkFeature.landmarkId} - Pose: ${arPose.confidence}\")"},{"type":"INSERT","lineNumber":332,"content":"                    }"},{"type":"INSERT","lineNumber":333,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":334,"content":"                    Log.w(TAG, \"⚠️ AR-Tracking Fehler für ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"INSERT","lineNumber":335,"content":"                }"},{"type":"INSERT","lineNumber":336,"content":"            }"},{"type":"INSERT","lineNumber":337,"content":"            "},{"type":"DELETE","lineNumber":320,"oldContent":"                position = avgPosition"},{"type":"INSERT","lineNumber":344,"content":"                position = avgPosition,"},{"type":"INSERT","lineNumber":345,"content":"                arPose = arPose,"},{"type":"INSERT","lineNumber":346,"content":"                arObject = arObject"},{"type":"INSERT","lineNumber":359,"content":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"DELETE","lineNumber":335,"oldContent":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"INSERT","lineNumber":386,"content":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":362,"oldContent":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":390,"content":""},{"type":"DELETE","lineNumber":366,"oldContent":""},{"type":"INSERT","lineNumber":399,"content":"}"}]},{"timestamp":1754925894286,"changes":[{"type":"MODIFY","lineNumber":9,"content":"import org.opencv.features2d.ORB","oldContent":"import org.opencv.imgproc.Imgproc"},{"type":"MODIFY","lineNumber":11,"content":"import org.opencv.imgproc.Imgproc","oldContent":""},{"type":"MODIFY","lineNumber":13,"content":"","oldContent":" */"},{"type":"MODIFY","lineNumber":36,"content":"    data class LandmarkFeatures(","oldContent":"            if (frameDescriptors.rows() == 0) {"},{"type":"DELETE","lineNumber":38,"oldContent":"                Log.d(TAG, \"Keine Features im Frame gefunden\")"},{"type":"DELETE","lineNumber":39,"oldContent":"                return emptyList()"},{"type":"INSERT","lineNumber":38,"content":"        val keypoints: MatOfKeyPoint,"},{"type":"INSERT","lineNumber":39,"content":"        val descriptors: Mat,"},{"type":"MODIFY","lineNumber":216,"content":"            // Frame zu Graustufen - vereinfacht","oldContent":"            // Frame zu Graustufen - vereinfacht"},{"type":"DELETE","lineNumber":218,"oldContent":"            // Frame Features extrahieren"},{"type":"MODIFY","lineNumber":220,"content":"            // Frame Features extrahieren","oldContent":"            val frameKeypoints = MatOfKeyPoint()"},{"type":"INSERT","lineNumber":221,"content":"            val frameKeypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":315,"oldContent":"            matches.release()"},{"type":"DELETE","lineNumber":317,"oldContent":"            "},{"type":"DELETE","lineNumber":319,"oldContent":"            FeatureMatchResult("},{"type":"DELETE","lineNumber":321,"oldContent":"                landmarkId = landmarkFeature.landmarkId,"},{"type":"DELETE","lineNumber":323,"oldContent":"                confidence = confidence,"},{"type":"DELETE","lineNumber":325,"oldContent":"                matchCount = goodMatches.size,"},{"type":"DELETE","lineNumber":328,"oldContent":"            )"},{"type":"DELETE","lineNumber":330,"oldContent":"            "},{"type":"DELETE","lineNumber":332,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":334,"oldContent":"            Log.e(TAG, \"❌ Matching Fehler mit ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"DELETE","lineNumber":336,"oldContent":"            null"},{"type":"DELETE","lineNumber":338,"oldContent":"        }"},{"type":"DELETE","lineNumber":340,"oldContent":"    }"},{"type":"DELETE","lineNumber":342,"oldContent":""},{"type":"DELETE","lineNumber":344,"oldContent":"    /**"},{"type":"DELETE","lineNumber":346,"oldContent":"     * Debug-Info"},{"type":"DELETE","lineNumber":348,"oldContent":"     */"},{"type":"DELETE","lineNumber":350,"oldContent":"    fun getDebugInfo(): String {"},{"type":"DELETE","lineNumber":352,"oldContent":"    }"},{"type":"DELETE","lineNumber":354,"oldContent":""},{"type":"DELETE","lineNumber":357,"oldContent":"    /**"},{"type":"INSERT","lineNumber":338,"content":"            matches.release()"},{"type":"INSERT","lineNumber":339,"content":"            "},{"type":"INSERT","lineNumber":340,"content":"            FeatureMatchResult("},{"type":"INSERT","lineNumber":341,"content":"                landmarkId = landmarkFeature.landmarkId,"},{"type":"INSERT","lineNumber":342,"content":"                confidence = confidence,"},{"type":"INSERT","lineNumber":343,"content":"                matchCount = goodMatches.size,"},{"type":"INSERT","lineNumber":344,"content":"                position = avgPosition,"},{"type":"INSERT","lineNumber":345,"content":"                arPose = arPose,"},{"type":"INSERT","lineNumber":346,"content":"                arObject = arObject"},{"type":"INSERT","lineNumber":347,"content":"            )"},{"type":"INSERT","lineNumber":348,"content":"            "},{"type":"INSERT","lineNumber":349,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":350,"content":"            Log.e(TAG, \"❌ Matching Fehler mit ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"INSERT","lineNumber":351,"content":"            null"},{"type":"INSERT","lineNumber":352,"content":"        }"},{"type":"INSERT","lineNumber":353,"content":"    }"},{"type":"INSERT","lineNumber":354,"content":""},{"type":"INSERT","lineNumber":355,"content":"    /**"},{"type":"INSERT","lineNumber":356,"content":"     * Debug-Info"},{"type":"INSERT","lineNumber":357,"content":"     */"},{"type":"INSERT","lineNumber":358,"content":"    fun getDebugInfo(): String {"},{"type":"INSERT","lineNumber":359,"content":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"INSERT","lineNumber":360,"content":"    }"},{"type":"INSERT","lineNumber":361,"content":""},{"type":"INSERT","lineNumber":362,"content":"    /**"},{"type":"DELETE","lineNumber":366,"oldContent":"                position = avgPosition,"},{"type":"DELETE","lineNumber":368,"oldContent":"                arPose = arPose,"},{"type":"DELETE","lineNumber":370,"oldContent":"                arObject = arObject"},{"type":"DELETE","lineNumber":384,"oldContent":"        return \"FeatureMatchingEngine: Initialisiert=$isInitialized, Landmarks=${landmarkFeatures.size}, IDs=${landmarkFeatures.keys.sorted().joinToString(\", \")}\""},{"type":"INSERT","lineNumber":386,"content":"        landmarkFeatures.clear()"},{"type":"INSERT","lineNumber":387,"content":"        arRenderer.cleanup()"},{"type":"INSERT","lineNumber":391,"content":""},{"type":"DELETE","lineNumber":398,"oldContent":""},{"type":"DELETE","lineNumber":399,"oldContent":"        landmarkFeatures.clear()"}]},{"timestamp":1754925976012,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import com.example.arwalking.ar.SimpleARRenderer","oldContent":"import com.example.arwalking.ar.SnapchatStyleARRenderer"},{"type":"INSERT","lineNumber":215,"content":"            "},{"type":"DELETE","lineNumber":216,"oldContent":"            // Frame zu Graustufen - vereinfacht"},{"type":"INSERT","lineNumber":219,"content":"            "},{"type":"DELETE","lineNumber":221,"oldContent":"            "},{"type":"INSERT","lineNumber":327,"content":"                            navigationDirection = 90f,  // 90° = rechts"},{"type":"INSERT","lineNumber":328,"content":"                            distance = 1.5f"},{"type":"INSERT","lineNumber":329,"content":"                        )"},{"type":"INSERT","lineNumber":330,"content":"                        "},{"type":"INSERT","lineNumber":331,"content":"                        Log.d(TAG, \"🎯 AR-Tracking: ${landmarkFeature.landmarkId} - Pose: ${arPose.confidence}\")"},{"type":"INSERT","lineNumber":332,"content":"                    }"},{"type":"INSERT","lineNumber":333,"content":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":334,"content":"                    Log.w(TAG, \"⚠️ AR-Tracking Fehler für ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"INSERT","lineNumber":335,"content":"                }"},{"type":"INSERT","lineNumber":336,"content":"            }"},{"type":"INSERT","lineNumber":337,"content":"            "},{"type":"DELETE","lineNumber":329,"oldContent":"                            navigationDirection = 90f,  // 90° = rechts"},{"type":"DELETE","lineNumber":332,"oldContent":"                            distance = 1.5f"},{"type":"DELETE","lineNumber":335,"oldContent":"                        )"},{"type":"DELETE","lineNumber":338,"oldContent":"                        "},{"type":"DELETE","lineNumber":341,"oldContent":"                        Log.d(TAG, \"🎯 AR-Tracking: ${landmarkFeature.landmarkId} - Pose: ${arPose.confidence}\")"},{"type":"DELETE","lineNumber":344,"oldContent":"                    }"},{"type":"DELETE","lineNumber":347,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":350,"oldContent":"                    Log.w(TAG, \"⚠️ AR-Tracking Fehler für ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"DELETE","lineNumber":353,"oldContent":"                }"},{"type":"DELETE","lineNumber":355,"oldContent":"            }"},{"type":"DELETE","lineNumber":358,"oldContent":"            "},{"type":"DELETE","lineNumber":360,"oldContent":"     * Storage-Stats"},{"type":"DELETE","lineNumber":362,"oldContent":"     */"},{"type":"MODIFY","lineNumber":363,"content":"     * Storage-Stats","oldContent":"    fun getStorageStats(): StorageStats {"},{"type":"INSERT","lineNumber":364,"content":"     */"},{"type":"INSERT","lineNumber":365,"content":"    fun getStorageStats(): StorageStats {"},{"type":"MODIFY","lineNumber":388,"content":"        isInitialized = false","oldContent":"        isInitialized = false"},{"type":"INSERT","lineNumber":391,"content":""},{"type":"DELETE","lineNumber":393,"oldContent":""}]},{"timestamp":1754925980631,"changes":[{"type":"MODIFY","lineNumber":18,"content":"","oldContent":"    private val matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING)"},{"type":"MODIFY","lineNumber":31,"content":"    private val arRenderer = SimpleARRenderer()","oldContent":"    private val arRenderer = SnapchatStyleARRenderer(context)"},{"type":"DELETE","lineNumber":328,"oldContent":"            matches.release()"},{"type":"DELETE","lineNumber":330,"oldContent":"            "},{"type":"DELETE","lineNumber":333,"oldContent":"            FeatureMatchResult("},{"type":"DELETE","lineNumber":335,"oldContent":"                landmarkId = landmarkFeature.landmarkId,"},{"type":"DELETE","lineNumber":338,"oldContent":"                confidence = confidence,"},{"type":"DELETE","lineNumber":340,"oldContent":"                matchCount = goodMatches.size,"},{"type":"DELETE","lineNumber":343,"oldContent":"                position = avgPosition,"},{"type":"INSERT","lineNumber":338,"content":"            matches.release()"},{"type":"INSERT","lineNumber":339,"content":"            "},{"type":"INSERT","lineNumber":340,"content":"            FeatureMatchResult("},{"type":"INSERT","lineNumber":341,"content":"                landmarkId = landmarkFeature.landmarkId,"},{"type":"INSERT","lineNumber":342,"content":"                confidence = confidence,"},{"type":"INSERT","lineNumber":343,"content":"                matchCount = goodMatches.size,"},{"type":"INSERT","lineNumber":344,"content":"                position = avgPosition,"},{"type":"INSERT","lineNumber":361,"content":""},{"type":"INSERT","lineNumber":362,"content":"    /**"},{"type":"DELETE","lineNumber":364,"oldContent":"    fun getStorageStats(): StorageStats {"},{"type":"DELETE","lineNumber":365,"oldContent":"    /**"},{"type":"INSERT","lineNumber":387,"content":"        arRenderer.cleanup()"},{"type":"DELETE","lineNumber":388,"oldContent":"        isInitialized = false"},{"type":"INSERT","lineNumber":399,"content":"    fun getTotalSizeMB(): Double = totalSizeBytes / (1024.0 * 1024.0)"},{"type":"DELETE","lineNumber":400,"oldContent":""}]},{"timestamp":1754925986559,"changes":[{"type":"DELETE","lineNumber":213,"oldContent":"            // Aktualisiere AR-Renderer Kalibrierung"},{"type":"DELETE","lineNumber":214,"oldContent":"            arRenderer.updateCameraCalibration(frame.cols(), frame.rows())"},{"type":"INSERT","lineNumber":213,"content":"            // Frame-Informationen für AR-Rendering"},{"type":"INSERT","lineNumber":214,"content":"            Log.v(TAG, \"🎥 Frame-Info: ${frame.cols()}x${frame.rows()}\")"},{"type":"INSERT","lineNumber":334,"content":"                    Log.w(TAG, \"⚠️ AR-Tracking Fehler für ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"INSERT","lineNumber":335,"content":"                }"},{"type":"INSERT","lineNumber":336,"content":"            }"},{"type":"INSERT","lineNumber":337,"content":"            "},{"type":"DELETE","lineNumber":336,"oldContent":"                    Log.w(TAG, \"⚠️ AR-Tracking Fehler für ${landmarkFeature.landmarkId}: ${e.message}\")"},{"type":"DELETE","lineNumber":339,"oldContent":"                }"},{"type":"DELETE","lineNumber":341,"oldContent":"            }"},{"type":"DELETE","lineNumber":344,"oldContent":"            "},{"type":"MODIFY","lineNumber":363,"content":"     * Storage-Stats","oldContent":"     * Storage-Stats"},{"type":"MODIFY","lineNumber":377,"content":"","oldContent":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":382,"oldContent":"        landmarkFeatures.clear()"},{"type":"DELETE","lineNumber":383,"oldContent":"     */"},{"type":"INSERT","lineNumber":382,"content":"        landmarkFeatures.values.forEach { feature ->"},{"type":"INSERT","lineNumber":383,"content":"            feature.keypoints.release()"},{"type":"DELETE","lineNumber":397,"oldContent":"}"},{"type":"DELETE","lineNumber":398,"oldContent":""},{"type":"INSERT","lineNumber":397,"content":"    val totalSizeBytes: Long"},{"type":"INSERT","lineNumber":398,"content":") {"},{"type":"MODIFY","lineNumber":400,"content":"}","oldContent":"        landmarkFeatures.clear()"}]},{"timestamp":1754926018333,"changes":[{"type":"DELETE","lineNumber":315,"oldContent":"            var arPose: SnapchatStyleARRenderer.ARPose? = null"},{"type":"MODIFY","lineNumber":315,"content":"            var arPose: SimpleARRenderer.SimpleARPose? = null","oldContent":"            var arObject: SnapchatStyleARRenderer.AR3DObject? = null"},{"type":"INSERT","lineNumber":316,"content":"            var arObject: SimpleARRenderer.SimpleAR3DObject? = null"},{"type":"MODIFY","lineNumber":318,"content":"            if (positions.size >= 4 && confidence > 0.3f) {","oldContent":"            if (positions.size >= 4 && confidence > 0.5f) {"},{"type":"DELETE","lineNumber":320,"oldContent":"                    // Schätze 3D-Pose des Landmarks"},{"type":"DELETE","lineNumber":321,"oldContent":"                    arPose = arRenderer.estimateLandmarkPose(positions.take(4))"},{"type":"INSERT","lineNumber":320,"content":"                    // Schätze vereinfachte 3D-Pose des Landmarks"},{"type":"INSERT","lineNumber":321,"content":"                    arPose = arRenderer.estimateSimplePose(positions.take(4), confidence)"},{"type":"DELETE","lineNumber":325,"oldContent":"                        arObject = arRenderer.calculateArrowPosition("},{"type":"DELETE","lineNumber":326,"oldContent":"                            arPose, "},{"type":"INSERT","lineNumber":325,"content":"                        arObject = arRenderer.calculateARObjectPosition("},{"type":"INSERT","lineNumber":326,"content":"                            avgPosition, "},{"type":"INSERT","lineNumber":327,"content":"                            arPose,"},{"type":"MODIFY","lineNumber":329,"content":"                            offsetDistance = 100f","oldContent":"                            distance = 1.5f"},{"type":"MODIFY","lineNumber":332,"content":"                        Log.d(TAG, \"🎯 AR-Tracking: ${landmarkFeature.landmarkId} - Confidence: ${arPose.confidence}\")","oldContent":"                        Log.d(TAG, \"🎯 AR-Tracking: ${landmarkFeature.landmarkId} - Pose: ${arPose.confidence}\")"},{"type":"DELETE","lineNumber":335,"oldContent":"            matches.release()"},{"type":"DELETE","lineNumber":337,"oldContent":"            "},{"type":"INSERT","lineNumber":339,"content":"            matches.release()"},{"type":"INSERT","lineNumber":340,"content":"            "},{"type":"INSERT","lineNumber":363,"content":"    /**"},{"type":"DELETE","lineNumber":363,"oldContent":"     * Storage-Stats"},{"type":"DELETE","lineNumber":369,"oldContent":"    fun cleanup() {"},{"type":"INSERT","lineNumber":370,"content":"    /**"},{"type":"DELETE","lineNumber":371,"oldContent":"     * Cleanup"},{"type":"INSERT","lineNumber":372,"content":"     */"},{"type":"DELETE","lineNumber":396,"oldContent":"}"},{"type":"INSERT","lineNumber":397,"content":"    val landmarkCount: Int,"},{"type":"INSERT","lineNumber":401,"content":"}"}]},{"timestamp":1754926022631,"changes":[{"type":"MODIFY","lineNumber":23,"content":"    ","oldContent":"    data class LandmarkFeatures("},{"type":"MODIFY","lineNumber":37,"content":"        val landmarkId: String,","oldContent":"                Log.d(TAG, \"Keine Features im Frame gefunden\")"},{"type":"MODIFY","lineNumber":40,"content":"        val originalSize: Size","oldContent":"            "},{"type":"MODIFY","lineNumber":52,"content":"            Log.i(TAG, \"🔄 Starte Engine-Initialisierung...\")","oldContent":"                    matches.add(FeatureMatchResult("},{"type":"DELETE","lineNumber":54,"oldContent":"                        confidence = confidence,"},{"type":"MODIFY","lineNumber":54,"content":"            val availableLandmarks = getAvailableLandmarkIds()","oldContent":"                        landmark = landmarkFeature.landmark,"},{"type":"INSERT","lineNumber":55,"content":"            Log.i(TAG, \"📋 Gefundene Landmark-IDs: ${availableLandmarks.joinToString(\", \")}\")"},{"type":"MODIFY","lineNumber":57,"content":"            if (availableLandmarks.isEmpty()) {","oldContent":"                        matchCount = frameKeypoints.toArray().size,"},{"type":"MODIFY","lineNumber":65,"content":"                    successCount++","oldContent":"            "},{"type":"MODIFY","lineNumber":69,"content":"            isInitialized = successCount > 0","oldContent":"            Log.e(TAG, \"Fehler beim Frame-Processing: ${e.message}\")"},{"type":"DELETE","lineNumber":130,"oldContent":"        }"},{"type":"DELETE","lineNumber":131,"oldContent":"    }"},{"type":"DELETE","lineNumber":132,"oldContent":"    /**"},{"type":"DELETE","lineNumber":133,"oldContent":"     */"},{"type":"DELETE","lineNumber":134,"oldContent":"    fun loadLandmarkFeatures(landmarks: List<ProcessedLandmark>) {"},{"type":"INSERT","lineNumber":130,"content":"            val keypoints = MatOfKeyPoint()"},{"type":"INSERT","lineNumber":131,"content":"            val descriptors = Mat()"},{"type":"INSERT","lineNumber":132,"content":"            "},{"type":"INSERT","lineNumber":133,"content":"            orb.detectAndCompute(grayMat, Mat(), keypoints, descriptors)"},{"type":"INSERT","lineNumber":134,"content":"            "},{"type":"DELETE","lineNumber":137,"oldContent":"        landmarks.forEach { landmark ->"},{"type":"DELETE","lineNumber":138,"oldContent":"            try {"},{"type":"DELETE","lineNumber":139,"oldContent":"                if (bitmap != null) {"},{"type":"DELETE","lineNumber":140,"oldContent":"                    val features = extractFeaturesFromBitmap(bitmap, landmark)"},{"type":"INSERT","lineNumber":137,"content":"            "},{"type":"INSERT","lineNumber":138,"content":"            if (descriptors.rows() > 0 && keypointArray.isNotEmpty()) {"},{"type":"INSERT","lineNumber":139,"content":"                val landmarkFeature = LandmarkFeatures("},{"type":"INSERT","lineNumber":140,"content":"                    landmarkId = landmarkId,"},{"type":"MODIFY","lineNumber":175,"content":"            \"landmarken_pictures/$landmarkId.jpg\",","oldContent":"                \"landmarks/$landmarkId.jpg\","},{"type":"MODIFY","lineNumber":189,"content":"                Log.v(TAG, \"❌ Pfad nicht gefunden: $path\")","oldContent":"                    inputStream.close()"},{"type":"MODIFY","lineNumber":204,"content":"        ","oldContent":"            Log.w(TAG, \"Kein Bild gefunden für Landmark: $landmarkId\")"},{"type":"DELETE","lineNumber":222,"oldContent":"            // Konvertiere zu Graustufen falls nötig"},{"type":"DELETE","lineNumber":223,"oldContent":"            val grayMat = Mat()"},{"type":"DELETE","lineNumber":224,"oldContent":"            if (mat.channels() > 1) {"},{"type":"DELETE","lineNumber":225,"oldContent":"                Imgproc.cvtColor(mat, grayMat, Imgproc.COLOR_BGR2GRAY)"},{"type":"INSERT","lineNumber":222,"content":"            val frameDescriptors = Mat()"},{"type":"INSERT","lineNumber":223,"content":"            "},{"type":"INSERT","lineNumber":224,"content":"            orb.detectAndCompute(grayFrame, Mat(), frameKeypoints, frameDescriptors)"},{"type":"INSERT","lineNumber":225,"content":"            "},{"type":"DELETE","lineNumber":229,"oldContent":"            "},{"type":"DELETE","lineNumber":230,"oldContent":"            val keypoints = MatOfKeyPoint()"},{"type":"DELETE","lineNumber":231,"oldContent":"            val descriptors = Mat()"},{"type":"DELETE","lineNumber":232,"oldContent":"            "},{"type":"DELETE","lineNumber":233,"oldContent":"            orb.detectAndCompute(grayMat, Mat(), keypoints, descriptors)"},{"type":"INSERT","lineNumber":229,"content":"            if (frameDescriptors.rows() == 0) {"},{"type":"INSERT","lineNumber":230,"content":"                grayFrame.release()"},{"type":"INSERT","lineNumber":231,"content":"                frameKeypoints.release()"},{"type":"INSERT","lineNumber":232,"content":"                frameDescriptors.release()"},{"type":"INSERT","lineNumber":233,"content":"                return emptyList()"},{"type":"DELETE","lineNumber":237,"oldContent":"            if (descriptors.rows() > 0) {"},{"type":"DELETE","lineNumber":238,"oldContent":"                Log.d(TAG, \"Extrahiert ${keypoints.toArray().size} Features für ${landmark.id}\")"},{"type":"DELETE","lineNumber":239,"oldContent":"                LandmarkFeatures(keypoints, descriptors, landmark)"},{"type":"INSERT","lineNumber":237,"content":"            val matches = mutableListOf<FeatureMatchResult>()"},{"type":"INSERT","lineNumber":238,"content":"            "},{"type":"INSERT","lineNumber":239,"content":"            for ((landmarkId, landmarkFeature) in landmarkFeatures) {"},{"type":"MODIFY","lineNumber":297,"content":"            ","oldContent":"    "},{"type":"MODIFY","lineNumber":316,"content":"            var arObject: SimpleARRenderer.SimpleAR3DObject? = null","oldContent":"            var arObject: SnapchatStyleARRenderer.AR3DObject? = null"},{"type":"DELETE","lineNumber":329,"oldContent":"                            distance = 1.5f"},{"type":"INSERT","lineNumber":330,"content":"                        )"},{"type":"DELETE","lineNumber":332,"oldContent":"                        Log.d(TAG, \"🎯 AR-Tracking: ${landmarkFeature.landmarkId} - Pose: ${arPose.confidence}\")"},{"type":"INSERT","lineNumber":333,"content":"                    }"},{"type":"INSERT","lineNumber":338,"content":"            "},{"type":"DELETE","lineNumber":340,"oldContent":"            "},{"type":"MODIFY","lineNumber":364,"content":"     * Storage-Stats","oldContent":"     * Storage-Stats"},{"type":"MODIFY","lineNumber":388,"content":"        // Vereinfachter AR-Renderer braucht kein Cleanup","oldContent":"        arRenderer.cleanup()"},{"type":"DELETE","lineNumber":402,"oldContent":"}"}]},{"timestamp":1754927093878,"changes":[{"type":"MODIFY","lineNumber":29,"content":"    ","oldContent":"    init {"},{"type":"MODIFY","lineNumber":55,"content":"            Log.i(TAG, \"📋 Gefundene Landmark-IDs: ${availableLandmarks.joinToString(\", \")}\")","oldContent":"                        confidence = confidence,"},{"type":"MODIFY","lineNumber":60,"content":"            }","oldContent":"                        screenPosition = screenPosition"},{"type":"DELETE","lineNumber":66,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":67,"oldContent":"            emptyList()"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"INSERT","lineNumber":67,"content":"            }"},{"type":"MODIFY","lineNumber":203,"content":"        }","oldContent":"            if (mat.channels() > 1) {"},{"type":"MODIFY","lineNumber":206,"content":"            Log.w(TAG, \"⚠️ Keine Landmark-Features geladen (${landmarkFeatures.size} Features)\")","oldContent":"            Log.w(TAG, \"⚠️ Keine Landmark-Features geladen\")"},{"type":"INSERT","lineNumber":210,"content":"        Log.d(TAG, \"🎥 Verarbeite Frame mit ${landmarkFeatures.size} geladenen Landmarks\")"},{"type":"INSERT","lineNumber":211,"content":"        "},{"type":"DELETE","lineNumber":329,"oldContent":"                        )"},{"type":"INSERT","lineNumber":332,"content":"                        )"},{"type":"DELETE","lineNumber":332,"oldContent":"                    }"},{"type":"INSERT","lineNumber":335,"content":"                    }"},{"type":"INSERT","lineNumber":365,"content":"    /**"},{"type":"DELETE","lineNumber":364,"oldContent":"     * Storage-Stats"},{"type":"DELETE","lineNumber":395,"oldContent":"}"},{"type":"DELETE","lineNumber":396,"oldContent":"}"},{"type":"INSERT","lineNumber":397,"content":" */"},{"type":"INSERT","lineNumber":398,"content":"data class StorageStats("},{"type":"INSERT","lineNumber":402,"content":"    fun getTotalSizeMB(): Double = totalSizeBytes / (1024.0 * 1024.0)"}]},{"timestamp":1754927099178,"changes":[{"type":"MODIFY","lineNumber":15,"content":" * Vereinfachte Feature-Matching Engine mit OpenCV ORB Features","oldContent":"/**"},{"type":"MODIFY","lineNumber":22,"content":"    private val orb = ORB.create(1000, 1.2f, 8, 31, 0, 2, ORB.HARRIS_SCORE, 31, 20)","oldContent":"    private val matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING)"},{"type":"MODIFY","lineNumber":24,"content":"    // BF Matcher","oldContent":"    private val landmarkFeatures = mutableMapOf<String, LandmarkFeatures>()"},{"type":"INSERT","lineNumber":27,"content":"    // Cache für Landmark-Features"},{"type":"INSERT","lineNumber":28,"content":"    private val landmarkFeatures = mutableMapOf<String, LandmarkFeatures>()"},{"type":"DELETE","lineNumber":28,"oldContent":"    data class LandmarkFeatures("},{"type":"DELETE","lineNumber":29,"oldContent":"    "},{"type":"MODIFY","lineNumber":35,"content":"","oldContent":"        Log.i(TAG, \"FeatureMatchingEngine initialized with ORB detector\")"},{"type":"MODIFY","lineNumber":53,"content":"            ","oldContent":"                return emptyList()"},{"type":"INSERT","lineNumber":110,"content":"        return try {"},{"type":"INSERT","lineNumber":111,"content":"            Log.i(TAG, \"🔄 Lade Features für: $landmarkId\")"},{"type":"DELETE","lineNumber":111,"oldContent":"            // Filtere gute Matches (Lowe's ratio test adaptiert)"},{"type":"INSERT","lineNumber":113,"content":"            val bitmap = loadLandmarkBitmap(landmarkId)"},{"type":"INSERT","lineNumber":114,"content":"            if (bitmap == null) {"},{"type":"INSERT","lineNumber":115,"content":"                Log.w(TAG, \"❌ Bitmap nicht gefunden: $landmarkId\")"},{"type":"INSERT","lineNumber":116,"content":"                return false"},{"type":"INSERT","lineNumber":117,"content":"            }"},{"type":"INSERT","lineNumber":119,"content":"            Log.d(TAG, \"✅ Bitmap geladen: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":114,"oldContent":"            "},{"type":"DELETE","lineNumber":115,"oldContent":"            confidence.coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":116,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":117,"oldContent":"            0f"},{"type":"DELETE","lineNumber":118,"oldContent":"    }"},{"type":"DELETE","lineNumber":119,"oldContent":"    "},{"type":"DELETE","lineNumber":120,"oldContent":"     * Berechnet die Bildschirmposition eines erkannten Landmarks"},{"type":"MODIFY","lineNumber":121,"content":"            // Konvertiere zu Mat","oldContent":"    private fun calculateScreenPosition(frameKeypoints: MatOfKeyPoint, landmarkKeypoints: MatOfKeyPoint, frameSize: Size): PointF? {"},{"type":"MODIFY","lineNumber":124,"content":"            ","oldContent":"        return try {"},{"type":"DELETE","lineNumber":210,"oldContent":"        Log.d(TAG, \"🎥 Verarbeite Frame mit ${landmarkFeatures.size} geladenen Landmarks\")"},{"type":"DELETE","lineNumber":211,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":210,"content":"        Log.d(TAG, \"🎥 Verarbeite Frame mit ${landmarkFeatures.size} geladenen Landmarks: ${landmarkFeatures.keys.joinToString(\", \")}\")"},{"type":"INSERT","lineNumber":212,"content":"        return try {"},{"type":"MODIFY","lineNumber":291,"content":"            ","oldContent":"    fun getStorageStats(): StorageStats {"},{"type":"DELETE","lineNumber":303,"oldContent":"    }"},{"type":"DELETE","lineNumber":304,"oldContent":"}"},{"type":"DELETE","lineNumber":305,"oldContent":""},{"type":"DELETE","lineNumber":306,"oldContent":"class ARTrackingSystem {"},{"type":"DELETE","lineNumber":307,"oldContent":"    private val TAG = \"ARTrackingSystem\""},{"type":"DELETE","lineNumber":308,"oldContent":"    init {"},{"type":"DELETE","lineNumber":309,"oldContent":"    }"},{"type":"DELETE","lineNumber":310,"oldContent":"    "},{"type":"DELETE","lineNumber":311,"oldContent":"    fun resetTracking() {"},{"type":"DELETE","lineNumber":312,"oldContent":"        Log.d(TAG, \"resetTracking called (stub)\")"},{"type":"DELETE","lineNumber":313,"oldContent":"    "},{"type":"DELETE","lineNumber":314,"oldContent":"    fun updateTracking(matches: List<FeatureMatchResult>): List<Any> {"},{"type":"DELETE","lineNumber":315,"oldContent":"        return emptyList()"},{"type":"INSERT","lineNumber":303,"content":"                    positions.add(PointF(kp.pt.x.toFloat(), kp.pt.y.toFloat()))"},{"type":"INSERT","lineNumber":304,"content":"                }"},{"type":"INSERT","lineNumber":305,"content":"            }"},{"type":"INSERT","lineNumber":306,"content":"            "},{"type":"INSERT","lineNumber":307,"content":"            val avgPosition = if (positions.isNotEmpty()) {"},{"type":"INSERT","lineNumber":308,"content":"                PointF("},{"type":"INSERT","lineNumber":309,"content":"                    positions.map { it.x }.average().toFloat(),"},{"type":"INSERT","lineNumber":310,"content":"                    positions.map { it.y }.average().toFloat()"},{"type":"INSERT","lineNumber":311,"content":"                )"},{"type":"INSERT","lineNumber":312,"content":"            } else {"},{"type":"INSERT","lineNumber":313,"content":"                PointF(frame.cols().toFloat() / 2, frame.rows().toFloat() / 2)"},{"type":"INSERT","lineNumber":314,"content":"            }"},{"type":"INSERT","lineNumber":315,"content":"            "},{"type":"MODIFY","lineNumber":333,"content":"                        ","oldContent":"                        "},{"type":"MODIFY","lineNumber":336,"content":"                } catch (e: Exception) {","oldContent":"                } catch (e: Exception) {"},{"type":"MODIFY","lineNumber":366,"content":"     * Storage-Stats","oldContent":"     * Storage-Stats"},{"type":"MODIFY","lineNumber":399,"content":"    val landmarkCount: Int,","oldContent":"    val landmarkCount: Int,"},{"type":"MODIFY","lineNumber":403,"content":"}","oldContent":"}"}]},{"timestamp":1754927113202,"changes":[{"type":"DELETE","lineNumber":20,"oldContent":"    private val TAG = \"FeatureMatchingEngine\""},{"type":"DELETE","lineNumber":21,"oldContent":"    private val matcher = DescriptorMatcher.create(DescriptorMatcher.BRUTEFORCE_HAMMING)"},{"type":"INSERT","lineNumber":20,"content":"    "},{"type":"INSERT","lineNumber":21,"content":"    // OpenCV ORB Detector"},{"type":"INSERT","lineNumber":25,"content":"    private val matcher = BFMatcher.create(Core.NORM_HAMMING, true)"},{"type":"DELETE","lineNumber":26,"oldContent":"    "},{"type":"DELETE","lineNumber":28,"oldContent":"    data class LandmarkFeatures("},{"type":"INSERT","lineNumber":29,"content":"    "},{"type":"INSERT","lineNumber":35,"content":"    private var frameCounter = 0"},{"type":"INSERT","lineNumber":36,"content":"    private var lastFrameHash = 0"},{"type":"DELETE","lineNumber":81,"oldContent":"            "},{"type":"DELETE","lineNumber":82,"oldContent":"            // Sortiere nach Confidence (beste zuerst)"},{"type":"DELETE","lineNumber":83,"oldContent":"            "},{"type":"DELETE","lineNumber":84,"oldContent":"            Log.e(TAG, \"Fehler beim Frame-Processing: ${e.message}\")"},{"type":"DELETE","lineNumber":85,"oldContent":"        }"},{"type":"DELETE","lineNumber":86,"oldContent":"    "},{"type":"DELETE","lineNumber":87,"oldContent":"     * Matcht Frame-Descriptors mit einem Landmark"},{"type":"INSERT","lineNumber":83,"content":"     * Findet verfügbare Landmark-IDs"},{"type":"INSERT","lineNumber":84,"content":"     */"},{"type":"INSERT","lineNumber":85,"content":"    private fun getAvailableLandmarkIds(): List<String> {"},{"type":"INSERT","lineNumber":86,"content":"        val landmarkIds = mutableListOf<String>()"},{"type":"INSERT","lineNumber":87,"content":"        "},{"type":"INSERT","lineNumber":88,"content":"        try {"},{"type":"INSERT","lineNumber":89,"content":"            val assetFiles = context.assets.list(\"landmarken_pictures\") ?: emptyArray()"},{"type":"DELETE","lineNumber":90,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":91,"oldContent":"            val matches = mutableListOf<DMatch>()"},{"type":"INSERT","lineNumber":92,"content":"            "},{"type":"INSERT","lineNumber":93,"content":"            for (filename in assetFiles) {"},{"type":"DELETE","lineNumber":111,"oldContent":"            confidence.coerceIn(0f, 1f)"},{"type":"DELETE","lineNumber":113,"oldContent":"            Log.e(TAG, \"Fehler beim Landmark-Matching: ${e.message}\")"},{"type":"INSERT","lineNumber":114,"content":"            "},{"type":"DELETE","lineNumber":115,"oldContent":"    }"},{"type":"INSERT","lineNumber":120,"content":"            "},{"type":"INSERT","lineNumber":122,"content":"            "},{"type":"DELETE","lineNumber":167,"oldContent":"    "},{"type":"DELETE","lineNumber":168,"oldContent":"     * Lädt ein Landmark-Bild aus den Assets"},{"type":"INSERT","lineNumber":169,"content":"        }"},{"type":"INSERT","lineNumber":170,"content":"    }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"    /**"},{"type":"INSERT","lineNumber":173,"content":"     * Lädt Landmark-Bitmap"},{"type":"DELETE","lineNumber":170,"oldContent":"        return try {"},{"type":"DELETE","lineNumber":171,"oldContent":"            val possiblePaths = listOf("},{"type":"DELETE","lineNumber":172,"oldContent":"                \"landmarks/$landmarkId.png\","},{"type":"DELETE","lineNumber":211,"oldContent":"        return try {"},{"type":"INSERT","lineNumber":214,"content":"        return try {"},{"type":"DELETE","lineNumber":236,"oldContent":"     */"},{"type":"INSERT","lineNumber":238,"content":"            }"},{"type":"DELETE","lineNumber":265,"oldContent":"class LandmarkFeatureStorage(private val context: android.content.Context) {"},{"type":"DELETE","lineNumber":266,"oldContent":"    private val TAG = \"LandmarkFeatureStorage\""},{"type":"DELETE","lineNumber":267,"oldContent":"    init {"},{"type":"DELETE","lineNumber":268,"oldContent":"    }"},{"type":"DELETE","lineNumber":269,"oldContent":"    "},{"type":"DELETE","lineNumber":270,"oldContent":"        Log.d(TAG, \"importLandmarksFromAssets called (stub)\")"},{"type":"DELETE","lineNumber":271,"oldContent":"    }"},{"type":"DELETE","lineNumber":272,"oldContent":"    fun loadRouteSpecificLandmarks(route: com.example.arwalking.data.Route): List<ProcessedLandmark> {"},{"type":"DELETE","lineNumber":273,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":274,"oldContent":"    "},{"type":"DELETE","lineNumber":275,"oldContent":"        Log.d(TAG, \"loadAllLandmarks called (stub)\")"},{"type":"DELETE","lineNumber":276,"oldContent":"        return emptyList()"},{"type":"DELETE","lineNumber":277,"oldContent":"    "},{"type":"INSERT","lineNumber":267,"content":"    /**"},{"type":"INSERT","lineNumber":268,"content":"     * Matcht Frame mit Landmark"},{"type":"INSERT","lineNumber":269,"content":"     */"},{"type":"INSERT","lineNumber":270,"content":"    private fun matchWithLandmark("},{"type":"INSERT","lineNumber":271,"content":"        frameKeypoints: MatOfKeyPoint,"},{"type":"INSERT","lineNumber":272,"content":"        frameDescriptors: Mat,"},{"type":"INSERT","lineNumber":273,"content":"        landmarkFeature: LandmarkFeatures,"},{"type":"INSERT","lineNumber":274,"content":"        frame: Mat"},{"type":"INSERT","lineNumber":275,"content":"    ): FeatureMatchResult? {"},{"type":"INSERT","lineNumber":276,"content":"        "},{"type":"INSERT","lineNumber":277,"content":"        return try {"},{"type":"INSERT","lineNumber":278,"content":"            val matches = MatOfDMatch()"},{"type":"INSERT","lineNumber":279,"content":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, matches)"},{"type":"DELETE","lineNumber":279,"oldContent":"        Log.d(TAG, \"getStorageStats called (stub)\")"},{"type":"DELETE","lineNumber":280,"oldContent":"        return StorageStats()"},{"type":"INSERT","lineNumber":281,"content":"            val matchArray = matches.toArray()"},{"type":"INSERT","lineNumber":282,"content":"            if (matchArray.isEmpty()) {"},{"type":"DELETE","lineNumber":289,"oldContent":"    fun cleanup() {"},{"type":"DELETE","lineNumber":290,"oldContent":"    }"},{"type":"INSERT","lineNumber":291,"content":"                return null"},{"type":"INSERT","lineNumber":292,"content":"            }"},{"type":"INSERT","lineNumber":334,"content":"                        )"},{"type":"DELETE","lineNumber":333,"oldContent":"                        "},{"type":"INSERT","lineNumber":337,"content":"                    }"},{"type":"DELETE","lineNumber":336,"oldContent":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":367,"content":"    /**"},{"type":"DELETE","lineNumber":366,"oldContent":"     * Storage-Stats"},{"type":"INSERT","lineNumber":400,"content":"data class StorageStats("},{"type":"DELETE","lineNumber":399,"oldContent":"    val landmarkCount: Int,"},{"type":"INSERT","lineNumber":404,"content":"    fun getTotalSizeMB(): Double = totalSizeBytes / (1024.0 * 1024.0)"},{"type":"DELETE","lineNumber":403,"oldContent":"}"}]},{"timestamp":1754927122178,"changes":[{"type":"MODIFY","lineNumber":29,"content":"    ","oldContent":"    "},{"type":"MODIFY","lineNumber":37,"content":"","oldContent":""},{"type":"DELETE","lineNumber":50,"oldContent":"                Log.d(TAG, \"Keine Landmark-Features geladen\")"},{"type":"DELETE","lineNumber":51,"oldContent":"                return emptyList()"},{"type":"DELETE","lineNumber":52,"oldContent":"            "},{"type":"DELETE","lineNumber":53,"oldContent":"            val frameKeypoints = MatOfKeyPoint()"},{"type":"INSERT","lineNumber":50,"content":"     * Initialisiert die Engine"},{"type":"INSERT","lineNumber":51,"content":"     */"},{"type":"INSERT","lineNumber":52,"content":"    suspend fun initialize(): Boolean {"},{"type":"INSERT","lineNumber":53,"content":"        return try {"},{"type":"INSERT","lineNumber":61,"content":"                return false"},{"type":"DELETE","lineNumber":62,"oldContent":"            }"},{"type":"DELETE","lineNumber":74,"oldContent":"                        confidence = confidence,"},{"type":"DELETE","lineNumber":75,"oldContent":"                        landmark = landmarkFeature.landmark,"},{"type":"DELETE","lineNumber":76,"oldContent":"                        screenPosition = screenPosition"},{"type":"DELETE","lineNumber":77,"oldContent":"                }"},{"type":"INSERT","lineNumber":74,"content":"            isInitialized"},{"type":"INSERT","lineNumber":75,"content":"            "},{"type":"INSERT","lineNumber":76,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":77,"content":"            Log.e(TAG, \"❌ Fehler bei Engine-Initialisierung: ${e.message}\", e)"},{"type":"MODIFY","lineNumber":90,"content":"            Log.i(TAG, \"📁 Scanne landmarken_pictures Ordner...\")","oldContent":"            Log.i(TAG, \"📁 Scanne landmarken_pictures Ordner...\")"},{"type":"MODIFY","lineNumber":94,"content":"                if (filename.endsWith(\".jpg\") || filename.endsWith(\".png\")) {","oldContent":"                if (filename.endsWith(\".jpg\") || filename.endsWith(\".png\")) {"},{"type":"MODIFY","lineNumber":99,"content":"            }","oldContent":"            matcher.match(frameDescriptors, landmarkFeature.descriptors, MatOfDMatch(*matches.toTypedArray()))"},{"type":"DELETE","lineNumber":101,"oldContent":"            "},{"type":"DELETE","lineNumber":102,"oldContent":"            // Filtere gute Matches (Lowe's ratio test adaptiert)"},{"type":"DELETE","lineNumber":103,"oldContent":"            "},{"type":"DELETE","lineNumber":104,"oldContent":"            "},{"type":"DELETE","lineNumber":105,"oldContent":"            "},{"type":"INSERT","lineNumber":101,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":102,"content":"            Log.e(TAG, \"❌ Fehler beim Lesen der Assets: ${e.message}\")"},{"type":"INSERT","lineNumber":103,"content":"        }"},{"type":"INSERT","lineNumber":104,"content":"        "},{"type":"INSERT","lineNumber":105,"content":"        return landmarkIds.sorted()"},{"type":"MODIFY","lineNumber":123,"content":"            // Konvertiere zu Mat","oldContent":"            // Konvertiere zu Mat"},{"type":"MODIFY","lineNumber":131,"content":"            // Features extrahieren","oldContent":"                sumX / frameKpts.size,"},{"type":"MODIFY","lineNumber":138,"content":"            Log.d(TAG, \"🎯 Features: ${keypointArray.size} Keypoints, ${descriptors.rows()} Descriptors\")","oldContent":"        }"},{"type":"DELETE","lineNumber":152,"oldContent":"                if (bitmap != null) {"},{"type":"DELETE","lineNumber":153,"oldContent":"                    val features = extractFeaturesFromBitmap(bitmap, landmark)"},{"type":"DELETE","lineNumber":154,"oldContent":"                        landmarkFeatures[landmark.id] = features"},{"type":"DELETE","lineNumber":155,"oldContent":"                    }"},{"type":"DELETE","lineNumber":156,"oldContent":"                }"},{"type":"DELETE","lineNumber":157,"oldContent":"                Log.e(TAG, \"Fehler beim Laden von Landmark ${landmark.id}: ${e.message}\")"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":"        Log.i(TAG, \"Features geladen für ${landmarkFeatures.size} von ${landmarks.size} Landmarks\")"},{"type":"DELETE","lineNumber":160,"oldContent":"    }"},{"type":"INSERT","lineNumber":154,"content":"                descriptors.release()"},{"type":"INSERT","lineNumber":155,"content":"                "},{"type":"INSERT","lineNumber":156,"content":"                true"},{"type":"INSERT","lineNumber":157,"content":"            } else {"},{"type":"INSERT","lineNumber":158,"content":"                Log.w(TAG, \"❌ Keine Features extrahiert für: $landmarkId\")"},{"type":"INSERT","lineNumber":159,"content":"                keypoints.release()"},{"type":"INSERT","lineNumber":160,"content":"                descriptors.release()"},{"type":"INSERT","lineNumber":161,"content":"                mat.release()"},{"type":"INSERT","lineNumber":162,"content":"                grayMat.release()"},{"type":"DELETE","lineNumber":170,"oldContent":"            val possiblePaths = listOf("},{"type":"INSERT","lineNumber":174,"content":"     */"},{"type":"MODIFY","lineNumber":176,"content":"        val paths = listOf(","oldContent":"            )"},{"type":"DELETE","lineNumber":180,"oldContent":"                try {"},{"type":"DELETE","lineNumber":181,"oldContent":"                    val inputStream = context.assets.open(path)"},{"type":"DELETE","lineNumber":182,"oldContent":"                    inputStream.close()"},{"type":"INSERT","lineNumber":180,"content":"        "},{"type":"INSERT","lineNumber":181,"content":"        for (path in paths) {"},{"type":"INSERT","lineNumber":182,"content":"            try {"},{"type":"DELETE","lineNumber":188,"oldContent":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":189,"oldContent":"                    // Nächsten Pfad versuchen"},{"type":"DELETE","lineNumber":190,"oldContent":"            }"},{"type":"INSERT","lineNumber":188,"content":"                    }"},{"type":"INSERT","lineNumber":189,"content":"                }"},{"type":"INSERT","lineNumber":190,"content":"            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":192,"oldContent":"            null"},{"type":"DELETE","lineNumber":193,"oldContent":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":192,"content":"            }"},{"type":"INSERT","lineNumber":193,"content":"        }"},{"type":"INSERT","lineNumber":212,"content":"        // Frame-Tracking für Debug"},{"type":"INSERT","lineNumber":213,"content":"        frameCounter++"},{"type":"INSERT","lineNumber":214,"content":"        val currentFrameHash = frame.hashCode()"},{"type":"INSERT","lineNumber":215,"content":"        val isNewFrame = currentFrameHash != lastFrameHash"},{"type":"INSERT","lineNumber":216,"content":"        lastFrameHash = currentFrameHash"},{"type":"INSERT","lineNumber":217,"content":"        "},{"type":"INSERT","lineNumber":218,"content":"        Log.d(TAG, \"🎥 Frame #$frameCounter (${if (isNewFrame) \"NEU\" else \"GLEICH\"}): ${frame.cols()}x${frame.rows()}\")"},{"type":"DELETE","lineNumber":214,"oldContent":"            Log.v(TAG, \"🎥 Verarbeite Frame: ${frame.cols()}x${frame.rows()}\")"},{"type":"INSERT","lineNumber":221,"content":"        if (!isNewFrame) {"},{"type":"INSERT","lineNumber":222,"content":"            Log.w(TAG, \"⚠️ Gleicher Frame wie vorher - möglicherweise Problem mit Kamera-Feed!\")"},{"type":"INSERT","lineNumber":223,"content":"        }"},{"type":"INSERT","lineNumber":224,"content":"        "},{"type":"DELETE","lineNumber":238,"oldContent":"            "},{"type":"INSERT","lineNumber":249,"content":"            "},{"type":"DELETE","lineNumber":252,"oldContent":"    }"},{"type":"DELETE","lineNumber":253,"oldContent":"    fun matchFeatures(frame: Mat, landmarks: List<ProcessedLandmark>): List<FeatureMatchResult> {"},{"type":"DELETE","lineNumber":254,"oldContent":"        return processFrame(frame)"},{"type":"DELETE","lineNumber":255,"oldContent":"    "},{"type":"DELETE","lineNumber":256,"oldContent":"        Log.d(TAG, \"processLandmarkFeatures called (legacy)\")"},{"type":"DELETE","lineNumber":257,"oldContent":"    }"},{"type":"DELETE","lineNumber":258,"oldContent":"}"},{"type":"DELETE","lineNumber":259,"oldContent":"class LandmarkFeatureStorage(private val context: android.content.Context) {"},{"type":"DELETE","lineNumber":260,"oldContent":"    "},{"type":"INSERT","lineNumber":262,"content":"            }"},{"type":"INSERT","lineNumber":263,"content":"            "},{"type":"INSERT","lineNumber":264,"content":"            // Cleanup"},{"type":"INSERT","lineNumber":265,"content":"            grayFrame.release()"},{"type":"INSERT","lineNumber":266,"content":"            frameKeypoints.release()"},{"type":"INSERT","lineNumber":267,"content":"            frameDescriptors.release()"},{"type":"INSERT","lineNumber":268,"content":"            "},{"type":"INSERT","lineNumber":269,"content":"            matches.sortedByDescending { it.confidence }"},{"type":"INSERT","lineNumber":270,"content":"            "},{"type":"DELETE","lineNumber":279,"oldContent":"            "},{"type":"INSERT","lineNumber":290,"content":"            "},{"type":"DELETE","lineNumber":282,"oldContent":"                matches.release()"},{"type":"INSERT","lineNumber":293,"content":"                matches.release()"},{"type":"DELETE","lineNumber":292,"oldContent":"            "},{"type":"DELETE","lineNumber":294,"oldContent":"    fun cleanup() {"},{"type":"DELETE","lineNumber":295,"oldContent":"        Log.d(TAG, \"cleanup called (stub)\")"},{"type":"DELETE","lineNumber":296,"oldContent":"    }"},{"type":"DELETE","lineNumber":297,"oldContent":"    "},{"type":"INSERT","lineNumber":303,"content":"            "},{"type":"INSERT","lineNumber":304,"content":"            // Berechne Confidence"},{"type":"INSERT","lineNumber":305,"content":"            val avgDistance = goodMatches.map { it.distance.toDouble() }.average()"},{"type":"INSERT","lineNumber":306,"content":"            val confidence = (1.0 - (avgDistance / 100.0)).coerceIn(0.0, 1.0).toFloat()"},{"type":"INSERT","lineNumber":307,"content":"            "},{"type":"DELETE","lineNumber":299,"oldContent":"    }"},{"type":"DELETE","lineNumber":300,"oldContent":""},{"type":"INSERT","lineNumber":309,"content":"            val frameKeypointArray = frameKeypoints.toArray()"},{"type":"INSERT","lineNumber":310,"content":"            val positions = mutableListOf<PointF>()"},{"type":"DELETE","lineNumber":334,"oldContent":"                        "},{"type":"INSERT","lineNumber":345,"content":"                        "},{"type":"DELETE","lineNumber":337,"oldContent":"                } catch (e: Exception) {"},{"type":"INSERT","lineNumber":348,"content":"                } catch (e: Exception) {"},{"type":"DELETE","lineNumber":367,"oldContent":"     * Storage-Stats"},{"type":"INSERT","lineNumber":378,"content":"     * Storage-Stats"},{"type":"DELETE","lineNumber":398,"oldContent":"    }"},{"type":"INSERT","lineNumber":408,"content":" * Storage-Statistiken Datenklasse"},{"type":"DELETE","lineNumber":400,"oldContent":"    val landmarkCount: Int,"},{"type":"INSERT","lineNumber":411,"content":"    val landmarkCount: Int,"},{"type":"DELETE","lineNumber":404,"oldContent":"}"},{"type":"INSERT","lineNumber":415,"content":"}"}]}]},"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-dda4d886-ce19-4342-a1cd-db5a657037d55257233241357909548.log":{"filePath":"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-dda4d886-ce19-4342-a1cd-db5a657037d55257233241357909548.log","baseContent":"<-------------> 0% CONFIGURING [63ms]\n<====---------> 33% CONFIGURING [161ms]> :app<========-----> 66% CONFIGURING [263ms]> :opencv<=============> 100% CONFIGURING [359ms]> IDLE<=------------> 14% EXECUTING [459ms]> :app:mapDebugSourceSetPaths\n<=======------> 56% EXECUTING [563ms]> :app:compileDebugKotlin> :app:checkDebugDuplicateClasses<===========--> 88% EXECUTING [663ms]> IDLE<===========--> 88% EXECUTING [763ms]<===========--> 88% EXECUTING [863ms]<===========--> 88% EXECUTING [963ms]<===========--> 88% EXECUTING [1s]\n> Task :app:compileDebugKotlin FAILED\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:11:30 Unresolved reference 'DescriptorMatcher'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:22:27 Unresolved reference 'DescriptorMatcher'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:22:52 Unresolved reference 'DescriptorMatcher'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:62:93 Unresolved reference 'size'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:65:115 Unresolved reference 'size'.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:212:35 Expression 'channels' of type 'kotlin.Int' cannot be invoked as a function. Function 'invoke()' is not found.\ne: file:///Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchingEngine.kt:212:46 'operator' modifier is required on 'FirNamedFunctionSymbol kotlin/compareTo' in 'compareTo'.\n\n[Incubating] Problems report is available at: file:///Users/florian/Documents/GitHub/ar-walking/build/reports/problems/problems-report.html\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':app:compileDebugKotlin'.\n> A failure occurred while executing org.jetbrains.kotlin.compilerRunner.GradleCompilerRunnerWithWorkers$GradleKotlinCompilerWorkAction\n   > Compilation error. See log for more details\n\n* Try:\n> Run with --stacktrace option to get the stack trace.\n> Run with --info or --debug option to get more log output.\n> Run with --scan to get full insights.\n> Get more help at https://help.gradle.org.\n\nDeprecated Gradle features were used in this build, making it incompatible with Gradle 9.0.\n\nYou can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.\n\nFor more on this, please refer to https://docs.gradle.org/8.13/userguide/command_line_interface.html#sec:command_line_warnings in the Gradle documentation.\n\nBUILD FAILED in 1s\n58 actionable tasks: 1 executed, 57 up-to-date\n\n\n\n<===========--> 89% EXECUTING [1s]> IDLE> IDLE<-------------> 0% WAITING","baseTimestamp":1754560965316},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/RouteRepository.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/data/RouteRepository.kt","baseContent":"package com.example.arwalking.data\n\nimport android.content.Context\nimport android.util.Log\nimport com.google.gson.Gson\nimport java.io.IOException\n\n/**\n * Repository für Route-Daten aus JSON-Assets\n */\nclass RouteRepository(private val context: Context) {\n    \n    private val TAG = \"RouteRepository\"\n    private val gson = Gson()\n    \n    suspend fun getRouteFromAssets(filename: String): RouteData? {\n        return try {\n            Log.i(TAG, \"Loading route from assets: $filename\")\n            \n            val jsonString = context.assets.open(filename).bufferedReader().use { it.readText() }\n            val routeData = gson.fromJson(jsonString, RouteData::class.java)\n            \n            Log.i(TAG, \"Route loaded successfully from $filename\")\n            routeData\n            \n        } catch (e: IOException) {\n            Log.e(TAG, \"Error reading route file $filename: ${e.message}\")\n            null\n        } catch (e: Exception) {\n            Log.e(TAG, \"Error parsing route data: ${e.message}\")\n            null\n        }\n    }\n    \n    suspend fun loadRoute(building: String, floor: String, additionalParam: String): RouteData? {\n        Log.d(TAG, \"loadRoute called (stub): $building, $floor\")\n        return getRouteFromAssets(\"models/final-route.json\")\n    }\n}\n\n// Datenklassen für Route-JSON\ndata class RouteData(\n    val route: Route\n)\n\ndata class Route(\n    val path: List<PathItem>\n)\n\ndata class PathItem(\n    val xmlName: String,\n    val xmlNameEn: String?,\n    val xmlNameDe: String?,\n    val xmlFile: String?,\n    val levelInfo: LevelInfo?,\n    val routeParts: List<RoutePart>\n)\n\ndata class LevelInfo(\n    val storeyNameEn: String?,\n    val storeyName: String?,\n    val storeyNameDe: String?,\n    val storey: String?,\n    val id: String?,\n    val width: String?,\n    val height: String?,\n    val mapfile: String?\n)\n\ndata class RoutePart(\n    val iconID: String?,\n    val instruction: String?,\n    val instructionEn: String?,\n    val instructionDe: String?,\n    val nodes: List<RouteNode>?,\n    val landmarks: List<RouteLandmark>?,\n    val landmarkFromInstruction: String? // Die wichtige Landmark-ID!\n)\n\ndata class RouteNode(\n    val node: NodeInfo?,\n    val edge: EdgeInfo?\n)\n\ndata class NodeInfo(\n    val x: String?,\n    val y: String?,\n    val id: String?,\n    val label: String?,\n    val type: String?,\n    val name: String?,\n    val roomid: String?,\n    val isdestination: String?,\n    val lsf: String?,\n    val oldroomid: String?\n)\n\ndata class EdgeInfo(\n    val dx: String?,\n    val dy: String?,\n    val cx: String?,\n    val cy: String?,\n    val ax: String?,\n    val ay: String?,\n    val bx: String?,\n    val by: String?,\n    val lengthInMeters: String?,\n    val id: String?,\n    val type: String?\n)\n\ndata class RouteLandmark(\n    val nameDe: String?,\n    val nameEn: String?,\n    val x: String?,\n    val y: String?,\n    val id: String?, // Die Landmark-ID für Feature-Matching\n    val type: String?,\n    val lsf: String?\n)","baseTimestamp":1754562005951},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/screens/Navigation.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/screens/Navigation.kt","baseContent":"package com.example.arwalking.screens\n\nimport android.Manifest\nimport android.app.Activity\nimport android.content.pm.PackageManager\nimport android.graphics.Bitmap\nimport android.graphics.BitmapFactory\nimport android.graphics.ImageFormat\nimport android.graphics.Matrix\nimport android.graphics.Rect\nimport android.graphics.YuvImage\nimport android.os.Build\nimport android.util.Log\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.camera.core.AspectRatio\nimport androidx.camera.core.Camera\nimport androidx.camera.core.CameraInfo\nimport androidx.camera.core.CameraSelector\nimport androidx.camera.core.ImageAnalysis\nimport androidx.camera.core.ImageProxy\nimport androidx.camera.core.Preview\nimport androidx.camera.lifecycle.ProcessCameraProvider\nimport androidx.camera.view.PreviewView\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.clickable\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.BoxWithConstraints\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.foundation.layout.requiredWidth\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.material3.AlertDialog\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.material3.TextButton\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.runtime.setValue\nimport androidx.compose.runtime.staticCompositionLocalOf\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.drawBehind\nimport androidx.compose.ui.graphics.Brush\nimport com.example.arwalking.ui.theme.GradientUtils\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.Paint\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\nimport androidx.compose.ui.platform.LocalConfiguration\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.viewinterop.AndroidView\nimport androidx.core.app.ActivityCompat\nimport androidx.core.content.ContextCompat\nimport androidx.lifecycle.LifecycleOwner\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.NavHost\nimport androidx.navigation.compose.composable\nimport androidx.navigation.compose.rememberNavController\nimport kotlinx.coroutines.launch\nimport com.example.arwalking.R\nimport com.example.arwalking.RouteViewModel\nimport com.example.arwalking.FeatureLandmark\nimport com.example.arwalking.components.AR3DArrowOverlay\nimport com.example.arwalking.components.ARInfoIsland\nimport com.example.arwalking.components.ARScanStatus\nimport com.example.arwalking.components.Animated3DArrowOverlay\nimport com.example.arwalking.components.ExpandedARInfoIsland\nimport com.example.arwalking.components.FeatureMappingStatusIndicator\nimport com.example.arwalking.components.FeatureMatchOverlay\nimport com.example.arwalking.components.rememberARScanStatus\n\n\nimport com.example.arwalking.data.FavoritesRepository\nimport com.example.arwalking.components.NavigationDrawer\nimport com.example.arwalking.components.NavigationDrawerList\nimport com.example.arwalking.components.NavigationStepData\nimport kotlinx.coroutines.delay\nimport org.opencv.android.Utils\nimport org.opencv.core.Mat\nimport java.io.ByteArrayOutputStream\nimport java.nio.ByteBuffer\nimport java.util.UUID\n\n\nval LocalNavController = staticCompositionLocalOf<NavController> {\n    error(\"No NavController provided\")\n}\n\n\n\n// Define navigation routes\nsealed class Screen(val route: String) {\n    object Camera : Screen(\"camera\")\n}\n\n@Composable\nfun CameraNavigation(\n    destination: String = \"Unbekanntes Ziel\",\n    startLocation: String = \"Unbekannter Start\"\n) {\n    val navController = rememberNavController()\n    val mainNavController = LocalNavController.current\n\n    NavHost(\n        navController = navController,\n        startDestination = Screen.Camera.route\n    ) {\n        composable(Screen.Camera.route) {\n            CameraScreen(\n                mainNavController = mainNavController,\n                destination = destination,\n                startLocation = startLocation\n            )\n        }\n    }\n}\n\n@Composable\nfun CameraScreen(\n    mainNavController: NavController,\n    destination: String = \"Unbekanntes Ziel\",\n    startLocation: String = \"Unbekannter Start\"\n) {\n    val context = LocalContext.current\n    val activity = context as Activity\n    val lifecycleOwner = androidx.lifecycle.compose.LocalLifecycleOwner.current\n    val routeViewModel: RouteViewModel = viewModel()\n    \n    // Lade Route aus JSON-Datei und aktiviere Feature Mapping sofort\n    LaunchedEffect(Unit) {\n        routeViewModel.loadNavigationRoute(context)\n        // Stelle sicher, dass Feature Mapping sofort aktiv ist\n        routeViewModel.enableStorageSystemImmediately(context)\n        // Starte Frame-Processing für Feature Matching\n        routeViewModel.startFrameProcessing()\n    }\n    \n    // Verwende Route-Informationen aus JSON oder Fallback-Werte\n    val currentRoute by routeViewModel.currentRoute.collectAsState()\n    val actualStartLocation = currentRoute?.let { \n        routeViewModel.getCurrentStartPoint() \n    } ?: startLocation\n    val actualDestination = currentRoute?.let { \n        routeViewModel.getCurrentEndPoint() \n    } ?: destination\n\n    var hasPermission by remember {\n        mutableStateOf(\n            ContextCompat.checkSelfPermission(\n                context,\n                Manifest.permission.CAMERA\n            ) == PackageManager.PERMISSION_GRANTED\n        )\n    }\n    var showRationaleDialog by remember { mutableStateOf(false) }\n\n    // Zoom state management\n    var currentZoomRatio by remember { mutableStateOf(1.0f) }\n    var availableZoomRatios by remember { mutableStateOf(listOf(0.7f, 1.0f, 2.0f)) }\n\n    val launcher = rememberLauncherForActivityResult(\n        contract = ActivityResultContracts.RequestPermission()\n    ) { granted ->\n        hasPermission = granted\n    }\n\n    LaunchedEffect(hasPermission) {\n        if (!hasPermission) {\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M &&\n                ActivityCompat.shouldShowRequestPermissionRationale(\n                    activity,\n                    Manifest.permission.CAMERA\n                )\n            ) {\n                showRationaleDialog = true\n            } else {\n                launcher.launch(Manifest.permission.CAMERA)\n            }\n        }\n    }\n\n    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n        if (hasPermission) {\n            // Live-Kameravorschau\n            CameraPreviewView(\n                modifier = Modifier.fillMaxSize(),\n                lifecycleOwner = lifecycleOwner,\n                zoomRatio = currentZoomRatio,\n                onAvailableZoomRatiosChanged = { ratios ->\n                    availableZoomRatios = ratios\n                },\n                onFrameProcessed = { bitmap ->\n                    // Frame für Feature Mapping verarbeiten\n                    try {\n                        val mat = Mat()\n                        Utils.bitmapToMat(bitmap, mat)\n                        routeViewModel.processFrameForFeatureMatching(mat)\n                    } catch (e: Exception) {\n                        Log.e(\"CameraScreen\", \"Error processing frame for feature matching\", e)\n                    }\n                }\n            )\n\n            // AR Walking UI Overlay\n            ARWalkingUIOverlay(\n                mainNavController = mainNavController,\n                destination = actualDestination,\n                startLocation = actualStartLocation,\n                availableZoomRatios = availableZoomRatios,\n                currentZoomRatio = currentZoomRatio,\n                onZoomChange = { newZoomRatio ->\n                    currentZoomRatio = newZoomRatio\n                },\n                routeViewModel = routeViewModel\n            )\n\n        } else {\n            // Klick-Box zum Anfordern der Berechtigung\n            Box(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .background(Color.Black)\n                    .clickable { launcher.launch(Manifest.permission.CAMERA) },\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\n                    text = \"Kamera erlauben\",\n                    color = Color.White\n                )\n            }\n        }\n    }\n\n    if (showRationaleDialog) {\n        AlertDialog(\n            onDismissRequest = {},\n            title = { Text(\"Kamera-Berechtigung\") },\n            text = { Text(\"Wir benötigen Zugriff auf die Kamera, um eine Vorschau anzuzeigen.\") },\n            confirmButton = {\n                TextButton(onClick = {\n                    showRationaleDialog = false\n                    launcher.launch(Manifest.permission.CAMERA)\n                }) { Text(\"OK\") }\n            },\n            dismissButton = {\n                TextButton(onClick = {\n                    showRationaleDialog = false\n                }) { Text(\"Abbrechen\") }\n            }\n        )\n    }\n}\n\n@Composable\nfun ARWalkingUIOverlay(\n    mainNavController: NavController,\n    destination: String = \"Unbekanntes Ziel\",\n    startLocation: String = \"Unbekannter Start\",\n    availableZoomRatios: List<Float> = listOf(0.7f, 1.0f, 2.0f),\n    currentZoomRatio: Float = 1.0f,\n    onZoomChange: (Float) -> Unit = {},\n    routeViewModel: RouteViewModel\n) {\n    val context = LocalContext.current\n    val coroutineScope = rememberCoroutineScope()\n    // Get current route from ViewModel\n    val currentRoute by routeViewModel.currentRoute.collectAsState()\n    \n    // Compute actual destination from route or use fallback\n    val actualDestination = currentRoute?.let { \n        routeViewModel.getCurrentEndPoint() \n    } ?: destination\n    \n    // Check if current route is a favorite (reactive)\n    val favorites by FavoritesRepository.favorites.collectAsState()\n    val isFavorite = favorites.any {\n        it.startLocation == startLocation && it.destination == destination\n    }\n\n    // Feature Mapping State\n    val featureMatches by routeViewModel.currentMatches.collectAsState()\n    val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()\n    val availableLandmarks = routeViewModel.getAvailableLandmarks()\n\n\n\n\n    // Frame Processing wird direkt in der CameraPreviewView gehandhabt\n    // (Doppelte LaunchedEffect entfernt - bereits in CameraScreen initialisiert)\n\n    Box(\n        modifier = Modifier.fillMaxSize()\n    ) {\n        // Semi-transparent black gradient at the top\n        Box(\n            modifier = Modifier\n                .fillMaxWidth()\n                .requiredHeight(300.dp)\n                .background(\n                    brush = GradientUtils.safeVerticalGradient(\n                        colors = listOf(\n                            Color.Black.copy(alpha = 0.6f),\n                            Color.Black.copy(alpha = 0.25f),\n                            Color.Transparent\n                        ),\n                        startY = 0f,\n                        endY = 800f\n                    )\n                )\n        )\n\n        // Top bar with back button and destination text\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .fillMaxWidth()\n                .offset(y = 70.dp)\n                .padding(horizontal = 20.dp)\n        ) {\n            // Back button\n            Icon(\n                painter = painterResource(id = R.drawable.chevron_left_1),\n                contentDescription = \"Back\",\n                tint = Color.White,\n                modifier = Modifier\n                    .align(Alignment.CenterStart)\n                    .size(35.dp)\n                    .clickable {\n                        mainNavController.navigate(\"home\") {\n                            popUpTo(\"home\") { inclusive = true }\n                        }\n                    }\n                    .padding(4.dp)\n            )\n\n            // Destination text\n            Text(\n                text = destination,\n                color = Color.White,\n                fontSize = 16.sp,\n                fontWeight = FontWeight.SemiBold,\n                textAlign = TextAlign.Center,\n                maxLines = 3,\n                overflow = TextOverflow.Ellipsis,\n                lineHeight = 20.sp,\n                modifier = Modifier\n                    .align(Alignment.Center)\n                    .fillMaxWidth(0.7f)\n                    .drawBehind {\n                        drawIntoCanvas { canvas ->\n                            val shadowPaint = Paint().apply {\n                                color = Color.Black.copy(alpha = 0.5f)\n                                isAntiAlias = true\n                            }\n                        }\n                    }\n            )\n\n            // Right side buttons\n            Row(\n                modifier = Modifier.align(Alignment.CenterEnd),\n                horizontalArrangement = Arrangement.spacedBy(8.dp)\n            ) {\n\n\n                // Favorite button\n                Icon(\n                    painter = painterResource(\n                        id = if (isFavorite) R.drawable.star_filled else R.drawable.star_outline\n                    ),\n                    contentDescription = if (isFavorite) \"Remove from favorites\" else \"Add to favorites\",\n                    tint = Color.Unspecified,\n                    modifier = Modifier\n                        .size(35.dp)\n                        .clickable {\n                            if (isFavorite) {\n                                val favorites = FavoritesRepository.favorites.value\n                                val favoriteToRemove = favorites.find {\n                                    it.startLocation == startLocation && it.destination == destination\n                                }\n                                favoriteToRemove?.let {\n                                    FavoritesRepository.removeFavorite(it)\n                                }\n                            } else {\n                                FavoritesRepository.addFavorite(startLocation, destination)\n                            }\n                        }\n                        .padding(4.dp)\n                )\n            }\n        }\n\n        // Load navigation steps from JSON route\n        val navigationSteps: List<NavigationStepData> = if (currentRoute != null) {\n            routeViewModel.getCurrentNavigationSteps().mapIndexed { index, step ->\n                NavigationStepData(\n                    stepNumber = index + 1,\n                    instruction = step.instruction.replace(\"<b>\", \"\").replace(\"</b>\", \"\").replace(\"<\\\\/b>\", \"\"),\n                    distance = step.distance,\n                    isCompleted = false\n                )\n            }\n        } else {\n            listOf(\n                NavigationStepData(\n                    stepNumber = 1,\n                    instruction = \"Route wird aus JSON geladen...\",\n                    distance = 0.0,\n                    isCompleted = false\n                )\n            )\n        }\n\n        // 3D Arrow Overlay (main AR feature)\n        val configuration = androidx.compose.ui.platform.LocalConfiguration.current\n        val density = androidx.compose.ui.platform.LocalDensity.current\n        \n        val screenWidth = with(density) { configuration.screenWidthDp.dp.toPx() }\n        val screenHeight = with(density) { configuration.screenHeightDp.dp.toPx() }\n        \n        // Berechne aktuellen Schritt und Gesamtschritte aus der Route\n        val currentStepNumber by routeViewModel.currentNavigationStep.collectAsState()\n        val totalStepsCount = navigationSteps.size\n        \n        // Hole die aktuelle Navigationsanweisung für den Pfeil\n        val currentRoute by routeViewModel.currentRoute.collectAsState()\n        val currentArrowInstruction = currentRoute?.let { route ->\n            val steps = routeViewModel.getCurrentNavigationSteps()\n            if (currentStepNumber > 0 && currentStepNumber <= steps.size) {\n                steps[currentStepNumber - 1].instruction\n            } else null\n        }\n        \n        Animated3DArrowOverlay(\n            matches = featureMatches,\n            isFeatureMappingEnabled = isFeatureMappingEnabled,\n            screenWidth = screenWidth,\n            screenHeight = screenHeight,\n            currentStep = currentStepNumber,\n            totalSteps = totalStepsCount,\n            modifier = Modifier.fillMaxSize(),\n            currentInstruction = currentArrowInstruction\n        )\n\n        // Feature Mapping Overlays\n        FeatureMatchOverlay(\n            matches = featureMatches,\n            isFeatureMappingEnabled = isFeatureMappingEnabled,\n            modifier = Modifier\n                .align(Alignment.TopStart)\n                .padding(top = 80.dp)\n        )\n\n        // Feature Mapping Status Indicator\n        FeatureMappingStatusIndicator(\n            isEnabled = isFeatureMappingEnabled,\n            isProcessing = featureMatches.isNotEmpty(), // Verwende aktuelle Matches als Processing-Indikator\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .padding(top = 110.dp, end = 16.dp)\n        )\n\n        // AR Info Island - zeigt AR-Status und Landmark-Informationen\n        ARInfoIslandOverlay(\n            routeViewModel = routeViewModel,\n            modifier = Modifier\n                .align(Alignment.Center)\n                .padding(horizontal = 32.dp)\n                .offset(y = (-150).dp)\n        )\n\n\n\n\n\n\n\n        // Navigation Drawer with enhanced UI\n        NavigationDrawerList(\n            steps = navigationSteps,\n            currentStep = currentStepNumber,\n            destinationLabel = actualDestination,\n            onClose = { /* Handle close if needed */ },\n            availableZoomRatios = availableZoomRatios,\n            currentZoomRatio = currentZoomRatio,\n            onZoomChange = onZoomChange,\n            modifier = Modifier\n                .align(alignment = Alignment.BottomCenter)\n        )\n    }\n}\n\n@Composable\nfun Property1Variant2(modifier: Modifier = Modifier) {\n    Box(\n        modifier = modifier\n            .requiredWidth(width = 290.dp)\n            .requiredHeight(height = 248.dp)\n    ) {\n        Property1Default()\n    }\n}\n\n@Composable\nfun Property1Default(modifier: Modifier = Modifier) {\n    Box(\n        modifier = modifier\n            .fillMaxSize()\n            .padding(\n                start = 12.dp,\n                end = 244.dp,\n                top = 18.dp,\n                bottom = 196.dp\n            )\n    )\n}\n\n@Composable\nfun CameraPreviewView(\n    modifier: Modifier = Modifier,\n    lifecycleOwner: LifecycleOwner,\n    zoomRatio: Float = 1.0f,\n    onAvailableZoomRatiosChanged: (List<Float>) -> Unit = {},\n    onFrameProcessed: ((Bitmap) -> Unit)? = null\n) {\n    val context = LocalContext.current\n    var cameraError by remember { mutableStateOf<String?>(null) }\n    var camera by remember { mutableStateOf<Camera?>(null) }\n\n    LaunchedEffect(zoomRatio) {\n        camera?.let { cam ->\n            try {\n                cam.cameraControl.setZoomRatio(zoomRatio)\n                Log.d(\"CameraZoom\", \"Zoom applied: ${zoomRatio}x\")\n            } catch (e: Exception) {\n                Log.e(\"CameraZoom\", \"Failed to apply zoom: ${zoomRatio}x\", e)\n            }\n        }\n    }\n\n    if (cameraError != null) {\n        Box(\n            modifier = modifier\n                .fillMaxSize()\n                .background(Color.Black),\n            contentAlignment = Alignment.Center\n        ) {\n            Text(\n                text = \"Kamera-Fehler: $cameraError\",\n                color = Color.White,\n                fontSize = 16.sp,\n                textAlign = TextAlign.Center,\n                modifier = Modifier.padding(24.dp)\n            )\n        }\n        return\n    }\n\n    AndroidView(\n        modifier = modifier,\n        factory = { ctx ->\n            PreviewView(ctx).apply {\n                try {\n                    val cameraProviderFuture = ProcessCameraProvider.getInstance(ctx)\n                    cameraProviderFuture.addListener({\n                        try {\n                            val cameraProvider = cameraProviderFuture.get()\n\n                            if (!cameraProvider.hasCamera(CameraSelector.DEFAULT_BACK_CAMERA)) {\n                                Log.e(\"CameraPreview\", \"Keine Rückkamera verfügbar\")\n                                cameraError = \"Keine Rückkamera verfügbar\"\n                                return@addListener\n                            }\n\n                            val preview = Preview.Builder()\n                                .build()\n                                .also { p ->\n                                    p.setSurfaceProvider(surfaceProvider)\n                                }\n\n                            val imageAnalysis = if (onFrameProcessed != null) {\n                                ImageAnalysis.Builder()\n                                    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)\n                                    .build()\n                                    .also { analysis ->\n                                        analysis.setAnalyzer(ContextCompat.getMainExecutor(ctx)) { imageProxy ->\n                                            try {\n                                                val bitmap = imageProxyToBitmap(imageProxy)\n                                                if (bitmap != null) {\n                                                    onFrameProcessed(bitmap)\n                                                }\n                                            } catch (e: Exception) {\n                                                Log.e(\"CameraPreview\", \"Frame processing error: ${e.message}\")\n                                            } finally {\n                                                imageProxy.close()\n                                            }\n                                        }\n                                    }\n                            } else null\n\n                            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA\n                            cameraProvider.unbindAll()\n\n                            val useCases = if (imageAnalysis != null) {\n                                arrayOf(preview, imageAnalysis)\n                            } else {\n                                arrayOf(preview)\n                            }\n\n                            val boundCamera = cameraProvider.bindToLifecycle(\n                                lifecycleOwner,\n                                cameraSelector,\n                                *useCases\n                            )\n\n                            camera = boundCamera\n                            setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)\n                            boundCamera.cameraControl.setZoomRatio(zoomRatio)\n\n                            Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")\n\n                        } catch (exc: Exception) {\n                            Log.e(\"CameraPreview\", \"Kamera-Bindung fehlgeschlagen\", exc)\n                            cameraError = \"Kamera konnte nicht gestartet werden\"\n                        }\n                    }, ContextCompat.getMainExecutor(ctx))\n\n                } catch (exc: Exception) {\n                    Log.e(\"CameraPreview\", \"Fehler beim Kamera-Setup\", exc)\n                    cameraError = \"Kamera-Initialisierung fehlgeschlagen\"\n                }\n            }\n        }\n    )\n}\n\n// Improved bitmap conversion function\nprivate fun imageProxyToBitmap(imageProxy: ImageProxy): Bitmap? {\n    return try {\n        when (imageProxy.format) {\n            ImageFormat.YUV_420_888 -> {\n                // Handle YUV format (most common)\n                val yBuffer = imageProxy.planes[0].buffer\n                val uBuffer = imageProxy.planes[1].buffer\n                val vBuffer = imageProxy.planes[2].buffer\n\n                val ySize = yBuffer.remaining()\n                val uSize = uBuffer.remaining()\n                val vSize = vBuffer.remaining()\n\n                val nv21 = ByteArray(ySize + uSize + vSize)\n\n                yBuffer.get(nv21, 0, ySize)\n                vBuffer.get(nv21, ySize, vSize)\n                uBuffer.get(nv21, ySize + vSize, uSize)\n\n                val yuvImage = YuvImage(nv21, ImageFormat.NV21, imageProxy.width, imageProxy.height, null)\n                val out = ByteArrayOutputStream()\n                yuvImage.compressToJpeg(Rect(0, 0, yuvImage.width, yuvImage.height), 75, out)\n                val imageBytes = out.toByteArray()\n\n                val bitmap = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.size)\n\n                // Rotate bitmap if needed\n                val rotationDegrees = imageProxy.imageInfo.rotationDegrees\n                if (rotationDegrees != 0) {\n                    val matrix = Matrix().apply { postRotate(rotationDegrees.toFloat()) }\n                    return Bitmap.createBitmap(bitmap, 0, 0, bitmap.width, bitmap.height, matrix, true)\n                }\n\n                bitmap\n            }\n            ImageFormat.JPEG -> {\n                // Handle JPEG format\n                val buffer: ByteBuffer = imageProxy.planes[0].buffer\n                val bytes = ByteArray(buffer.remaining())\n                buffer.get(bytes)\n                BitmapFactory.decodeByteArray(bytes, 0, bytes.size)\n            }\n            else -> {\n                Log.w(\"CameraPreview\", \"Unsupported image format: ${imageProxy.format}\")\n                null\n            }\n        }\n    } catch (e: Exception) {\n        Log.e(\"CameraPreview\", \"Error converting ImageProxy to Bitmap: ${e.message}\", e)\n        null\n    }\n}\n\n// Helper function to setup zoom capabilities\nprivate fun setupZoomCapabilities(camera: Camera, onAvailableZoomRatiosChanged: (List<Float>) -> Unit) {\n    val cameraInfo: CameraInfo = camera.cameraInfo\n    val zoomState = cameraInfo.zoomState.value\n\n    if (zoomState != null) {\n        val minZoom = zoomState.minZoomRatio\n        val maxZoom = zoomState.maxZoomRatio\n\n        Log.d(\"CameraZoom\", \"Zoom range: $minZoom - $maxZoom\")\n\n        val availableZoomRatios = mutableListOf<Float>()\n\n        if (minZoom < 1.0f) {\n            val ultraWideZoom = maxOf(minZoom, 0.5f)\n            availableZoomRatios.add(ultraWideZoom)\n        }\n\n        availableZoomRatios.add(1.0f)\n\n        if (maxZoom >= 2.0f) {\n            availableZoomRatios.add(2.0f)\n        }\n\n        if (minZoom >= 1.0f && availableZoomRatios.size < 3) {\n            availableZoomRatios.add(0, 0.7f)\n        }\n\n        Log.d(\"CameraZoom\", \"Available zoom ratios: $availableZoomRatios\")\n        onAvailableZoomRatiosChanged(availableZoomRatios)\n    } else {\n        Log.w(\"CameraZoom\", \"Zoom state not available, using default ratios\")\n        onAvailableZoomRatiosChanged(listOf(0.7f, 1.0f, 2.0f))\n    }\n}\n\n\n\n/**\n * AR Info Island Overlay für den NavigationsScreen\n */\n@Composable\nprivate fun ARInfoIslandOverlay(\n    routeViewModel: RouteViewModel,\n    modifier: Modifier = Modifier\n) {\n    val matches by routeViewModel.currentMatches.collectAsState()\n    val isFeatureMappingEnabled by routeViewModel.isFeatureMappingEnabled.collectAsState()\n    \n    val landmarkCount = matches.size\n    val bestConfidence = matches.maxOfOrNull { match -> match.confidence } ?: 0f\n    val isTracking = matches.isNotEmpty()\n    \n    // Automatischer AR-Status basierend auf aktuellen Bedingungen\n    val arStatus = rememberARScanStatus(\n        isInitialized = isFeatureMappingEnabled,\n        landmarkCount = landmarkCount,\n        bestConfidence = bestConfidence,\n        isTracking = isTracking\n    )\n    \n    // Hole die aktuelle Navigationsanweisung\n    val currentRoute by routeViewModel.currentRoute.collectAsState()\n    val currentStepNumber by routeViewModel.currentNavigationStep.collectAsState()\n    val currentInstruction = currentRoute?.let { route ->\n        val steps = routeViewModel.getCurrentNavigationSteps()\n        if (currentStepNumber > 0 && currentStepNumber <= steps.size) {\n            steps[currentStepNumber - 1].instruction\n        } else null\n    }\n    \n    // Verwende die erweiterte ARInfoIsland mit mehr Informationen\n    ExpandedARInfoIsland(\n        scanStatus = arStatus,\n        landmarkCount = landmarkCount,\n        confidence = bestConfidence,\n        modifier = modifier,\n        isVisible = isFeatureMappingEnabled,\n        currentInstruction = currentInstruction\n    )\n}","baseTimestamp":1754562694786,"deltas":[{"timestamp":1754562801513,"changes":[{"type":"DELETE","lineNumber":79,"oldContent":"import com.example.arwalking.FeatureLandmark"},{"type":"DELETE","lineNumber":80,"oldContent":"import com.example.arwalking.components.AR3DArrowOverlay"},{"type":"DELETE","lineNumber":81,"oldContent":"import com.example.arwalking.components.ARInfoIsland"},{"type":"DELETE","lineNumber":82,"oldContent":"import com.example.arwalking.components.ARScanStatus"},{"type":"DELETE","lineNumber":88,"oldContent":""},{"type":"DELETE","lineNumber":89,"oldContent":""},{"type":"DELETE","lineNumber":91,"oldContent":"import com.example.arwalking.components.NavigationDrawer"},{"type":"DELETE","lineNumber":94,"oldContent":"import kotlinx.coroutines.delay"},{"type":"DELETE","lineNumber":99,"oldContent":"import java.util.UUID"}]},{"timestamp":1754565410365,"changes":[{"type":"MODIFY","lineNumber":486,"content":"        // Get route summary for enhanced drawer information","oldContent":"        // Navigation Drawer with enhanced UI"},{"type":"INSERT","lineNumber":487,"content":"        val routeSummary = routeViewModel.getRouteSummary()"},{"type":"INSERT","lineNumber":488,"content":"        "},{"type":"INSERT","lineNumber":489,"content":"        // Navigation Drawer with enhanced UI and route information from JSON"},{"type":"DELETE","lineNumber":490,"oldContent":"            destinationLabel = actualDestination,"},{"type":"INSERT","lineNumber":493,"content":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"}]},{"timestamp":1754565421415,"changes":[{"type":"DELETE","lineNumber":277,"oldContent":"    // Compute actual destination from route or use fallback"},{"type":"DELETE","lineNumber":278,"oldContent":"    val actualDestination = currentRoute?.let { "},{"type":"DELETE","lineNumber":279,"oldContent":"        routeViewModel.getCurrentEndPoint() "},{"type":"DELETE","lineNumber":280,"oldContent":"    } ?: destination"},{"type":"INSERT","lineNumber":277,"content":"    // Get route summary with all information from JSON"},{"type":"INSERT","lineNumber":278,"content":"    val routeSummary = routeViewModel.getRouteSummary()"},{"type":"DELETE","lineNumber":282,"oldContent":"    // Check if current route is a favorite (reactive)"},{"type":"INSERT","lineNumber":280,"content":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":281,"content":"    val actualDestination = routeSummary.endPoint.takeIf { it.isNotBlank() } ?: destination"},{"type":"INSERT","lineNumber":282,"content":"    val actualStartLocation = routeSummary.startPoint.takeIf { it.isNotBlank() } ?: startLocation"},{"type":"INSERT","lineNumber":283,"content":"    "},{"type":"INSERT","lineNumber":284,"content":"    // Check if current route is a favorite (reactive) - use actual route data"},{"type":"DELETE","lineNumber":285,"oldContent":"        it.startLocation == startLocation && it.destination == destination"},{"type":"INSERT","lineNumber":287,"content":"        it.startLocation == actualStartLocation && it.destination == actualDestination"},{"type":"DELETE","lineNumber":488,"oldContent":"        NavigationDrawerList("},{"type":"DELETE","lineNumber":490,"oldContent":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":492,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":493,"content":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":495,"content":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"},{"type":"DELETE","lineNumber":495,"oldContent":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"}]},{"timestamp":1754565428685,"changes":[{"type":"DELETE","lineNumber":148,"oldContent":"    val actualStartLocation = currentRoute?.let { "},{"type":"DELETE","lineNumber":149,"oldContent":"        routeViewModel.getCurrentStartPoint() "},{"type":"DELETE","lineNumber":150,"oldContent":"    } ?: startLocation"},{"type":"DELETE","lineNumber":151,"oldContent":"    val actualDestination = currentRoute?.let { "},{"type":"DELETE","lineNumber":152,"oldContent":"        routeViewModel.getCurrentEndPoint() "},{"type":"DELETE","lineNumber":153,"oldContent":"    } ?: destination"},{"type":"INSERT","lineNumber":148,"content":"    val routeSummary = routeViewModel.getRouteSummary()"},{"type":"INSERT","lineNumber":149,"content":"    "},{"type":"INSERT","lineNumber":150,"content":"    val actualStartLocation = routeSummary.startPoint.takeIf { it.isNotBlank() } ?: startLocation"},{"type":"INSERT","lineNumber":151,"content":"    val actualDestination = routeSummary.endPoint.takeIf { it.isNotBlank() } ?: destination"},{"type":"INSERT","lineNumber":277,"content":"    "},{"type":"DELETE","lineNumber":281,"oldContent":"    "},{"type":"MODIFY","lineNumber":283,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()","oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"MODIFY","lineNumber":286,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":492,"content":"            currentStep = currentStepNumber,","oldContent":"            currentStep = currentStepNumber,"},{"type":"INSERT","lineNumber":493,"content":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"},{"type":"DELETE","lineNumber":497,"oldContent":"            destinationLabel = routeSummary.endPoint, // Use endpoint from JSON"}]},{"timestamp":1754915741874,"changes":[{"type":"INSERT","lineNumber":137,"content":"    Log.d(\"CameraScreen\", \"CameraScreen composable started\")"},{"type":"INSERT","lineNumber":138,"content":"    "},{"type":"INSERT","lineNumber":141,"content":"        Log.d(\"CameraScreen\", \"LaunchedEffect started - initializing route and storage\")"},{"type":"INSERT","lineNumber":147,"content":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed\")"},{"type":"INSERT","lineNumber":178,"content":"        Log.d(\"CameraScreen\", \"Camera permission status: $hasPermission\")"},{"type":"INSERT","lineNumber":186,"content":"                Log.d(\"CameraScreen\", \"Showing permission rationale dialog\")"},{"type":"INSERT","lineNumber":189,"content":"                Log.d(\"CameraScreen\", \"Requesting camera permission\")"},{"type":"INSERT","lineNumber":192,"content":"        } else {"},{"type":"INSERT","lineNumber":193,"content":"            Log.d(\"CameraScreen\", \"Camera permission granted, initializing camera\")"},{"type":"INSERT","lineNumber":194,"content":"            // Stelle sicher, dass Landmarks geladen sind, wenn die Navigation startet"},{"type":"INSERT","lineNumber":195,"content":"            Log.i(\"CameraScreen\", \"🚀 Navigation gestartet - stelle sicher, dass Landmarks geladen sind\")"},{"type":"INSERT","lineNumber":196,"content":"            routeViewModel.ensureLandmarksLoaded(context)"},{"type":"INSERT","lineNumber":213,"content":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":275,"oldContent":"    "},{"type":"INSERT","lineNumber":290,"content":"    "},{"type":"DELETE","lineNumber":281,"oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":282,"oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"INSERT","lineNumber":294,"content":"    "},{"type":"DELETE","lineNumber":284,"oldContent":"    }"},{"type":"DELETE","lineNumber":285,"oldContent":"    }"},{"type":"INSERT","lineNumber":296,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"INSERT","lineNumber":297,"content":"    val isFavorite = favorites.any {"},{"type":"INSERT","lineNumber":299,"content":"    }"},{"type":"INSERT","lineNumber":503,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":504,"content":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":492,"oldContent":"            currentStep = currentStepNumber,"},{"type":"DELETE","lineNumber":493,"oldContent":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":574,"oldContent":"                try {"},{"type":"DELETE","lineNumber":575,"oldContent":"                    val cameraProviderFuture = ProcessCameraProvider.getInstance(ctx)"},{"type":"DELETE","lineNumber":576,"oldContent":"                    cameraProviderFuture.addListener({"},{"type":"DELETE","lineNumber":577,"oldContent":"                        try {"},{"type":"DELETE","lineNumber":578,"oldContent":"                            val cameraProvider = cameraProviderFuture.get()"},{"type":"INSERT","lineNumber":587,"content":"                Log.d(\"CameraPreview\", \"Creating PreviewView\")"},{"type":"INSERT","lineNumber":588,"content":"            }"},{"type":"INSERT","lineNumber":589,"content":"        },"},{"type":"INSERT","lineNumber":590,"content":"        update = { previewView ->"},{"type":"INSERT","lineNumber":591,"content":"            try {"},{"type":"INSERT","lineNumber":592,"content":"                Log.d(\"CameraPreview\", \"Updating PreviewView with camera setup\")"},{"type":"INSERT","lineNumber":593,"content":"                val cameraProviderFuture = ProcessCameraProvider.getInstance(previewView.context)"},{"type":"INSERT","lineNumber":594,"content":"                cameraProviderFuture.addListener({"},{"type":"INSERT","lineNumber":595,"content":"                    try {"},{"type":"INSERT","lineNumber":596,"content":"                        val cameraProvider = cameraProviderFuture.get()"},{"type":"DELETE","lineNumber":580,"oldContent":"                            if (!cameraProvider.hasCamera(CameraSelector.DEFAULT_BACK_CAMERA)) {"},{"type":"DELETE","lineNumber":581,"oldContent":"                                Log.e(\"CameraPreview\", \"Keine Rückkamera verfügbar\")"},{"type":"DELETE","lineNumber":582,"oldContent":"                                cameraError = \"Keine Rückkamera verfügbar\""},{"type":"DELETE","lineNumber":583,"oldContent":"                                return@addListener"},{"type":"INSERT","lineNumber":598,"content":"                        if (!cameraProvider.hasCamera(CameraSelector.DEFAULT_BACK_CAMERA)) {"},{"type":"INSERT","lineNumber":599,"content":"                            Log.e(\"CameraPreview\", \"Keine Rückkamera verfügbar\")"},{"type":"INSERT","lineNumber":600,"content":"                            cameraError = \"Keine Rückkamera verfügbar\""},{"type":"INSERT","lineNumber":601,"content":"                            return@addListener"},{"type":"INSERT","lineNumber":602,"content":"                        }"},{"type":"INSERT","lineNumber":603,"content":""},{"type":"INSERT","lineNumber":604,"content":"                        val preview = Preview.Builder()"},{"type":"INSERT","lineNumber":605,"content":"                            .build()"},{"type":"INSERT","lineNumber":606,"content":"                            .also { p ->"},{"type":"INSERT","lineNumber":607,"content":"                                p.setSurfaceProvider(previewView.surfaceProvider)"},{"type":"DELETE","lineNumber":586,"oldContent":"                            val preview = Preview.Builder()"},{"type":"INSERT","lineNumber":610,"content":"                        val imageAnalysis = if (onFrameProcessed != null) {"},{"type":"INSERT","lineNumber":611,"content":"                            Log.d(\"CameraPreview\", \"Setting up image analysis with frame processing\")"},{"type":"INSERT","lineNumber":612,"content":"                            ImageAnalysis.Builder()"},{"type":"INSERT","lineNumber":613,"content":"                                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)"},{"type":"DELETE","lineNumber":588,"oldContent":"                                .also { p ->"},{"type":"DELETE","lineNumber":589,"oldContent":"                                    p.setSurfaceProvider(surfaceProvider)"},{"type":"DELETE","lineNumber":590,"oldContent":"                                }"},{"type":"DELETE","lineNumber":591,"oldContent":""},{"type":"DELETE","lineNumber":592,"oldContent":"                            val imageAnalysis = if (onFrameProcessed != null) {"},{"type":"DELETE","lineNumber":593,"oldContent":"                                ImageAnalysis.Builder()"},{"type":"DELETE","lineNumber":594,"oldContent":"                                    .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)"},{"type":"DELETE","lineNumber":595,"oldContent":"                                    .build()"},{"type":"DELETE","lineNumber":596,"oldContent":"                                    .also { analysis ->"},{"type":"DELETE","lineNumber":597,"oldContent":"                                        analysis.setAnalyzer(ContextCompat.getMainExecutor(ctx)) { imageProxy ->"},{"type":"INSERT","lineNumber":615,"content":"                                .also { analysis ->"},{"type":"INSERT","lineNumber":616,"content":"                                    analysis.setAnalyzer(ContextCompat.getMainExecutor(previewView.context)) { imageProxy ->"},{"type":"INSERT","lineNumber":618,"content":"                                                Log.d(\"CameraPreview\", \"Processing frame: ${imageProxy.width}x${imageProxy.height}\")"},{"type":"INSERT","lineNumber":621,"content":"                                                    Log.d(\"CameraPreview\", \"Bitmap created: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":623,"content":"                                                } else {"},{"type":"INSERT","lineNumber":624,"content":"                                                    Log.w(\"CameraPreview\", \"Failed to create bitmap from imageProxy\")"},{"type":"DELETE","lineNumber":609,"oldContent":"                                    }"},{"type":"DELETE","lineNumber":610,"oldContent":"                            } else null"},{"type":"INSERT","lineNumber":632,"content":"                                }"},{"type":"INSERT","lineNumber":633,"content":"                        } else {"},{"type":"INSERT","lineNumber":634,"content":"                            Log.d(\"CameraPreview\", \"No frame processing callback provided\")"},{"type":"INSERT","lineNumber":635,"content":"                            null"},{"type":"INSERT","lineNumber":636,"content":"                        }"},{"type":"DELETE","lineNumber":612,"oldContent":"                            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"DELETE","lineNumber":613,"oldContent":"                            cameraProvider.unbindAll()"},{"type":"INSERT","lineNumber":638,"content":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"INSERT","lineNumber":639,"content":"                        cameraProvider.unbindAll()"},{"type":"DELETE","lineNumber":615,"oldContent":"                            val useCases = if (imageAnalysis != null) {"},{"type":"DELETE","lineNumber":616,"oldContent":"                                arrayOf(preview, imageAnalysis)"},{"type":"DELETE","lineNumber":617,"oldContent":"                            } else {"},{"type":"DELETE","lineNumber":618,"oldContent":"                                arrayOf(preview)"},{"type":"DELETE","lineNumber":619,"oldContent":"                            }"},{"type":"INSERT","lineNumber":641,"content":"                        val useCases = if (imageAnalysis != null) {"},{"type":"INSERT","lineNumber":642,"content":"                            arrayOf(preview, imageAnalysis)"},{"type":"INSERT","lineNumber":643,"content":"                        } else {"},{"type":"INSERT","lineNumber":644,"content":"                            arrayOf(preview)"},{"type":"INSERT","lineNumber":645,"content":"                        }"},{"type":"DELETE","lineNumber":621,"oldContent":"                            val boundCamera = cameraProvider.bindToLifecycle("},{"type":"DELETE","lineNumber":622,"oldContent":"                                lifecycleOwner,"},{"type":"DELETE","lineNumber":623,"oldContent":"                                cameraSelector,"},{"type":"DELETE","lineNumber":624,"oldContent":"                                *useCases"},{"type":"DELETE","lineNumber":625,"oldContent":"                            )"},{"type":"INSERT","lineNumber":647,"content":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"INSERT","lineNumber":648,"content":"                            lifecycleOwner,"},{"type":"INSERT","lineNumber":649,"content":"                            cameraSelector,"},{"type":"INSERT","lineNumber":650,"content":"                            *useCases"},{"type":"INSERT","lineNumber":651,"content":"                        )"},{"type":"DELETE","lineNumber":627,"oldContent":"                            camera = boundCamera"},{"type":"DELETE","lineNumber":628,"oldContent":"                            setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)"},{"type":"DELETE","lineNumber":629,"oldContent":"                            boundCamera.cameraControl.setZoomRatio(zoomRatio)"},{"type":"INSERT","lineNumber":653,"content":"                        camera = boundCamera"},{"type":"INSERT","lineNumber":654,"content":"                        setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)"},{"type":"INSERT","lineNumber":655,"content":"                        boundCamera.cameraControl.setZoomRatio(zoomRatio)"},{"type":"DELETE","lineNumber":631,"oldContent":"                            Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":657,"content":"                        Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":633,"oldContent":"                        } catch (exc: Exception) {"},{"type":"DELETE","lineNumber":634,"oldContent":"                            Log.e(\"CameraPreview\", \"Kamera-Bindung fehlgeschlagen\", exc)"},{"type":"DELETE","lineNumber":635,"oldContent":"                            cameraError = \"Kamera konnte nicht gestartet werden\""},{"type":"DELETE","lineNumber":636,"oldContent":"                        }"},{"type":"DELETE","lineNumber":637,"oldContent":"                    }, ContextCompat.getMainExecutor(ctx))"},{"type":"INSERT","lineNumber":659,"content":"                    } catch (exc: Exception) {"},{"type":"INSERT","lineNumber":660,"content":"                        Log.e(\"CameraPreview\", \"Kamera-Bindung fehlgeschlagen\", exc)"},{"type":"INSERT","lineNumber":661,"content":"                        cameraError = \"Kamera konnte nicht gestartet werden\""},{"type":"INSERT","lineNumber":662,"content":"                    }"},{"type":"INSERT","lineNumber":663,"content":"                }, ContextCompat.getMainExecutor(previewView.context))"},{"type":"DELETE","lineNumber":639,"oldContent":"                } catch (exc: Exception) {"},{"type":"DELETE","lineNumber":640,"oldContent":"                    Log.e(\"CameraPreview\", \"Fehler beim Kamera-Setup\", exc)"},{"type":"DELETE","lineNumber":641,"oldContent":"                    cameraError = \"Kamera-Initialisierung fehlgeschlagen\""},{"type":"DELETE","lineNumber":642,"oldContent":"                }"},{"type":"INSERT","lineNumber":665,"content":"            } catch (exc: Exception) {"},{"type":"INSERT","lineNumber":666,"content":"                Log.e(\"CameraPreview\", \"Fehler beim Kamera-Setup\", exc)"},{"type":"INSERT","lineNumber":667,"content":"                cameraError = \"Kamera-Initialisierung fehlgeschlagen\""}]},{"timestamp":1754916317530,"changes":[{"type":"MODIFY","lineNumber":139,"content":"    // Lade Route aus JSON-Datei und aktiviere Feature Mapping sofort","oldContent":"    // Lade Route aus JSON-Datei und aktiviere Feature Mapping sofort"},{"type":"INSERT","lineNumber":141,"content":"        Log.d(\"CameraScreen\", \"LaunchedEffect started - initializing route and storage\")"},{"type":"DELETE","lineNumber":143,"oldContent":"        Log.d(\"CameraScreen\", \"LaunchedEffect started - initializing route and storage\")"},{"type":"INSERT","lineNumber":147,"content":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed\")"},{"type":"DELETE","lineNumber":150,"oldContent":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed\")"},{"type":"INSERT","lineNumber":178,"content":"        Log.d(\"CameraScreen\", \"Camera permission status: $hasPermission\")"},{"type":"DELETE","lineNumber":182,"oldContent":"        Log.d(\"CameraScreen\", \"Camera permission status: $hasPermission\")"},{"type":"INSERT","lineNumber":186,"content":"                Log.d(\"CameraScreen\", \"Showing permission rationale dialog\")"},{"type":"INSERT","lineNumber":189,"content":"                Log.d(\"CameraScreen\", \"Requesting camera permission\")"},{"type":"INSERT","lineNumber":192,"content":"        } else {"},{"type":"INSERT","lineNumber":193,"content":"            Log.d(\"CameraScreen\", \"Camera permission granted, initializing camera\")"},{"type":"DELETE","lineNumber":191,"oldContent":"                Log.d(\"CameraScreen\", \"Showing permission rationale dialog\")"},{"type":"DELETE","lineNumber":195,"oldContent":"                Log.d(\"CameraScreen\", \"Requesting camera permission\")"},{"type":"DELETE","lineNumber":199,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":201,"oldContent":"            Log.d(\"CameraScreen\", \"Camera permission granted, initializing camera\")"},{"type":"DELETE","lineNumber":203,"oldContent":"            // Stelle sicher, dass Landmarks geladen sind, wenn die Navigation startet"},{"type":"DELETE","lineNumber":205,"oldContent":"            Log.i(\"CameraScreen\", \"🚀 Navigation gestartet - stelle sicher, dass Landmarks geladen sind\")"},{"type":"DELETE","lineNumber":207,"oldContent":"            routeViewModel.ensureLandmarksLoaded(context)"},{"type":"INSERT","lineNumber":210,"content":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":225,"oldContent":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":287,"content":"    "},{"type":"INSERT","lineNumber":291,"content":"    "},{"type":"INSERT","lineNumber":293,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"INSERT","lineNumber":294,"content":"    val isFavorite = favorites.any {"},{"type":"INSERT","lineNumber":296,"content":"    }"},{"type":"DELETE","lineNumber":298,"oldContent":"    "},{"type":"DELETE","lineNumber":303,"oldContent":"    "},{"type":"DELETE","lineNumber":306,"oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":308,"oldContent":"    val isFavorite = favorites.any {"},{"type":"DELETE","lineNumber":311,"oldContent":"    }"},{"type":"INSERT","lineNumber":500,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":501,"content":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":514,"oldContent":"        NavigationDrawerList("},{"type":"DELETE","lineNumber":516,"oldContent":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":587,"oldContent":""},{"type":"DELETE","lineNumber":588,"oldContent":"                            }"},{"type":"DELETE","lineNumber":589,"oldContent":""},{"type":"DELETE","lineNumber":591,"oldContent":"                                .build()"},{"type":"INSERT","lineNumber":594,"content":""},{"type":"DELETE","lineNumber":602,"oldContent":"                                            try {"},{"type":"DELETE","lineNumber":604,"oldContent":"                                                val bitmap = imageProxyToBitmap(imageProxy)"},{"type":"DELETE","lineNumber":606,"oldContent":"                                                if (bitmap != null) {"},{"type":"DELETE","lineNumber":608,"oldContent":"                                                    onFrameProcessed(bitmap)"},{"type":"DELETE","lineNumber":610,"oldContent":"                                                }"},{"type":"DELETE","lineNumber":612,"oldContent":"                                            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":614,"oldContent":"                                                Log.e(\"CameraPreview\", \"Frame processing error: ${e.message}\")"},{"type":"DELETE","lineNumber":616,"oldContent":"                                            } finally {"},{"type":"DELETE","lineNumber":618,"oldContent":"                                                imageProxy.close()"},{"type":"DELETE","lineNumber":620,"oldContent":"                                            }"},{"type":"DELETE","lineNumber":621,"oldContent":"                                        }"},{"type":"INSERT","lineNumber":605,"content":"                            }"},{"type":"INSERT","lineNumber":606,"content":""},{"type":"DELETE","lineNumber":624,"oldContent":""},{"type":"DELETE","lineNumber":627,"oldContent":""},{"type":"INSERT","lineNumber":611,"content":"                                .build()"},{"type":"INSERT","lineNumber":614,"content":"                                            try {"},{"type":"DELETE","lineNumber":631,"oldContent":""},{"type":"INSERT","lineNumber":616,"content":"                                                val bitmap = imageProxyToBitmap(imageProxy)"},{"type":"INSERT","lineNumber":617,"content":"                                                if (bitmap != null) {"},{"type":"INSERT","lineNumber":619,"content":"                                                    onFrameProcessed(bitmap)"},{"type":"DELETE","lineNumber":635,"oldContent":""},{"type":"DELETE","lineNumber":636,"oldContent":""},{"type":"INSERT","lineNumber":622,"content":"                                                }"},{"type":"INSERT","lineNumber":623,"content":"                                            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":624,"content":"                                                Log.e(\"CameraPreview\", \"Frame processing error: ${e.message}\")"},{"type":"INSERT","lineNumber":625,"content":"                                            } finally {"},{"type":"INSERT","lineNumber":626,"content":"                                                imageProxy.close()"},{"type":"INSERT","lineNumber":627,"content":"                                            }"},{"type":"INSERT","lineNumber":628,"content":"                                        }"},{"type":"DELETE","lineNumber":638,"oldContent":""},{"type":"DELETE","lineNumber":643,"oldContent":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"INSERT","lineNumber":635,"content":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"INSERT","lineNumber":637,"content":""},{"type":"DELETE","lineNumber":649,"oldContent":"            }"},{"type":"DELETE","lineNumber":651,"oldContent":"        }"},{"type":"INSERT","lineNumber":643,"content":""},{"type":"INSERT","lineNumber":644,"content":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"INSERT","lineNumber":645,"content":"                            lifecycleOwner,"},{"type":"INSERT","lineNumber":646,"content":"                            cameraSelector,"},{"type":"INSERT","lineNumber":647,"content":"                            *useCases"},{"type":"INSERT","lineNumber":648,"content":"                        )"},{"type":"INSERT","lineNumber":649,"content":""},{"type":"INSERT","lineNumber":650,"content":"                        camera = boundCamera"},{"type":"INSERT","lineNumber":651,"content":"                        setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)"},{"type":"INSERT","lineNumber":652,"content":"                        boundCamera.cameraControl.setZoomRatio(zoomRatio)"},{"type":"INSERT","lineNumber":653,"content":""},{"type":"INSERT","lineNumber":654,"content":"                        Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":655,"content":""},{"type":"INSERT","lineNumber":656,"content":"                    } catch (exc: Exception) {"},{"type":"INSERT","lineNumber":657,"content":"                        Log.e(\"CameraPreview\", \"Kamera-Bindung fehlgeschlagen\", exc)"},{"type":"INSERT","lineNumber":658,"content":"                        cameraError = \"Kamera konnte nicht gestartet werden\""},{"type":"INSERT","lineNumber":659,"content":"                    }"},{"type":"INSERT","lineNumber":660,"content":"                }, ContextCompat.getMainExecutor(previewView.context))"},{"type":"INSERT","lineNumber":661,"content":""},{"type":"INSERT","lineNumber":662,"content":"            } catch (exc: Exception) {"},{"type":"INSERT","lineNumber":663,"content":"                Log.e(\"CameraPreview\", \"Fehler beim Kamera-Setup\", exc)"},{"type":"INSERT","lineNumber":664,"content":"                cameraError = \"Kamera-Initialisierung fehlgeschlagen\""},{"type":"INSERT","lineNumber":665,"content":"            }"},{"type":"INSERT","lineNumber":666,"content":"        }"},{"type":"DELETE","lineNumber":655,"oldContent":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"DELETE","lineNumber":657,"oldContent":"                            lifecycleOwner,"},{"type":"DELETE","lineNumber":659,"oldContent":"                            cameraSelector,"},{"type":"DELETE","lineNumber":661,"oldContent":"                            *useCases"},{"type":"DELETE","lineNumber":663,"oldContent":"                        )"},{"type":"DELETE","lineNumber":666,"oldContent":"                        camera = boundCamera"},{"type":"DELETE","lineNumber":668,"oldContent":"                        setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)"},{"type":"DELETE","lineNumber":670,"oldContent":"                        boundCamera.cameraControl.setZoomRatio(zoomRatio)"},{"type":"DELETE","lineNumber":673,"oldContent":"                        Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":676,"oldContent":"                    } catch (exc: Exception) {"},{"type":"DELETE","lineNumber":678,"oldContent":"                        Log.e(\"CameraPreview\", \"Kamera-Bindung fehlgeschlagen\", exc)"},{"type":"DELETE","lineNumber":680,"oldContent":"                        cameraError = \"Kamera konnte nicht gestartet werden\""},{"type":"DELETE","lineNumber":682,"oldContent":"                    }"},{"type":"DELETE","lineNumber":684,"oldContent":"                }, ContextCompat.getMainExecutor(previewView.context))"},{"type":"DELETE","lineNumber":687,"oldContent":"            } catch (exc: Exception) {"},{"type":"DELETE","lineNumber":689,"oldContent":"                Log.e(\"CameraPreview\", \"Fehler beim Kamera-Setup\", exc)"},{"type":"DELETE","lineNumber":691,"oldContent":"                cameraError = \"Kamera-Initialisierung fehlgeschlagen\""}]},{"timestamp":1754916913495,"changes":[{"type":"INSERT","lineNumber":138,"content":"    "},{"type":"DELETE","lineNumber":139,"oldContent":"    // Lade Route aus JSON-Datei und aktiviere Feature Mapping sofort"},{"type":"INSERT","lineNumber":142,"content":"        "},{"type":"INSERT","lineNumber":143,"content":"        // 1. Zuerst Route laden"},{"type":"DELETE","lineNumber":143,"oldContent":"        // Stelle sicher, dass Feature Mapping sofort aktiv ist"},{"type":"INSERT","lineNumber":145,"content":"        "},{"type":"INSERT","lineNumber":146,"content":"        // 2. Kurz warten, damit Route geladen wird"},{"type":"INSERT","lineNumber":147,"content":"        kotlinx.coroutines.delay(100)"},{"type":"INSERT","lineNumber":148,"content":"        "},{"type":"INSERT","lineNumber":149,"content":"        // 3. Dann Storage-System aktivieren (lädt automatisch Landmarks)"},{"type":"DELETE","lineNumber":145,"oldContent":"        // Starte Frame-Processing für Feature Matching"},{"type":"INSERT","lineNumber":151,"content":"        "},{"type":"INSERT","lineNumber":152,"content":"        // 4. Frame-Processing starten"},{"type":"DELETE","lineNumber":147,"oldContent":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed\")"},{"type":"INSERT","lineNumber":154,"content":"        "},{"type":"INSERT","lineNumber":155,"content":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed - Route und Feature-Matching initialisiert\")"},{"type":"DELETE","lineNumber":189,"oldContent":"                launcher.launch(Manifest.permission.CAMERA)"},{"type":"INSERT","lineNumber":198,"content":"                launcher.launch(Manifest.permission.CAMERA)"},{"type":"DELETE","lineNumber":192,"oldContent":"        }"},{"type":"DELETE","lineNumber":194,"oldContent":"    }"},{"type":"INSERT","lineNumber":202,"content":"        }"},{"type":"INSERT","lineNumber":203,"content":"    }"},{"type":"DELETE","lineNumber":207,"oldContent":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":218,"content":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":285,"oldContent":"    "},{"type":"DELETE","lineNumber":288,"oldContent":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":296,"content":"    // Use route information from JSON or fallback values"},{"type":"DELETE","lineNumber":292,"oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"INSERT","lineNumber":299,"content":"    "},{"type":"INSERT","lineNumber":301,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":296,"oldContent":""},{"type":"INSERT","lineNumber":305,"content":""},{"type":"DELETE","lineNumber":497,"oldContent":"        NavigationDrawerList("},{"type":"DELETE","lineNumber":499,"oldContent":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":508,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":509,"content":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":587,"oldContent":""},{"type":"INSERT","lineNumber":602,"content":""},{"type":"DELETE","lineNumber":597,"oldContent":"                            }"},{"type":"DELETE","lineNumber":599,"oldContent":""},{"type":"DELETE","lineNumber":602,"oldContent":"                                .build()"},{"type":"DELETE","lineNumber":605,"oldContent":"                                            try {"},{"type":"DELETE","lineNumber":607,"oldContent":"                                                val bitmap = imageProxyToBitmap(imageProxy)"},{"type":"DELETE","lineNumber":608,"oldContent":"                                                if (bitmap != null) {"},{"type":"DELETE","lineNumber":610,"oldContent":"                                                    onFrameProcessed(bitmap)"},{"type":"MODIFY","lineNumber":613,"content":"                            }","oldContent":"                                                }"},{"type":"INSERT","lineNumber":614,"content":""},{"type":"DELETE","lineNumber":614,"oldContent":"                                            } catch (e: Exception) {"},{"type":"DELETE","lineNumber":616,"oldContent":"                                                Log.e(\"CameraPreview\", \"Frame processing error: ${e.message}\")"},{"type":"DELETE","lineNumber":617,"oldContent":"                                            } finally {"},{"type":"DELETE","lineNumber":619,"oldContent":"                                                imageProxy.close()"},{"type":"DELETE","lineNumber":621,"oldContent":"                                            }"},{"type":"DELETE","lineNumber":622,"oldContent":"                                        }"},{"type":"INSERT","lineNumber":619,"content":"                                .build()"},{"type":"INSERT","lineNumber":622,"content":"                                            try {"},{"type":"INSERT","lineNumber":624,"content":"                                                val bitmap = imageProxyToBitmap(imageProxy)"},{"type":"INSERT","lineNumber":625,"content":"                                                if (bitmap != null) {"},{"type":"INSERT","lineNumber":627,"content":"                                                    onFrameProcessed(bitmap)"},{"type":"DELETE","lineNumber":629,"oldContent":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"MODIFY","lineNumber":630,"content":"                                                }","oldContent":""},{"type":"INSERT","lineNumber":631,"content":"                                            } catch (e: Exception) {"},{"type":"INSERT","lineNumber":632,"content":"                                                Log.e(\"CameraPreview\", \"Frame processing error: ${e.message}\")"},{"type":"INSERT","lineNumber":633,"content":"                                            } finally {"},{"type":"INSERT","lineNumber":634,"content":"                                                imageProxy.close()"},{"type":"INSERT","lineNumber":635,"content":"                                            }"},{"type":"INSERT","lineNumber":636,"content":"                                        }"},{"type":"DELETE","lineNumber":637,"oldContent":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"INSERT","lineNumber":643,"content":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"INSERT","lineNumber":644,"content":"                        cameraProvider.unbindAll()"},{"type":"INSERT","lineNumber":646,"content":"                        val useCases = if (imageAnalysis != null) {"},{"type":"INSERT","lineNumber":647,"content":"                            arrayOf(preview, imageAnalysis)"},{"type":"INSERT","lineNumber":648,"content":"                        } else {"},{"type":"INSERT","lineNumber":649,"content":"                            arrayOf(preview)"},{"type":"INSERT","lineNumber":650,"content":"                        }"},{"type":"INSERT","lineNumber":651,"content":""},{"type":"INSERT","lineNumber":652,"content":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"DELETE","lineNumber":640,"oldContent":"                        cameraProvider.unbindAll()"},{"type":"DELETE","lineNumber":642,"oldContent":"                        val useCases = if (imageAnalysis != null) {"},{"type":"DELETE","lineNumber":644,"oldContent":"                            arrayOf(preview, imageAnalysis)"},{"type":"DELETE","lineNumber":646,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":649,"oldContent":"                            arrayOf(preview)"},{"type":"DELETE","lineNumber":652,"oldContent":"                        }"},{"type":"DELETE","lineNumber":654,"oldContent":"    )"},{"type":"DELETE","lineNumber":656,"oldContent":"}"},{"type":"DELETE","lineNumber":659,"oldContent":""},{"type":"DELETE","lineNumber":662,"oldContent":"// Improved bitmap conversion function"},{"type":"DELETE","lineNumber":665,"oldContent":"private fun imageProxyToBitmap(imageProxy: ImageProxy): Bitmap? {"},{"type":"DELETE","lineNumber":668,"oldContent":"    return try {"},{"type":"DELETE","lineNumber":671,"oldContent":"        when (imageProxy.format) {"},{"type":"DELETE","lineNumber":673,"oldContent":"            ImageFormat.YUV_420_888 -> {"},{"type":"INSERT","lineNumber":675,"content":"    )"},{"type":"INSERT","lineNumber":676,"content":"}"},{"type":"INSERT","lineNumber":677,"content":""},{"type":"INSERT","lineNumber":678,"content":"// Improved bitmap conversion function"},{"type":"INSERT","lineNumber":679,"content":"private fun imageProxyToBitmap(imageProxy: ImageProxy): Bitmap? {"},{"type":"INSERT","lineNumber":680,"content":"    return try {"},{"type":"INSERT","lineNumber":681,"content":"        when (imageProxy.format) {"},{"type":"INSERT","lineNumber":682,"content":"            ImageFormat.YUV_420_888 -> {"}]},{"timestamp":1754922741968,"changes":[{"type":"DELETE","lineNumber":143,"oldContent":"        routeViewModel.loadNavigationRoute(context)"},{"type":"MODIFY","lineNumber":144,"content":"        routeViewModel.loadNavigationRoute(context)","oldContent":"        routeViewModel.enableStorageSystemImmediately(context)"},{"type":"DELETE","lineNumber":148,"oldContent":"        routeViewModel.startFrameProcessing()"},{"type":"DELETE","lineNumber":151,"oldContent":"    }"},{"type":"INSERT","lineNumber":150,"content":"        routeViewModel.enableStorageSystemImmediately(context)"},{"type":"INSERT","lineNumber":151,"content":"        "},{"type":"INSERT","lineNumber":152,"content":"        // 4. Navigation starten (aktiviert automatisch Feature-Mapping)"},{"type":"INSERT","lineNumber":153,"content":"        routeViewModel.startNavigation()"},{"type":"INSERT","lineNumber":154,"content":"        "},{"type":"INSERT","lineNumber":155,"content":"        // 5. Frame-Processing starten"},{"type":"INSERT","lineNumber":156,"content":"        routeViewModel.startFrameProcessing()"},{"type":"INSERT","lineNumber":157,"content":"        "},{"type":"INSERT","lineNumber":158,"content":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed - Route, Navigation und Feature-Matching initialisiert\")"},{"type":"INSERT","lineNumber":159,"content":"    }"},{"type":"DELETE","lineNumber":155,"oldContent":"        "},{"type":"DELETE","lineNumber":157,"oldContent":"        // 4. Frame-Processing starten"},{"type":"DELETE","lineNumber":160,"oldContent":"        "},{"type":"DELETE","lineNumber":162,"oldContent":"        Log.d(\"CameraScreen\", \"LaunchedEffect completed - Route und Feature-Matching initialisiert\")"},{"type":"INSERT","lineNumber":201,"content":"                launcher.launch(Manifest.permission.CAMERA)"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":"    }"},{"type":"DELETE","lineNumber":203,"oldContent":"                launcher.launch(Manifest.permission.CAMERA)"},{"type":"DELETE","lineNumber":208,"oldContent":"        }"},{"type":"DELETE","lineNumber":210,"oldContent":"    }"},{"type":"INSERT","lineNumber":221,"content":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":225,"oldContent":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":299,"content":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":302,"content":"    "},{"type":"INSERT","lineNumber":304,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":301,"oldContent":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":308,"content":""},{"type":"DELETE","lineNumber":304,"oldContent":"    "},{"type":"DELETE","lineNumber":307,"oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":313,"oldContent":""},{"type":"INSERT","lineNumber":511,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":512,"content":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":514,"oldContent":"        NavigationDrawerList("},{"type":"DELETE","lineNumber":516,"oldContent":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":605,"content":""},{"type":"DELETE","lineNumber":608,"oldContent":""},{"type":"DELETE","lineNumber":613,"oldContent":"                                                }"},{"type":"INSERT","lineNumber":618,"content":"                        val imageAnalysis = if (onFrameProcessed != null) {"},{"type":"DELETE","lineNumber":618,"oldContent":"                                .build()"},{"type":"DELETE","lineNumber":620,"oldContent":"                                            try {"},{"type":"INSERT","lineNumber":622,"content":"                                .build()"},{"type":"DELETE","lineNumber":622,"oldContent":"                                                val bitmap = imageProxyToBitmap(imageProxy)"},{"type":"DELETE","lineNumber":624,"oldContent":"                                                if (bitmap != null) {"},{"type":"INSERT","lineNumber":625,"content":"                                            try {"},{"type":"INSERT","lineNumber":627,"content":"                                                val bitmap = imageProxyToBitmap(imageProxy)"},{"type":"INSERT","lineNumber":628,"content":"                                                if (bitmap != null) {"},{"type":"DELETE","lineNumber":632,"oldContent":"                                }"},{"type":"DELETE","lineNumber":634,"oldContent":"                        } else {"},{"type":"DELETE","lineNumber":636,"oldContent":"                            Log.d(\"CameraPreview\", \"No frame processing callback provided\")"},{"type":"DELETE","lineNumber":638,"oldContent":"                            null"},{"type":"MODIFY","lineNumber":640,"content":"                                }","oldContent":"                        }"},{"type":"INSERT","lineNumber":641,"content":"                        } else {"},{"type":"INSERT","lineNumber":642,"content":"                            Log.d(\"CameraPreview\", \"No frame processing callback provided\")"},{"type":"INSERT","lineNumber":643,"content":"                            null"},{"type":"INSERT","lineNumber":644,"content":"                        }"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"DELETE","lineNumber":644,"oldContent":"                            lifecycleOwner,"},{"type":"DELETE","lineNumber":645,"oldContent":"                            cameraSelector,"},{"type":"DELETE","lineNumber":647,"oldContent":"                            *useCases"},{"type":"DELETE","lineNumber":649,"oldContent":"                        )"},{"type":"INSERT","lineNumber":648,"content":""},{"type":"DELETE","lineNumber":652,"oldContent":""},{"type":"DELETE","lineNumber":654,"oldContent":"                        camera = boundCamera"},{"type":"DELETE","lineNumber":657,"oldContent":"                        setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)"},{"type":"DELETE","lineNumber":659,"oldContent":"                        boundCamera.cameraControl.setZoomRatio(zoomRatio)"},{"type":"INSERT","lineNumber":656,"content":"                            lifecycleOwner,"},{"type":"INSERT","lineNumber":657,"content":"                            cameraSelector,"},{"type":"INSERT","lineNumber":658,"content":"                            *useCases"},{"type":"INSERT","lineNumber":659,"content":"                        )"},{"type":"INSERT","lineNumber":661,"content":"                        camera = boundCamera"},{"type":"INSERT","lineNumber":662,"content":"                        setupZoomCapabilities(boundCamera, onAvailableZoomRatiosChanged)"},{"type":"INSERT","lineNumber":663,"content":"                        boundCamera.cameraControl.setZoomRatio(zoomRatio)"},{"type":"INSERT","lineNumber":664,"content":""},{"type":"DELETE","lineNumber":676,"oldContent":"                // Handle YUV format (most common)"},{"type":"DELETE","lineNumber":678,"oldContent":"                val yBuffer = imageProxy.planes[0].buffer"},{"type":"DELETE","lineNumber":680,"oldContent":"                val uBuffer = imageProxy.planes[1].buffer"},{"type":"DELETE","lineNumber":682,"oldContent":"                val vBuffer = imageProxy.planes[2].buffer"},{"type":"DELETE","lineNumber":684,"oldContent":""},{"type":"DELETE","lineNumber":686,"oldContent":"                val ySize = yBuffer.remaining()"},{"type":"DELETE","lineNumber":688,"oldContent":"                val uSize = uBuffer.remaining()"},{"type":"INSERT","lineNumber":686,"content":"                // Handle YUV format (most common)"},{"type":"INSERT","lineNumber":687,"content":"                val yBuffer = imageProxy.planes[0].buffer"},{"type":"INSERT","lineNumber":688,"content":"                val uBuffer = imageProxy.planes[1].buffer"},{"type":"INSERT","lineNumber":689,"content":"                val vBuffer = imageProxy.planes[2].buffer"},{"type":"INSERT","lineNumber":690,"content":""},{"type":"INSERT","lineNumber":691,"content":"                val ySize = yBuffer.remaining()"},{"type":"INSERT","lineNumber":692,"content":"                val uSize = uBuffer.remaining()"}]},{"timestamp":1754923151166,"changes":[{"type":"INSERT","lineNumber":143,"content":"        // 1. Zuerst Route laden"},{"type":"DELETE","lineNumber":144,"oldContent":"        routeViewModel.enableStorageSystemImmediately(context)"},{"type":"INSERT","lineNumber":148,"content":"        "},{"type":"INSERT","lineNumber":149,"content":"        // 3. Dann Storage-System aktivieren (lädt automatisch Landmarks)"},{"type":"DELETE","lineNumber":150,"oldContent":"        "},{"type":"DELETE","lineNumber":152,"oldContent":"        // 3. Dann Storage-System aktivieren (lädt automatisch Landmarks)"},{"type":"DELETE","lineNumber":154,"oldContent":"    "},{"type":"DELETE","lineNumber":156,"oldContent":"    // Verwende Route-Informationen aus JSON oder Fallback-Werte"},{"type":"DELETE","lineNumber":159,"oldContent":"    val currentRoute by routeViewModel.currentRoute.collectAsState()"},{"type":"DELETE","lineNumber":162,"oldContent":"    val routeSummary = routeViewModel.getRouteSummary()"},{"type":"INSERT","lineNumber":161,"content":"    // Verwende Route-Informationen aus JSON oder Fallback-Werte"},{"type":"INSERT","lineNumber":162,"content":"    val currentRoute by routeViewModel.currentRoute.collectAsState()"},{"type":"INSERT","lineNumber":163,"content":"    val routeSummary = routeViewModel.getRouteSummary()"},{"type":"INSERT","lineNumber":164,"content":"    "},{"type":"INSERT","lineNumber":201,"content":"                launcher.launch(Manifest.permission.CAMERA)"},{"type":"DELETE","lineNumber":204,"oldContent":"                launcher.launch(Manifest.permission.CAMERA)"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"INSERT","lineNumber":206,"content":"    }"},{"type":"DELETE","lineNumber":208,"oldContent":"        }"},{"type":"DELETE","lineNumber":210,"oldContent":"    }"},{"type":"INSERT","lineNumber":221,"content":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":224,"oldContent":"                        Log.d(\"CameraScreen\", \"Frame received: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":299,"content":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":302,"content":"    "},{"type":"DELETE","lineNumber":302,"oldContent":"    // Use route information from JSON or fallback values"},{"type":"INSERT","lineNumber":304,"content":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":305,"oldContent":"    "},{"type":"INSERT","lineNumber":308,"content":""},{"type":"DELETE","lineNumber":308,"oldContent":"    val favorites by FavoritesRepository.favorites.collectAsState()"},{"type":"DELETE","lineNumber":311,"oldContent":""},{"type":"INSERT","lineNumber":511,"content":"        NavigationDrawerList("},{"type":"INSERT","lineNumber":512,"content":"            steps = navigationSteps,"},{"type":"DELETE","lineNumber":514,"oldContent":"        NavigationDrawerList("},{"type":"DELETE","lineNumber":516,"oldContent":"            steps = navigationSteps,"},{"type":"INSERT","lineNumber":605,"content":""},{"type":"DELETE","lineNumber":608,"oldContent":""},{"type":"INSERT","lineNumber":618,"content":"                        val imageAnalysis = if (onFrameProcessed != null) {"},{"type":"DELETE","lineNumber":620,"oldContent":"                        val imageAnalysis = if (onFrameProcessed != null) {"},{"type":"MODIFY","lineNumber":623,"content":"                                .also { analysis ->","oldContent":"                                .also { analysis ->"},{"type":"DELETE","lineNumber":627,"oldContent":"                                                    Log.d(\"CameraPreview\", \"Bitmap created: ${bitmap.width}x${bitmap.height}\")"},{"type":"MODIFY","lineNumber":629,"content":"                                                    Log.d(\"CameraPreview\", \"Bitmap created: ${bitmap.width}x${bitmap.height}\")","oldContent":"                                                    onFrameProcessed(bitmap)"},{"type":"INSERT","lineNumber":630,"content":"                                                    onFrameProcessed(bitmap)"},{"type":"INSERT","lineNumber":639,"content":"                                        }"},{"type":"DELETE","lineNumber":641,"oldContent":"                                        }"},{"type":"DELETE","lineNumber":643,"oldContent":""},{"type":"MODIFY","lineNumber":646,"content":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA","oldContent":"                        val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA"},{"type":"INSERT","lineNumber":648,"content":""},{"type":"DELETE","lineNumber":653,"oldContent":"                            lifecycleOwner,"},{"type":"INSERT","lineNumber":654,"content":""},{"type":"INSERT","lineNumber":655,"content":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"INSERT","lineNumber":656,"content":"                            lifecycleOwner,"},{"type":"DELETE","lineNumber":657,"oldContent":""},{"type":"DELETE","lineNumber":659,"oldContent":"                        val boundCamera = cameraProvider.bindToLifecycle("},{"type":"MODIFY","lineNumber":661,"content":"                        camera = boundCamera","oldContent":"                        camera = boundCamera"},{"type":"DELETE","lineNumber":663,"oldContent":"                        Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")"},{"type":"INSERT","lineNumber":665,"content":"                        Log.d(\"CameraPreview\", \"Kamera erfolgreich initialisiert\")"},{"type":"DELETE","lineNumber":681,"oldContent":"// Improved bitmap conversion function"},{"type":"INSERT","lineNumber":683,"content":"        when (imageProxy.format) {"},{"type":"INSERT","lineNumber":684,"content":"            ImageFormat.YUV_420_888 -> {"},{"type":"DELETE","lineNumber":686,"oldContent":"        when (imageProxy.format) {"},{"type":"DELETE","lineNumber":689,"oldContent":"            ImageFormat.YUV_420_888 -> {"},{"type":"DELETE","lineNumber":691,"oldContent":"                val vSize = vBuffer.remaining()"},{"type":"DELETE","lineNumber":693,"oldContent":""},{"type":"INSERT","lineNumber":692,"content":"                val vSize = vBuffer.remaining()"},{"type":"INSERT","lineNumber":693,"content":""}]}]},"/a.dummy":{"filePath":"/a.dummy","baseContent":"arrow.glb","baseTimestamp":1754563545949},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureLandmark.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureLandmark.kt","baseContent":"package com.example.arwalking\n\nimport com.example.arwalking.data.RouteLandmark\n\n/**\n * Datenklasse für Feature-Landmarks\n */\ndata class FeatureLandmark(\n    val id: RouteLandmark,\n    val name: String,\n    val description: String = \"\",\n    val building: String = \"\",\n    val floor: Int = 0,\n    val position: LandmarkPosition? = null,\n    val imageUrl: String? = null,\n    val features: List<String> = emptyList()\n)\n\n// Position ist in NavigationRoute.kt definiert\ntypealias LandmarkPosition = Position","baseTimestamp":1754564054757,"deltas":[{"timestamp":1754564059871,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import com.example.arwalking.data.RouteLandmark"},{"type":"DELETE","lineNumber":3,"oldContent":""},{"type":"DELETE","lineNumber":8,"oldContent":"    val id: RouteLandmark,"},{"type":"INSERT","lineNumber":6,"content":"    val id: String,"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMappingConfig.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMappingConfig.kt","baseContent":"package com.example.arwalking\n\n/**\n * Konfiguration für Feature-Mapping\n */\nobject FeatureMappingConfig {\n    \n\n    \n    // OpenCV Feature-Detection Konfiguration\n    object FeatureDetection {\n        // Primärer Algorithmus: SIFT für robustere Features\n        const val USE_SIFT_PRIMARY = true // SIFT als Hauptalgorithmus verwenden\n        \n        // SIFT Konfiguration (robuster für verschiedene Lichtverhältnisse)\n        const val SIFT_N_FEATURES = 2000 // Erhöht für mehr Features\n        const val SIFT_N_OCTAVE_LAYERS = 4 // Mehr Octave-Layer für Multi-Scale\n        const val SIFT_CONTRAST_THRESHOLD = 0.03 // Niedriger für mehr Features\n        const val SIFT_EDGE_THRESHOLD = 15.0 // Angepasst für bessere Edge-Detection\n        const val SIFT_SIGMA = 1.6\n        \n        // ORB Konfiguration (Fallback/Performance-Option)\n        const val ORB_MAX_FEATURES = 2000 // Erhöht für mehr Features\n        const val ORB_SCALE_FACTOR = 1.15f // Kleinerer Faktor für feinere Skalierung\n        const val ORB_N_LEVELS = 12 // Mehr Level für Multi-Scale Features\n        const val ORB_EDGE_THRESHOLD = 25 // Reduziert für mehr Edge-Features\n        const val ORB_FIRST_LEVEL = 0\n        const val ORB_WTA_K = 2\n        const val ORB_PATCH_SIZE = 31\n        const val ORB_FAST_THRESHOLD = 15 // Reduziert für mehr Features\n        \n        // Matching Konfiguration - Gelockerte Kriterien\n        const val MATCH_DISTANCE_THRESHOLD = 75.0f // Erhöht für mehr Matches\n        const val MIN_MATCH_CONFIDENCE = 0.4f // Reduziert für mehr Matches\n        const val MIN_REQUIRED_MATCHES = 15 // Minimum Matches für valide Erkennung\n        const val MAX_MATCH_RESULTS = 5 // Mehr Ergebnisse berücksichtigen\n        \n        // Lowe's Ratio Test für robusteres Matching\n        const val LOWE_RATIO_THRESHOLD = 0.8f // Standard: 0.7, gelockert für mehr Matches\n        \n        // Multi-Scale Feature Detection\n        const val ENABLE_MULTI_SCALE = true\n        const val SCALE_LEVELS = arrayOf(1.0f, 0.8f, 1.2f, 0.6f, 1.5f) // Verschiedene Skalierungen\n        \n        // Beleuchtungsrobustheit\n        const val ENABLE_HISTOGRAM_EQUALIZATION = true // CLAHE für bessere Beleuchtung\n        const val CLAHE_CLIP_LIMIT = 3.0\n        const val CLAHE_TILE_GRID_SIZE = 8\n    }\n    \n    // Cache-Konfiguration\n    object Cache {\n        const val FEATURE_MAP_CACHE_SIZE = 10 // Max Anzahl gecachte Feature-Maps\n        const val IMAGE_CACHE_SIZE_MB = 50 // Max Größe für Bild-Cache in MB\n        const val CACHE_EXPIRY_HOURS = 24 // Cache-Gültigkeit in Stunden\n        \n        // Lokale Speicher-Pfade\n        const val FEATURE_MAPS_DIR = \"feature_maps\"\n        const val LANDMARK_IMAGES_DIR = \"landmark_images\"\n        const val PROCESSED_FEATURES_DIR = \"processed_features\"\n    }\n    \n    // Netzwerk-Konfiguration\n    object Network {\n        const val CONNECT_TIMEOUT_SECONDS = 30L\n        const val READ_TIMEOUT_SECONDS = 60L\n        const val WRITE_TIMEOUT_SECONDS = 60L\n        const val MAX_RETRY_ATTEMPTS = 3\n        const val RETRY_DELAY_MS = 1000L\n        \n        // Upload-Limits\n        const val MAX_IMAGE_SIZE_MB = 10\n        const val MAX_BATCH_SIZE = 5\n        const val COMPRESSION_QUALITY = 85 // JPEG Qualität (0-100)\n    }\n    \n    // UI-Konfiguration\n    object UI {\n        const val MATCH_INFO_UPDATE_INTERVAL_MS = 100L\n        const val CONFIDENCE_DISPLAY_THRESHOLD = 0.3f\n        const val MAX_DISPLAYED_ALTERNATIVES = 2\n        \n        // Farben für verschiedene Confidence-Level\n        const val HIGH_CONFIDENCE_COLOR = 0xFF4CAF50.toInt() // Grün\n        const val MEDIUM_CONFIDENCE_COLOR = 0xFFFF9800.toInt() // Orange\n        const val LOW_CONFIDENCE_COLOR = 0xFFF44336.toInt() // Rot\n        \n        fun getConfidenceColor(confidence: Float): Int {\n            return when {\n                confidence >= 0.8f -> HIGH_CONFIDENCE_COLOR\n                confidence >= 0.5f -> MEDIUM_CONFIDENCE_COLOR\n                else -> LOW_CONFIDENCE_COLOR\n            }\n        }\n    }\n    \n    // Debug-Konfiguration\n    object Debug {\n        val ENABLE_FEATURE_VISUALIZATION = BuildConfig.DEBUG_FEATURE_MAPPING\n        val ENABLE_PERFORMANCE_LOGGING = BuildConfig.DEBUG_FEATURE_MAPPING\n        const val ENABLE_DETAILED_MATCHING_LOGS = false // Nur bei Bedarf aktivieren\n        const val SAVE_DEBUG_IMAGES = false // Speichert Debug-Bilder lokal\n        \n\n    }\n    \n    // Experimentelle Features\n    object Experimental {\n        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration\n        const val ENABLE_SLAM_INTEGRATION = false // Simultaneous Localization and Mapping\n        const val ENABLE_CLOUD_PROCESSING = false // Deaktiviert - kein Server\n        const val ENABLE_COLLABORATIVE_MAPPING = false // Nutzer können Landmarks hinzufügen\n    }\n    \n    // Validierung der Konfiguration\n    fun validateConfig(): List<String> {\n        val issues = mutableListOf<String>()\n        \n        if (FeatureDetection.ORB_MAX_FEATURES <= 0) {\n            issues.add(\"ORB_MAX_FEATURES muss größer als 0 sein\")\n        }\n        \n        if (Network.MAX_IMAGE_SIZE_MB <= 0) {\n            issues.add(\"MAX_IMAGE_SIZE_MB muss größer als 0 sein\")\n        }\n        \n        if (Cache.FEATURE_MAP_CACHE_SIZE <= 0) {\n            issues.add(\"FEATURE_MAP_CACHE_SIZE muss größer als 0 sein\")\n        }\n        \n        return issues\n    }\n    \n    // Hilfsfunktionen\n    fun isDebugMode(): Boolean = BuildConfig.DEBUG_FEATURE_MAPPING\n    \n    fun getImageCompressionQuality(): Int = Network.COMPRESSION_QUALITY\n    \n    fun getMaxImageSizeBytes(): Long = Network.MAX_IMAGE_SIZE_MB * 1024 * 1024L\n}","baseTimestamp":1754569754530,"deltas":[{"timestamp":1754569773200,"changes":[{"type":"INSERT","lineNumber":50,"content":"    // Tracking-Stabilität Konfiguration"},{"type":"INSERT","lineNumber":51,"content":"    object Tracking {"},{"type":"INSERT","lineNumber":52,"content":"        // Temporales Tracking mit Kalman-Filter"},{"type":"INSERT","lineNumber":53,"content":"        const val ENABLE_KALMAN_FILTER = true"},{"type":"INSERT","lineNumber":54,"content":"        const val KALMAN_PROCESS_NOISE = 0.01f // Prozessrauschen"},{"type":"INSERT","lineNumber":55,"content":"        const val KALMAN_MEASUREMENT_NOISE = 0.1f // Messrauschen"},{"type":"INSERT","lineNumber":56,"content":"        const val KALMAN_ERROR_COVARIANCE = 1.0f // Fehlerkovarianz"},{"type":"INSERT","lineNumber":57,"content":"        "},{"type":"INSERT","lineNumber":58,"content":"        // Tracking-Stabilität"},{"type":"INSERT","lineNumber":59,"content":"        const val MIN_TRACKING_FRAMES = 3 // Minimum Frames für stabiles Tracking"},{"type":"INSERT","lineNumber":60,"content":"        const val MAX_TRACKING_LOSS_FRAMES = 5 // Max Frames ohne Match bevor Reset"},{"type":"INSERT","lineNumber":61,"content":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame"},{"type":"INSERT","lineNumber":62,"content":"        "},{"type":"INSERT","lineNumber":63,"content":"        // Smoothing für stabilere Ergebnisse"},{"type":"INSERT","lineNumber":64,"content":"        const val ENABLE_POSITION_SMOOTHING = true"},{"type":"INSERT","lineNumber":65,"content":"        const val SMOOTHING_FACTOR = 0.7f // 0.0 = kein Smoothing, 1.0 = maximales Smoothing"},{"type":"INSERT","lineNumber":66,"content":"        const val MAX_POSITION_JUMP = 50.0f // Maximaler Positionssprung in Pixeln"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":68,"content":"    "},{"type":"DELETE","lineNumber":52,"oldContent":"        const val FEATURE_MAP_CACHE_SIZE = 10 // Max Anzahl gecachte Feature-Maps"},{"type":"DELETE","lineNumber":53,"oldContent":"        const val IMAGE_CACHE_SIZE_MB = 50 // Max Größe für Bild-Cache in MB"},{"type":"INSERT","lineNumber":71,"content":"        const val FEATURE_MAP_CACHE_SIZE = 15 // Erhöht für mehr gecachte Feature-Maps"},{"type":"INSERT","lineNumber":72,"content":"        const val IMAGE_CACHE_SIZE_MB = 75 // Erhöht für bessere Performance"},{"type":"INSERT","lineNumber":79,"content":"        const val DEBUG_IMAGES_DIR = \"debug_images\" // Für Debug-Bilder"}]},{"timestamp":1754569782750,"changes":[{"type":"DELETE","lineNumber":51,"oldContent":"    // Cache-Konfiguration"},{"type":"DELETE","lineNumber":53,"oldContent":"    object Cache {"},{"type":"DELETE","lineNumber":57,"oldContent":"        const val CACHE_EXPIRY_HOURS = 24 // Cache-Gültigkeit in Stunden"},{"type":"DELETE","lineNumber":59,"oldContent":"        "},{"type":"DELETE","lineNumber":61,"oldContent":"        // Lokale Speicher-Pfade"},{"type":"DELETE","lineNumber":63,"oldContent":"        const val FEATURE_MAPS_DIR = \"feature_maps\""},{"type":"DELETE","lineNumber":65,"oldContent":"        const val LANDMARK_IMAGES_DIR = \"landmark_images\""},{"type":"DELETE","lineNumber":67,"oldContent":"        const val PROCESSED_FEATURES_DIR = \"processed_features\""},{"type":"DELETE","lineNumber":69,"oldContent":"    }"},{"type":"INSERT","lineNumber":62,"content":"        "},{"type":"INSERT","lineNumber":63,"content":"        // Smoothing für stabilere Ergebnisse"},{"type":"INSERT","lineNumber":64,"content":"        const val ENABLE_POSITION_SMOOTHING = true"},{"type":"INSERT","lineNumber":65,"content":"        const val SMOOTHING_FACTOR = 0.7f // 0.0 = kein Smoothing, 1.0 = maximales Smoothing"},{"type":"INSERT","lineNumber":66,"content":"        const val MAX_POSITION_JUMP = 50.0f // Maximaler Positionssprung in Pixeln"},{"type":"INSERT","lineNumber":67,"content":"    }"},{"type":"INSERT","lineNumber":69,"content":"    // Cache-Konfiguration"},{"type":"INSERT","lineNumber":70,"content":"    object Cache {"},{"type":"INSERT","lineNumber":71,"content":"        const val FEATURE_MAP_CACHE_SIZE = 15 // Erhöht für mehr gecachte Feature-Maps"},{"type":"INSERT","lineNumber":72,"content":"        const val IMAGE_CACHE_SIZE_MB = 75 // Erhöht für bessere Performance"},{"type":"INSERT","lineNumber":73,"content":"        const val CACHE_EXPIRY_HOURS = 24 // Cache-Gültigkeit in Stunden"},{"type":"INSERT","lineNumber":75,"content":"        // Lokale Speicher-Pfade"},{"type":"INSERT","lineNumber":76,"content":"        const val FEATURE_MAPS_DIR = \"feature_maps\""},{"type":"INSERT","lineNumber":77,"content":"        const val LANDMARK_IMAGES_DIR = \"landmark_images\""},{"type":"INSERT","lineNumber":78,"content":"        const val PROCESSED_FEATURES_DIR = \"processed_features\""},{"type":"INSERT","lineNumber":79,"content":"        const val DEBUG_IMAGES_DIR = \"debug_images\" // Für Debug-Bilder"},{"type":"INSERT","lineNumber":80,"content":"    }"},{"type":"INSERT","lineNumber":81,"content":"    "},{"type":"DELETE","lineNumber":74,"oldContent":"        // Smoothing für stabilere Ergebnisse"},{"type":"DELETE","lineNumber":76,"oldContent":"        const val ENABLE_POSITION_SMOOTHING = true"},{"type":"DELETE","lineNumber":78,"oldContent":"        const val SMOOTHING_FACTOR = 0.7f // 0.0 = kein Smoothing, 1.0 = maximales Smoothing"},{"type":"DELETE","lineNumber":80,"oldContent":"        const val MAX_POSITION_JUMP = 50.0f // Maximaler Positionssprung in Pixeln"},{"type":"DELETE","lineNumber":82,"oldContent":"    }"},{"type":"DELETE","lineNumber":84,"oldContent":"    "},{"type":"DELETE","lineNumber":88,"oldContent":"        const val FEATURE_MAP_CACHE_SIZE = 15 // Erhöht für mehr gecachte Feature-Maps"},{"type":"DELETE","lineNumber":90,"oldContent":"        const val IMAGE_CACHE_SIZE_MB = 75 // Erhöht für bessere Performance"},{"type":"DELETE","lineNumber":98,"oldContent":"        const val DEBUG_IMAGES_DIR = \"debug_images\" // Für Debug-Bilder"},{"type":"DELETE","lineNumber":120,"oldContent":"        const val ENABLE_DETAILED_MATCHING_LOGS = false // Nur bei Bedarf aktivieren"},{"type":"MODIFY","lineNumber":120,"content":"        const val ENABLE_DETAILED_MATCHING_LOGS = true // Aktiviert für Matching-Analyse","oldContent":"        const val SAVE_DEBUG_IMAGES = false // Speichert Debug-Bilder lokal"},{"type":"INSERT","lineNumber":121,"content":"        const val SAVE_DEBUG_IMAGES = true // Speichert Debug-Bilder für Analyse"},{"type":"MODIFY","lineNumber":123,"content":"        // Erweiterte Debug-Optionen","oldContent":""},{"type":"INSERT","lineNumber":124,"content":"        const val LOG_FEATURE_COUNT = true // Loggt Anzahl erkannter Features"},{"type":"INSERT","lineNumber":125,"content":"        const val LOG_MATCH_STATISTICS = true // Loggt Matching-Statistiken"},{"type":"INSERT","lineNumber":126,"content":"        const val LOG_TRACKING_STATE = true // Loggt Tracking-Zustand"},{"type":"INSERT","lineNumber":127,"content":"        const val SAVE_FEATURE_OVERLAY_IMAGES = true // Speichert Bilder mit Feature-Overlay"},{"type":"INSERT","lineNumber":128,"content":"        const val SAVE_MATCH_VISUALIZATION = true // Speichert Match-Visualisierung"},{"type":"INSERT","lineNumber":129,"content":"        "},{"type":"INSERT","lineNumber":130,"content":"        // Performance-Monitoring"},{"type":"INSERT","lineNumber":131,"content":"        const val MEASURE_DETECTION_TIME = true"},{"type":"INSERT","lineNumber":132,"content":"        const val MEASURE_MATCHING_TIME = true"},{"type":"INSERT","lineNumber":133,"content":"        const val MEASURE_TOTAL_PIPELINE_TIME = true"}]},{"timestamp":1754569793104,"changes":[{"type":"INSERT","lineNumber":58,"content":"        // Tracking-Stabilität"},{"type":"INSERT","lineNumber":59,"content":"        const val MIN_TRACKING_FRAMES = 3 // Minimum Frames für stabiles Tracking"},{"type":"INSERT","lineNumber":60,"content":"        const val MAX_TRACKING_LOSS_FRAMES = 5 // Max Frames ohne Match bevor Reset"},{"type":"INSERT","lineNumber":61,"content":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame"},{"type":"DELETE","lineNumber":61,"oldContent":"        // Tracking-Stabilität"},{"type":"DELETE","lineNumber":64,"oldContent":"        const val MIN_TRACKING_FRAMES = 3 // Minimum Frames für stabiles Tracking"},{"type":"DELETE","lineNumber":66,"oldContent":"        const val MAX_TRACKING_LOSS_FRAMES = 5 // Max Frames ohne Match bevor Reset"},{"type":"INSERT","lineNumber":68,"content":"    "},{"type":"DELETE","lineNumber":69,"oldContent":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame"},{"type":"DELETE","lineNumber":71,"oldContent":"    "},{"type":"DELETE","lineNumber":73,"oldContent":"        "},{"type":"DELETE","lineNumber":75,"oldContent":"    // Netzwerk-Konfiguration"},{"type":"INSERT","lineNumber":74,"content":"        "},{"type":"DELETE","lineNumber":77,"oldContent":"    object Network {"},{"type":"DELETE","lineNumber":80,"oldContent":"        const val CONNECT_TIMEOUT_SECONDS = 30L"},{"type":"DELETE","lineNumber":83,"oldContent":"        const val READ_TIMEOUT_SECONDS = 60L"},{"type":"INSERT","lineNumber":82,"content":"    // Netzwerk-Konfiguration"},{"type":"INSERT","lineNumber":83,"content":"    object Network {"},{"type":"INSERT","lineNumber":84,"content":"        const val CONNECT_TIMEOUT_SECONDS = 30L"},{"type":"INSERT","lineNumber":85,"content":"        const val READ_TIMEOUT_SECONDS = 60L"},{"type":"MODIFY","lineNumber":121,"content":"        const val SAVE_DEBUG_IMAGES = true // Speichert Debug-Bilder für Analyse","oldContent":"        const val SAVE_DEBUG_IMAGES = false // Speichert Debug-Bilder lokal"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"DELETE","lineNumber":127,"oldContent":"    "},{"type":"DELETE","lineNumber":129,"oldContent":"    // Experimentelle Features"},{"type":"DELETE","lineNumber":131,"oldContent":"    object Experimental {"},{"type":"DELETE","lineNumber":133,"oldContent":"        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration"},{"type":"DELETE","lineNumber":135,"oldContent":"        const val ENABLE_SLAM_INTEGRATION = false // Simultaneous Localization and Mapping"},{"type":"DELETE","lineNumber":137,"oldContent":"        const val ENABLE_CLOUD_PROCESSING = false // Deaktiviert - kein Server"},{"type":"DELETE","lineNumber":139,"oldContent":"        const val ENABLE_COLLABORATIVE_MAPPING = false // Nutzer können Landmarks hinzufügen"},{"type":"DELETE","lineNumber":141,"oldContent":"    }"},{"type":"INSERT","lineNumber":134,"content":"    }"},{"type":"INSERT","lineNumber":136,"content":"    // Experimentelle Features"},{"type":"INSERT","lineNumber":137,"content":"    object Experimental {"},{"type":"INSERT","lineNumber":138,"content":"        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration"},{"type":"INSERT","lineNumber":139,"content":"        const val ENABLE_SLAM_INTEGRATION = false // Simultaneous Localization and Mapping"},{"type":"INSERT","lineNumber":140,"content":"        const val ENABLE_CLOUD_PROCESSING = false // Deaktiviert - kein Server"},{"type":"INSERT","lineNumber":141,"content":"        const val ENABLE_COLLABORATIVE_MAPPING = false // Nutzer können Landmarks hinzufügen"},{"type":"INSERT","lineNumber":142,"content":"    }"},{"type":"INSERT","lineNumber":143,"content":"    "},{"type":"INSERT","lineNumber":148,"content":"        // Feature Detection Validierung"},{"type":"INSERT","lineNumber":152,"content":"        if (FeatureDetection.SIFT_N_FEATURES <= 0) {"},{"type":"INSERT","lineNumber":153,"content":"            issues.add(\"SIFT_N_FEATURES muss größer als 0 sein\")"},{"type":"INSERT","lineNumber":154,"content":"        }"},{"type":"INSERT","lineNumber":155,"content":"        if (FeatureDetection.MIN_REQUIRED_MATCHES <= 0) {"},{"type":"INSERT","lineNumber":156,"content":"            issues.add(\"MIN_REQUIRED_MATCHES muss größer als 0 sein\")"},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"INSERT","lineNumber":158,"content":"        if (FeatureDetection.LOWE_RATIO_THRESHOLD <= 0 || FeatureDetection.LOWE_RATIO_THRESHOLD >= 1) {"},{"type":"INSERT","lineNumber":159,"content":"            issues.add(\"LOWE_RATIO_THRESHOLD muss zwischen 0 und 1 liegen\")"},{"type":"INSERT","lineNumber":160,"content":"        }"},{"type":"INSERT","lineNumber":162,"content":"        // Tracking Validierung"},{"type":"INSERT","lineNumber":163,"content":"        if (Tracking.SMOOTHING_FACTOR < 0 || Tracking.SMOOTHING_FACTOR > 1) {"},{"type":"INSERT","lineNumber":164,"content":"            issues.add(\"SMOOTHING_FACTOR muss zwischen 0 und 1 liegen\")"},{"type":"INSERT","lineNumber":165,"content":"        }"},{"type":"INSERT","lineNumber":166,"content":"        if (Tracking.MIN_TRACKING_FRAMES <= 0) {"},{"type":"INSERT","lineNumber":167,"content":"            issues.add(\"MIN_TRACKING_FRAMES muss größer als 0 sein\")"},{"type":"INSERT","lineNumber":168,"content":"        }"},{"type":"INSERT","lineNumber":169,"content":"        "},{"type":"INSERT","lineNumber":170,"content":"        // Network Validierung"},{"type":"INSERT","lineNumber":175,"content":"        // Cache Validierung"}]},{"timestamp":1754917532492,"changes":[{"type":"DELETE","lineNumber":22,"oldContent":"        const val ORB_MAX_FEATURES = 2000 // Erhöht für mehr Features"},{"type":"DELETE","lineNumber":23,"oldContent":"        const val ORB_SCALE_FACTOR = 1.15f // Kleinerer Faktor für feinere Skalierung"},{"type":"DELETE","lineNumber":24,"oldContent":"        const val ORB_N_LEVELS = 12 // Mehr Level für Multi-Scale Features"},{"type":"DELETE","lineNumber":25,"oldContent":"        const val ORB_EDGE_THRESHOLD = 25 // Reduziert für mehr Edge-Features"},{"type":"INSERT","lineNumber":22,"content":"        const val ORB_MAX_FEATURES = 3000 // Erhöht für mehr Features"},{"type":"INSERT","lineNumber":23,"content":"        const val ORB_SCALE_FACTOR = 1.1f // Kleinerer Faktor für feinere Skalierung"},{"type":"INSERT","lineNumber":24,"content":"        const val ORB_N_LEVELS = 16 // Mehr Level für Multi-Scale Features"},{"type":"INSERT","lineNumber":25,"content":"        const val ORB_EDGE_THRESHOLD = 15 // Reduziert für mehr Edge-Features"},{"type":"MODIFY","lineNumber":29,"content":"        const val ORB_FAST_THRESHOLD = 10 // Reduziert für mehr Features","oldContent":"        const val ORB_FAST_THRESHOLD = 15 // Reduziert für mehr Features"},{"type":"MODIFY","lineNumber":42,"content":"        val SCALE_LEVELS = arrayOf(1.0f, 0.8f, 1.2f, 0.6f, 1.5f) // Verschiedene Skalierungen","oldContent":"        const val SCALE_LEVELS = arrayOf(1.0f, 0.8f, 1.2f, 0.6f, 1.5f) // Verschiedene Skalierungen"},{"type":"DELETE","lineNumber":59,"oldContent":"        "},{"type":"DELETE","lineNumber":61,"oldContent":"        // Smoothing für stabilere Ergebnisse"},{"type":"DELETE","lineNumber":63,"oldContent":"        const val ENABLE_POSITION_SMOOTHING = true"},{"type":"INSERT","lineNumber":62,"content":"        "},{"type":"INSERT","lineNumber":63,"content":"        // Smoothing für stabilere Ergebnisse"},{"type":"INSERT","lineNumber":64,"content":"        const val ENABLE_POSITION_SMOOTHING = true"},{"type":"MODIFY","lineNumber":69,"content":"    // Cache-Konfiguration","oldContent":"    // Cache-Konfiguration"},{"type":"MODIFY","lineNumber":74,"content":"        ","oldContent":"        "},{"type":"DELETE","lineNumber":79,"oldContent":"    // Netzwerk-Konfiguration"},{"type":"INSERT","lineNumber":80,"content":"    }"},{"type":"INSERT","lineNumber":81,"content":"    "},{"type":"INSERT","lineNumber":82,"content":"    // Netzwerk-Konfiguration"},{"type":"DELETE","lineNumber":83,"oldContent":"    }"},{"type":"DELETE","lineNumber":85,"oldContent":"    "},{"type":"DELETE","lineNumber":129,"oldContent":"    }"},{"type":"MODIFY","lineNumber":131,"content":"        const val MEASURE_DETECTION_TIME = true","oldContent":"    // Experimentelle Features"},{"type":"INSERT","lineNumber":132,"content":"        const val MEASURE_MATCHING_TIME = true"},{"type":"INSERT","lineNumber":133,"content":"        const val MEASURE_TOTAL_PIPELINE_TIME = true"},{"type":"INSERT","lineNumber":134,"content":"    }"},{"type":"INSERT","lineNumber":135,"content":"    "},{"type":"INSERT","lineNumber":136,"content":"    // Experimentelle Features"},{"type":"DELETE","lineNumber":135,"oldContent":"        const val MEASURE_DETECTION_TIME = true"},{"type":"DELETE","lineNumber":138,"oldContent":"        const val MEASURE_MATCHING_TIME = true"},{"type":"DELETE","lineNumber":141,"oldContent":"        const val MEASURE_TOTAL_PIPELINE_TIME = true"},{"type":"DELETE","lineNumber":143,"oldContent":"    "},{"type":"DELETE","lineNumber":152,"oldContent":"        "},{"type":"DELETE","lineNumber":154,"oldContent":"        if (Network.MAX_IMAGE_SIZE_MB <= 0) {"},{"type":"DELETE","lineNumber":156,"oldContent":"            issues.add(\"MAX_IMAGE_SIZE_MB muss größer als 0 sein\")"},{"type":"DELETE","lineNumber":158,"oldContent":"        }"},{"type":"DELETE","lineNumber":160,"oldContent":"        "},{"type":"DELETE","lineNumber":162,"oldContent":"        if (Cache.FEATURE_MAP_CACHE_SIZE <= 0) {"},{"type":"DELETE","lineNumber":164,"oldContent":"            issues.add(\"FEATURE_MAP_CACHE_SIZE muss größer als 0 sein\")"},{"type":"DELETE","lineNumber":166,"oldContent":"        }"},{"type":"INSERT","lineNumber":160,"content":"        }"},{"type":"INSERT","lineNumber":162,"content":"        // Tracking Validierung"},{"type":"INSERT","lineNumber":163,"content":"        if (Tracking.SMOOTHING_FACTOR < 0 || Tracking.SMOOTHING_FACTOR > 1) {"},{"type":"INSERT","lineNumber":164,"content":"            issues.add(\"SMOOTHING_FACTOR muss zwischen 0 und 1 liegen\")"},{"type":"INSERT","lineNumber":166,"content":"        if (Tracking.MIN_TRACKING_FRAMES <= 0) {"},{"type":"INSERT","lineNumber":167,"content":"            issues.add(\"MIN_TRACKING_FRAMES muss größer als 0 sein\")"},{"type":"INSERT","lineNumber":168,"content":"        }"},{"type":"INSERT","lineNumber":169,"content":"        "},{"type":"INSERT","lineNumber":170,"content":"        // Network Validierung"},{"type":"INSERT","lineNumber":171,"content":"        if (Network.MAX_IMAGE_SIZE_MB <= 0) {"},{"type":"INSERT","lineNumber":172,"content":"            issues.add(\"MAX_IMAGE_SIZE_MB muss größer als 0 sein\")"},{"type":"INSERT","lineNumber":173,"content":"        }"},{"type":"INSERT","lineNumber":174,"content":"        "},{"type":"INSERT","lineNumber":175,"content":"        // Cache Validierung"},{"type":"INSERT","lineNumber":176,"content":"        if (Cache.FEATURE_MAP_CACHE_SIZE <= 0) {"},{"type":"INSERT","lineNumber":177,"content":"            issues.add(\"FEATURE_MAP_CACHE_SIZE muss größer als 0 sein\")"},{"type":"INSERT","lineNumber":178,"content":"        }"},{"type":"INSERT","lineNumber":179,"content":"        "},{"type":"DELETE","lineNumber":172,"oldContent":"        // Tracking Validierung"},{"type":"DELETE","lineNumber":174,"oldContent":"        if (Tracking.SMOOTHING_FACTOR < 0 || Tracking.SMOOTHING_FACTOR > 1) {"},{"type":"DELETE","lineNumber":176,"oldContent":"            issues.add(\"SMOOTHING_FACTOR muss zwischen 0 und 1 liegen\")"},{"type":"DELETE","lineNumber":178,"oldContent":"        }"},{"type":"DELETE","lineNumber":180,"oldContent":"        if (Tracking.MIN_TRACKING_FRAMES <= 0) {"},{"type":"DELETE","lineNumber":182,"oldContent":"            issues.add(\"MIN_TRACKING_FRAMES muss größer als 0 sein\")"},{"type":"DELETE","lineNumber":184,"oldContent":"        }"},{"type":"DELETE","lineNumber":186,"oldContent":"        "},{"type":"DELETE","lineNumber":188,"oldContent":"        // Network Validierung"},{"type":"DELETE","lineNumber":189,"oldContent":"        // Cache Validierung"}]},{"timestamp":1754917540580,"changes":[{"type":"DELETE","lineNumber":32,"oldContent":"        const val MATCH_DISTANCE_THRESHOLD = 75.0f // Erhöht für mehr Matches"},{"type":"DELETE","lineNumber":33,"oldContent":"        const val MIN_MATCH_CONFIDENCE = 0.4f // Reduziert für mehr Matches"},{"type":"DELETE","lineNumber":34,"oldContent":"        const val MIN_REQUIRED_MATCHES = 15 // Minimum Matches für valide Erkennung"},{"type":"INSERT","lineNumber":32,"content":"        const val MATCH_DISTANCE_THRESHOLD = 100.0f // Erhöht für mehr Matches"},{"type":"INSERT","lineNumber":33,"content":"        const val MIN_MATCH_CONFIDENCE = 0.2f // Reduziert für mehr Matches"},{"type":"INSERT","lineNumber":34,"content":"        const val MIN_REQUIRED_MATCHES = 5 // Minimum Matches für valide Erkennung (reduziert)"},{"type":"MODIFY","lineNumber":38,"content":"        const val LOWE_RATIO_THRESHOLD = 0.9f // Standard: 0.7, gelockert für mehr Matches","oldContent":"        const val LOWE_RATIO_THRESHOLD = 0.8f // Standard: 0.7, gelockert für mehr Matches"},{"type":"DELETE","lineNumber":60,"oldContent":"        "},{"type":"INSERT","lineNumber":61,"content":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame"},{"type":"INSERT","lineNumber":62,"content":"        "},{"type":"DELETE","lineNumber":64,"oldContent":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame"},{"type":"INSERT","lineNumber":68,"content":"    "},{"type":"DELETE","lineNumber":69,"oldContent":"    // Cache-Konfiguration"},{"type":"INSERT","lineNumber":73,"content":"        const val CACHE_EXPIRY_HOURS = 24 // Cache-Gültigkeit in Stunden"},{"type":"DELETE","lineNumber":74,"oldContent":"        "},{"type":"MODIFY","lineNumber":80,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":83,"content":"    object Network {","oldContent":"    object Network {"},{"type":"INSERT","lineNumber":130,"content":"        // Performance-Monitoring"},{"type":"DELETE","lineNumber":132,"oldContent":"        // Performance-Monitoring"},{"type":"DELETE","lineNumber":134,"oldContent":"    object Experimental {"},{"type":"DELETE","lineNumber":136,"oldContent":"        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration"},{"type":"INSERT","lineNumber":137,"content":"    object Experimental {"},{"type":"INSERT","lineNumber":138,"content":"        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration"},{"type":"MODIFY","lineNumber":157,"content":"        }","oldContent":"        }"},{"type":"INSERT","lineNumber":158,"content":"        if (FeatureDetection.LOWE_RATIO_THRESHOLD <= 0 || FeatureDetection.LOWE_RATIO_THRESHOLD >= 1) {"},{"type":"INSERT","lineNumber":159,"content":"            issues.add(\"LOWE_RATIO_THRESHOLD muss zwischen 0 und 1 liegen\")"},{"type":"INSERT","lineNumber":160,"content":"        }"},{"type":"INSERT","lineNumber":161,"content":"        "},{"type":"DELETE","lineNumber":160,"oldContent":"        }"},{"type":"DELETE","lineNumber":162,"oldContent":"        if (FeatureDetection.LOWE_RATIO_THRESHOLD <= 0 || FeatureDetection.LOWE_RATIO_THRESHOLD >= 1) {"},{"type":"INSERT","lineNumber":165,"content":"        }"},{"type":"DELETE","lineNumber":165,"oldContent":"            issues.add(\"LOWE_RATIO_THRESHOLD muss zwischen 0 und 1 liegen\")"},{"type":"DELETE","lineNumber":168,"oldContent":"        "},{"type":"DELETE","lineNumber":169,"oldContent":"        }"},{"type":"DELETE","lineNumber":171,"oldContent":"        return issues"},{"type":"DELETE","lineNumber":173,"oldContent":"    }"},{"type":"DELETE","lineNumber":176,"oldContent":"    "},{"type":"DELETE","lineNumber":179,"oldContent":"    // Hilfsfunktionen"},{"type":"DELETE","lineNumber":182,"oldContent":"    fun isDebugMode(): Boolean = BuildConfig.DEBUG_FEATURE_MAPPING"},{"type":"INSERT","lineNumber":180,"content":"        return issues"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"    // Hilfsfunktionen"},{"type":"INSERT","lineNumber":184,"content":"    fun isDebugMode(): Boolean = BuildConfig.DEBUG_FEATURE_MAPPING"},{"type":"INSERT","lineNumber":185,"content":"    "}]},{"timestamp":1754922098415,"changes":[{"type":"DELETE","lineNumber":31,"oldContent":"        // Matching Konfiguration - Gelockerte Kriterien"},{"type":"DELETE","lineNumber":32,"oldContent":"        const val MATCH_DISTANCE_THRESHOLD = 100.0f // Erhöht für mehr Matches"},{"type":"DELETE","lineNumber":33,"oldContent":"        const val MIN_MATCH_CONFIDENCE = 0.2f // Reduziert für mehr Matches"},{"type":"DELETE","lineNumber":34,"oldContent":"        const val MIN_REQUIRED_MATCHES = 5 // Minimum Matches für valide Erkennung (reduziert)"},{"type":"INSERT","lineNumber":31,"content":"        // Matching Konfiguration - Stark gelockerte Kriterien für Debugging"},{"type":"INSERT","lineNumber":32,"content":"        const val MATCH_DISTANCE_THRESHOLD = 150.0f // Stark erhöht für mehr Matches"},{"type":"INSERT","lineNumber":33,"content":"        const val MIN_MATCH_CONFIDENCE = 0.03f // Stark reduziert für Debugging (war 0.2f)"},{"type":"INSERT","lineNumber":34,"content":"        const val MIN_REQUIRED_MATCHES = 3 // Minimum Matches für valide Erkennung (reduziert)"},{"type":"MODIFY","lineNumber":38,"content":"        const val LOWE_RATIO_THRESHOLD = 0.95f // Noch weiter gelockert für mehr Matches","oldContent":"        const val LOWE_RATIO_THRESHOLD = 0.9f // Standard: 0.7, gelockert für mehr Matches"},{"type":"MODIFY","lineNumber":61,"content":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame","oldContent":"        const val TRACKING_CONFIDENCE_DECAY = 0.95f // Confidence-Abfall pro Frame"},{"type":"INSERT","lineNumber":79,"content":"        const val DEBUG_IMAGES_DIR = \"debug_images\" // Für Debug-Bilder"},{"type":"DELETE","lineNumber":80,"oldContent":"    }"},{"type":"INSERT","lineNumber":82,"content":"    // Netzwerk-Konfiguration"},{"type":"DELETE","lineNumber":83,"oldContent":"    object Network {"},{"type":"DELETE","lineNumber":135,"oldContent":"    object Experimental {"},{"type":"MODIFY","lineNumber":137,"content":"    object Experimental {","oldContent":"        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration"},{"type":"INSERT","lineNumber":138,"content":"        const val ENABLE_DEEP_LEARNING_FEATURES = false // Für zukünftige ML-Integration"},{"type":"INSERT","lineNumber":156,"content":"            issues.add(\"MIN_REQUIRED_MATCHES muss größer als 0 sein\")"},{"type":"DELETE","lineNumber":157,"oldContent":"        }"},{"type":"DELETE","lineNumber":159,"oldContent":"        // Tracking Validierung"},{"type":"DELETE","lineNumber":161,"oldContent":"        if (Tracking.SMOOTHING_FACTOR < 0 || Tracking.SMOOTHING_FACTOR > 1) {"},{"type":"INSERT","lineNumber":162,"content":"        // Tracking Validierung"},{"type":"INSERT","lineNumber":163,"content":"        if (Tracking.SMOOTHING_FACTOR < 0 || Tracking.SMOOTHING_FACTOR > 1) {"},{"type":"INSERT","lineNumber":165,"content":"        }"},{"type":"DELETE","lineNumber":168,"oldContent":"        }"},{"type":"DELETE","lineNumber":176,"oldContent":"        return issues"},{"type":"DELETE","lineNumber":178,"oldContent":"    }"},{"type":"DELETE","lineNumber":180,"oldContent":"    // Hilfsfunktionen"},{"type":"DELETE","lineNumber":182,"oldContent":"    fun isDebugMode(): Boolean = BuildConfig.DEBUG_FEATURE_MAPPING"},{"type":"INSERT","lineNumber":180,"content":"        return issues"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"    // Hilfsfunktionen"},{"type":"INSERT","lineNumber":184,"content":"    fun isDebugMode(): Boolean = BuildConfig.DEBUG_FEATURE_MAPPING"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/screens/HomeScreen.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/screens/HomeScreen.kt","baseContent":"package com.example.arwalking.screens\nimport android.Manifest\nimport android.content.pm.PackageManager\nimport androidx.activity.compose.rememberLauncherForActivityResult\nimport androidx.activity.result.contract.ActivityResultContracts\nimport androidx.compose.foundation.Image\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.clickable\n\nimport androidx.compose.foundation.layout.Arrangement\nimport androidx.compose.foundation.layout.Box\nimport androidx.compose.foundation.layout.Column\nimport androidx.compose.foundation.layout.Row\nimport androidx.compose.foundation.layout.Spacer\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.foundation.layout.offset\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.foundation.layout.requiredHeight\nimport androidx.compose.foundation.layout.requiredSize\nimport androidx.compose.foundation.layout.requiredWidth\nimport androidx.compose.foundation.layout.size\nimport androidx.compose.foundation.layout.width\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.Icon\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\n\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.draw.shadow\nimport androidx.compose.ui.graphics.Brush\nimport com.example.arwalking.ui.theme.GradientUtils\nimport androidx.compose.ui.graphics.Color\n\nimport androidx.compose.ui.layout.ContentScale\nimport androidx.compose.ui.platform.LocalContext\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.TextStyle\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport androidx.compose.ui.zIndex\nimport androidx.core.content.ContextCompat\nimport androidx.navigation.NavController\nimport androidx.navigation.compose.rememberNavController\nimport com.example.arwalking.R\nimport com.example.arwalking.RouteViewModel\nimport com.example.arwalking.components.LocationDropdown\nimport com.example.arwalking.components.MenuOverlay\n\nimport androidx.lifecycle.viewmodel.compose.viewModel\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.material3.Card\nimport androidx.compose.material3.CardDefaults\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.animation.core.spring\nimport androidx.compose.animation.core.Spring\nimport androidx.compose.animation.core.tween\nimport androidx.compose.animation.scaleIn\nimport androidx.compose.animation.scaleOut\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\nimport androidx.compose.foundation.interaction.MutableInteractionSource\nimport androidx.compose.foundation.interaction.collectIsPressedAsState\nimport androidx.compose.foundation.layout.height\nimport androidx.compose.material3.MaterialTheme\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.hapticfeedback.HapticFeedbackType\nimport androidx.compose.ui.platform.LocalHapticFeedback\nimport androidx.compose.runtime.LaunchedEffect\nimport kotlinx.coroutines.delay\nimport java.net.URLEncoder\nimport java.nio.charset.StandardCharsets\nimport java.util.UUID\n\n\n@Composable\nfun HomeScreen(\n    navController: NavController,\n    modifier: Modifier = Modifier\n) {\n    var startDropdownExpanded by remember { mutableStateOf(false) }\n    var destinationDropdownExpanded by remember { mutableStateOf(false) }\n    var selectedStart by remember { mutableStateOf(\"Start suchen...\") }\n    var selectedDestination by remember { mutableStateOf(\"Ziel suchen...\") }\n    var showMenuOverlay by remember { mutableStateOf(false) }\n    var showErrorMessage by remember { mutableStateOf(false) }\n    var showRouteNotAvailableMessage by remember { mutableStateOf(false) }\n    val hapticFeedback = LocalHapticFeedback.current\n\n\n\n\n    val routeViewModel: RouteViewModel = viewModel()\n    val context = LocalContext.current\n    \n    // Automatische Navigation zur Kamera für Testing\n    LaunchedEffect(Unit) {\n        delay(2000) // Warte 2 Sekunden\n        val encodedDestination = URLEncoder.encode(\"Bibliothek\", StandardCharsets.UTF_8.toString())\n        val encodedStartLocation = URLEncoder.encode(\"Haupteingang\", StandardCharsets.UTF_8.toString())\n        navController.navigate(\"camera_navigation/$encodedDestination/$encodedStartLocation\")\n    }\n\n\n\n    // Funktion zur Prüfung, ob eine Route verfügbar ist\n    fun isRouteAvailable(start: String, destination: String): Boolean {\n        val cleanStart = start.replace(\" (coming soon)\", \"\")\n        val cleanDestination = destination.replace(\" (coming soon)\", \"\")\n\n        // Nur diese Route ist verfügbar (basierend auf der JSON-Datei)\n        // Die JSON-Route ist eine Rundroute von Prof. Ludwig's Büro\n        return (cleanStart == \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\" && cleanDestination == \"Haupteingang\")\n    }\n\n    val startOptions = listOf(\n        \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\",\n        \"Büro Prof. Dr. Wolff (PT 3.0.60) (coming soon)\",\n        \"Mensa (coming soon)\",\n        \"Parkplatz (coming soon)\",\n        \"Hörsaal A (coming soon)\",\n        \"Hörsaal B (coming soon)\",\n        \"Labor 1 (coming soon)\",\n        \"Labor 2 (coming soon)\",\n        \"Bibliothek (coming soon)\",\n        \"Studentensekretariat (coming soon)\"\n    )\n\n    val destinationOptions = listOf(\n        \"Haupteingang\",\n        \"Büro Prof. Dr. Ludwig (PT 3.0.84C) (coming soon)\",\n        \"Büro Prof. Dr. Wolff (PT 3.0.60) (coming soon)\",\n        \"Mensa (coming soon)\",\n        \"Parkplatz (coming soon)\",\n        \"Hörsaal A (coming soon)\",\n        \"Hörsaal B (coming soon)\",\n        \"Labor 1 (coming soon)\",\n        \"Labor 2 (coming soon)\",\n        \"Bibliothek (coming soon)\",\n        \"Studentensekretariat (coming soon)\"\n    )\n\n    val cameraLauncher = rememberLauncherForActivityResult(\n        ActivityResultContracts.RequestPermission()\n    ) { granted ->\n        if (granted) {\n            // Validation: Check if both start and destination are selected\n            if (selectedStart == \"Start suchen...\" || selectedDestination == \"Ziel suchen...\") {\n                showErrorMessage = true\n                hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n                return@rememberLauncherForActivityResult\n            }\n\n            // Validation: Check if start and destination are different\n            if (selectedStart == selectedDestination) {\n                showErrorMessage = true\n                hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n                return@rememberLauncherForActivityResult\n            }\n\n            // Validation: Check if route is available\n            if (!isRouteAvailable(selectedStart, selectedDestination)) {\n                showRouteNotAvailableMessage = true\n                hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n                return@rememberLauncherForActivityResult\n            }\n\n            val destination = if (selectedDestination != \"Ziel suchen...\") selectedDestination else \"Unbekanntes Ziel\"\n            val startLocation = if (selectedStart != \"Start suchen...\") selectedStart else \"Unbekannter Start\"\n            val encodedDestination = URLEncoder.encode(destination, StandardCharsets.UTF_8.toString())\n            val encodedStartLocation = URLEncoder.encode(startLocation, StandardCharsets.UTF_8.toString())\n            navController.navigate(\"camera_navigation/$encodedDestination/$encodedStartLocation\")\n        }\n    }\n\n    fun navigateWithPermission() {\n        // Validation: Check if both start and destination are selected\n        if (selectedStart == \"Start suchen...\" || selectedDestination == \"Ziel suchen...\") {\n            showErrorMessage = true\n            hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n            return\n        }\n\n        // Validation: Check if start and destination are different\n        if (selectedStart == selectedDestination) {\n            showErrorMessage = true\n            hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n            return\n        }\n\n        // Validation: Check if route is available\n        if (!isRouteAvailable(selectedStart, selectedDestination)) {\n            showRouteNotAvailableMessage = true\n            hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n            return\n        }\n\n        if (\n            ContextCompat.checkSelfPermission(\n                context,\n                Manifest.permission.CAMERA\n            ) == PackageManager.PERMISSION_GRANTED\n        ) {\n            val destination = if (selectedDestination != \"Ziel suchen...\") selectedDestination else \"Unbekanntes Ziel\"\n            val startLocation = if (selectedStart != \"Start suchen...\") selectedStart else \"Unbekannter Start\"\n            val encodedDestination = URLEncoder.encode(destination, StandardCharsets.UTF_8.toString())\n            val encodedStartLocation = URLEncoder.encode(startLocation, StandardCharsets.UTF_8.toString())\n            navController.navigate(\"camera_navigation/$encodedDestination/$encodedStartLocation\")\n        } else {\n            cameraLauncher.launch(Manifest.permission.CAMERA)\n        }\n    }\n\n    // Auto-hide error message after 3 seconds\n    LaunchedEffect(showErrorMessage) {\n        if (showErrorMessage) {\n            delay(3000)\n            showErrorMessage = false\n        }\n    }\n\n    // Auto-hide route not available message after 4 seconds\n    LaunchedEffect(showRouteNotAvailableMessage) {\n        if (showRouteNotAvailableMessage) {\n            delay(4000)\n            showRouteNotAvailableMessage = false\n        }\n    }\n\n    Box(\n        modifier = modifier.fillMaxSize()\n    ) {\n        // Background Image\n        Image(\n            painter = painterResource(id = R.drawable.login_image),\n            contentDescription = \"Background\",\n            modifier = Modifier.fillMaxSize(),\n            contentScale = ContentScale.Crop\n        )\n\n        // Top gradient overlay\n        Box(\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .fillMaxWidth()\n                .requiredHeight(200.dp)\n                .background(\n                    brush = GradientUtils.safeVerticalGradient(\n                        colors = listOf(\n                            Color.Black.copy(alpha = 0.6f),\n                            Color.Transparent\n                        )\n                    )\n                )\n        )\n\n        // Bottom gradient overlay\n        Box(\n            modifier = Modifier\n                .align(Alignment.BottomCenter)\n                .requiredWidth(412.dp)\n                .requiredHeight(200.dp)\n                .background(\n                    brush = GradientUtils.safeVerticalGradient(\n                        colors = listOf(\n                            Color.Transparent,\n                            Color.Black.copy(alpha = 0.3f)\n                        )\n                    )\n                )\n        )\n\n        // Top Logo Section\n        Image(\n            painter = painterResource(id = R.drawable.logo),\n            contentDescription = \"AR Walking Logo\",\n            modifier = Modifier\n                .align(Alignment.TopCenter)\n                .offset(y = 120.dp)\n                .requiredWidth(280.dp)\n                .requiredHeight(80.dp)\n        )\n\n        // Menu Icon in top right with animation\n        val menuInteractionSource = remember { MutableInteractionSource() }\n        val isMenuPressed by menuInteractionSource.collectIsPressedAsState()\n\n        val menuScale by animateFloatAsState(\n            targetValue = if (isMenuPressed) 0.9f else 1f,\n            animationSpec = spring(\n                dampingRatio = Spring.DampingRatioMediumBouncy,\n                stiffness = Spring.StiffnessHigh\n            ), label = \"menuScale\"\n        )\n\n        Icon(\n            painter = painterResource(id = R.drawable.menu_1),\n            contentDescription = \"Menu\",\n            tint = Color.White,\n            modifier = Modifier\n                .align(Alignment.TopEnd)\n                .offset(x = (-20).dp, y = 60.dp)\n                .size(28.dp)\n                .graphicsLayer {\n                    scaleX = menuScale\n                    scaleY = menuScale\n                }\n                .clickable(\n                    interactionSource = menuInteractionSource,\n                    indication = null\n                ) {\n                    hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n                    showMenuOverlay = true\n                }\n        )\n\n        // Vertical dots connection\n        val dotCount = 30\n        val totalHeight = 266.dp\n\n        Box(\n            modifier = Modifier\n                .align(Alignment.Center)\n                .requiredHeight(totalHeight)\n                .requiredWidth(4.dp)\n        ) {\n            Column(\n                modifier = Modifier.fillMaxSize(),\n                verticalArrangement = Arrangement.SpaceBetween,\n                horizontalAlignment = Alignment.CenterHorizontally\n            ) {\n                repeat(dotCount) {\n                    Box(\n                        modifier = Modifier\n                            .size(4.dp)\n                            .clip(CircleShape)\n                            .background(Color.White.copy(alpha = 0.8f))\n                    )\n                }\n            }\n        }\n\n        // Start Location Dropdown\n        LocationDropdown(\n            modifier = Modifier\n                .align(Alignment.Center)\n                .offset(y = (-170).dp),\n            selectedText = selectedStart,\n            options = startOptions,\n            isExpanded = startDropdownExpanded,\n            onExpandedChange = { expanded ->\n                startDropdownExpanded = expanded\n\n                // Schließe das andere Dropdown wenn dieses geöffnet wird\n                if (expanded && destinationDropdownExpanded) {\n                    destinationDropdownExpanded = false\n                }\n            },\n            onOptionSelected = { selectedStart = it },\n            onTextChange = { selectedStart = it },\n            iconResource = null // Blue dot will be drawn directly\n        )\n\n        // Destination Location Dropdown\n        LocationDropdown(\n            modifier = Modifier\n                .align(Alignment.Center)\n                .offset(y = 170.dp),\n            selectedText = selectedDestination,\n            options = destinationOptions,\n            isExpanded = destinationDropdownExpanded,\n            onExpandedChange = { expanded ->\n                destinationDropdownExpanded = expanded\n\n                // Schließe das andere Dropdown wenn dieses geöffnet wird\n                if (expanded && startDropdownExpanded) {\n                    startDropdownExpanded = false\n                }\n            },\n            onOptionSelected = { selectedDestination = it },\n            onTextChange = { selectedDestination = it },\n            iconResource = R.drawable.mappin1,\n            iconTint = Color(0xFFD31526),\n            expandUpward = true // Dropdown nach oben klappen\n        )\n\n        // Start Button with modern design and animations\n        val buttonInteractionSource = remember { MutableInteractionSource() }\n        val isPressed by buttonInteractionSource.collectIsPressedAsState()\n\n        val buttonScale by animateFloatAsState(\n            targetValue = if (isPressed) 0.95f else 1f,\n            animationSpec = spring(\n                dampingRatio = Spring.DampingRatioMediumBouncy,\n                stiffness = Spring.StiffnessLow\n            ), label = \"buttonScale\"\n        )\n\n        val buttonElevation by animateFloatAsState(\n            targetValue = if (isPressed) 4.dp.value else 12.dp.value,\n            animationSpec = tween(100), label = \"buttonElevation\"\n        )\n\n        Card(\n            modifier = Modifier\n                .align(Alignment.BottomCenter)\n                .padding(bottom = 180.dp)\n                .width(140.dp)\n                .height(56.dp)\n                .graphicsLayer {\n                    scaleX = buttonScale\n                    scaleY = buttonScale\n                }\n                .clickable(\n                    interactionSource = buttonInteractionSource,\n                    indication = null\n                ) {\n                    hapticFeedback.performHapticFeedback(HapticFeedbackType.LongPress)\n                    navigateWithPermission()\n                },\n            colors = CardDefaults.cardColors(\n                containerColor = Color(0xFF94AC0B)\n            ),\n            elevation = CardDefaults.cardElevation(\n                defaultElevation = buttonElevation.dp\n            ),\n            shape = RoundedCornerShape(28.dp)\n        ) {\n            Row(\n                modifier = Modifier\n                    .fillMaxSize()\n                    .padding(horizontal = 16.dp),\n                horizontalArrangement = Arrangement.Center,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Icon(\n                    painter = painterResource(id = R.drawable.navigation21),\n                    contentDescription = \"navigation\",\n                    tint = Color.White,\n                    modifier = Modifier.size(22.dp)\n                )\n                Spacer(modifier = Modifier.width(12.dp))\n                Text(\n                    text = \"Starten\",\n                    color = Color.White,\n                    fontSize = 16.sp,\n                    fontWeight = FontWeight.W600,\n                    style = TextStyle(\n                        letterSpacing = 0.5.sp\n                    )\n                )\n            }\n        }\n\n\n\n        // Location Finding Button (Google Maps style) - positioned in bottom right\n        val locationButtonInteractionSource = remember { MutableInteractionSource() }\n        val isLocationButtonPressed by locationButtonInteractionSource.collectIsPressedAsState()\n\n        val locationButtonScale by animateFloatAsState(\n            targetValue = if (isLocationButtonPressed) 0.9f else 1f,\n            animationSpec = spring(\n                dampingRatio = Spring.DampingRatioMediumBouncy,\n                stiffness = Spring.StiffnessHigh\n            ), label = \"locationButtonScale\"\n        )\n\n        Box(\n            modifier = Modifier\n                .align(Alignment.BottomEnd)\n                .offset(x = -20.dp, y = (-50).dp)\n                .size(56.dp)\n                .graphicsLayer {\n                    scaleX = locationButtonScale\n                    scaleY = locationButtonScale\n                }\n                .clip(CircleShape)\n                .background(Color.Black.copy(alpha = 0.4f))\n                .border(\n                    width = 0.5.dp,\n                    color = Color(0xFF0F0F86),\n                    shape = CircleShape\n                )\n                .shadow(\n                    elevation = 8.dp,\n                    shape = CircleShape,\n                    ambientColor = Color.Black.copy(alpha = 0.08f),\n                    spotColor = Color.Black.copy(alpha = 0.12f)\n                )\n                .clickable(\n                    interactionSource = locationButtonInteractionSource,\n                    indication = null\n                ) {\n                    // TODO: Add location finding functionality here\n                },\n            contentAlignment = Alignment.Center\n        ) {\n            Icon(\n                painter = painterResource(id = R.drawable.location_searching),\n                contentDescription = \"Find current location\",\n                tint = Color(0xFF94AD0C),\n                modifier = Modifier.size(24.dp)\n            )\n        }\n\n        // Menu Overlay\n        MenuOverlay(\n            isVisible = showMenuOverlay,\n            onDismiss = { showMenuOverlay = false },\n            onFavoriteSelected = { favorite ->\n                selectedStart = favorite.startLocation\n                selectedDestination = favorite.destination\n            }\n        )\n\n        // Error Message with animation - zentriert im Bildschirm\n        androidx.compose.animation.AnimatedVisibility(\n            visible = showErrorMessage,\n            enter = scaleIn(\n                initialScale = 0.8f,\n                animationSpec = spring(\n                    dampingRatio = Spring.DampingRatioMediumBouncy,\n                    stiffness = Spring.StiffnessMedium\n                )\n            ) + fadeIn(\n                animationSpec = tween(300)\n            ),\n            exit = scaleOut(\n                targetScale = 0.8f,\n                animationSpec = tween(200)\n            ) + fadeOut(\n                animationSpec = tween(200)\n            ),\n            modifier = Modifier.align(Alignment.Center)\n        ) {\n            Card(\n                modifier = Modifier\n                    .padding(horizontal = 32.dp)\n                    .zIndex(10f),\n                colors = CardDefaults.cardColors(\n                    containerColor = Color.Red.copy(alpha = 0.9f)\n                ),\n                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),\n                shape = RoundedCornerShape(12.dp)\n            ) {\n                Column(\n                    modifier = Modifier.padding(24.dp),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    Icon(\n                        painter = painterResource(id = R.drawable.alert_circle),\n                        contentDescription = \"Error\",\n                        tint = Color.White,\n                        modifier = Modifier.size(32.dp)\n                    )\n                    Spacer(modifier = Modifier.height(12.dp))\n                    Text(\n                        text = \"Fehler\",\n                        color = Color.White,\n                        fontSize = 18.sp,\n                        fontWeight = FontWeight.Bold\n                    )\n                    Spacer(modifier = Modifier.height(8.dp))\n                    Text(\n                        text = when {\n                            selectedStart == \"Start suchen...\" || selectedDestination == \"Ziel suchen...\" ->\n                                \"Bitte wählen Sie sowohl einen Startpunkt als auch ein Ziel aus.\"\n                            selectedStart == selectedDestination ->\n                                \"Startpunkt und Ziel dürfen nicht identisch sein.\"\n                            else -> \"Unbekannter Fehler\"\n                        },\n                        color = Color.White,\n                        fontSize = 14.sp,\n                        textAlign = TextAlign.Center\n                    )\n                }\n            }\n        }\n\n        // Route Not Available Message\n        androidx.compose.animation.AnimatedVisibility(\n            visible = showRouteNotAvailableMessage,\n            enter = scaleIn(\n                initialScale = 0.9f,\n                animationSpec = spring(\n                    dampingRatio = Spring.DampingRatioMediumBouncy,\n                    stiffness = Spring.StiffnessMedium\n                )\n            ) + fadeIn(\n                animationSpec = tween(400)\n            ),\n            exit = scaleOut(\n                targetScale = 0.9f,\n                animationSpec = tween(300)\n            ) + fadeOut(\n                animationSpec = tween(300)\n            ),\n            modifier = Modifier.align(Alignment.Center)\n        ) {\n            Card(\n                modifier = Modifier\n                    .padding(horizontal = 40.dp)\n                    .zIndex(10f),\n                colors = CardDefaults.cardColors(\n                    containerColor = Color.White\n                ),\n                elevation = CardDefaults.cardElevation(defaultElevation = 16.dp),\n                shape = RoundedCornerShape(16.dp)\n            ) {\n                Column(\n                    modifier = Modifier.padding(32.dp),\n                    horizontalAlignment = Alignment.CenterHorizontally\n                ) {\n                    // Info Icon\n                    Box(\n                        modifier = Modifier\n                            .size(64.dp)\n                            .background(\n                                Color(0xFF007AFF).copy(alpha = 0.1f),\n                                CircleShape\n                            ),\n                        contentAlignment = Alignment.Center\n                    ) {\n                        Icon(\n                            painter = painterResource(id = R.drawable.alert_circle),\n                            contentDescription = \"Info\",\n                            tint = Color(0xFF007AFF),\n                            modifier = Modifier.size(32.dp)\n                        )\n                    }\n\n                    Spacer(modifier = Modifier.height(20.dp))\n\n                    Text(\n                        text = \"Route nicht verfügbar\",\n                        color = Color.Black,\n                        fontSize = 20.sp,\n                        fontWeight = FontWeight.SemiBold,\n                        textAlign = TextAlign.Center\n                    )\n\n                    Spacer(modifier = Modifier.height(12.dp))\n\n                    Text(\n                        text = \"Diese Route ist noch nicht kartografiert.\\n\\nWir arbeiten daran, weitere Routen hinzuzufügen.\",\n                        color = Color.Gray,\n                        fontSize = 16.sp,\n                        textAlign = TextAlign.Center,\n                        lineHeight = 22.sp\n                    )\n\n                    Spacer(modifier = Modifier.height(24.dp))\n\n                    // OK Button\n                    Card(\n                        modifier = Modifier\n                            .fillMaxWidth()\n                            .height(48.dp)\n                            .clickable {\n                                showRouteNotAvailableMessage = false\n                            },\n                        colors = CardDefaults.cardColors(\n                            containerColor = Color(0xFF007AFF)\n                        ),\n                        shape = RoundedCornerShape(12.dp)\n                    ) {\n                        Box(\n                            modifier = Modifier.fillMaxSize(),\n                            contentAlignment = Alignment.Center\n                        ) {\n                            Text(\n                                text = \"OK\",\n                                color = Color.White,\n                                fontSize = 17.sp,\n                                fontWeight = FontWeight.SemiBold\n                            )\n                        }\n                    }\n                }\n            }\n        }\n\n\n    }\n}\n\n@Preview(widthDp = 412, heightDp = 917)\n@Composable\nprivate fun HomeScreenPreview() {\n    HomeScreen(navController = rememberNavController())\n}\n\n","baseTimestamp":1754576337080,"deltas":[{"timestamp":1754576616262,"changes":[{"type":"INSERT","lineNumber":91,"content":"    Log.d(\"HomeScreen\", \"HomeScreen composable started\")"}]},{"timestamp":1754576623272,"changes":[{"type":"INSERT","lineNumber":109,"content":"        Log.d(\"HomeScreen\", \"LaunchedEffect started - will navigate to camera in 2 seconds\")"},{"type":"INSERT","lineNumber":113,"content":"        Log.d(\"HomeScreen\", \"Navigating to camera_navigation/$encodedDestination/$encodedStartLocation\")"},{"type":"INSERT","lineNumber":115,"content":"        Log.d(\"HomeScreen\", \"Navigation completed\")"}]},{"timestamp":1754576629109,"changes":[{"type":"INSERT","lineNumber":3,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":113,"oldContent":"        navController.navigate(\"camera_navigation/$encodedDestination/$encodedStartLocation\")"},{"type":"INSERT","lineNumber":115,"content":"        navController.navigate(\"camera_navigation/$encodedDestination/$encodedStartLocation\")"},{"type":"INSERT","lineNumber":116,"content":"        Log.d(\"HomeScreen\", \"Navigation completed\")"},{"type":"DELETE","lineNumber":117,"oldContent":"        Log.d(\"HomeScreen\", \"Navigation completed\")"}]},{"timestamp":1754576735119,"changes":[{"type":"MODIFY","lineNumber":108,"content":"    // Feature-Matching Test ohne Kamera","oldContent":"    // Automatische Navigation zur Kamera für Testing"},{"type":"DELETE","lineNumber":110,"oldContent":"        Log.d(\"HomeScreen\", \"LaunchedEffect started - will navigate to camera in 2 seconds\")"},{"type":"DELETE","lineNumber":111,"oldContent":"        delay(2000) // Warte 2 Sekunden"},{"type":"DELETE","lineNumber":112,"oldContent":"        val encodedDestination = URLEncoder.encode(\"Bibliothek\", StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":113,"oldContent":"        val encodedStartLocation = URLEncoder.encode(\"Haupteingang\", StandardCharsets.UTF_8.toString())"},{"type":"DELETE","lineNumber":114,"oldContent":"        Log.d(\"HomeScreen\", \"Navigating to camera_navigation/$encodedDestination/$encodedStartLocation\")"},{"type":"DELETE","lineNumber":115,"oldContent":"        navController.navigate(\"camera_navigation/$encodedDestination/$encodedStartLocation\")"},{"type":"INSERT","lineNumber":110,"content":"        Log.d(\"HomeScreen\", \"Starting feature matching test...\")"},{"type":"INSERT","lineNumber":111,"content":"        delay(3000) // Warte bis Route geladen ist"},{"type":"INSERT","lineNumber":112,"content":"        "},{"type":"INSERT","lineNumber":113,"content":"        // Teste Feature-Matching mit einem der Landmark-Bilder"},{"type":"INSERT","lineNumber":114,"content":"        try {"},{"type":"INSERT","lineNumber":115,"content":"            val testImagePath = \"landmark_images/PT-1-697.jpg\""},{"type":"INSERT","lineNumber":116,"content":"            val inputStream = context.assets.open(testImagePath)"},{"type":"INSERT","lineNumber":117,"content":"            val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"INSERT","lineNumber":118,"content":"            inputStream.close()"},{"type":"INSERT","lineNumber":119,"content":"            "},{"type":"INSERT","lineNumber":120,"content":"            if (bitmap != null) {"},{"type":"INSERT","lineNumber":121,"content":"                Log.d(\"HomeScreen\", \"Test image loaded: ${bitmap.width}x${bitmap.height}\")"},{"type":"INSERT","lineNumber":122,"content":"                "},{"type":"INSERT","lineNumber":123,"content":"                // Konvertiere zu OpenCV Mat"},{"type":"INSERT","lineNumber":124,"content":"                val mat = Mat()"},{"type":"INSERT","lineNumber":125,"content":"                Utils.bitmapToMat(bitmap, mat)"},{"type":"INSERT","lineNumber":126,"content":"                "},{"type":"INSERT","lineNumber":127,"content":"                // Teste Feature-Matching"},{"type":"INSERT","lineNumber":128,"content":"                routeViewModel.processFrameForFeatureMatching(mat)"},{"type":"INSERT","lineNumber":129,"content":"                Log.d(\"HomeScreen\", \"Feature matching test completed\")"},{"type":"INSERT","lineNumber":130,"content":"            } else {"},{"type":"INSERT","lineNumber":131,"content":"                Log.e(\"HomeScreen\", \"Failed to load test image\")"},{"type":"INSERT","lineNumber":132,"content":"            }"},{"type":"INSERT","lineNumber":133,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":134,"content":"            Log.e(\"HomeScreen\", \"Feature matching test failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":135,"content":"        }"},{"type":"DELETE","lineNumber":117,"oldContent":"        Log.d(\"HomeScreen\", \"Navigation completed\")"}]},{"timestamp":1754576739907,"changes":[{"type":"INSERT","lineNumber":3,"content":"import android.graphics.BitmapFactory"},{"type":"DELETE","lineNumber":117,"oldContent":"    }"},{"type":"DELETE","lineNumber":120,"oldContent":""},{"type":"DELETE","lineNumber":122,"oldContent":""},{"type":"DELETE","lineNumber":124,"oldContent":""},{"type":"DELETE","lineNumber":126,"oldContent":"    // Funktion zur Prüfung, ob eine Route verfügbar ist"},{"type":"DELETE","lineNumber":128,"oldContent":"    fun isRouteAvailable(start: String, destination: String): Boolean {"},{"type":"DELETE","lineNumber":130,"oldContent":"        val cleanStart = start.replace(\" (coming soon)\", \"\")"},{"type":"DELETE","lineNumber":132,"oldContent":"        val cleanDestination = destination.replace(\" (coming soon)\", \"\")"},{"type":"DELETE","lineNumber":134,"oldContent":""},{"type":"DELETE","lineNumber":136,"oldContent":"        // Nur diese Route ist verfügbar (basierend auf der JSON-Datei)"},{"type":"DELETE","lineNumber":138,"oldContent":"        // Die JSON-Route ist eine Rundroute von Prof. Ludwig's Büro"},{"type":"DELETE","lineNumber":140,"oldContent":"        return (cleanStart == \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\" && cleanDestination == \"Haupteingang\")"},{"type":"DELETE","lineNumber":142,"oldContent":"    }"},{"type":"DELETE","lineNumber":144,"oldContent":""},{"type":"DELETE","lineNumber":146,"oldContent":"    val startOptions = listOf("},{"type":"DELETE","lineNumber":148,"oldContent":"        \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\","},{"type":"DELETE","lineNumber":150,"oldContent":"        \"Büro Prof. Dr. Wolff (PT 3.0.60) (coming soon)\","},{"type":"DELETE","lineNumber":152,"oldContent":"        \"Mensa (coming soon)\","},{"type":"INSERT","lineNumber":137,"content":"    }"},{"type":"INSERT","lineNumber":138,"content":""},{"type":"INSERT","lineNumber":139,"content":""},{"type":"INSERT","lineNumber":140,"content":""},{"type":"INSERT","lineNumber":141,"content":"    // Funktion zur Prüfung, ob eine Route verfügbar ist"},{"type":"INSERT","lineNumber":142,"content":"    fun isRouteAvailable(start: String, destination: String): Boolean {"},{"type":"INSERT","lineNumber":143,"content":"        val cleanStart = start.replace(\" (coming soon)\", \"\")"},{"type":"INSERT","lineNumber":144,"content":"        val cleanDestination = destination.replace(\" (coming soon)\", \"\")"},{"type":"INSERT","lineNumber":145,"content":""},{"type":"INSERT","lineNumber":146,"content":"        // Nur diese Route ist verfügbar (basierend auf der JSON-Datei)"},{"type":"INSERT","lineNumber":147,"content":"        // Die JSON-Route ist eine Rundroute von Prof. Ludwig's Büro"},{"type":"INSERT","lineNumber":148,"content":"        return (cleanStart == \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\" && cleanDestination == \"Haupteingang\")"},{"type":"INSERT","lineNumber":149,"content":"    }"},{"type":"INSERT","lineNumber":150,"content":""},{"type":"INSERT","lineNumber":151,"content":"    val startOptions = listOf("},{"type":"INSERT","lineNumber":152,"content":"        \"Büro Prof. Dr. Ludwig (PT 3.0.84C)\","},{"type":"INSERT","lineNumber":153,"content":"        \"Büro Prof. Dr. Wolff (PT 3.0.60) (coming soon)\","},{"type":"INSERT","lineNumber":154,"content":"        \"Mensa (coming soon)\","}]},{"timestamp":1754576745433,"changes":[{"type":"INSERT","lineNumber":86,"content":"import org.opencv.android.Utils"},{"type":"INSERT","lineNumber":87,"content":"import org.opencv.core.Mat"},{"type":"DELETE","lineNumber":128,"oldContent":"    }"},{"type":"INSERT","lineNumber":131,"content":"                routeViewModel.processFrameForFeatureMatching(mat)"},{"type":"INSERT","lineNumber":132,"content":"                Log.d(\"HomeScreen\", \"Feature matching test completed\")"},{"type":"INSERT","lineNumber":133,"content":"            } else {"},{"type":"INSERT","lineNumber":134,"content":"                Log.e(\"HomeScreen\", \"Failed to load test image\")"},{"type":"INSERT","lineNumber":135,"content":"            }"},{"type":"INSERT","lineNumber":136,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":137,"content":"            Log.e(\"HomeScreen\", \"Feature matching test failed: ${e.message}\", e)"},{"type":"INSERT","lineNumber":138,"content":"        }"},{"type":"INSERT","lineNumber":139,"content":"    }"},{"type":"DELETE","lineNumber":132,"oldContent":"                routeViewModel.processFrameForFeatureMatching(mat)"},{"type":"DELETE","lineNumber":135,"oldContent":"                Log.d(\"HomeScreen\", \"Feature matching test completed\")"},{"type":"DELETE","lineNumber":138,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":141,"oldContent":"                Log.e(\"HomeScreen\", \"Failed to load test image\")"},{"type":"DELETE","lineNumber":144,"oldContent":"            }"},{"type":"DELETE","lineNumber":147,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":150,"oldContent":"            Log.e(\"HomeScreen\", \"Feature matching test failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":153,"oldContent":"        }"}]},{"timestamp":1754576827283,"changes":[{"type":"DELETE","lineNumber":87,"oldContent":""},{"type":"INSERT","lineNumber":89,"content":""},{"type":"DELETE","lineNumber":111,"oldContent":"    // Feature-Matching Test ohne Kamera"},{"type":"DELETE","lineNumber":112,"oldContent":"    LaunchedEffect(Unit) {"},{"type":"DELETE","lineNumber":113,"oldContent":"        Log.d(\"HomeScreen\", \"Starting feature matching test...\")"},{"type":"DELETE","lineNumber":114,"oldContent":"        delay(3000) // Warte bis Route geladen ist"},{"type":"DELETE","lineNumber":115,"oldContent":"        "},{"type":"DELETE","lineNumber":116,"oldContent":"        // Teste Feature-Matching mit einem der Landmark-Bilder"},{"type":"DELETE","lineNumber":117,"oldContent":"        try {"},{"type":"DELETE","lineNumber":118,"oldContent":"            val testImagePath = \"landmark_images/PT-1-697.jpg\""},{"type":"DELETE","lineNumber":119,"oldContent":"            val inputStream = context.assets.open(testImagePath)"},{"type":"DELETE","lineNumber":120,"oldContent":"            val bitmap = BitmapFactory.decodeStream(inputStream)"},{"type":"DELETE","lineNumber":121,"oldContent":"            inputStream.close()"},{"type":"DELETE","lineNumber":122,"oldContent":"            "},{"type":"DELETE","lineNumber":123,"oldContent":"            if (bitmap != null) {"},{"type":"DELETE","lineNumber":124,"oldContent":"                Log.d(\"HomeScreen\", \"Test image loaded: ${bitmap.width}x${bitmap.height}\")"},{"type":"DELETE","lineNumber":125,"oldContent":"                "},{"type":"DELETE","lineNumber":126,"oldContent":"                // Konvertiere zu OpenCV Mat"},{"type":"DELETE","lineNumber":127,"oldContent":"                val mat = Mat()"},{"type":"DELETE","lineNumber":128,"oldContent":"                Utils.bitmapToMat(bitmap, mat)"},{"type":"DELETE","lineNumber":129,"oldContent":"                "},{"type":"DELETE","lineNumber":130,"oldContent":"                // Teste Feature-Matching"},{"type":"DELETE","lineNumber":132,"oldContent":"                routeViewModel.processFrameForFeatureMatching(mat)"},{"type":"DELETE","lineNumber":134,"oldContent":"                Log.d(\"HomeScreen\", \"Feature matching test completed\")"},{"type":"DELETE","lineNumber":135,"oldContent":"            } else {"},{"type":"DELETE","lineNumber":137,"oldContent":"                Log.e(\"HomeScreen\", \"Failed to load test image\")"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"DELETE","lineNumber":139,"oldContent":"            }"},{"type":"DELETE","lineNumber":140,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":142,"oldContent":"            Log.e(\"HomeScreen\", \"Feature matching test failed: ${e.message}\", e)"},{"type":"DELETE","lineNumber":144,"oldContent":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":"    }"}]}]},"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-6490ff5d-dc4c-4d11-b571-e6d917160d8c14722021806752556550.log":{"filePath":"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-6490ff5d-dc4c-4d11-b571-e6d917160d8c14722021806752556550.log","baseContent":"08-11 13:50:12.424 20253 20253 I RouteViewModel: 🔄 loadLandmarksForCurrentRoute aufgerufen\n08-11 13:50:12.447 20253 20253 I RouteViewModel: 🔄 In loadLandmarksForCurrentRoute Coroutine\n08-11 13:50:12.447 20253 20253 I RouteViewModel: 🔄 Starte Feature-Loading für 7 Landmarks...\n08-11 13:50:12.447 20253 20253 I FeatureMatchingEngine: 🔄 Starte Feature-Loading für 7 Landmarks...\n08-11 13:50:12.755 20253 20253 I FeatureMatchingEngine: 🏁 Feature-Loading abgeschlossen: 7 von 7 Landmarks erfolgreich geladen\n08-11 13:50:12.755 20253 20253 I FeatureMatchingEngine: 🎉 Feature-Loading erfolgreich! 7 Landmarks bereit für Matching.\n08-11 13:50:12.755 20253 20253 I RouteViewModel: ✅ Feature-Loading abgeschlossen\n08-11 13:50:13.044 20253 20253 I RouteViewModel: 🔄 loadLandmarksForCurrentRoute aufgerufen\n08-11 13:50:13.066 20253 20253 I RouteViewModel: 🔄 In loadLandmarksForCurrentRoute Coroutine\n08-11 13:50:13.066 20253 20253 I RouteViewModel: 🔄 Starte Feature-Loading für 7 Landmarks...","baseTimestamp":1754913253434},"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-ac410bcc-cb58-4a2b-9989-cdc6b397232015175294072935732730.log":{"filePath":"/var/folders/2q/tb9zfk456p3277t66hz_3g6r0000gn/T/Zencoder-ac410bcc-cb58-4a2b-9989-cdc6b397232015175294072935732730.log","baseContent":"","baseTimestamp":1754915163287},"/Dummy.lcf":{"filePath":"/Dummy.lcf","baseContent":"FeatureMatchingEngine","baseTimestamp":1754916534990,"deltas":[{"timestamp":1754916591382,"changes":[{"type":"MODIFY","lineNumber":0,"content":"RouteViewModel","oldContent":"FeatureMatchingEngine"}]},{"timestamp":1754916597814,"changes":[{"type":"MODIFY","lineNumber":0,"content":"","oldContent":"RouteViewModel"}]},{"timestamp":1754916602770,"changes":[{"type":"MODIFY","lineNumber":0,"content":"RouteViewModel","oldContent":""}]},{"timestamp":1754916606026,"changes":[{"type":"MODIFY","lineNumber":0,"content":"","oldContent":"RouteViewModel"}]},{"timestamp":1754916622979,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine ","oldContent":""}]},{"timestamp":1754916649204,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine RouteViewModel","oldContent":"package:mine "}]},{"timestamp":1754916673729,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine OpenCvCameraActivity","oldContent":"package:mine RouteViewModel"}]},{"timestamp":1754916683065,"changes":[{"type":"MODIFY","lineNumber":0,"content":"OpenCvCameraActivity","oldContent":"package:mine OpenCvCameraActivity"}]},{"timestamp":1754916687155,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine ","oldContent":"OpenCvCameraActivity"}]},{"timestamp":1754917053418,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine RouteViewModel","oldContent":"package:mine "}]},{"timestamp":1754917320502,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine FeatureMatchingEngine","oldContent":"package:mine RouteViewModel"}]},{"timestamp":1754917524285,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine CameraScreen","oldContent":"package:mine FeatureMatchingEngine"}]},{"timestamp":1754917530149,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:mine","oldContent":"package:mine CameraScreen"}]},{"timestamp":1754917532574,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package:min","oldContent":"package:mine"}]}]},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/FeatureMatchOverlay.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/components/FeatureMatchOverlay.kt","baseContent":"package com.example.arwalking.components\n\nimport androidx.compose.animation.AnimatedVisibility\nimport androidx.compose.animation.core.*\nimport androidx.compose.animation.fadeIn\nimport androidx.compose.animation.fadeOut\n\nimport androidx.compose.animation.slideInVertically\nimport androidx.compose.animation.slideOutVertically\nimport androidx.compose.foundation.background\nimport androidx.compose.foundation.border\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.graphicsLayer\nimport androidx.compose.ui.res.painterResource\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.text.style.TextAlign\nimport androidx.compose.ui.unit.dp\nimport androidx.compose.ui.unit.sp\nimport com.example.arwalking.FeatureMatchResult\nimport com.example.arwalking.R\nimport kotlinx.coroutines.delay\n\n/**\n * Overlay-Komponente für die Anzeige von Feature-Match-Ergebnissen\n */\n@Composable\nfun FeatureMatchOverlay(\n    matches: List<FeatureMatchResult>,\n    isFeatureMappingEnabled: Boolean,\n    modifier: Modifier = Modifier\n) {\n    // Nur anzeigen wenn Feature Mapping aktiviert ist und Matches vorhanden sind\n    AnimatedVisibility(\n        visible = isFeatureMappingEnabled && matches.isNotEmpty(),\n        enter = slideInVertically { -it } + fadeIn(),\n        exit = slideOutVertically { -it } + fadeOut(),\n        modifier = modifier\n    ) {\n        Column(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            // Header\n            Card(\n                colors = CardDefaults.cardColors(\n                    containerColor = Color.Black.copy(alpha = 0.7f)\n                ),\n                shape = RoundedCornerShape(12.dp)\n            ) {\n                Row(\n                    modifier = Modifier\n                        .fillMaxWidth()\n                        .padding(12.dp),\n                    verticalAlignment = Alignment.CenterVertically,\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Icon(\n                        painter = painterResource(id = R.drawable.location_searching),\n                        contentDescription = \"Feature Detection\",\n                        tint = Color(0xFF94AD0C),\n                        modifier = Modifier.size(20.dp)\n                    )\n                    \n                    Text(\n                        text = \"Erkannte Landmarks\",\n                        color = Color.White,\n                        fontSize = 14.sp,\n                        fontWeight = FontWeight.SemiBold\n                    )\n                    \n                    Spacer(modifier = Modifier.weight(1f))\n                    \n                    Text(\n                        text = \"${matches.size}\",\n                        color = Color(0xFF94AD0C),\n                        fontSize = 14.sp,\n                        fontWeight = FontWeight.Bold\n                    )\n                }\n            }\n            \n            // Match Results\n            matches.take(3).forEach { match ->\n                FeatureMatchCard(match = match)\n            }\n        }\n    }\n}\n\n@Composable\nprivate fun FeatureMatchCard(\n    match: FeatureMatchResult,\n    modifier: Modifier = Modifier\n) {\n    val confidenceColor = getConfidenceColor(match.confidence)\n    val confidenceText = \"${(match.confidence * 100).toInt()}%\"\n    \n    Card(\n        modifier = modifier.fillMaxWidth(),\n        colors = CardDefaults.cardColors(\n            containerColor = Color.Black.copy(alpha = 0.6f)\n        ),\n        shape = RoundedCornerShape(8.dp)\n    ) {\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(12.dp),\n            verticalAlignment = Alignment.CenterVertically,\n            horizontalArrangement = Arrangement.spacedBy(12.dp)\n        ) {\n            // Confidence Indicator\n            Box(\n                modifier = Modifier\n                    .size(40.dp)\n                    .clip(RoundedCornerShape(8.dp))\n                    .background(confidenceColor.copy(alpha = 0.2f))\n                    .border(\n                        width = 2.dp,\n                        color = confidenceColor,\n                        shape = RoundedCornerShape(8.dp)\n                    ),\n                contentAlignment = Alignment.Center\n            ) {\n                Text(\n                    text = confidenceText,\n                    color = confidenceColor,\n                    fontSize = 10.sp,\n                    fontWeight = FontWeight.Bold,\n                    textAlign = TextAlign.Center\n                )\n            }\n            \n            // Landmark Info\n            Column(\n                modifier = Modifier.weight(1f)\n            ) {\n                Text(\n                    text = match.landmarkId,\n                    color = Color.White,\n                    fontSize = 14.sp,\n                    fontWeight = FontWeight.SemiBold\n                )\n                \n                Text(\n                    text = \"Landmark Match\",\n                    color = Color.White.copy(alpha = 0.7f),\n                    fontSize = 12.sp,\n                    maxLines = 1\n                )\n                \n                // Match Details\n                Row(\n                    horizontalArrangement = Arrangement.spacedBy(8.dp)\n                ) {\n                    Text(\n                        text = \"${match.matchCount} Features\",\n                        color = Color.White.copy(alpha = 0.6f),\n                        fontSize = 10.sp\n                    )\n                    \n                    match.distance?.let { distance ->\n                        Text(\n                            text = \"~${distance.toInt()}m\",\n                            color = Color.White.copy(alpha = 0.6f),\n                            fontSize = 10.sp\n                        )\n                    }\n                }\n            }\n            \n            // Status Icon\n            Icon(\n                painter = painterResource(\n                    id = when {\n                        match.confidence >= 0.8f -> R.drawable.star_filled\n                        match.confidence >= 0.6f -> R.drawable.star_outline\n                        else -> R.drawable.alert_circle\n                    }\n                ),\n                contentDescription = \"Match Quality\",\n                tint = confidenceColor,\n                modifier = Modifier.size(16.dp)\n            )\n        }\n    }\n}\n\n/**\n * Gibt die Farbe basierend auf der Confidence zurück\n */\nprivate fun getConfidenceColor(confidence: Float): Color {\n    return when {\n        confidence >= 0.8f -> Color(0xFF4CAF50) // Grün - Sehr gut\n        confidence >= 0.6f -> Color(0xFFFF9800) // Orange - Gut\n        confidence >= 0.4f -> Color(0xFFFFEB3B) // Gelb - Okay\n        else -> Color(0xFFF44336) // Rot - Schlecht\n    }\n}\n\n/**\n * Debug-Overlay für Feature-Matching (nur in Debug-Builds)\n */\n@Composable\nfun FeatureMatchDebugOverlay(\n    matches: List<FeatureMatchResult>,\n    isVisible: Boolean,\n    modifier: Modifier = Modifier\n) {\n    AnimatedVisibility(\n        visible = isVisible && matches.isNotEmpty(),\n        enter = fadeIn(),\n        exit = fadeOut(),\n        modifier = modifier\n    ) {\n        Card(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(16.dp),\n            colors = CardDefaults.cardColors(\n                containerColor = Color.Black.copy(alpha = 0.8f)\n            ),\n            shape = RoundedCornerShape(8.dp)\n        ) {\n            Column(\n                modifier = Modifier.padding(12.dp)\n            ) {\n                Text(\n                    text = \"Feature Matching Debug\",\n                    color = Color.White,\n                    fontSize = 12.sp,\n                    fontWeight = FontWeight.Bold\n                )\n                \n                Spacer(modifier = Modifier.height(8.dp))\n                \n                matches.forEach { match ->\n                    Row(\n                        modifier = Modifier.fillMaxWidth(),\n                        horizontalArrangement = Arrangement.SpaceBetween\n                    ) {\n                        Text(\n                            text = match.landmarkId,\n                            color = Color.White.copy(alpha = 0.7f),\n                            fontSize = 10.sp,\n                            modifier = Modifier.weight(1f)\n                        )\n                        \n                        Text(\n                            text = \"${match.matchCount}\",\n                            color = Color.White.copy(alpha = 0.7f),\n                            fontSize = 10.sp\n                        )\n                        \n                        Text(\n                            text = String.format(\"%.2f\", match.confidence),\n                            color = getConfidenceColor(match.confidence),\n                            fontSize = 10.sp,\n                            fontWeight = FontWeight.Bold\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * Erweiterte Status-Anzeige für Feature Mapping mit sofortiger Aktivierung\n */\n@Composable\nfun FeatureMappingStatusIndicator(\n    isEnabled: Boolean,\n    isProcessing: Boolean,\n    modifier: Modifier = Modifier\n) {\n    var showStartupAnimation by remember { mutableStateOf(true) }\n    var stableProcessingState by remember { mutableStateOf(false) }\n    \n    // Startup-Animation für 3 Sekunden anzeigen\n    LaunchedEffect(Unit) {\n        delay(3000)\n        showStartupAnimation = false\n    }\n    \n    // Stabilisiere den Processing-Status um Flackern zu vermeiden\n    LaunchedEffect(isProcessing) {\n        if (isProcessing) {\n            stableProcessingState = true\n            delay(1000) // Mindestens 1 Sekunde anzeigen\n        } else {\n            delay(500) // Kurze Verzögerung bevor auf \"Ready\" gewechselt wird\n            stableProcessingState = false\n        }\n    }\n    \n    AnimatedVisibility(\n        visible = isEnabled, // Nur anzeigen wenn Feature Mapping aktiviert ist\n        enter = fadeIn() + slideInVertically { -it },\n        exit = fadeOut(),\n        modifier = modifier\n    ) {\n        Card(\n            colors = CardDefaults.cardColors(\n                containerColor = when {\n                    showStartupAnimation -> Color(0xFF2196F3).copy(alpha = 0.8f) // Blau für Startup\n                    stableProcessingState -> Color.Black.copy(alpha = 0.7f) // Schwarz für Processing\n                    isEnabled -> Color(0xFF4CAF50).copy(alpha = 0.7f) // Grün für Ready\n                    else -> Color(0xFFFF5722).copy(alpha = 0.7f) // Rot für Disabled\n                }\n            ),\n            shape = RoundedCornerShape(20.dp),\n            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)\n        ) {\n            Row(\n                modifier = Modifier.padding(horizontal = 12.dp, vertical = 6.dp),\n                verticalAlignment = Alignment.CenterVertically,\n                horizontalArrangement = Arrangement.spacedBy(6.dp)\n            ) {\n                // Status Icon mit Animation\n                when {\n                    showStartupAnimation -> {\n                        val rotation by rememberInfiniteTransition(label = \"startup_rotation\").animateFloat(\n                            initialValue = 0f,\n                            targetValue = 360f,\n                            animationSpec = infiniteRepeatable(\n                                animation = tween(1000, easing = LinearEasing),\n                                repeatMode = RepeatMode.Restart\n                            ),\n                            label = \"startup_animation\"\n                        )\n                        Icon(\n                            painter = painterResource(id = R.drawable.location_searching),\n                            contentDescription = \"Feature Mapping Starting\",\n                            tint = Color.White,\n                            modifier = Modifier\n                                .size(12.dp)\n                                .graphicsLayer { rotationZ = rotation }\n                        )\n                    }\n                    stableProcessingState -> {\n                        val rotation by rememberInfiniteTransition(label = \"processing_rotation\").animateFloat(\n                            initialValue = 0f,\n                            targetValue = 360f,\n                            animationSpec = infiniteRepeatable(\n                                animation = tween(1500, easing = LinearEasing),\n                                repeatMode = RepeatMode.Restart\n                            ),\n                            label = \"processing_animation\"\n                        )\n                        Icon(\n                            painter = painterResource(id = R.drawable.location_searching),\n                            contentDescription = \"Feature Mapping Processing\",\n                            tint = Color(0xFFFF9800),\n                            modifier = Modifier\n                                .size(12.dp)\n                                .graphicsLayer { rotationZ = rotation }\n                        )\n                    }\n                    isEnabled -> {\n                        Icon(\n                            painter = painterResource(id = R.drawable.star_filled),\n                            contentDescription = \"Feature Mapping Ready\",\n                            tint = Color.White,\n                            modifier = Modifier.size(12.dp)\n                        )\n                    }\n                    else -> {\n                        Icon(\n                            painter = painterResource(id = R.drawable.star_filled),\n                            contentDescription = \"Feature Mapping Disabled\",\n                            tint = Color.White,\n                            modifier = Modifier.size(12.dp)\n                        )\n                    }\n                }\n                \n                Text(\n                    text = when {\n                        showStartupAnimation -> \"Aktiviere...\"\n                        stableProcessingState -> \"Scanning...\"\n                        isEnabled -> \"Aktiv\"\n                        else -> \"Inaktiv\"\n                    },\n                    color = Color.White,\n                    fontSize = 10.sp,\n                    fontWeight = FontWeight.SemiBold\n                )\n            }\n        }\n    }\n}","baseTimestamp":1754924637728},"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchResult.kt":{"filePath":"/Users/florian/Documents/GitHub/ar-walking/app/src/main/java/com/example/arwalking/FeatureMatchResult.kt","baseContent":"package com.example.arwalking\n\nimport android.graphics.PointF\nimport android.graphics.RectF\nimport com.example.arwalking.ar.SnapchatStyleARRenderer\n\n/**\n * Ergebnis eines Feature-Matching-Vorgangs mit AR-Pose-Informationen\n */\ndata class FeatureMatchResult(\n    val landmarkId: String,\n    val confidence: Float,\n    val matchCount: Int,\n    val position: PointF,\n    val boundingBox: RectF? = null,\n    val distance: Float? = null,\n    val arPose: SnapchatStyleARRenderer.ARPose? = null,  // 3D-Pose für AR-Tracking\n    val arObject: SnapchatStyleARRenderer.AR3DObject? = null  // 3D-Objekt-Position\n)","baseTimestamp":1754925791292,"deltas":[{"timestamp":1754926004775,"changes":[{"type":"MODIFY","lineNumber":4,"content":"import com.example.arwalking.ar.SimpleARRenderer","oldContent":"import com.example.arwalking.ar.SnapchatStyleARRenderer"},{"type":"DELETE","lineNumber":16,"oldContent":"    val arPose: SnapchatStyleARRenderer.ARPose? = null,  // 3D-Pose für AR-Tracking"},{"type":"MODIFY","lineNumber":16,"content":"    val arPose: SimpleARRenderer.SimpleARPose? = null,  // 3D-Pose für AR-Tracking","oldContent":"    val arObject: SnapchatStyleARRenderer.AR3DObject? = null  // 3D-Objekt-Position"},{"type":"INSERT","lineNumber":17,"content":"    val arObject: SimpleARRenderer.SimpleAR3DObject? = null  // 3D-Objekt-Position"}]}]}}}